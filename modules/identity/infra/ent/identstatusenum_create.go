// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky-as-code/nikki-erp/common/model"
	"github.com/sky-as-code/nikki-erp/modules/identity/infra/ent/identstatusenum"
	"github.com/sky-as-code/nikki-erp/modules/identity/infra/ent/organization"
	"github.com/sky-as-code/nikki-erp/modules/identity/infra/ent/user"
)

// IdentStatusEnumCreate is the builder for creating a IdentStatusEnum entity.
type IdentStatusEnumCreate struct {
	config
	mutation *IdentStatusEnumMutation
	hooks    []Hook
}

// SetEtag sets the "etag" field.
func (isec *IdentStatusEnumCreate) SetEtag(s string) *IdentStatusEnumCreate {
	isec.mutation.SetEtag(s)
	return isec
}

// SetLabel sets the "label" field.
func (isec *IdentStatusEnumCreate) SetLabel(mj model.LangJson) *IdentStatusEnumCreate {
	isec.mutation.SetLabel(mj)
	return isec
}

// SetValue sets the "value" field.
func (isec *IdentStatusEnumCreate) SetValue(s string) *IdentStatusEnumCreate {
	isec.mutation.SetValue(s)
	return isec
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (isec *IdentStatusEnumCreate) SetNillableValue(s *string) *IdentStatusEnumCreate {
	if s != nil {
		isec.SetValue(*s)
	}
	return isec
}

// SetType sets the "type" field.
func (isec *IdentStatusEnumCreate) SetType(s string) *IdentStatusEnumCreate {
	isec.mutation.SetType(s)
	return isec
}

// SetID sets the "id" field.
func (isec *IdentStatusEnumCreate) SetID(s string) *IdentStatusEnumCreate {
	isec.mutation.SetID(s)
	return isec
}

// AddOrgIDs adds the "orgs" edge to the Organization entity by IDs.
func (isec *IdentStatusEnumCreate) AddOrgIDs(ids ...string) *IdentStatusEnumCreate {
	isec.mutation.AddOrgIDs(ids...)
	return isec
}

// AddOrgs adds the "orgs" edges to the Organization entity.
func (isec *IdentStatusEnumCreate) AddOrgs(o ...*Organization) *IdentStatusEnumCreate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return isec.AddOrgIDs(ids...)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (isec *IdentStatusEnumCreate) AddUserIDs(ids ...string) *IdentStatusEnumCreate {
	isec.mutation.AddUserIDs(ids...)
	return isec
}

// AddUsers adds the "users" edges to the User entity.
func (isec *IdentStatusEnumCreate) AddUsers(u ...*User) *IdentStatusEnumCreate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return isec.AddUserIDs(ids...)
}

// Mutation returns the IdentStatusEnumMutation object of the builder.
func (isec *IdentStatusEnumCreate) Mutation() *IdentStatusEnumMutation {
	return isec.mutation
}

// Save creates the IdentStatusEnum in the database.
func (isec *IdentStatusEnumCreate) Save(ctx context.Context) (*IdentStatusEnum, error) {
	return withHooks(ctx, isec.sqlSave, isec.mutation, isec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (isec *IdentStatusEnumCreate) SaveX(ctx context.Context) *IdentStatusEnum {
	v, err := isec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (isec *IdentStatusEnumCreate) Exec(ctx context.Context) error {
	_, err := isec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (isec *IdentStatusEnumCreate) ExecX(ctx context.Context) {
	if err := isec.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (isec *IdentStatusEnumCreate) check() error {
	if _, ok := isec.mutation.Etag(); !ok {
		return &ValidationError{Name: "etag", err: errors.New(`ent: missing required field "IdentStatusEnum.etag"`)}
	}
	if _, ok := isec.mutation.Label(); !ok {
		return &ValidationError{Name: "label", err: errors.New(`ent: missing required field "IdentStatusEnum.label"`)}
	}
	if _, ok := isec.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "IdentStatusEnum.type"`)}
	}
	return nil
}

func (isec *IdentStatusEnumCreate) sqlSave(ctx context.Context) (*IdentStatusEnum, error) {
	if err := isec.check(); err != nil {
		return nil, err
	}
	_node, _spec := isec.createSpec()
	if err := sqlgraph.CreateNode(ctx, isec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected IdentStatusEnum.ID type: %T", _spec.ID.Value)
		}
	}
	isec.mutation.id = &_node.ID
	isec.mutation.done = true
	return _node, nil
}

func (isec *IdentStatusEnumCreate) createSpec() (*IdentStatusEnum, *sqlgraph.CreateSpec) {
	var (
		_node = &IdentStatusEnum{config: isec.config}
		_spec = sqlgraph.NewCreateSpec(identstatusenum.Table, sqlgraph.NewFieldSpec(identstatusenum.FieldID, field.TypeString))
	)
	if id, ok := isec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := isec.mutation.Etag(); ok {
		_spec.SetField(identstatusenum.FieldEtag, field.TypeString, value)
		_node.Etag = value
	}
	if value, ok := isec.mutation.Label(); ok {
		_spec.SetField(identstatusenum.FieldLabel, field.TypeJSON, value)
		_node.Label = value
	}
	if value, ok := isec.mutation.Value(); ok {
		_spec.SetField(identstatusenum.FieldValue, field.TypeString, value)
		_node.Value = &value
	}
	if value, ok := isec.mutation.GetType(); ok {
		_spec.SetField(identstatusenum.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if nodes := isec.mutation.OrgsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   identstatusenum.OrgsTable,
			Columns: []string{identstatusenum.OrgsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := isec.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   identstatusenum.UsersTable,
			Columns: []string{identstatusenum.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// IdentStatusEnumCreateBulk is the builder for creating many IdentStatusEnum entities in bulk.
type IdentStatusEnumCreateBulk struct {
	config
	err      error
	builders []*IdentStatusEnumCreate
}

// Save creates the IdentStatusEnum entities in the database.
func (isecb *IdentStatusEnumCreateBulk) Save(ctx context.Context) ([]*IdentStatusEnum, error) {
	if isecb.err != nil {
		return nil, isecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(isecb.builders))
	nodes := make([]*IdentStatusEnum, len(isecb.builders))
	mutators := make([]Mutator, len(isecb.builders))
	for i := range isecb.builders {
		func(i int, root context.Context) {
			builder := isecb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IdentStatusEnumMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, isecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, isecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, isecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (isecb *IdentStatusEnumCreateBulk) SaveX(ctx context.Context) []*IdentStatusEnum {
	v, err := isecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (isecb *IdentStatusEnumCreateBulk) Exec(ctx context.Context) error {
	_, err := isecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (isecb *IdentStatusEnumCreateBulk) ExecX(ctx context.Context) {
	if err := isecb.Exec(ctx); err != nil {
		panic(err)
	}
}
