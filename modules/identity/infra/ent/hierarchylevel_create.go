// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky-as-code/nikki-erp/modules/identity/infra/ent/hierarchylevel"
)

// HierarchyLevelCreate is the builder for creating a HierarchyLevel entity.
type HierarchyLevelCreate struct {
	config
	mutation *HierarchyLevelMutation
	hooks    []Hook
}

// SetOrgID sets the "org_id" field.
func (hlc *HierarchyLevelCreate) SetOrgID(s string) *HierarchyLevelCreate {
	hlc.mutation.SetOrgID(s)
	return hlc
}

// SetEtag sets the "etag" field.
func (hlc *HierarchyLevelCreate) SetEtag(s string) *HierarchyLevelCreate {
	hlc.mutation.SetEtag(s)
	return hlc
}

// SetName sets the "name" field.
func (hlc *HierarchyLevelCreate) SetName(s string) *HierarchyLevelCreate {
	hlc.mutation.SetName(s)
	return hlc
}

// SetParentID sets the "parent_id" field.
func (hlc *HierarchyLevelCreate) SetParentID(s string) *HierarchyLevelCreate {
	hlc.mutation.SetParentID(s)
	return hlc
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (hlc *HierarchyLevelCreate) SetNillableParentID(s *string) *HierarchyLevelCreate {
	if s != nil {
		hlc.SetParentID(*s)
	}
	return hlc
}

// SetID sets the "id" field.
func (hlc *HierarchyLevelCreate) SetID(s string) *HierarchyLevelCreate {
	hlc.mutation.SetID(s)
	return hlc
}

// SetParent sets the "parent" edge to the HierarchyLevel entity.
func (hlc *HierarchyLevelCreate) SetParent(h *HierarchyLevel) *HierarchyLevelCreate {
	return hlc.SetParentID(h.ID)
}

// AddChildIDs adds the "child" edge to the HierarchyLevel entity by IDs.
func (hlc *HierarchyLevelCreate) AddChildIDs(ids ...string) *HierarchyLevelCreate {
	hlc.mutation.AddChildIDs(ids...)
	return hlc
}

// AddChild adds the "child" edges to the HierarchyLevel entity.
func (hlc *HierarchyLevelCreate) AddChild(h ...*HierarchyLevel) *HierarchyLevelCreate {
	ids := make([]string, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hlc.AddChildIDs(ids...)
}

// Mutation returns the HierarchyLevelMutation object of the builder.
func (hlc *HierarchyLevelCreate) Mutation() *HierarchyLevelMutation {
	return hlc.mutation
}

// Save creates the HierarchyLevel in the database.
func (hlc *HierarchyLevelCreate) Save(ctx context.Context) (*HierarchyLevel, error) {
	return withHooks(ctx, hlc.sqlSave, hlc.mutation, hlc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (hlc *HierarchyLevelCreate) SaveX(ctx context.Context) *HierarchyLevel {
	v, err := hlc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hlc *HierarchyLevelCreate) Exec(ctx context.Context) error {
	_, err := hlc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hlc *HierarchyLevelCreate) ExecX(ctx context.Context) {
	if err := hlc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hlc *HierarchyLevelCreate) check() error {
	if _, ok := hlc.mutation.OrgID(); !ok {
		return &ValidationError{Name: "org_id", err: errors.New(`ent: missing required field "HierarchyLevel.org_id"`)}
	}
	if _, ok := hlc.mutation.Etag(); !ok {
		return &ValidationError{Name: "etag", err: errors.New(`ent: missing required field "HierarchyLevel.etag"`)}
	}
	if _, ok := hlc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "HierarchyLevel.name"`)}
	}
	return nil
}

func (hlc *HierarchyLevelCreate) sqlSave(ctx context.Context) (*HierarchyLevel, error) {
	if err := hlc.check(); err != nil {
		return nil, err
	}
	_node, _spec := hlc.createSpec()
	if err := sqlgraph.CreateNode(ctx, hlc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected HierarchyLevel.ID type: %T", _spec.ID.Value)
		}
	}
	hlc.mutation.id = &_node.ID
	hlc.mutation.done = true
	return _node, nil
}

func (hlc *HierarchyLevelCreate) createSpec() (*HierarchyLevel, *sqlgraph.CreateSpec) {
	var (
		_node = &HierarchyLevel{config: hlc.config}
		_spec = sqlgraph.NewCreateSpec(hierarchylevel.Table, sqlgraph.NewFieldSpec(hierarchylevel.FieldID, field.TypeString))
	)
	if id, ok := hlc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := hlc.mutation.OrgID(); ok {
		_spec.SetField(hierarchylevel.FieldOrgID, field.TypeString, value)
		_node.OrgID = value
	}
	if value, ok := hlc.mutation.Etag(); ok {
		_spec.SetField(hierarchylevel.FieldEtag, field.TypeString, value)
		_node.Etag = value
	}
	if value, ok := hlc.mutation.Name(); ok {
		_spec.SetField(hierarchylevel.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if nodes := hlc.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hierarchylevel.ParentTable,
			Columns: []string{hierarchylevel.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hierarchylevel.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ParentID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hlc.mutation.ChildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hierarchylevel.ChildTable,
			Columns: []string{hierarchylevel.ChildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hierarchylevel.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// HierarchyLevelCreateBulk is the builder for creating many HierarchyLevel entities in bulk.
type HierarchyLevelCreateBulk struct {
	config
	err      error
	builders []*HierarchyLevelCreate
}

// Save creates the HierarchyLevel entities in the database.
func (hlcb *HierarchyLevelCreateBulk) Save(ctx context.Context) ([]*HierarchyLevel, error) {
	if hlcb.err != nil {
		return nil, hlcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(hlcb.builders))
	nodes := make([]*HierarchyLevel, len(hlcb.builders))
	mutators := make([]Mutator, len(hlcb.builders))
	for i := range hlcb.builders {
		func(i int, root context.Context) {
			builder := hlcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HierarchyLevelMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hlcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hlcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hlcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hlcb *HierarchyLevelCreateBulk) SaveX(ctx context.Context) []*HierarchyLevel {
	v, err := hlcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hlcb *HierarchyLevelCreateBulk) Exec(ctx context.Context) error {
	_, err := hlcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hlcb *HierarchyLevelCreateBulk) ExecX(ctx context.Context) {
	if err := hlcb.Exec(ctx); err != nil {
		panic(err)
	}
}
