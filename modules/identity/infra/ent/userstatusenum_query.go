// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky-as-code/nikki-erp/modules/identity/infra/ent/predicate"
	"github.com/sky-as-code/nikki-erp/modules/identity/infra/ent/user"
	"github.com/sky-as-code/nikki-erp/modules/identity/infra/ent/userstatusenum"
)

// UserStatusEnumQuery is the builder for querying UserStatusEnum entities.
type UserStatusEnumQuery struct {
	config
	ctx        *QueryContext
	order      []userstatusenum.OrderOption
	inters     []Interceptor
	predicates []predicate.UserStatusEnum
	withUsers  *UserQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UserStatusEnumQuery builder.
func (useq *UserStatusEnumQuery) Where(ps ...predicate.UserStatusEnum) *UserStatusEnumQuery {
	useq.predicates = append(useq.predicates, ps...)
	return useq
}

// Limit the number of records to be returned by this query.
func (useq *UserStatusEnumQuery) Limit(limit int) *UserStatusEnumQuery {
	useq.ctx.Limit = &limit
	return useq
}

// Offset to start from.
func (useq *UserStatusEnumQuery) Offset(offset int) *UserStatusEnumQuery {
	useq.ctx.Offset = &offset
	return useq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (useq *UserStatusEnumQuery) Unique(unique bool) *UserStatusEnumQuery {
	useq.ctx.Unique = &unique
	return useq
}

// Order specifies how the records should be ordered.
func (useq *UserStatusEnumQuery) Order(o ...userstatusenum.OrderOption) *UserStatusEnumQuery {
	useq.order = append(useq.order, o...)
	return useq
}

// QueryUsers chains the current query on the "users" edge.
func (useq *UserStatusEnumQuery) QueryUsers() *UserQuery {
	query := (&UserClient{config: useq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := useq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := useq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(userstatusenum.Table, userstatusenum.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, userstatusenum.UsersTable, userstatusenum.UsersColumn),
		)
		fromU = sqlgraph.SetNeighbors(useq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first UserStatusEnum entity from the query.
// Returns a *NotFoundError when no UserStatusEnum was found.
func (useq *UserStatusEnumQuery) First(ctx context.Context) (*UserStatusEnum, error) {
	nodes, err := useq.Limit(1).All(setContextOp(ctx, useq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{userstatusenum.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (useq *UserStatusEnumQuery) FirstX(ctx context.Context) *UserStatusEnum {
	node, err := useq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first UserStatusEnum ID from the query.
// Returns a *NotFoundError when no UserStatusEnum ID was found.
func (useq *UserStatusEnumQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = useq.Limit(1).IDs(setContextOp(ctx, useq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{userstatusenum.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (useq *UserStatusEnumQuery) FirstIDX(ctx context.Context) string {
	id, err := useq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single UserStatusEnum entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one UserStatusEnum entity is found.
// Returns a *NotFoundError when no UserStatusEnum entities are found.
func (useq *UserStatusEnumQuery) Only(ctx context.Context) (*UserStatusEnum, error) {
	nodes, err := useq.Limit(2).All(setContextOp(ctx, useq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{userstatusenum.Label}
	default:
		return nil, &NotSingularError{userstatusenum.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (useq *UserStatusEnumQuery) OnlyX(ctx context.Context) *UserStatusEnum {
	node, err := useq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only UserStatusEnum ID in the query.
// Returns a *NotSingularError when more than one UserStatusEnum ID is found.
// Returns a *NotFoundError when no entities are found.
func (useq *UserStatusEnumQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = useq.Limit(2).IDs(setContextOp(ctx, useq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{userstatusenum.Label}
	default:
		err = &NotSingularError{userstatusenum.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (useq *UserStatusEnumQuery) OnlyIDX(ctx context.Context) string {
	id, err := useq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of UserStatusEnums.
func (useq *UserStatusEnumQuery) All(ctx context.Context) ([]*UserStatusEnum, error) {
	ctx = setContextOp(ctx, useq.ctx, ent.OpQueryAll)
	if err := useq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*UserStatusEnum, *UserStatusEnumQuery]()
	return withInterceptors[[]*UserStatusEnum](ctx, useq, qr, useq.inters)
}

// AllX is like All, but panics if an error occurs.
func (useq *UserStatusEnumQuery) AllX(ctx context.Context) []*UserStatusEnum {
	nodes, err := useq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of UserStatusEnum IDs.
func (useq *UserStatusEnumQuery) IDs(ctx context.Context) (ids []string, err error) {
	if useq.ctx.Unique == nil && useq.path != nil {
		useq.Unique(true)
	}
	ctx = setContextOp(ctx, useq.ctx, ent.OpQueryIDs)
	if err = useq.Select(userstatusenum.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (useq *UserStatusEnumQuery) IDsX(ctx context.Context) []string {
	ids, err := useq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (useq *UserStatusEnumQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, useq.ctx, ent.OpQueryCount)
	if err := useq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, useq, querierCount[*UserStatusEnumQuery](), useq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (useq *UserStatusEnumQuery) CountX(ctx context.Context) int {
	count, err := useq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (useq *UserStatusEnumQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, useq.ctx, ent.OpQueryExist)
	switch _, err := useq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (useq *UserStatusEnumQuery) ExistX(ctx context.Context) bool {
	exist, err := useq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UserStatusEnumQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (useq *UserStatusEnumQuery) Clone() *UserStatusEnumQuery {
	if useq == nil {
		return nil
	}
	return &UserStatusEnumQuery{
		config:     useq.config,
		ctx:        useq.ctx.Clone(),
		order:      append([]userstatusenum.OrderOption{}, useq.order...),
		inters:     append([]Interceptor{}, useq.inters...),
		predicates: append([]predicate.UserStatusEnum{}, useq.predicates...),
		withUsers:  useq.withUsers.Clone(),
		// clone intermediate query.
		sql:  useq.sql.Clone(),
		path: useq.path,
	}
}

// WithUsers tells the query-builder to eager-load the nodes that are connected to
// the "users" edge. The optional arguments are used to configure the query builder of the edge.
func (useq *UserStatusEnumQuery) WithUsers(opts ...func(*UserQuery)) *UserStatusEnumQuery {
	query := (&UserClient{config: useq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	useq.withUsers = query
	return useq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Etag string `json:"etag,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.UserStatusEnum.Query().
//		GroupBy(userstatusenum.FieldEtag).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (useq *UserStatusEnumQuery) GroupBy(field string, fields ...string) *UserStatusEnumGroupBy {
	useq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &UserStatusEnumGroupBy{build: useq}
	grbuild.flds = &useq.ctx.Fields
	grbuild.label = userstatusenum.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Etag string `json:"etag,omitempty"`
//	}
//
//	client.UserStatusEnum.Query().
//		Select(userstatusenum.FieldEtag).
//		Scan(ctx, &v)
func (useq *UserStatusEnumQuery) Select(fields ...string) *UserStatusEnumSelect {
	useq.ctx.Fields = append(useq.ctx.Fields, fields...)
	sbuild := &UserStatusEnumSelect{UserStatusEnumQuery: useq}
	sbuild.label = userstatusenum.Label
	sbuild.flds, sbuild.scan = &useq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a UserStatusEnumSelect configured with the given aggregations.
func (useq *UserStatusEnumQuery) Aggregate(fns ...AggregateFunc) *UserStatusEnumSelect {
	return useq.Select().Aggregate(fns...)
}

func (useq *UserStatusEnumQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range useq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, useq); err != nil {
				return err
			}
		}
	}
	for _, f := range useq.ctx.Fields {
		if !userstatusenum.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if useq.path != nil {
		prev, err := useq.path(ctx)
		if err != nil {
			return err
		}
		useq.sql = prev
	}
	return nil
}

func (useq *UserStatusEnumQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*UserStatusEnum, error) {
	var (
		nodes       = []*UserStatusEnum{}
		_spec       = useq.querySpec()
		loadedTypes = [1]bool{
			useq.withUsers != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*UserStatusEnum).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &UserStatusEnum{config: useq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, useq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := useq.withUsers; query != nil {
		if err := useq.loadUsers(ctx, query, nodes,
			func(n *UserStatusEnum) { n.Edges.Users = []*User{} },
			func(n *UserStatusEnum, e *User) { n.Edges.Users = append(n.Edges.Users, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (useq *UserStatusEnumQuery) loadUsers(ctx context.Context, query *UserQuery, nodes []*UserStatusEnum, init func(*UserStatusEnum), assign func(*UserStatusEnum, *User)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*UserStatusEnum)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(user.FieldStatusID)
	}
	query.Where(predicate.User(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(userstatusenum.UsersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.StatusID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "status_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (useq *UserStatusEnumQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := useq.querySpec()
	_spec.Node.Columns = useq.ctx.Fields
	if len(useq.ctx.Fields) > 0 {
		_spec.Unique = useq.ctx.Unique != nil && *useq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, useq.driver, _spec)
}

func (useq *UserStatusEnumQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(userstatusenum.Table, userstatusenum.Columns, sqlgraph.NewFieldSpec(userstatusenum.FieldID, field.TypeString))
	_spec.From = useq.sql
	if unique := useq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if useq.path != nil {
		_spec.Unique = true
	}
	if fields := useq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userstatusenum.FieldID)
		for i := range fields {
			if fields[i] != userstatusenum.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := useq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := useq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := useq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := useq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (useq *UserStatusEnumQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(useq.driver.Dialect())
	t1 := builder.Table(userstatusenum.Table)
	columns := useq.ctx.Fields
	if len(columns) == 0 {
		columns = userstatusenum.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if useq.sql != nil {
		selector = useq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if useq.ctx.Unique != nil && *useq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range useq.predicates {
		p(selector)
	}
	for _, p := range useq.order {
		p(selector)
	}
	if offset := useq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := useq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// UserStatusEnumGroupBy is the group-by builder for UserStatusEnum entities.
type UserStatusEnumGroupBy struct {
	selector
	build *UserStatusEnumQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (usegb *UserStatusEnumGroupBy) Aggregate(fns ...AggregateFunc) *UserStatusEnumGroupBy {
	usegb.fns = append(usegb.fns, fns...)
	return usegb
}

// Scan applies the selector query and scans the result into the given value.
func (usegb *UserStatusEnumGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, usegb.build.ctx, ent.OpQueryGroupBy)
	if err := usegb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserStatusEnumQuery, *UserStatusEnumGroupBy](ctx, usegb.build, usegb, usegb.build.inters, v)
}

func (usegb *UserStatusEnumGroupBy) sqlScan(ctx context.Context, root *UserStatusEnumQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(usegb.fns))
	for _, fn := range usegb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*usegb.flds)+len(usegb.fns))
		for _, f := range *usegb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*usegb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := usegb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// UserStatusEnumSelect is the builder for selecting fields of UserStatusEnum entities.
type UserStatusEnumSelect struct {
	*UserStatusEnumQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (uses *UserStatusEnumSelect) Aggregate(fns ...AggregateFunc) *UserStatusEnumSelect {
	uses.fns = append(uses.fns, fns...)
	return uses
}

// Scan applies the selector query and scans the result into the given value.
func (uses *UserStatusEnumSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, uses.ctx, ent.OpQuerySelect)
	if err := uses.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserStatusEnumQuery, *UserStatusEnumSelect](ctx, uses.UserStatusEnumQuery, uses, uses.inters, v)
}

func (uses *UserStatusEnumSelect) sqlScan(ctx context.Context, root *UserStatusEnumQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(uses.fns))
	for _, fn := range uses.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*uses.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := uses.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
