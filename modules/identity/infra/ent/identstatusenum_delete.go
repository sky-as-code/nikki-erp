// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky-as-code/nikki-erp/modules/identity/infra/ent/identstatusenum"
	"github.com/sky-as-code/nikki-erp/modules/identity/infra/ent/predicate"
)

// IdentStatusEnumDelete is the builder for deleting a IdentStatusEnum entity.
type IdentStatusEnumDelete struct {
	config
	hooks    []Hook
	mutation *IdentStatusEnumMutation
}

// Where appends a list predicates to the IdentStatusEnumDelete builder.
func (ised *IdentStatusEnumDelete) Where(ps ...predicate.IdentStatusEnum) *IdentStatusEnumDelete {
	ised.mutation.Where(ps...)
	return ised
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ised *IdentStatusEnumDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ised.sqlExec, ised.mutation, ised.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ised *IdentStatusEnumDelete) ExecX(ctx context.Context) int {
	n, err := ised.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ised *IdentStatusEnumDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(identstatusenum.Table, sqlgraph.NewFieldSpec(identstatusenum.FieldID, field.TypeString))
	if ps := ised.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ised.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ised.mutation.done = true
	return affected, err
}

// IdentStatusEnumDeleteOne is the builder for deleting a single IdentStatusEnum entity.
type IdentStatusEnumDeleteOne struct {
	ised *IdentStatusEnumDelete
}

// Where appends a list predicates to the IdentStatusEnumDelete builder.
func (isedo *IdentStatusEnumDeleteOne) Where(ps ...predicate.IdentStatusEnum) *IdentStatusEnumDeleteOne {
	isedo.ised.mutation.Where(ps...)
	return isedo
}

// Exec executes the deletion query.
func (isedo *IdentStatusEnumDeleteOne) Exec(ctx context.Context) error {
	n, err := isedo.ised.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{identstatusenum.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (isedo *IdentStatusEnumDeleteOne) ExecX(ctx context.Context) {
	if err := isedo.Exec(ctx); err != nil {
		panic(err)
	}
}
