// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky-as-code/nikki-erp/modules/identity/infra/ent/user"
	"github.com/sky-as-code/nikki-erp/modules/identity/infra/ent/userstatusenum"
)

// UserStatusEnumCreate is the builder for creating a UserStatusEnum entity.
type UserStatusEnumCreate struct {
	config
	mutation *UserStatusEnumMutation
	hooks    []Hook
}

// SetEtag sets the "etag" field.
func (usec *UserStatusEnumCreate) SetEtag(s string) *UserStatusEnumCreate {
	usec.mutation.SetEtag(s)
	return usec
}

// SetLabel sets the "label" field.
func (usec *UserStatusEnumCreate) SetLabel(m map[string]string) *UserStatusEnumCreate {
	usec.mutation.SetLabel(m)
	return usec
}

// SetValue sets the "value" field.
func (usec *UserStatusEnumCreate) SetValue(s string) *UserStatusEnumCreate {
	usec.mutation.SetValue(s)
	return usec
}

// SetType sets the "type" field.
func (usec *UserStatusEnumCreate) SetType(s string) *UserStatusEnumCreate {
	usec.mutation.SetType(s)
	return usec
}

// SetID sets the "id" field.
func (usec *UserStatusEnumCreate) SetID(s string) *UserStatusEnumCreate {
	usec.mutation.SetID(s)
	return usec
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (usec *UserStatusEnumCreate) AddUserIDs(ids ...string) *UserStatusEnumCreate {
	usec.mutation.AddUserIDs(ids...)
	return usec
}

// AddUsers adds the "users" edges to the User entity.
func (usec *UserStatusEnumCreate) AddUsers(u ...*User) *UserStatusEnumCreate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return usec.AddUserIDs(ids...)
}

// Mutation returns the UserStatusEnumMutation object of the builder.
func (usec *UserStatusEnumCreate) Mutation() *UserStatusEnumMutation {
	return usec.mutation
}

// Save creates the UserStatusEnum in the database.
func (usec *UserStatusEnumCreate) Save(ctx context.Context) (*UserStatusEnum, error) {
	return withHooks(ctx, usec.sqlSave, usec.mutation, usec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (usec *UserStatusEnumCreate) SaveX(ctx context.Context) *UserStatusEnum {
	v, err := usec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (usec *UserStatusEnumCreate) Exec(ctx context.Context) error {
	_, err := usec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usec *UserStatusEnumCreate) ExecX(ctx context.Context) {
	if err := usec.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (usec *UserStatusEnumCreate) check() error {
	if _, ok := usec.mutation.Etag(); !ok {
		return &ValidationError{Name: "etag", err: errors.New(`ent: missing required field "UserStatusEnum.etag"`)}
	}
	if _, ok := usec.mutation.Label(); !ok {
		return &ValidationError{Name: "label", err: errors.New(`ent: missing required field "UserStatusEnum.label"`)}
	}
	if _, ok := usec.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "UserStatusEnum.value"`)}
	}
	if _, ok := usec.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "UserStatusEnum.type"`)}
	}
	return nil
}

func (usec *UserStatusEnumCreate) sqlSave(ctx context.Context) (*UserStatusEnum, error) {
	if err := usec.check(); err != nil {
		return nil, err
	}
	_node, _spec := usec.createSpec()
	if err := sqlgraph.CreateNode(ctx, usec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected UserStatusEnum.ID type: %T", _spec.ID.Value)
		}
	}
	usec.mutation.id = &_node.ID
	usec.mutation.done = true
	return _node, nil
}

func (usec *UserStatusEnumCreate) createSpec() (*UserStatusEnum, *sqlgraph.CreateSpec) {
	var (
		_node = &UserStatusEnum{config: usec.config}
		_spec = sqlgraph.NewCreateSpec(userstatusenum.Table, sqlgraph.NewFieldSpec(userstatusenum.FieldID, field.TypeString))
	)
	if id, ok := usec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := usec.mutation.Etag(); ok {
		_spec.SetField(userstatusenum.FieldEtag, field.TypeString, value)
		_node.Etag = value
	}
	if value, ok := usec.mutation.Label(); ok {
		_spec.SetField(userstatusenum.FieldLabel, field.TypeJSON, value)
		_node.Label = value
	}
	if value, ok := usec.mutation.Value(); ok {
		_spec.SetField(userstatusenum.FieldValue, field.TypeString, value)
		_node.Value = value
	}
	if value, ok := usec.mutation.GetType(); ok {
		_spec.SetField(userstatusenum.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if nodes := usec.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   userstatusenum.UsersTable,
			Columns: []string{userstatusenum.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserStatusEnumCreateBulk is the builder for creating many UserStatusEnum entities in bulk.
type UserStatusEnumCreateBulk struct {
	config
	err      error
	builders []*UserStatusEnumCreate
}

// Save creates the UserStatusEnum entities in the database.
func (usecb *UserStatusEnumCreateBulk) Save(ctx context.Context) ([]*UserStatusEnum, error) {
	if usecb.err != nil {
		return nil, usecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(usecb.builders))
	nodes := make([]*UserStatusEnum, len(usecb.builders))
	mutators := make([]Mutator, len(usecb.builders))
	for i := range usecb.builders {
		func(i int, root context.Context) {
			builder := usecb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserStatusEnumMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, usecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, usecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, usecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (usecb *UserStatusEnumCreateBulk) SaveX(ctx context.Context) []*UserStatusEnum {
	v, err := usecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (usecb *UserStatusEnumCreateBulk) Exec(ctx context.Context) error {
	_, err := usecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usecb *UserStatusEnumCreateBulk) ExecX(ctx context.Context) {
	if err := usecb.Exec(ctx); err != nil {
		panic(err)
	}
}
