// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky-as-code/nikki-erp/modules/identity/infra/ent/hierarchylevel"
	"github.com/sky-as-code/nikki-erp/modules/identity/infra/ent/organization"
	"github.com/sky-as-code/nikki-erp/modules/identity/infra/ent/predicate"
	"github.com/sky-as-code/nikki-erp/modules/identity/infra/ent/user"
)

// HierarchyLevelQuery is the builder for querying HierarchyLevel entities.
type HierarchyLevelQuery struct {
	config
	ctx          *QueryContext
	order        []hierarchylevel.OrderOption
	inters       []Interceptor
	predicates   []predicate.HierarchyLevel
	withChildren *HierarchyLevelQuery
	withUsers    *UserQuery
	withParent   *HierarchyLevelQuery
	withOrg      *OrganizationQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the HierarchyLevelQuery builder.
func (hlq *HierarchyLevelQuery) Where(ps ...predicate.HierarchyLevel) *HierarchyLevelQuery {
	hlq.predicates = append(hlq.predicates, ps...)
	return hlq
}

// Limit the number of records to be returned by this query.
func (hlq *HierarchyLevelQuery) Limit(limit int) *HierarchyLevelQuery {
	hlq.ctx.Limit = &limit
	return hlq
}

// Offset to start from.
func (hlq *HierarchyLevelQuery) Offset(offset int) *HierarchyLevelQuery {
	hlq.ctx.Offset = &offset
	return hlq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (hlq *HierarchyLevelQuery) Unique(unique bool) *HierarchyLevelQuery {
	hlq.ctx.Unique = &unique
	return hlq
}

// Order specifies how the records should be ordered.
func (hlq *HierarchyLevelQuery) Order(o ...hierarchylevel.OrderOption) *HierarchyLevelQuery {
	hlq.order = append(hlq.order, o...)
	return hlq
}

// QueryChildren chains the current query on the "children" edge.
func (hlq *HierarchyLevelQuery) QueryChildren() *HierarchyLevelQuery {
	query := (&HierarchyLevelClient{config: hlq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hlq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hlq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hierarchylevel.Table, hierarchylevel.FieldID, selector),
			sqlgraph.To(hierarchylevel.Table, hierarchylevel.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, hierarchylevel.ChildrenTable, hierarchylevel.ChildrenColumn),
		)
		fromU = sqlgraph.SetNeighbors(hlq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUsers chains the current query on the "users" edge.
func (hlq *HierarchyLevelQuery) QueryUsers() *UserQuery {
	query := (&UserClient{config: hlq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hlq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hlq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hierarchylevel.Table, hierarchylevel.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, hierarchylevel.UsersTable, hierarchylevel.UsersColumn),
		)
		fromU = sqlgraph.SetNeighbors(hlq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryParent chains the current query on the "parent" edge.
func (hlq *HierarchyLevelQuery) QueryParent() *HierarchyLevelQuery {
	query := (&HierarchyLevelClient{config: hlq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hlq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hlq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hierarchylevel.Table, hierarchylevel.FieldID, selector),
			sqlgraph.To(hierarchylevel.Table, hierarchylevel.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hierarchylevel.ParentTable, hierarchylevel.ParentColumn),
		)
		fromU = sqlgraph.SetNeighbors(hlq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrg chains the current query on the "org" edge.
func (hlq *HierarchyLevelQuery) QueryOrg() *OrganizationQuery {
	query := (&OrganizationClient{config: hlq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hlq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hlq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hierarchylevel.Table, hierarchylevel.FieldID, selector),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hierarchylevel.OrgTable, hierarchylevel.OrgColumn),
		)
		fromU = sqlgraph.SetNeighbors(hlq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first HierarchyLevel entity from the query.
// Returns a *NotFoundError when no HierarchyLevel was found.
func (hlq *HierarchyLevelQuery) First(ctx context.Context) (*HierarchyLevel, error) {
	nodes, err := hlq.Limit(1).All(setContextOp(ctx, hlq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{hierarchylevel.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (hlq *HierarchyLevelQuery) FirstX(ctx context.Context) *HierarchyLevel {
	node, err := hlq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first HierarchyLevel ID from the query.
// Returns a *NotFoundError when no HierarchyLevel ID was found.
func (hlq *HierarchyLevelQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = hlq.Limit(1).IDs(setContextOp(ctx, hlq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{hierarchylevel.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (hlq *HierarchyLevelQuery) FirstIDX(ctx context.Context) string {
	id, err := hlq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single HierarchyLevel entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one HierarchyLevel entity is found.
// Returns a *NotFoundError when no HierarchyLevel entities are found.
func (hlq *HierarchyLevelQuery) Only(ctx context.Context) (*HierarchyLevel, error) {
	nodes, err := hlq.Limit(2).All(setContextOp(ctx, hlq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{hierarchylevel.Label}
	default:
		return nil, &NotSingularError{hierarchylevel.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (hlq *HierarchyLevelQuery) OnlyX(ctx context.Context) *HierarchyLevel {
	node, err := hlq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only HierarchyLevel ID in the query.
// Returns a *NotSingularError when more than one HierarchyLevel ID is found.
// Returns a *NotFoundError when no entities are found.
func (hlq *HierarchyLevelQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = hlq.Limit(2).IDs(setContextOp(ctx, hlq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{hierarchylevel.Label}
	default:
		err = &NotSingularError{hierarchylevel.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (hlq *HierarchyLevelQuery) OnlyIDX(ctx context.Context) string {
	id, err := hlq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of HierarchyLevels.
func (hlq *HierarchyLevelQuery) All(ctx context.Context) ([]*HierarchyLevel, error) {
	ctx = setContextOp(ctx, hlq.ctx, ent.OpQueryAll)
	if err := hlq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*HierarchyLevel, *HierarchyLevelQuery]()
	return withInterceptors[[]*HierarchyLevel](ctx, hlq, qr, hlq.inters)
}

// AllX is like All, but panics if an error occurs.
func (hlq *HierarchyLevelQuery) AllX(ctx context.Context) []*HierarchyLevel {
	nodes, err := hlq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of HierarchyLevel IDs.
func (hlq *HierarchyLevelQuery) IDs(ctx context.Context) (ids []string, err error) {
	if hlq.ctx.Unique == nil && hlq.path != nil {
		hlq.Unique(true)
	}
	ctx = setContextOp(ctx, hlq.ctx, ent.OpQueryIDs)
	if err = hlq.Select(hierarchylevel.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (hlq *HierarchyLevelQuery) IDsX(ctx context.Context) []string {
	ids, err := hlq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (hlq *HierarchyLevelQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, hlq.ctx, ent.OpQueryCount)
	if err := hlq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, hlq, querierCount[*HierarchyLevelQuery](), hlq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (hlq *HierarchyLevelQuery) CountX(ctx context.Context) int {
	count, err := hlq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (hlq *HierarchyLevelQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, hlq.ctx, ent.OpQueryExist)
	switch _, err := hlq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (hlq *HierarchyLevelQuery) ExistX(ctx context.Context) bool {
	exist, err := hlq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the HierarchyLevelQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (hlq *HierarchyLevelQuery) Clone() *HierarchyLevelQuery {
	if hlq == nil {
		return nil
	}
	return &HierarchyLevelQuery{
		config:       hlq.config,
		ctx:          hlq.ctx.Clone(),
		order:        append([]hierarchylevel.OrderOption{}, hlq.order...),
		inters:       append([]Interceptor{}, hlq.inters...),
		predicates:   append([]predicate.HierarchyLevel{}, hlq.predicates...),
		withChildren: hlq.withChildren.Clone(),
		withUsers:    hlq.withUsers.Clone(),
		withParent:   hlq.withParent.Clone(),
		withOrg:      hlq.withOrg.Clone(),
		// clone intermediate query.
		sql:  hlq.sql.Clone(),
		path: hlq.path,
	}
}

// WithChildren tells the query-builder to eager-load the nodes that are connected to
// the "children" edge. The optional arguments are used to configure the query builder of the edge.
func (hlq *HierarchyLevelQuery) WithChildren(opts ...func(*HierarchyLevelQuery)) *HierarchyLevelQuery {
	query := (&HierarchyLevelClient{config: hlq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hlq.withChildren = query
	return hlq
}

// WithUsers tells the query-builder to eager-load the nodes that are connected to
// the "users" edge. The optional arguments are used to configure the query builder of the edge.
func (hlq *HierarchyLevelQuery) WithUsers(opts ...func(*UserQuery)) *HierarchyLevelQuery {
	query := (&UserClient{config: hlq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hlq.withUsers = query
	return hlq
}

// WithParent tells the query-builder to eager-load the nodes that are connected to
// the "parent" edge. The optional arguments are used to configure the query builder of the edge.
func (hlq *HierarchyLevelQuery) WithParent(opts ...func(*HierarchyLevelQuery)) *HierarchyLevelQuery {
	query := (&HierarchyLevelClient{config: hlq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hlq.withParent = query
	return hlq
}

// WithOrg tells the query-builder to eager-load the nodes that are connected to
// the "org" edge. The optional arguments are used to configure the query builder of the edge.
func (hlq *HierarchyLevelQuery) WithOrg(opts ...func(*OrganizationQuery)) *HierarchyLevelQuery {
	query := (&OrganizationClient{config: hlq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hlq.withOrg = query
	return hlq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.HierarchyLevel.Query().
//		GroupBy(hierarchylevel.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (hlq *HierarchyLevelQuery) GroupBy(field string, fields ...string) *HierarchyLevelGroupBy {
	hlq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &HierarchyLevelGroupBy{build: hlq}
	grbuild.flds = &hlq.ctx.Fields
	grbuild.label = hierarchylevel.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.HierarchyLevel.Query().
//		Select(hierarchylevel.FieldCreatedAt).
//		Scan(ctx, &v)
func (hlq *HierarchyLevelQuery) Select(fields ...string) *HierarchyLevelSelect {
	hlq.ctx.Fields = append(hlq.ctx.Fields, fields...)
	sbuild := &HierarchyLevelSelect{HierarchyLevelQuery: hlq}
	sbuild.label = hierarchylevel.Label
	sbuild.flds, sbuild.scan = &hlq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a HierarchyLevelSelect configured with the given aggregations.
func (hlq *HierarchyLevelQuery) Aggregate(fns ...AggregateFunc) *HierarchyLevelSelect {
	return hlq.Select().Aggregate(fns...)
}

func (hlq *HierarchyLevelQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range hlq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, hlq); err != nil {
				return err
			}
		}
	}
	for _, f := range hlq.ctx.Fields {
		if !hierarchylevel.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if hlq.path != nil {
		prev, err := hlq.path(ctx)
		if err != nil {
			return err
		}
		hlq.sql = prev
	}
	return nil
}

func (hlq *HierarchyLevelQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*HierarchyLevel, error) {
	var (
		nodes       = []*HierarchyLevel{}
		_spec       = hlq.querySpec()
		loadedTypes = [4]bool{
			hlq.withChildren != nil,
			hlq.withUsers != nil,
			hlq.withParent != nil,
			hlq.withOrg != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*HierarchyLevel).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &HierarchyLevel{config: hlq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, hlq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := hlq.withChildren; query != nil {
		if err := hlq.loadChildren(ctx, query, nodes,
			func(n *HierarchyLevel) { n.Edges.Children = []*HierarchyLevel{} },
			func(n *HierarchyLevel, e *HierarchyLevel) { n.Edges.Children = append(n.Edges.Children, e) }); err != nil {
			return nil, err
		}
	}
	if query := hlq.withUsers; query != nil {
		if err := hlq.loadUsers(ctx, query, nodes,
			func(n *HierarchyLevel) { n.Edges.Users = []*User{} },
			func(n *HierarchyLevel, e *User) { n.Edges.Users = append(n.Edges.Users, e) }); err != nil {
			return nil, err
		}
	}
	if query := hlq.withParent; query != nil {
		if err := hlq.loadParent(ctx, query, nodes, nil,
			func(n *HierarchyLevel, e *HierarchyLevel) { n.Edges.Parent = e }); err != nil {
			return nil, err
		}
	}
	if query := hlq.withOrg; query != nil {
		if err := hlq.loadOrg(ctx, query, nodes, nil,
			func(n *HierarchyLevel, e *Organization) { n.Edges.Org = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (hlq *HierarchyLevelQuery) loadChildren(ctx context.Context, query *HierarchyLevelQuery, nodes []*HierarchyLevel, init func(*HierarchyLevel), assign func(*HierarchyLevel, *HierarchyLevel)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*HierarchyLevel)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(hierarchylevel.FieldParentID)
	}
	query.Where(predicate.HierarchyLevel(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(hierarchylevel.ChildrenColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ParentID
		if fk == nil {
			return fmt.Errorf(`foreign-key "parent_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "parent_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (hlq *HierarchyLevelQuery) loadUsers(ctx context.Context, query *UserQuery, nodes []*HierarchyLevel, init func(*HierarchyLevel), assign func(*HierarchyLevel, *User)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*HierarchyLevel)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(user.FieldHierarchyID)
	}
	query.Where(predicate.User(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(hierarchylevel.UsersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.HierarchyID
		if fk == nil {
			return fmt.Errorf(`foreign-key "hierarchy_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "hierarchy_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (hlq *HierarchyLevelQuery) loadParent(ctx context.Context, query *HierarchyLevelQuery, nodes []*HierarchyLevel, init func(*HierarchyLevel), assign func(*HierarchyLevel, *HierarchyLevel)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*HierarchyLevel)
	for i := range nodes {
		if nodes[i].ParentID == nil {
			continue
		}
		fk := *nodes[i].ParentID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(hierarchylevel.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "parent_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (hlq *HierarchyLevelQuery) loadOrg(ctx context.Context, query *OrganizationQuery, nodes []*HierarchyLevel, init func(*HierarchyLevel), assign func(*HierarchyLevel, *Organization)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*HierarchyLevel)
	for i := range nodes {
		fk := nodes[i].OrgID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(organization.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "org_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (hlq *HierarchyLevelQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := hlq.querySpec()
	_spec.Node.Columns = hlq.ctx.Fields
	if len(hlq.ctx.Fields) > 0 {
		_spec.Unique = hlq.ctx.Unique != nil && *hlq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, hlq.driver, _spec)
}

func (hlq *HierarchyLevelQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(hierarchylevel.Table, hierarchylevel.Columns, sqlgraph.NewFieldSpec(hierarchylevel.FieldID, field.TypeString))
	_spec.From = hlq.sql
	if unique := hlq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if hlq.path != nil {
		_spec.Unique = true
	}
	if fields := hlq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hierarchylevel.FieldID)
		for i := range fields {
			if fields[i] != hierarchylevel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if hlq.withParent != nil {
			_spec.Node.AddColumnOnce(hierarchylevel.FieldParentID)
		}
		if hlq.withOrg != nil {
			_spec.Node.AddColumnOnce(hierarchylevel.FieldOrgID)
		}
	}
	if ps := hlq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := hlq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := hlq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := hlq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (hlq *HierarchyLevelQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(hlq.driver.Dialect())
	t1 := builder.Table(hierarchylevel.Table)
	columns := hlq.ctx.Fields
	if len(columns) == 0 {
		columns = hierarchylevel.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if hlq.sql != nil {
		selector = hlq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if hlq.ctx.Unique != nil && *hlq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range hlq.predicates {
		p(selector)
	}
	for _, p := range hlq.order {
		p(selector)
	}
	if offset := hlq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := hlq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// HierarchyLevelGroupBy is the group-by builder for HierarchyLevel entities.
type HierarchyLevelGroupBy struct {
	selector
	build *HierarchyLevelQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (hlgb *HierarchyLevelGroupBy) Aggregate(fns ...AggregateFunc) *HierarchyLevelGroupBy {
	hlgb.fns = append(hlgb.fns, fns...)
	return hlgb
}

// Scan applies the selector query and scans the result into the given value.
func (hlgb *HierarchyLevelGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, hlgb.build.ctx, ent.OpQueryGroupBy)
	if err := hlgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*HierarchyLevelQuery, *HierarchyLevelGroupBy](ctx, hlgb.build, hlgb, hlgb.build.inters, v)
}

func (hlgb *HierarchyLevelGroupBy) sqlScan(ctx context.Context, root *HierarchyLevelQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(hlgb.fns))
	for _, fn := range hlgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*hlgb.flds)+len(hlgb.fns))
		for _, f := range *hlgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*hlgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := hlgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// HierarchyLevelSelect is the builder for selecting fields of HierarchyLevel entities.
type HierarchyLevelSelect struct {
	*HierarchyLevelQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (hls *HierarchyLevelSelect) Aggregate(fns ...AggregateFunc) *HierarchyLevelSelect {
	hls.fns = append(hls.fns, fns...)
	return hls
}

// Scan applies the selector query and scans the result into the given value.
func (hls *HierarchyLevelSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, hls.ctx, ent.OpQuerySelect)
	if err := hls.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*HierarchyLevelQuery, *HierarchyLevelSelect](ctx, hls.HierarchyLevelQuery, hls, hls.inters, v)
}

func (hls *HierarchyLevelSelect) sqlScan(ctx context.Context, root *HierarchyLevelQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(hls.fns))
	for _, fn := range hls.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*hls.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := hls.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
