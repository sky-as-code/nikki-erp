// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky-as-code/nikki-erp/modules/identity/infra/ent/hierarchylevel"
	"github.com/sky-as-code/nikki-erp/modules/identity/infra/ent/predicate"
	"github.com/sky-as-code/nikki-erp/modules/identity/infra/ent/user"
)

// HierarchyLevelUpdate is the builder for updating HierarchyLevel entities.
type HierarchyLevelUpdate struct {
	config
	hooks    []Hook
	mutation *HierarchyLevelMutation
}

// Where appends a list predicates to the HierarchyLevelUpdate builder.
func (hlu *HierarchyLevelUpdate) Where(ps ...predicate.HierarchyLevel) *HierarchyLevelUpdate {
	hlu.mutation.Where(ps...)
	return hlu
}

// SetEtag sets the "etag" field.
func (hlu *HierarchyLevelUpdate) SetEtag(s string) *HierarchyLevelUpdate {
	hlu.mutation.SetEtag(s)
	return hlu
}

// SetNillableEtag sets the "etag" field if the given value is not nil.
func (hlu *HierarchyLevelUpdate) SetNillableEtag(s *string) *HierarchyLevelUpdate {
	if s != nil {
		hlu.SetEtag(*s)
	}
	return hlu
}

// SetName sets the "name" field.
func (hlu *HierarchyLevelUpdate) SetName(s string) *HierarchyLevelUpdate {
	hlu.mutation.SetName(s)
	return hlu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (hlu *HierarchyLevelUpdate) SetNillableName(s *string) *HierarchyLevelUpdate {
	if s != nil {
		hlu.SetName(*s)
	}
	return hlu
}

// SetParentID sets the "parent_id" field.
func (hlu *HierarchyLevelUpdate) SetParentID(s string) *HierarchyLevelUpdate {
	hlu.mutation.SetParentID(s)
	return hlu
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (hlu *HierarchyLevelUpdate) SetNillableParentID(s *string) *HierarchyLevelUpdate {
	if s != nil {
		hlu.SetParentID(*s)
	}
	return hlu
}

// ClearParentID clears the value of the "parent_id" field.
func (hlu *HierarchyLevelUpdate) ClearParentID() *HierarchyLevelUpdate {
	hlu.mutation.ClearParentID()
	return hlu
}

// AddChildIDs adds the "children" edge to the HierarchyLevel entity by IDs.
func (hlu *HierarchyLevelUpdate) AddChildIDs(ids ...string) *HierarchyLevelUpdate {
	hlu.mutation.AddChildIDs(ids...)
	return hlu
}

// AddChildren adds the "children" edges to the HierarchyLevel entity.
func (hlu *HierarchyLevelUpdate) AddChildren(h ...*HierarchyLevel) *HierarchyLevelUpdate {
	ids := make([]string, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hlu.AddChildIDs(ids...)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (hlu *HierarchyLevelUpdate) AddUserIDs(ids ...string) *HierarchyLevelUpdate {
	hlu.mutation.AddUserIDs(ids...)
	return hlu
}

// AddUsers adds the "users" edges to the User entity.
func (hlu *HierarchyLevelUpdate) AddUsers(u ...*User) *HierarchyLevelUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return hlu.AddUserIDs(ids...)
}

// SetParent sets the "parent" edge to the HierarchyLevel entity.
func (hlu *HierarchyLevelUpdate) SetParent(h *HierarchyLevel) *HierarchyLevelUpdate {
	return hlu.SetParentID(h.ID)
}

// Mutation returns the HierarchyLevelMutation object of the builder.
func (hlu *HierarchyLevelUpdate) Mutation() *HierarchyLevelMutation {
	return hlu.mutation
}

// ClearChildren clears all "children" edges to the HierarchyLevel entity.
func (hlu *HierarchyLevelUpdate) ClearChildren() *HierarchyLevelUpdate {
	hlu.mutation.ClearChildren()
	return hlu
}

// RemoveChildIDs removes the "children" edge to HierarchyLevel entities by IDs.
func (hlu *HierarchyLevelUpdate) RemoveChildIDs(ids ...string) *HierarchyLevelUpdate {
	hlu.mutation.RemoveChildIDs(ids...)
	return hlu
}

// RemoveChildren removes "children" edges to HierarchyLevel entities.
func (hlu *HierarchyLevelUpdate) RemoveChildren(h ...*HierarchyLevel) *HierarchyLevelUpdate {
	ids := make([]string, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hlu.RemoveChildIDs(ids...)
}

// ClearUsers clears all "users" edges to the User entity.
func (hlu *HierarchyLevelUpdate) ClearUsers() *HierarchyLevelUpdate {
	hlu.mutation.ClearUsers()
	return hlu
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (hlu *HierarchyLevelUpdate) RemoveUserIDs(ids ...string) *HierarchyLevelUpdate {
	hlu.mutation.RemoveUserIDs(ids...)
	return hlu
}

// RemoveUsers removes "users" edges to User entities.
func (hlu *HierarchyLevelUpdate) RemoveUsers(u ...*User) *HierarchyLevelUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return hlu.RemoveUserIDs(ids...)
}

// ClearParent clears the "parent" edge to the HierarchyLevel entity.
func (hlu *HierarchyLevelUpdate) ClearParent() *HierarchyLevelUpdate {
	hlu.mutation.ClearParent()
	return hlu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hlu *HierarchyLevelUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, hlu.sqlSave, hlu.mutation, hlu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hlu *HierarchyLevelUpdate) SaveX(ctx context.Context) int {
	affected, err := hlu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hlu *HierarchyLevelUpdate) Exec(ctx context.Context) error {
	_, err := hlu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hlu *HierarchyLevelUpdate) ExecX(ctx context.Context) {
	if err := hlu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hlu *HierarchyLevelUpdate) check() error {
	if hlu.mutation.OrgCleared() && len(hlu.mutation.OrgIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "HierarchyLevel.org"`)
	}
	return nil
}

func (hlu *HierarchyLevelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := hlu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(hierarchylevel.Table, hierarchylevel.Columns, sqlgraph.NewFieldSpec(hierarchylevel.FieldID, field.TypeString))
	if ps := hlu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hlu.mutation.Etag(); ok {
		_spec.SetField(hierarchylevel.FieldEtag, field.TypeString, value)
	}
	if value, ok := hlu.mutation.Name(); ok {
		_spec.SetField(hierarchylevel.FieldName, field.TypeString, value)
	}
	if hlu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hierarchylevel.ChildrenTable,
			Columns: []string{hierarchylevel.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hierarchylevel.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hlu.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !hlu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hierarchylevel.ChildrenTable,
			Columns: []string{hierarchylevel.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hierarchylevel.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hlu.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hierarchylevel.ChildrenTable,
			Columns: []string{hierarchylevel.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hierarchylevel.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hlu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hierarchylevel.UsersTable,
			Columns: []string{hierarchylevel.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hlu.mutation.RemovedUsersIDs(); len(nodes) > 0 && !hlu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hierarchylevel.UsersTable,
			Columns: []string{hierarchylevel.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hlu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hierarchylevel.UsersTable,
			Columns: []string{hierarchylevel.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hlu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hierarchylevel.ParentTable,
			Columns: []string{hierarchylevel.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hierarchylevel.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hlu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hierarchylevel.ParentTable,
			Columns: []string{hierarchylevel.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hierarchylevel.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hlu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hierarchylevel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	hlu.mutation.done = true
	return n, nil
}

// HierarchyLevelUpdateOne is the builder for updating a single HierarchyLevel entity.
type HierarchyLevelUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HierarchyLevelMutation
}

// SetEtag sets the "etag" field.
func (hluo *HierarchyLevelUpdateOne) SetEtag(s string) *HierarchyLevelUpdateOne {
	hluo.mutation.SetEtag(s)
	return hluo
}

// SetNillableEtag sets the "etag" field if the given value is not nil.
func (hluo *HierarchyLevelUpdateOne) SetNillableEtag(s *string) *HierarchyLevelUpdateOne {
	if s != nil {
		hluo.SetEtag(*s)
	}
	return hluo
}

// SetName sets the "name" field.
func (hluo *HierarchyLevelUpdateOne) SetName(s string) *HierarchyLevelUpdateOne {
	hluo.mutation.SetName(s)
	return hluo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (hluo *HierarchyLevelUpdateOne) SetNillableName(s *string) *HierarchyLevelUpdateOne {
	if s != nil {
		hluo.SetName(*s)
	}
	return hluo
}

// SetParentID sets the "parent_id" field.
func (hluo *HierarchyLevelUpdateOne) SetParentID(s string) *HierarchyLevelUpdateOne {
	hluo.mutation.SetParentID(s)
	return hluo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (hluo *HierarchyLevelUpdateOne) SetNillableParentID(s *string) *HierarchyLevelUpdateOne {
	if s != nil {
		hluo.SetParentID(*s)
	}
	return hluo
}

// ClearParentID clears the value of the "parent_id" field.
func (hluo *HierarchyLevelUpdateOne) ClearParentID() *HierarchyLevelUpdateOne {
	hluo.mutation.ClearParentID()
	return hluo
}

// AddChildIDs adds the "children" edge to the HierarchyLevel entity by IDs.
func (hluo *HierarchyLevelUpdateOne) AddChildIDs(ids ...string) *HierarchyLevelUpdateOne {
	hluo.mutation.AddChildIDs(ids...)
	return hluo
}

// AddChildren adds the "children" edges to the HierarchyLevel entity.
func (hluo *HierarchyLevelUpdateOne) AddChildren(h ...*HierarchyLevel) *HierarchyLevelUpdateOne {
	ids := make([]string, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hluo.AddChildIDs(ids...)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (hluo *HierarchyLevelUpdateOne) AddUserIDs(ids ...string) *HierarchyLevelUpdateOne {
	hluo.mutation.AddUserIDs(ids...)
	return hluo
}

// AddUsers adds the "users" edges to the User entity.
func (hluo *HierarchyLevelUpdateOne) AddUsers(u ...*User) *HierarchyLevelUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return hluo.AddUserIDs(ids...)
}

// SetParent sets the "parent" edge to the HierarchyLevel entity.
func (hluo *HierarchyLevelUpdateOne) SetParent(h *HierarchyLevel) *HierarchyLevelUpdateOne {
	return hluo.SetParentID(h.ID)
}

// Mutation returns the HierarchyLevelMutation object of the builder.
func (hluo *HierarchyLevelUpdateOne) Mutation() *HierarchyLevelMutation {
	return hluo.mutation
}

// ClearChildren clears all "children" edges to the HierarchyLevel entity.
func (hluo *HierarchyLevelUpdateOne) ClearChildren() *HierarchyLevelUpdateOne {
	hluo.mutation.ClearChildren()
	return hluo
}

// RemoveChildIDs removes the "children" edge to HierarchyLevel entities by IDs.
func (hluo *HierarchyLevelUpdateOne) RemoveChildIDs(ids ...string) *HierarchyLevelUpdateOne {
	hluo.mutation.RemoveChildIDs(ids...)
	return hluo
}

// RemoveChildren removes "children" edges to HierarchyLevel entities.
func (hluo *HierarchyLevelUpdateOne) RemoveChildren(h ...*HierarchyLevel) *HierarchyLevelUpdateOne {
	ids := make([]string, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hluo.RemoveChildIDs(ids...)
}

// ClearUsers clears all "users" edges to the User entity.
func (hluo *HierarchyLevelUpdateOne) ClearUsers() *HierarchyLevelUpdateOne {
	hluo.mutation.ClearUsers()
	return hluo
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (hluo *HierarchyLevelUpdateOne) RemoveUserIDs(ids ...string) *HierarchyLevelUpdateOne {
	hluo.mutation.RemoveUserIDs(ids...)
	return hluo
}

// RemoveUsers removes "users" edges to User entities.
func (hluo *HierarchyLevelUpdateOne) RemoveUsers(u ...*User) *HierarchyLevelUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return hluo.RemoveUserIDs(ids...)
}

// ClearParent clears the "parent" edge to the HierarchyLevel entity.
func (hluo *HierarchyLevelUpdateOne) ClearParent() *HierarchyLevelUpdateOne {
	hluo.mutation.ClearParent()
	return hluo
}

// Where appends a list predicates to the HierarchyLevelUpdate builder.
func (hluo *HierarchyLevelUpdateOne) Where(ps ...predicate.HierarchyLevel) *HierarchyLevelUpdateOne {
	hluo.mutation.Where(ps...)
	return hluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (hluo *HierarchyLevelUpdateOne) Select(field string, fields ...string) *HierarchyLevelUpdateOne {
	hluo.fields = append([]string{field}, fields...)
	return hluo
}

// Save executes the query and returns the updated HierarchyLevel entity.
func (hluo *HierarchyLevelUpdateOne) Save(ctx context.Context) (*HierarchyLevel, error) {
	return withHooks(ctx, hluo.sqlSave, hluo.mutation, hluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hluo *HierarchyLevelUpdateOne) SaveX(ctx context.Context) *HierarchyLevel {
	node, err := hluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (hluo *HierarchyLevelUpdateOne) Exec(ctx context.Context) error {
	_, err := hluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hluo *HierarchyLevelUpdateOne) ExecX(ctx context.Context) {
	if err := hluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hluo *HierarchyLevelUpdateOne) check() error {
	if hluo.mutation.OrgCleared() && len(hluo.mutation.OrgIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "HierarchyLevel.org"`)
	}
	return nil
}

func (hluo *HierarchyLevelUpdateOne) sqlSave(ctx context.Context) (_node *HierarchyLevel, err error) {
	if err := hluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(hierarchylevel.Table, hierarchylevel.Columns, sqlgraph.NewFieldSpec(hierarchylevel.FieldID, field.TypeString))
	id, ok := hluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "HierarchyLevel.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := hluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hierarchylevel.FieldID)
		for _, f := range fields {
			if !hierarchylevel.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != hierarchylevel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := hluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hluo.mutation.Etag(); ok {
		_spec.SetField(hierarchylevel.FieldEtag, field.TypeString, value)
	}
	if value, ok := hluo.mutation.Name(); ok {
		_spec.SetField(hierarchylevel.FieldName, field.TypeString, value)
	}
	if hluo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hierarchylevel.ChildrenTable,
			Columns: []string{hierarchylevel.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hierarchylevel.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hluo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !hluo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hierarchylevel.ChildrenTable,
			Columns: []string{hierarchylevel.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hierarchylevel.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hluo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hierarchylevel.ChildrenTable,
			Columns: []string{hierarchylevel.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hierarchylevel.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hluo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hierarchylevel.UsersTable,
			Columns: []string{hierarchylevel.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hluo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !hluo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hierarchylevel.UsersTable,
			Columns: []string{hierarchylevel.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hluo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hierarchylevel.UsersTable,
			Columns: []string{hierarchylevel.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hluo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hierarchylevel.ParentTable,
			Columns: []string{hierarchylevel.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hierarchylevel.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hluo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hierarchylevel.ParentTable,
			Columns: []string{hierarchylevel.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hierarchylevel.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &HierarchyLevel{config: hluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, hluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hierarchylevel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	hluo.mutation.done = true
	return _node, nil
}
