// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky-as-code/nikki-erp/common/model"
	"github.com/sky-as-code/nikki-erp/modules/identity/infra/ent/identstatusenum"
	"github.com/sky-as-code/nikki-erp/modules/identity/infra/ent/organization"
	"github.com/sky-as-code/nikki-erp/modules/identity/infra/ent/predicate"
	"github.com/sky-as-code/nikki-erp/modules/identity/infra/ent/user"
)

// IdentStatusEnumUpdate is the builder for updating IdentStatusEnum entities.
type IdentStatusEnumUpdate struct {
	config
	hooks    []Hook
	mutation *IdentStatusEnumMutation
}

// Where appends a list predicates to the IdentStatusEnumUpdate builder.
func (iseu *IdentStatusEnumUpdate) Where(ps ...predicate.IdentStatusEnum) *IdentStatusEnumUpdate {
	iseu.mutation.Where(ps...)
	return iseu
}

// SetEtag sets the "etag" field.
func (iseu *IdentStatusEnumUpdate) SetEtag(s string) *IdentStatusEnumUpdate {
	iseu.mutation.SetEtag(s)
	return iseu
}

// SetNillableEtag sets the "etag" field if the given value is not nil.
func (iseu *IdentStatusEnumUpdate) SetNillableEtag(s *string) *IdentStatusEnumUpdate {
	if s != nil {
		iseu.SetEtag(*s)
	}
	return iseu
}

// SetLabel sets the "label" field.
func (iseu *IdentStatusEnumUpdate) SetLabel(mj model.LangJson) *IdentStatusEnumUpdate {
	iseu.mutation.SetLabel(mj)
	return iseu
}

// SetValue sets the "value" field.
func (iseu *IdentStatusEnumUpdate) SetValue(s string) *IdentStatusEnumUpdate {
	iseu.mutation.SetValue(s)
	return iseu
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (iseu *IdentStatusEnumUpdate) SetNillableValue(s *string) *IdentStatusEnumUpdate {
	if s != nil {
		iseu.SetValue(*s)
	}
	return iseu
}

// ClearValue clears the value of the "value" field.
func (iseu *IdentStatusEnumUpdate) ClearValue() *IdentStatusEnumUpdate {
	iseu.mutation.ClearValue()
	return iseu
}

// SetType sets the "type" field.
func (iseu *IdentStatusEnumUpdate) SetType(s string) *IdentStatusEnumUpdate {
	iseu.mutation.SetType(s)
	return iseu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (iseu *IdentStatusEnumUpdate) SetNillableType(s *string) *IdentStatusEnumUpdate {
	if s != nil {
		iseu.SetType(*s)
	}
	return iseu
}

// AddOrgIDs adds the "orgs" edge to the Organization entity by IDs.
func (iseu *IdentStatusEnumUpdate) AddOrgIDs(ids ...string) *IdentStatusEnumUpdate {
	iseu.mutation.AddOrgIDs(ids...)
	return iseu
}

// AddOrgs adds the "orgs" edges to the Organization entity.
func (iseu *IdentStatusEnumUpdate) AddOrgs(o ...*Organization) *IdentStatusEnumUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return iseu.AddOrgIDs(ids...)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (iseu *IdentStatusEnumUpdate) AddUserIDs(ids ...string) *IdentStatusEnumUpdate {
	iseu.mutation.AddUserIDs(ids...)
	return iseu
}

// AddUsers adds the "users" edges to the User entity.
func (iseu *IdentStatusEnumUpdate) AddUsers(u ...*User) *IdentStatusEnumUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return iseu.AddUserIDs(ids...)
}

// Mutation returns the IdentStatusEnumMutation object of the builder.
func (iseu *IdentStatusEnumUpdate) Mutation() *IdentStatusEnumMutation {
	return iseu.mutation
}

// ClearOrgs clears all "orgs" edges to the Organization entity.
func (iseu *IdentStatusEnumUpdate) ClearOrgs() *IdentStatusEnumUpdate {
	iseu.mutation.ClearOrgs()
	return iseu
}

// RemoveOrgIDs removes the "orgs" edge to Organization entities by IDs.
func (iseu *IdentStatusEnumUpdate) RemoveOrgIDs(ids ...string) *IdentStatusEnumUpdate {
	iseu.mutation.RemoveOrgIDs(ids...)
	return iseu
}

// RemoveOrgs removes "orgs" edges to Organization entities.
func (iseu *IdentStatusEnumUpdate) RemoveOrgs(o ...*Organization) *IdentStatusEnumUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return iseu.RemoveOrgIDs(ids...)
}

// ClearUsers clears all "users" edges to the User entity.
func (iseu *IdentStatusEnumUpdate) ClearUsers() *IdentStatusEnumUpdate {
	iseu.mutation.ClearUsers()
	return iseu
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (iseu *IdentStatusEnumUpdate) RemoveUserIDs(ids ...string) *IdentStatusEnumUpdate {
	iseu.mutation.RemoveUserIDs(ids...)
	return iseu
}

// RemoveUsers removes "users" edges to User entities.
func (iseu *IdentStatusEnumUpdate) RemoveUsers(u ...*User) *IdentStatusEnumUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return iseu.RemoveUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iseu *IdentStatusEnumUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, iseu.sqlSave, iseu.mutation, iseu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iseu *IdentStatusEnumUpdate) SaveX(ctx context.Context) int {
	affected, err := iseu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iseu *IdentStatusEnumUpdate) Exec(ctx context.Context) error {
	_, err := iseu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iseu *IdentStatusEnumUpdate) ExecX(ctx context.Context) {
	if err := iseu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iseu *IdentStatusEnumUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(identstatusenum.Table, identstatusenum.Columns, sqlgraph.NewFieldSpec(identstatusenum.FieldID, field.TypeString))
	if ps := iseu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iseu.mutation.Etag(); ok {
		_spec.SetField(identstatusenum.FieldEtag, field.TypeString, value)
	}
	if value, ok := iseu.mutation.Label(); ok {
		_spec.SetField(identstatusenum.FieldLabel, field.TypeJSON, value)
	}
	if value, ok := iseu.mutation.Value(); ok {
		_spec.SetField(identstatusenum.FieldValue, field.TypeString, value)
	}
	if iseu.mutation.ValueCleared() {
		_spec.ClearField(identstatusenum.FieldValue, field.TypeString)
	}
	if value, ok := iseu.mutation.GetType(); ok {
		_spec.SetField(identstatusenum.FieldType, field.TypeString, value)
	}
	if iseu.mutation.OrgsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   identstatusenum.OrgsTable,
			Columns: []string{identstatusenum.OrgsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iseu.mutation.RemovedOrgsIDs(); len(nodes) > 0 && !iseu.mutation.OrgsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   identstatusenum.OrgsTable,
			Columns: []string{identstatusenum.OrgsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iseu.mutation.OrgsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   identstatusenum.OrgsTable,
			Columns: []string{identstatusenum.OrgsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iseu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   identstatusenum.UsersTable,
			Columns: []string{identstatusenum.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iseu.mutation.RemovedUsersIDs(); len(nodes) > 0 && !iseu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   identstatusenum.UsersTable,
			Columns: []string{identstatusenum.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iseu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   identstatusenum.UsersTable,
			Columns: []string{identstatusenum.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iseu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{identstatusenum.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iseu.mutation.done = true
	return n, nil
}

// IdentStatusEnumUpdateOne is the builder for updating a single IdentStatusEnum entity.
type IdentStatusEnumUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IdentStatusEnumMutation
}

// SetEtag sets the "etag" field.
func (iseuo *IdentStatusEnumUpdateOne) SetEtag(s string) *IdentStatusEnumUpdateOne {
	iseuo.mutation.SetEtag(s)
	return iseuo
}

// SetNillableEtag sets the "etag" field if the given value is not nil.
func (iseuo *IdentStatusEnumUpdateOne) SetNillableEtag(s *string) *IdentStatusEnumUpdateOne {
	if s != nil {
		iseuo.SetEtag(*s)
	}
	return iseuo
}

// SetLabel sets the "label" field.
func (iseuo *IdentStatusEnumUpdateOne) SetLabel(mj model.LangJson) *IdentStatusEnumUpdateOne {
	iseuo.mutation.SetLabel(mj)
	return iseuo
}

// SetValue sets the "value" field.
func (iseuo *IdentStatusEnumUpdateOne) SetValue(s string) *IdentStatusEnumUpdateOne {
	iseuo.mutation.SetValue(s)
	return iseuo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (iseuo *IdentStatusEnumUpdateOne) SetNillableValue(s *string) *IdentStatusEnumUpdateOne {
	if s != nil {
		iseuo.SetValue(*s)
	}
	return iseuo
}

// ClearValue clears the value of the "value" field.
func (iseuo *IdentStatusEnumUpdateOne) ClearValue() *IdentStatusEnumUpdateOne {
	iseuo.mutation.ClearValue()
	return iseuo
}

// SetType sets the "type" field.
func (iseuo *IdentStatusEnumUpdateOne) SetType(s string) *IdentStatusEnumUpdateOne {
	iseuo.mutation.SetType(s)
	return iseuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (iseuo *IdentStatusEnumUpdateOne) SetNillableType(s *string) *IdentStatusEnumUpdateOne {
	if s != nil {
		iseuo.SetType(*s)
	}
	return iseuo
}

// AddOrgIDs adds the "orgs" edge to the Organization entity by IDs.
func (iseuo *IdentStatusEnumUpdateOne) AddOrgIDs(ids ...string) *IdentStatusEnumUpdateOne {
	iseuo.mutation.AddOrgIDs(ids...)
	return iseuo
}

// AddOrgs adds the "orgs" edges to the Organization entity.
func (iseuo *IdentStatusEnumUpdateOne) AddOrgs(o ...*Organization) *IdentStatusEnumUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return iseuo.AddOrgIDs(ids...)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (iseuo *IdentStatusEnumUpdateOne) AddUserIDs(ids ...string) *IdentStatusEnumUpdateOne {
	iseuo.mutation.AddUserIDs(ids...)
	return iseuo
}

// AddUsers adds the "users" edges to the User entity.
func (iseuo *IdentStatusEnumUpdateOne) AddUsers(u ...*User) *IdentStatusEnumUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return iseuo.AddUserIDs(ids...)
}

// Mutation returns the IdentStatusEnumMutation object of the builder.
func (iseuo *IdentStatusEnumUpdateOne) Mutation() *IdentStatusEnumMutation {
	return iseuo.mutation
}

// ClearOrgs clears all "orgs" edges to the Organization entity.
func (iseuo *IdentStatusEnumUpdateOne) ClearOrgs() *IdentStatusEnumUpdateOne {
	iseuo.mutation.ClearOrgs()
	return iseuo
}

// RemoveOrgIDs removes the "orgs" edge to Organization entities by IDs.
func (iseuo *IdentStatusEnumUpdateOne) RemoveOrgIDs(ids ...string) *IdentStatusEnumUpdateOne {
	iseuo.mutation.RemoveOrgIDs(ids...)
	return iseuo
}

// RemoveOrgs removes "orgs" edges to Organization entities.
func (iseuo *IdentStatusEnumUpdateOne) RemoveOrgs(o ...*Organization) *IdentStatusEnumUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return iseuo.RemoveOrgIDs(ids...)
}

// ClearUsers clears all "users" edges to the User entity.
func (iseuo *IdentStatusEnumUpdateOne) ClearUsers() *IdentStatusEnumUpdateOne {
	iseuo.mutation.ClearUsers()
	return iseuo
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (iseuo *IdentStatusEnumUpdateOne) RemoveUserIDs(ids ...string) *IdentStatusEnumUpdateOne {
	iseuo.mutation.RemoveUserIDs(ids...)
	return iseuo
}

// RemoveUsers removes "users" edges to User entities.
func (iseuo *IdentStatusEnumUpdateOne) RemoveUsers(u ...*User) *IdentStatusEnumUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return iseuo.RemoveUserIDs(ids...)
}

// Where appends a list predicates to the IdentStatusEnumUpdate builder.
func (iseuo *IdentStatusEnumUpdateOne) Where(ps ...predicate.IdentStatusEnum) *IdentStatusEnumUpdateOne {
	iseuo.mutation.Where(ps...)
	return iseuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iseuo *IdentStatusEnumUpdateOne) Select(field string, fields ...string) *IdentStatusEnumUpdateOne {
	iseuo.fields = append([]string{field}, fields...)
	return iseuo
}

// Save executes the query and returns the updated IdentStatusEnum entity.
func (iseuo *IdentStatusEnumUpdateOne) Save(ctx context.Context) (*IdentStatusEnum, error) {
	return withHooks(ctx, iseuo.sqlSave, iseuo.mutation, iseuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iseuo *IdentStatusEnumUpdateOne) SaveX(ctx context.Context) *IdentStatusEnum {
	node, err := iseuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iseuo *IdentStatusEnumUpdateOne) Exec(ctx context.Context) error {
	_, err := iseuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iseuo *IdentStatusEnumUpdateOne) ExecX(ctx context.Context) {
	if err := iseuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iseuo *IdentStatusEnumUpdateOne) sqlSave(ctx context.Context) (_node *IdentStatusEnum, err error) {
	_spec := sqlgraph.NewUpdateSpec(identstatusenum.Table, identstatusenum.Columns, sqlgraph.NewFieldSpec(identstatusenum.FieldID, field.TypeString))
	id, ok := iseuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "IdentStatusEnum.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iseuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, identstatusenum.FieldID)
		for _, f := range fields {
			if !identstatusenum.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != identstatusenum.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iseuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iseuo.mutation.Etag(); ok {
		_spec.SetField(identstatusenum.FieldEtag, field.TypeString, value)
	}
	if value, ok := iseuo.mutation.Label(); ok {
		_spec.SetField(identstatusenum.FieldLabel, field.TypeJSON, value)
	}
	if value, ok := iseuo.mutation.Value(); ok {
		_spec.SetField(identstatusenum.FieldValue, field.TypeString, value)
	}
	if iseuo.mutation.ValueCleared() {
		_spec.ClearField(identstatusenum.FieldValue, field.TypeString)
	}
	if value, ok := iseuo.mutation.GetType(); ok {
		_spec.SetField(identstatusenum.FieldType, field.TypeString, value)
	}
	if iseuo.mutation.OrgsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   identstatusenum.OrgsTable,
			Columns: []string{identstatusenum.OrgsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iseuo.mutation.RemovedOrgsIDs(); len(nodes) > 0 && !iseuo.mutation.OrgsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   identstatusenum.OrgsTable,
			Columns: []string{identstatusenum.OrgsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iseuo.mutation.OrgsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   identstatusenum.OrgsTable,
			Columns: []string{identstatusenum.OrgsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iseuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   identstatusenum.UsersTable,
			Columns: []string{identstatusenum.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iseuo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !iseuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   identstatusenum.UsersTable,
			Columns: []string{identstatusenum.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iseuo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   identstatusenum.UsersTable,
			Columns: []string{identstatusenum.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &IdentStatusEnum{config: iseuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iseuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{identstatusenum.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iseuo.mutation.done = true
	return _node, nil
}
