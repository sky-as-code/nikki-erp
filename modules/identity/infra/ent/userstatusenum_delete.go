// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky-as-code/nikki-erp/modules/identity/infra/ent/predicate"
	"github.com/sky-as-code/nikki-erp/modules/identity/infra/ent/userstatusenum"
)

// UserStatusEnumDelete is the builder for deleting a UserStatusEnum entity.
type UserStatusEnumDelete struct {
	config
	hooks    []Hook
	mutation *UserStatusEnumMutation
}

// Where appends a list predicates to the UserStatusEnumDelete builder.
func (used *UserStatusEnumDelete) Where(ps ...predicate.UserStatusEnum) *UserStatusEnumDelete {
	used.mutation.Where(ps...)
	return used
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (used *UserStatusEnumDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, used.sqlExec, used.mutation, used.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (used *UserStatusEnumDelete) ExecX(ctx context.Context) int {
	n, err := used.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (used *UserStatusEnumDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(userstatusenum.Table, sqlgraph.NewFieldSpec(userstatusenum.FieldID, field.TypeString))
	if ps := used.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, used.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	used.mutation.done = true
	return affected, err
}

// UserStatusEnumDeleteOne is the builder for deleting a single UserStatusEnum entity.
type UserStatusEnumDeleteOne struct {
	used *UserStatusEnumDelete
}

// Where appends a list predicates to the UserStatusEnumDelete builder.
func (usedo *UserStatusEnumDeleteOne) Where(ps ...predicate.UserStatusEnum) *UserStatusEnumDeleteOne {
	usedo.used.mutation.Where(ps...)
	return usedo
}

// Exec executes the deletion query.
func (usedo *UserStatusEnumDeleteOne) Exec(ctx context.Context) error {
	n, err := usedo.used.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{userstatusenum.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (usedo *UserStatusEnumDeleteOne) ExecX(ctx context.Context) {
	if err := usedo.Exec(ctx); err != nil {
		panic(err)
	}
}
