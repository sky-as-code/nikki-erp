// Code generated by ent, DO NOT EDIT.

package identstatusenum

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the identstatusenum type in the database.
	Label = "ident_status_enum"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEtag holds the string denoting the etag field in the database.
	FieldEtag = "etag"
	// FieldLabel holds the string denoting the label field in the database.
	FieldLabel = "label"
	// FieldValue holds the string denoting the value field in the database.
	FieldValue = "value"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// EdgeOrgs holds the string denoting the orgs edge name in mutations.
	EdgeOrgs = "orgs"
	// EdgeUsers holds the string denoting the users edge name in mutations.
	EdgeUsers = "users"
	// Table holds the table name of the identstatusenum in the database.
	Table = "core_enums"
	// OrgsTable is the table that holds the orgs relation/edge.
	OrgsTable = "ident_organizations"
	// OrgsInverseTable is the table name for the Organization entity.
	// It exists in this package in order to avoid circular dependency with the "organization" package.
	OrgsInverseTable = "ident_organizations"
	// OrgsColumn is the table column denoting the orgs relation/edge.
	OrgsColumn = "status_id"
	// UsersTable is the table that holds the users relation/edge.
	UsersTable = "ident_users"
	// UsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UsersInverseTable = "ident_users"
	// UsersColumn is the table column denoting the users relation/edge.
	UsersColumn = "status_id"
)

// Columns holds all SQL columns for identstatusenum fields.
var Columns = []string{
	FieldID,
	FieldEtag,
	FieldLabel,
	FieldValue,
	FieldType,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the IdentStatusEnum queries.
type OrderOption = func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEtag orders the results by the etag field.
func ByEtag(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEtag, opts...).ToFunc()
}

// ByValue orders the results by the value field.
func ByValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValue, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByOrgsCount orders the results by orgs count.
func ByOrgsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOrgsStep(), opts...)
	}
}

// ByOrgs orders the results by orgs terms.
func ByOrgs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrgsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUsersCount orders the results by users count.
func ByUsersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUsersStep(), opts...)
	}
}

// ByUsers orders the results by users terms.
func ByUsers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUsersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// Added by NikkieERP scripts/ent_templates/dialect/sql/meta.tmpl
func NewOrgsStepNikki() *sqlgraph.Step {
	return newOrgsStep()
}

func newOrgsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrgsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, OrgsTable, OrgsColumn),
	)
}

// Added by NikkieERP scripts/ent_templates/dialect/sql/meta.tmpl
func NewUsersStepNikki() *sqlgraph.Step {
	return newUsersStep()
}

func newUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UsersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, UsersTable, UsersColumn),
	)
}
