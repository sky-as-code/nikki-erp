// Code generated by ent, DO NOT EDIT.

package userorg

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/sky-as-code/nikki-erp/modules/identity/infra/ent/predicate"
)

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.UserOrg {
	return predicate.UserOrg(sql.FieldEQ(FieldUserID, v))
}

// OrgID applies equality check predicate on the "org_id" field. It's identical to OrgIDEQ.
func OrgID(v string) predicate.UserOrg {
	return predicate.UserOrg(sql.FieldEQ(FieldOrgID, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.UserOrg {
	return predicate.UserOrg(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.UserOrg {
	return predicate.UserOrg(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.UserOrg {
	return predicate.UserOrg(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.UserOrg {
	return predicate.UserOrg(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.UserOrg {
	return predicate.UserOrg(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.UserOrg {
	return predicate.UserOrg(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.UserOrg {
	return predicate.UserOrg(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.UserOrg {
	return predicate.UserOrg(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.UserOrg {
	return predicate.UserOrg(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.UserOrg {
	return predicate.UserOrg(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.UserOrg {
	return predicate.UserOrg(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.UserOrg {
	return predicate.UserOrg(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.UserOrg {
	return predicate.UserOrg(sql.FieldContainsFold(FieldUserID, v))
}

// OrgIDEQ applies the EQ predicate on the "org_id" field.
func OrgIDEQ(v string) predicate.UserOrg {
	return predicate.UserOrg(sql.FieldEQ(FieldOrgID, v))
}

// OrgIDNEQ applies the NEQ predicate on the "org_id" field.
func OrgIDNEQ(v string) predicate.UserOrg {
	return predicate.UserOrg(sql.FieldNEQ(FieldOrgID, v))
}

// OrgIDIn applies the In predicate on the "org_id" field.
func OrgIDIn(vs ...string) predicate.UserOrg {
	return predicate.UserOrg(sql.FieldIn(FieldOrgID, vs...))
}

// OrgIDNotIn applies the NotIn predicate on the "org_id" field.
func OrgIDNotIn(vs ...string) predicate.UserOrg {
	return predicate.UserOrg(sql.FieldNotIn(FieldOrgID, vs...))
}

// OrgIDGT applies the GT predicate on the "org_id" field.
func OrgIDGT(v string) predicate.UserOrg {
	return predicate.UserOrg(sql.FieldGT(FieldOrgID, v))
}

// OrgIDGTE applies the GTE predicate on the "org_id" field.
func OrgIDGTE(v string) predicate.UserOrg {
	return predicate.UserOrg(sql.FieldGTE(FieldOrgID, v))
}

// OrgIDLT applies the LT predicate on the "org_id" field.
func OrgIDLT(v string) predicate.UserOrg {
	return predicate.UserOrg(sql.FieldLT(FieldOrgID, v))
}

// OrgIDLTE applies the LTE predicate on the "org_id" field.
func OrgIDLTE(v string) predicate.UserOrg {
	return predicate.UserOrg(sql.FieldLTE(FieldOrgID, v))
}

// OrgIDContains applies the Contains predicate on the "org_id" field.
func OrgIDContains(v string) predicate.UserOrg {
	return predicate.UserOrg(sql.FieldContains(FieldOrgID, v))
}

// OrgIDHasPrefix applies the HasPrefix predicate on the "org_id" field.
func OrgIDHasPrefix(v string) predicate.UserOrg {
	return predicate.UserOrg(sql.FieldHasPrefix(FieldOrgID, v))
}

// OrgIDHasSuffix applies the HasSuffix predicate on the "org_id" field.
func OrgIDHasSuffix(v string) predicate.UserOrg {
	return predicate.UserOrg(sql.FieldHasSuffix(FieldOrgID, v))
}

// OrgIDEqualFold applies the EqualFold predicate on the "org_id" field.
func OrgIDEqualFold(v string) predicate.UserOrg {
	return predicate.UserOrg(sql.FieldEqualFold(FieldOrgID, v))
}

// OrgIDContainsFold applies the ContainsFold predicate on the "org_id" field.
func OrgIDContainsFold(v string) predicate.UserOrg {
	return predicate.UserOrg(sql.FieldContainsFold(FieldOrgID, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.UserOrg {
	return predicate.UserOrg(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, UserColumn),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.UserOrg {
	return predicate.UserOrg(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrg applies the HasEdge predicate on the "org" edge.
func HasOrg() predicate.UserOrg {
	return predicate.UserOrg(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, OrgColumn),
			sqlgraph.Edge(sqlgraph.M2O, false, OrgTable, OrgColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrgWith applies the HasEdge predicate on the "org" edge with a given conditions (other predicates).
func HasOrgWith(preds ...predicate.Organization) predicate.UserOrg {
	return predicate.UserOrg(func(s *sql.Selector) {
		step := newOrgStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserOrg) predicate.UserOrg {
	return predicate.UserOrg(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserOrg) predicate.UserOrg {
	return predicate.UserOrg(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserOrg) predicate.UserOrg {
	return predicate.UserOrg(sql.NotPredicates(p))
}
