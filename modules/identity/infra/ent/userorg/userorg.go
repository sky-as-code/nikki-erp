// Code generated by ent, DO NOT EDIT.

package userorg

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the userorg type in the database.
	Label = "user_org"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldOrgID holds the string denoting the org_id field in the database.
	FieldOrgID = "org_id"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeOrg holds the string denoting the org edge name in mutations.
	EdgeOrg = "org"
	// UserFieldID holds the string denoting the ID field of the User.
	UserFieldID = "id"
	// OrganizationFieldID holds the string denoting the ID field of the Organization.
	OrganizationFieldID = "id"
	// Table holds the table name of the userorg in the database.
	Table = "ident_user_org_rel"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "ident_user_org_rel"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "ident_users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// OrgTable is the table that holds the org relation/edge.
	OrgTable = "ident_user_org_rel"
	// OrgInverseTable is the table name for the Organization entity.
	// It exists in this package in order to avoid circular dependency with the "organization" package.
	OrgInverseTable = "ident_organizations"
	// OrgColumn is the table column denoting the org relation/edge.
	OrgColumn = "org_id"
)

// Columns holds all SQL columns for userorg fields.
var Columns = []string{
	FieldUserID,
	FieldOrgID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the UserOrg queries.
type OrderOption = func(*sql.Selector)

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByOrgID orders the results by the org_id field.
func ByOrgID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrgID, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByOrgField orders the results by org field.
func ByOrgField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrgStep(), sql.OrderByField(field, opts...))
	}
}

// Added by NikkieERP scripts/ent_templates/dialect/sql/meta.tmpl
func NewUserStepNikki() *sqlgraph.Step {
	return newUserStep()
}

func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, UserColumn),
		sqlgraph.To(UserInverseTable, UserFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
	)
}

// Added by NikkieERP scripts/ent_templates/dialect/sql/meta.tmpl
func NewOrgStepNikki() *sqlgraph.Step {
	return newOrgStep()
}

func newOrgStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, OrgColumn),
		sqlgraph.To(OrgInverseTable, OrganizationFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, OrgTable, OrgColumn),
	)
}
