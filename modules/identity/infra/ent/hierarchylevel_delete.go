// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky-as-code/nikki-erp/modules/identity/infra/ent/hierarchylevel"
	"github.com/sky-as-code/nikki-erp/modules/identity/infra/ent/predicate"
)

// HierarchyLevelDelete is the builder for deleting a HierarchyLevel entity.
type HierarchyLevelDelete struct {
	config
	hooks    []Hook
	mutation *HierarchyLevelMutation
}

// Where appends a list predicates to the HierarchyLevelDelete builder.
func (hld *HierarchyLevelDelete) Where(ps ...predicate.HierarchyLevel) *HierarchyLevelDelete {
	hld.mutation.Where(ps...)
	return hld
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (hld *HierarchyLevelDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, hld.sqlExec, hld.mutation, hld.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (hld *HierarchyLevelDelete) ExecX(ctx context.Context) int {
	n, err := hld.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (hld *HierarchyLevelDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(hierarchylevel.Table, sqlgraph.NewFieldSpec(hierarchylevel.FieldID, field.TypeString))
	if ps := hld.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, hld.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	hld.mutation.done = true
	return affected, err
}

// HierarchyLevelDeleteOne is the builder for deleting a single HierarchyLevel entity.
type HierarchyLevelDeleteOne struct {
	hld *HierarchyLevelDelete
}

// Where appends a list predicates to the HierarchyLevelDelete builder.
func (hldo *HierarchyLevelDeleteOne) Where(ps ...predicate.HierarchyLevel) *HierarchyLevelDeleteOne {
	hldo.hld.mutation.Where(ps...)
	return hldo
}

// Exec executes the deletion query.
func (hldo *HierarchyLevelDeleteOne) Exec(ctx context.Context) error {
	n, err := hldo.hld.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{hierarchylevel.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (hldo *HierarchyLevelDeleteOne) ExecX(ctx context.Context) {
	if err := hldo.Exec(ctx); err != nil {
		panic(err)
	}
}
