// Code generated by ent, DO NOT EDIT.

package hierarchylevel

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/sky-as-code/nikki-erp/modules/identity/infra/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.HierarchyLevel {
	return predicate.HierarchyLevel(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.HierarchyLevel {
	return predicate.HierarchyLevel(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.HierarchyLevel {
	return predicate.HierarchyLevel(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.HierarchyLevel {
	return predicate.HierarchyLevel(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.HierarchyLevel {
	return predicate.HierarchyLevel(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.HierarchyLevel {
	return predicate.HierarchyLevel(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.HierarchyLevel {
	return predicate.HierarchyLevel(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.HierarchyLevel {
	return predicate.HierarchyLevel(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.HierarchyLevel {
	return predicate.HierarchyLevel(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.HierarchyLevel {
	return predicate.HierarchyLevel(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.HierarchyLevel {
	return predicate.HierarchyLevel(sql.FieldContainsFold(FieldID, id))
}

// OrgID applies equality check predicate on the "org_id" field. It's identical to OrgIDEQ.
func OrgID(v string) predicate.HierarchyLevel {
	return predicate.HierarchyLevel(sql.FieldEQ(FieldOrgID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.HierarchyLevel {
	return predicate.HierarchyLevel(sql.FieldEQ(FieldName, v))
}

// ParentID applies equality check predicate on the "parent_id" field. It's identical to ParentIDEQ.
func ParentID(v string) predicate.HierarchyLevel {
	return predicate.HierarchyLevel(sql.FieldEQ(FieldParentID, v))
}

// OrgIDEQ applies the EQ predicate on the "org_id" field.
func OrgIDEQ(v string) predicate.HierarchyLevel {
	return predicate.HierarchyLevel(sql.FieldEQ(FieldOrgID, v))
}

// OrgIDNEQ applies the NEQ predicate on the "org_id" field.
func OrgIDNEQ(v string) predicate.HierarchyLevel {
	return predicate.HierarchyLevel(sql.FieldNEQ(FieldOrgID, v))
}

// OrgIDIn applies the In predicate on the "org_id" field.
func OrgIDIn(vs ...string) predicate.HierarchyLevel {
	return predicate.HierarchyLevel(sql.FieldIn(FieldOrgID, vs...))
}

// OrgIDNotIn applies the NotIn predicate on the "org_id" field.
func OrgIDNotIn(vs ...string) predicate.HierarchyLevel {
	return predicate.HierarchyLevel(sql.FieldNotIn(FieldOrgID, vs...))
}

// OrgIDGT applies the GT predicate on the "org_id" field.
func OrgIDGT(v string) predicate.HierarchyLevel {
	return predicate.HierarchyLevel(sql.FieldGT(FieldOrgID, v))
}

// OrgIDGTE applies the GTE predicate on the "org_id" field.
func OrgIDGTE(v string) predicate.HierarchyLevel {
	return predicate.HierarchyLevel(sql.FieldGTE(FieldOrgID, v))
}

// OrgIDLT applies the LT predicate on the "org_id" field.
func OrgIDLT(v string) predicate.HierarchyLevel {
	return predicate.HierarchyLevel(sql.FieldLT(FieldOrgID, v))
}

// OrgIDLTE applies the LTE predicate on the "org_id" field.
func OrgIDLTE(v string) predicate.HierarchyLevel {
	return predicate.HierarchyLevel(sql.FieldLTE(FieldOrgID, v))
}

// OrgIDContains applies the Contains predicate on the "org_id" field.
func OrgIDContains(v string) predicate.HierarchyLevel {
	return predicate.HierarchyLevel(sql.FieldContains(FieldOrgID, v))
}

// OrgIDHasPrefix applies the HasPrefix predicate on the "org_id" field.
func OrgIDHasPrefix(v string) predicate.HierarchyLevel {
	return predicate.HierarchyLevel(sql.FieldHasPrefix(FieldOrgID, v))
}

// OrgIDHasSuffix applies the HasSuffix predicate on the "org_id" field.
func OrgIDHasSuffix(v string) predicate.HierarchyLevel {
	return predicate.HierarchyLevel(sql.FieldHasSuffix(FieldOrgID, v))
}

// OrgIDEqualFold applies the EqualFold predicate on the "org_id" field.
func OrgIDEqualFold(v string) predicate.HierarchyLevel {
	return predicate.HierarchyLevel(sql.FieldEqualFold(FieldOrgID, v))
}

// OrgIDContainsFold applies the ContainsFold predicate on the "org_id" field.
func OrgIDContainsFold(v string) predicate.HierarchyLevel {
	return predicate.HierarchyLevel(sql.FieldContainsFold(FieldOrgID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.HierarchyLevel {
	return predicate.HierarchyLevel(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.HierarchyLevel {
	return predicate.HierarchyLevel(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.HierarchyLevel {
	return predicate.HierarchyLevel(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.HierarchyLevel {
	return predicate.HierarchyLevel(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.HierarchyLevel {
	return predicate.HierarchyLevel(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.HierarchyLevel {
	return predicate.HierarchyLevel(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.HierarchyLevel {
	return predicate.HierarchyLevel(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.HierarchyLevel {
	return predicate.HierarchyLevel(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.HierarchyLevel {
	return predicate.HierarchyLevel(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.HierarchyLevel {
	return predicate.HierarchyLevel(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.HierarchyLevel {
	return predicate.HierarchyLevel(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.HierarchyLevel {
	return predicate.HierarchyLevel(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.HierarchyLevel {
	return predicate.HierarchyLevel(sql.FieldContainsFold(FieldName, v))
}

// ParentIDEQ applies the EQ predicate on the "parent_id" field.
func ParentIDEQ(v string) predicate.HierarchyLevel {
	return predicate.HierarchyLevel(sql.FieldEQ(FieldParentID, v))
}

// ParentIDNEQ applies the NEQ predicate on the "parent_id" field.
func ParentIDNEQ(v string) predicate.HierarchyLevel {
	return predicate.HierarchyLevel(sql.FieldNEQ(FieldParentID, v))
}

// ParentIDIn applies the In predicate on the "parent_id" field.
func ParentIDIn(vs ...string) predicate.HierarchyLevel {
	return predicate.HierarchyLevel(sql.FieldIn(FieldParentID, vs...))
}

// ParentIDNotIn applies the NotIn predicate on the "parent_id" field.
func ParentIDNotIn(vs ...string) predicate.HierarchyLevel {
	return predicate.HierarchyLevel(sql.FieldNotIn(FieldParentID, vs...))
}

// ParentIDGT applies the GT predicate on the "parent_id" field.
func ParentIDGT(v string) predicate.HierarchyLevel {
	return predicate.HierarchyLevel(sql.FieldGT(FieldParentID, v))
}

// ParentIDGTE applies the GTE predicate on the "parent_id" field.
func ParentIDGTE(v string) predicate.HierarchyLevel {
	return predicate.HierarchyLevel(sql.FieldGTE(FieldParentID, v))
}

// ParentIDLT applies the LT predicate on the "parent_id" field.
func ParentIDLT(v string) predicate.HierarchyLevel {
	return predicate.HierarchyLevel(sql.FieldLT(FieldParentID, v))
}

// ParentIDLTE applies the LTE predicate on the "parent_id" field.
func ParentIDLTE(v string) predicate.HierarchyLevel {
	return predicate.HierarchyLevel(sql.FieldLTE(FieldParentID, v))
}

// ParentIDContains applies the Contains predicate on the "parent_id" field.
func ParentIDContains(v string) predicate.HierarchyLevel {
	return predicate.HierarchyLevel(sql.FieldContains(FieldParentID, v))
}

// ParentIDHasPrefix applies the HasPrefix predicate on the "parent_id" field.
func ParentIDHasPrefix(v string) predicate.HierarchyLevel {
	return predicate.HierarchyLevel(sql.FieldHasPrefix(FieldParentID, v))
}

// ParentIDHasSuffix applies the HasSuffix predicate on the "parent_id" field.
func ParentIDHasSuffix(v string) predicate.HierarchyLevel {
	return predicate.HierarchyLevel(sql.FieldHasSuffix(FieldParentID, v))
}

// ParentIDIsNil applies the IsNil predicate on the "parent_id" field.
func ParentIDIsNil() predicate.HierarchyLevel {
	return predicate.HierarchyLevel(sql.FieldIsNull(FieldParentID))
}

// ParentIDNotNil applies the NotNil predicate on the "parent_id" field.
func ParentIDNotNil() predicate.HierarchyLevel {
	return predicate.HierarchyLevel(sql.FieldNotNull(FieldParentID))
}

// ParentIDEqualFold applies the EqualFold predicate on the "parent_id" field.
func ParentIDEqualFold(v string) predicate.HierarchyLevel {
	return predicate.HierarchyLevel(sql.FieldEqualFold(FieldParentID, v))
}

// ParentIDContainsFold applies the ContainsFold predicate on the "parent_id" field.
func ParentIDContainsFold(v string) predicate.HierarchyLevel {
	return predicate.HierarchyLevel(sql.FieldContainsFold(FieldParentID, v))
}

// HasParent applies the HasEdge predicate on the "parent" edge.
func HasParent() predicate.HierarchyLevel {
	return predicate.HierarchyLevel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParentWith applies the HasEdge predicate on the "parent" edge with a given conditions (other predicates).
func HasParentWith(preds ...predicate.HierarchyLevel) predicate.HierarchyLevel {
	return predicate.HierarchyLevel(func(s *sql.Selector) {
		step := newParentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChild applies the HasEdge predicate on the "child" edge.
func HasChild() predicate.HierarchyLevel {
	return predicate.HierarchyLevel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChildTable, ChildColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChildWith applies the HasEdge predicate on the "child" edge with a given conditions (other predicates).
func HasChildWith(preds ...predicate.HierarchyLevel) predicate.HierarchyLevel {
	return predicate.HierarchyLevel(func(s *sql.Selector) {
		step := newChildStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.HierarchyLevel) predicate.HierarchyLevel {
	return predicate.HierarchyLevel(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.HierarchyLevel) predicate.HierarchyLevel {
	return predicate.HierarchyLevel(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.HierarchyLevel) predicate.HierarchyLevel {
	return predicate.HierarchyLevel(sql.NotPredicates(p))
}
