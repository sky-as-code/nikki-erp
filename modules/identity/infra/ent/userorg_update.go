// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky-as-code/nikki-erp/modules/identity/infra/ent/predicate"
	"github.com/sky-as-code/nikki-erp/modules/identity/infra/ent/userorg"
)

// UserOrgUpdate is the builder for updating UserOrg entities.
type UserOrgUpdate struct {
	config
	hooks     []Hook
	mutation  *UserOrgMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the UserOrgUpdate builder.
func (uou *UserOrgUpdate) Where(ps ...predicate.UserOrg) *UserOrgUpdate {
	uou.mutation.Where(ps...)
	return uou
}

// Mutation returns the UserOrgMutation object of the builder.
func (uou *UserOrgUpdate) Mutation() *UserOrgMutation {
	return uou.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uou *UserOrgUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uou.sqlSave, uou.mutation, uou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uou *UserOrgUpdate) SaveX(ctx context.Context) int {
	affected, err := uou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uou *UserOrgUpdate) Exec(ctx context.Context) error {
	_, err := uou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uou *UserOrgUpdate) ExecX(ctx context.Context) {
	if err := uou.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uou *UserOrgUpdate) check() error {
	if uou.mutation.UserCleared() && len(uou.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserOrg.user"`)
	}
	if uou.mutation.OrgCleared() && len(uou.mutation.OrgIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserOrg.org"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uou *UserOrgUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserOrgUpdate {
	uou.modifiers = append(uou.modifiers, modifiers...)
	return uou
}

func (uou *UserOrgUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(userorg.Table, userorg.Columns, sqlgraph.NewFieldSpec(userorg.FieldUserID, field.TypeString), sqlgraph.NewFieldSpec(userorg.FieldOrgID, field.TypeString))
	if ps := uou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_spec.AddModifiers(uou.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, uou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userorg.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uou.mutation.done = true
	return n, nil
}

// UserOrgUpdateOne is the builder for updating a single UserOrg entity.
type UserOrgUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *UserOrgMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Mutation returns the UserOrgMutation object of the builder.
func (uouo *UserOrgUpdateOne) Mutation() *UserOrgMutation {
	return uouo.mutation
}

// Where appends a list predicates to the UserOrgUpdate builder.
func (uouo *UserOrgUpdateOne) Where(ps ...predicate.UserOrg) *UserOrgUpdateOne {
	uouo.mutation.Where(ps...)
	return uouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uouo *UserOrgUpdateOne) Select(field string, fields ...string) *UserOrgUpdateOne {
	uouo.fields = append([]string{field}, fields...)
	return uouo
}

// Save executes the query and returns the updated UserOrg entity.
func (uouo *UserOrgUpdateOne) Save(ctx context.Context) (*UserOrg, error) {
	return withHooks(ctx, uouo.sqlSave, uouo.mutation, uouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uouo *UserOrgUpdateOne) SaveX(ctx context.Context) *UserOrg {
	node, err := uouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uouo *UserOrgUpdateOne) Exec(ctx context.Context) error {
	_, err := uouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uouo *UserOrgUpdateOne) ExecX(ctx context.Context) {
	if err := uouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uouo *UserOrgUpdateOne) check() error {
	if uouo.mutation.UserCleared() && len(uouo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserOrg.user"`)
	}
	if uouo.mutation.OrgCleared() && len(uouo.mutation.OrgIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserOrg.org"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uouo *UserOrgUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserOrgUpdateOne {
	uouo.modifiers = append(uouo.modifiers, modifiers...)
	return uouo
}

func (uouo *UserOrgUpdateOne) sqlSave(ctx context.Context) (_node *UserOrg, err error) {
	if err := uouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userorg.Table, userorg.Columns, sqlgraph.NewFieldSpec(userorg.FieldUserID, field.TypeString), sqlgraph.NewFieldSpec(userorg.FieldOrgID, field.TypeString))
	if id, ok := uouo.mutation.UserID(); !ok {
		return nil, &ValidationError{Name: "user_id", err: errors.New(`ent: missing "UserOrg.user_id" for update`)}
	} else {
		_spec.Node.CompositeID[0].Value = id
	}
	if id, ok := uouo.mutation.OrgID(); !ok {
		return nil, &ValidationError{Name: "org_id", err: errors.New(`ent: missing "UserOrg.org_id" for update`)}
	} else {
		_spec.Node.CompositeID[1].Value = id
	}
	if fields := uouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, len(fields))
		for i, f := range fields {
			if !userorg.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			_spec.Node.Columns[i] = f
		}
	}
	if ps := uouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_spec.AddModifiers(uouo.modifiers...)
	_node = &UserOrg{config: uouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userorg.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uouo.mutation.done = true
	return _node, nil
}
