// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/sky-as-code/nikki-erp/modules/identity/infra/ent/hierarchylevel"
	"github.com/sky-as-code/nikki-erp/modules/identity/infra/ent/organization"
)

// HierarchyLevel is the model entity for the HierarchyLevel schema.
type HierarchyLevel struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Etag holds the value of the "etag" field.
	Etag string `json:"etag,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// OrgID holds the value of the "org_id" field.
	OrgID string `json:"org_id,omitempty"`
	// ParentID holds the value of the "parent_id" field.
	ParentID *string `json:"parent_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HierarchyLevelQuery when eager-loading is set.
	Edges        HierarchyLevelEdges `json:"edges"`
	selectValues sql.SelectValues
}

// HierarchyLevelEdges holds the relations/edges for other nodes in the graph.
type HierarchyLevelEdges struct {
	// Children holds the value of the children edge.
	Children []*HierarchyLevel `json:"children,omitempty"`
	// Users holds the value of the users edge.
	Users []*User `json:"users,omitempty"`
	// Parent holds the value of the parent edge.
	Parent *HierarchyLevel `json:"parent,omitempty"`
	// Org holds the value of the org edge.
	Org *Organization `json:"org,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// ChildrenOrErr returns the Children value or an error if the edge
// was not loaded in eager-loading.
func (e HierarchyLevelEdges) ChildrenOrErr() ([]*HierarchyLevel, error) {
	if e.loadedTypes[0] {
		return e.Children, nil
	}
	return nil, &NotLoadedError{edge: "children"}
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e HierarchyLevelEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[1] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HierarchyLevelEdges) ParentOrErr() (*HierarchyLevel, error) {
	if e.Parent != nil {
		return e.Parent, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: hierarchylevel.Label}
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// OrgOrErr returns the Org value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HierarchyLevelEdges) OrgOrErr() (*Organization, error) {
	if e.Org != nil {
		return e.Org, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "org"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*HierarchyLevel) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case hierarchylevel.FieldID, hierarchylevel.FieldEtag, hierarchylevel.FieldName, hierarchylevel.FieldOrgID, hierarchylevel.FieldParentID:
			values[i] = new(sql.NullString)
		case hierarchylevel.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the HierarchyLevel fields.
func (hl *HierarchyLevel) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case hierarchylevel.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				hl.ID = value.String
			}
		case hierarchylevel.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				hl.CreatedAt = value.Time
			}
		case hierarchylevel.FieldEtag:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field etag", values[i])
			} else if value.Valid {
				hl.Etag = value.String
			}
		case hierarchylevel.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				hl.Name = value.String
			}
		case hierarchylevel.FieldOrgID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field org_id", values[i])
			} else if value.Valid {
				hl.OrgID = value.String
			}
		case hierarchylevel.FieldParentID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field parent_id", values[i])
			} else if value.Valid {
				hl.ParentID = new(string)
				*hl.ParentID = value.String
			}
		default:
			hl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the HierarchyLevel.
// This includes values selected through modifiers, order, etc.
func (hl *HierarchyLevel) Value(name string) (ent.Value, error) {
	return hl.selectValues.Get(name)
}

// QueryChildren queries the "children" edge of the HierarchyLevel entity.
func (hl *HierarchyLevel) QueryChildren() *HierarchyLevelQuery {
	return NewHierarchyLevelClient(hl.config).QueryChildren(hl)
}

// QueryUsers queries the "users" edge of the HierarchyLevel entity.
func (hl *HierarchyLevel) QueryUsers() *UserQuery {
	return NewHierarchyLevelClient(hl.config).QueryUsers(hl)
}

// QueryParent queries the "parent" edge of the HierarchyLevel entity.
func (hl *HierarchyLevel) QueryParent() *HierarchyLevelQuery {
	return NewHierarchyLevelClient(hl.config).QueryParent(hl)
}

// QueryOrg queries the "org" edge of the HierarchyLevel entity.
func (hl *HierarchyLevel) QueryOrg() *OrganizationQuery {
	return NewHierarchyLevelClient(hl.config).QueryOrg(hl)
}

// Update returns a builder for updating this HierarchyLevel.
// Note that you need to call HierarchyLevel.Unwrap() before calling this method if this HierarchyLevel
// was returned from a transaction, and the transaction was committed or rolled back.
func (hl *HierarchyLevel) Update() *HierarchyLevelUpdateOne {
	return NewHierarchyLevelClient(hl.config).UpdateOne(hl)
}

// Unwrap unwraps the HierarchyLevel entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (hl *HierarchyLevel) Unwrap() *HierarchyLevel {
	_tx, ok := hl.config.driver.(*txDriver)
	if !ok {
		panic("ent: HierarchyLevel is not a transactional entity")
	}
	hl.config.driver = _tx.drv
	return hl
}

// String implements the fmt.Stringer.
func (hl *HierarchyLevel) String() string {
	var builder strings.Builder
	builder.WriteString("HierarchyLevel(")
	builder.WriteString(fmt.Sprintf("id=%v, ", hl.ID))
	builder.WriteString("created_at=")
	builder.WriteString(hl.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("etag=")
	builder.WriteString(hl.Etag)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(hl.Name)
	builder.WriteString(", ")
	builder.WriteString("org_id=")
	builder.WriteString(hl.OrgID)
	builder.WriteString(", ")
	if v := hl.ParentID; v != nil {
		builder.WriteString("parent_id=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// HierarchyLevels is a parsable slice of HierarchyLevel.
type HierarchyLevels []*HierarchyLevel
