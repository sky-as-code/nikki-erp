// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// GroupsColumns holds the columns for the "groups" table.
	GroupsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "created_by", Type: field.TypeString},
		{Name: "etag", Type: field.TypeString},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
		{Name: "org_id", Type: field.TypeString, Unique: true, Nullable: true},
	}
	// GroupsTable holds the schema information for the "groups" table.
	GroupsTable = &schema.Table{
		Name:       "groups",
		Columns:    GroupsColumns,
		PrimaryKey: []*schema.Column{GroupsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "groups_organizations_groups",
				Columns:    []*schema.Column{GroupsColumns[8]},
				RefColumns: []*schema.Column{OrganizationsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// HierarchyLevelsColumns holds the columns for the "hierarchy_levels" table.
	HierarchyLevelsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "org_id", Type: field.TypeString},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "parent_id", Type: field.TypeString, Nullable: true},
	}
	// HierarchyLevelsTable holds the schema information for the "hierarchy_levels" table.
	HierarchyLevelsTable = &schema.Table{
		Name:       "hierarchy_levels",
		Columns:    HierarchyLevelsColumns,
		PrimaryKey: []*schema.Column{HierarchyLevelsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "hierarchy_levels_hierarchy_levels_child",
				Columns:    []*schema.Column{HierarchyLevelsColumns[3]},
				RefColumns: []*schema.Column{HierarchyLevelsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// OrganizationsColumns holds the columns for the "organizations" table.
	OrganizationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "created_by", Type: field.TypeString},
		{Name: "display_name", Type: field.TypeString, Size: 50},
		{Name: "etag", Type: field.TypeString, Size: 100},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"active", "inactive"}, Default: "inactive"},
		{Name: "slug", Type: field.TypeString, Unique: true, Size: 50},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
	}
	// OrganizationsTable holds the schema information for the "organizations" table.
	OrganizationsTable = &schema.Table{
		Name:       "organizations",
		Columns:    OrganizationsColumns,
		PrimaryKey: []*schema.Column{OrganizationsColumns[0]},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "avatar_url", Type: field.TypeString, Nullable: true, Size: 255},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "created_by", Type: field.TypeString, Size: 36},
		{Name: "display_name", Type: field.TypeString, Size: 50},
		{Name: "email", Type: field.TypeString, Unique: true, Size: 100},
		{Name: "etag", Type: field.TypeString, Size: 100},
		{Name: "failed_login_attempts", Type: field.TypeInt, Default: 0},
		{Name: "last_login_at", Type: field.TypeTime, Nullable: true},
		{Name: "locked_until", Type: field.TypeTime, Nullable: true},
		{Name: "must_change_password", Type: field.TypeBool, Default: true},
		{Name: "password_hash", Type: field.TypeString},
		{Name: "password_changed_at", Type: field.TypeTime},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"active", "inactive", "locked"}, Default: "inactive"},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "updated_by", Type: field.TypeString, Nullable: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// UserGroupsColumns holds the columns for the "user_groups" table.
	UserGroupsColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeString},
		{Name: "group_id", Type: field.TypeString},
	}
	// UserGroupsTable holds the schema information for the "user_groups" table.
	UserGroupsTable = &schema.Table{
		Name:       "user_groups",
		Columns:    UserGroupsColumns,
		PrimaryKey: []*schema.Column{UserGroupsColumns[0], UserGroupsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_groups_users_user",
				Columns:    []*schema.Column{UserGroupsColumns[0]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_groups_groups_group",
				Columns:    []*schema.Column{UserGroupsColumns[1]},
				RefColumns: []*schema.Column{GroupsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// UserOrgsColumns holds the columns for the "user_orgs" table.
	UserOrgsColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeString},
		{Name: "org_id", Type: field.TypeString},
	}
	// UserOrgsTable holds the schema information for the "user_orgs" table.
	UserOrgsTable = &schema.Table{
		Name:       "user_orgs",
		Columns:    UserOrgsColumns,
		PrimaryKey: []*schema.Column{UserOrgsColumns[0], UserOrgsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_orgs_users_user",
				Columns:    []*schema.Column{UserOrgsColumns[0]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_orgs_organizations_org",
				Columns:    []*schema.Column{UserOrgsColumns[1]},
				RefColumns: []*schema.Column{OrganizationsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		GroupsTable,
		HierarchyLevelsTable,
		OrganizationsTable,
		UsersTable,
		UserGroupsTable,
		UserOrgsTable,
	}
)

func init() {
	GroupsTable.ForeignKeys[0].RefTable = OrganizationsTable
	GroupsTable.Annotation = &entsql.Annotation{
		Table: "groups",
	}
	HierarchyLevelsTable.ForeignKeys[0].RefTable = HierarchyLevelsTable
	HierarchyLevelsTable.Annotation = &entsql.Annotation{
		Table: "hierarchy_levels",
	}
	OrganizationsTable.Annotation = &entsql.Annotation{
		Table: "organizations",
	}
	UsersTable.Annotation = &entsql.Annotation{
		Table: "users",
	}
	UserGroupsTable.ForeignKeys[0].RefTable = UsersTable
	UserGroupsTable.ForeignKeys[1].RefTable = GroupsTable
	UserGroupsTable.Annotation = &entsql.Annotation{
		Table: "user_groups",
	}
	UserOrgsTable.ForeignKeys[0].RefTable = UsersTable
	UserOrgsTable.ForeignKeys[1].RefTable = OrganizationsTable
	UserOrgsTable.Annotation = &entsql.Annotation{
		Table: "user_orgs",
	}
}
