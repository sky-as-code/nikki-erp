// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/sky-as-code/nikki-erp/modules/identity/infra/ent/organization"
	"github.com/sky-as-code/nikki-erp/modules/identity/infra/ent/user"
	"github.com/sky-as-code/nikki-erp/modules/identity/infra/ent/userorg"
)

// UserOrg is the model entity for the UserOrg schema.
type UserOrg struct {
	config `json:"-"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// OrgID holds the value of the "org_id" field.
	OrgID string `json:"org_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserOrgQuery when eager-loading is set.
	Edges        UserOrgEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserOrgEdges holds the relations/edges for other nodes in the graph.
type UserOrgEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Org holds the value of the org edge.
	Org *Organization `json:"org,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserOrgEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// OrgOrErr returns the Org value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserOrgEdges) OrgOrErr() (*Organization, error) {
	if e.Org != nil {
		return e.Org, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "org"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserOrg) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userorg.FieldUserID, userorg.FieldOrgID:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserOrg fields.
func (uo *UserOrg) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userorg.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				uo.UserID = value.String
			}
		case userorg.FieldOrgID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field org_id", values[i])
			} else if value.Valid {
				uo.OrgID = value.String
			}
		default:
			uo.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserOrg.
// This includes values selected through modifiers, order, etc.
func (uo *UserOrg) Value(name string) (ent.Value, error) {
	return uo.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the UserOrg entity.
func (uo *UserOrg) QueryUser() *UserQuery {
	return NewUserOrgClient(uo.config).QueryUser(uo)
}

// QueryOrg queries the "org" edge of the UserOrg entity.
func (uo *UserOrg) QueryOrg() *OrganizationQuery {
	return NewUserOrgClient(uo.config).QueryOrg(uo)
}

// Update returns a builder for updating this UserOrg.
// Note that you need to call UserOrg.Unwrap() before calling this method if this UserOrg
// was returned from a transaction, and the transaction was committed or rolled back.
func (uo *UserOrg) Update() *UserOrgUpdateOne {
	return NewUserOrgClient(uo.config).UpdateOne(uo)
}

// Unwrap unwraps the UserOrg entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uo *UserOrg) Unwrap() *UserOrg {
	_tx, ok := uo.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserOrg is not a transactional entity")
	}
	uo.config.driver = _tx.drv
	return uo
}

// String implements the fmt.Stringer.
func (uo *UserOrg) String() string {
	var builder strings.Builder
	builder.WriteString("UserOrg(")
	builder.WriteString("user_id=")
	builder.WriteString(uo.UserID)
	builder.WriteString(", ")
	builder.WriteString("org_id=")
	builder.WriteString(uo.OrgID)
	builder.WriteByte(')')
	return builder.String()
}

// UserOrgs is a parsable slice of UserOrg.
type UserOrgs []*UserOrg
