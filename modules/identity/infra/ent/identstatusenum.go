// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/sky-as-code/nikki-erp/common/model"
	"github.com/sky-as-code/nikki-erp/modules/identity/infra/ent/identstatusenum"
)

// IdentStatusEnum is the model entity for the IdentStatusEnum schema.
type IdentStatusEnum struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Etag holds the value of the "etag" field.
	Etag string `json:"etag,omitempty"`
	// Label holds the value of the "label" field.
	Label model.LangJson `json:"label,omitempty"`
	// Value holds the value of the "value" field.
	Value *string `json:"value,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the IdentStatusEnumQuery when eager-loading is set.
	Edges        IdentStatusEnumEdges `json:"edges"`
	selectValues sql.SelectValues
}

// IdentStatusEnumEdges holds the relations/edges for other nodes in the graph.
type IdentStatusEnumEdges struct {
	// Orgs holds the value of the orgs edge.
	Orgs []*Organization `json:"orgs,omitempty"`
	// Users holds the value of the users edge.
	Users []*User `json:"users,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// OrgsOrErr returns the Orgs value or an error if the edge
// was not loaded in eager-loading.
func (e IdentStatusEnumEdges) OrgsOrErr() ([]*Organization, error) {
	if e.loadedTypes[0] {
		return e.Orgs, nil
	}
	return nil, &NotLoadedError{edge: "orgs"}
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e IdentStatusEnumEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[1] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*IdentStatusEnum) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case identstatusenum.FieldLabel:
			values[i] = new([]byte)
		case identstatusenum.FieldID, identstatusenum.FieldEtag, identstatusenum.FieldValue, identstatusenum.FieldType:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the IdentStatusEnum fields.
func (ise *IdentStatusEnum) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case identstatusenum.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ise.ID = value.String
			}
		case identstatusenum.FieldEtag:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field etag", values[i])
			} else if value.Valid {
				ise.Etag = value.String
			}
		case identstatusenum.FieldLabel:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field label", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ise.Label); err != nil {
					return fmt.Errorf("unmarshal field label: %w", err)
				}
			}
		case identstatusenum.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				ise.Value = new(string)
				*ise.Value = value.String
			}
		case identstatusenum.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				ise.Type = value.String
			}
		default:
			ise.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the IdentStatusEnum.
// This includes values selected through modifiers, order, etc.
func (ise *IdentStatusEnum) GetValue(name string) (ent.Value, error) {
	return ise.selectValues.Get(name)
}

// QueryOrgs queries the "orgs" edge of the IdentStatusEnum entity.
func (ise *IdentStatusEnum) QueryOrgs() *OrganizationQuery {
	return NewIdentStatusEnumClient(ise.config).QueryOrgs(ise)
}

// QueryUsers queries the "users" edge of the IdentStatusEnum entity.
func (ise *IdentStatusEnum) QueryUsers() *UserQuery {
	return NewIdentStatusEnumClient(ise.config).QueryUsers(ise)
}

// Update returns a builder for updating this IdentStatusEnum.
// Note that you need to call IdentStatusEnum.Unwrap() before calling this method if this IdentStatusEnum
// was returned from a transaction, and the transaction was committed or rolled back.
func (ise *IdentStatusEnum) Update() *IdentStatusEnumUpdateOne {
	return NewIdentStatusEnumClient(ise.config).UpdateOne(ise)
}

// Unwrap unwraps the IdentStatusEnum entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ise *IdentStatusEnum) Unwrap() *IdentStatusEnum {
	_tx, ok := ise.config.driver.(*txDriver)
	if !ok {
		panic("ent: IdentStatusEnum is not a transactional entity")
	}
	ise.config.driver = _tx.drv
	return ise
}

// String implements the fmt.Stringer.
func (ise *IdentStatusEnum) String() string {
	var builder strings.Builder
	builder.WriteString("IdentStatusEnum(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ise.ID))
	builder.WriteString("etag=")
	builder.WriteString(ise.Etag)
	builder.WriteString(", ")
	builder.WriteString("label=")
	builder.WriteString(fmt.Sprintf("%v", ise.Label))
	builder.WriteString(", ")
	if v := ise.Value; v != nil {
		builder.WriteString("value=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(ise.Type)
	builder.WriteByte(')')
	return builder.String()
}

// IdentStatusEnums is a parsable slice of IdentStatusEnum.
type IdentStatusEnums []*IdentStatusEnum
