// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/sky-as-code/nikki-erp/modules/identity/infra/ent/group"
	"github.com/sky-as-code/nikki-erp/modules/identity/infra/ent/hierarchylevel"
	"github.com/sky-as-code/nikki-erp/modules/identity/infra/ent/organization"
	"github.com/sky-as-code/nikki-erp/modules/identity/infra/ent/schema"
	"github.com/sky-as-code/nikki-erp/modules/identity/infra/ent/user"
	"github.com/sky-as-code/nikki-erp/modules/identity/infra/ent/usergroup"
	"github.com/sky-as-code/nikki-erp/modules/identity/infra/ent/userorg"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	groupMixin := schema.Group{}.Mixin()
	groupMixinFields0 := groupMixin[0].Fields()
	_ = groupMixinFields0
	groupFields := schema.Group{}.Fields()
	_ = groupFields
	// groupDescName is the schema descriptor for name field.
	groupDescName := groupMixinFields0[1].Descriptor()
	// group.NameValidator is a validator for the "name" field. It is called by the builders before save.
	group.NameValidator = func() func(string) error {
		validators := groupDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// groupDescDescription is the schema descriptor for description field.
	groupDescDescription := groupMixinFields0[2].Descriptor()
	// group.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	group.DescriptionValidator = groupDescDescription.Validators[0].(func(string) error)
	// groupDescCreatedAt is the schema descriptor for created_at field.
	groupDescCreatedAt := groupMixinFields0[3].Descriptor()
	// group.DefaultCreatedAt holds the default value on creation for the created_at field.
	group.DefaultCreatedAt = groupDescCreatedAt.Default.(func() time.Time)
	// groupDescUpdatedAt is the schema descriptor for updated_at field.
	groupDescUpdatedAt := groupMixinFields0[5].Descriptor()
	// group.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	group.DefaultUpdatedAt = groupDescUpdatedAt.Default.(func() time.Time)
	// group.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	group.UpdateDefaultUpdatedAt = groupDescUpdatedAt.UpdateDefault.(func() time.Time)
	// groupDescID is the schema descriptor for id field.
	groupDescID := groupMixinFields0[0].Descriptor()
	// group.IDValidator is a validator for the "id" field. It is called by the builders before save.
	group.IDValidator = groupDescID.Validators[0].(func(string) error)
	hierarchylevelMixin := schema.HierarchyLevel{}.Mixin()
	hierarchylevelMixinFields0 := hierarchylevelMixin[0].Fields()
	_ = hierarchylevelMixinFields0
	hierarchylevelFields := schema.HierarchyLevel{}.Fields()
	_ = hierarchylevelFields
	// hierarchylevelDescOrgID is the schema descriptor for org_id field.
	hierarchylevelDescOrgID := hierarchylevelMixinFields0[1].Descriptor()
	// hierarchylevel.OrgIDValidator is a validator for the "org_id" field. It is called by the builders before save.
	hierarchylevel.OrgIDValidator = hierarchylevelDescOrgID.Validators[0].(func(string) error)
	// hierarchylevelDescName is the schema descriptor for name field.
	hierarchylevelDescName := hierarchylevelMixinFields0[2].Descriptor()
	// hierarchylevel.NameValidator is a validator for the "name" field. It is called by the builders before save.
	hierarchylevel.NameValidator = hierarchylevelDescName.Validators[0].(func(string) error)
	// hierarchylevelDescID is the schema descriptor for id field.
	hierarchylevelDescID := hierarchylevelMixinFields0[0].Descriptor()
	// hierarchylevel.IDValidator is a validator for the "id" field. It is called by the builders before save.
	hierarchylevel.IDValidator = hierarchylevelDescID.Validators[0].(func(string) error)
	organizationMixin := schema.Organization{}.Mixin()
	organizationMixinFields0 := organizationMixin[0].Fields()
	_ = organizationMixinFields0
	organizationFields := schema.Organization{}.Fields()
	_ = organizationFields
	// organizationDescCreatedAt is the schema descriptor for created_at field.
	organizationDescCreatedAt := organizationMixinFields0[1].Descriptor()
	// organization.DefaultCreatedAt holds the default value on creation for the created_at field.
	organization.DefaultCreatedAt = organizationDescCreatedAt.Default.(func() time.Time)
	// organizationDescCreatedBy is the schema descriptor for created_by field.
	organizationDescCreatedBy := organizationMixinFields0[2].Descriptor()
	// organization.CreatedByValidator is a validator for the "created_by" field. It is called by the builders before save.
	organization.CreatedByValidator = organizationDescCreatedBy.Validators[0].(func(string) error)
	// organizationDescDisplayName is the schema descriptor for display_name field.
	organizationDescDisplayName := organizationMixinFields0[3].Descriptor()
	// organization.DisplayNameValidator is a validator for the "display_name" field. It is called by the builders before save.
	organization.DisplayNameValidator = func() func(string) error {
		validators := organizationDescDisplayName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(display_name string) error {
			for _, fn := range fns {
				if err := fn(display_name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// organizationDescEtag is the schema descriptor for etag field.
	organizationDescEtag := organizationMixinFields0[4].Descriptor()
	// organization.EtagValidator is a validator for the "etag" field. It is called by the builders before save.
	organization.EtagValidator = organizationDescEtag.Validators[0].(func(string) error)
	// organizationDescSlug is the schema descriptor for slug field.
	organizationDescSlug := organizationMixinFields0[6].Descriptor()
	// organization.SlugValidator is a validator for the "slug" field. It is called by the builders before save.
	organization.SlugValidator = func() func(string) error {
		validators := organizationDescSlug.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(slug string) error {
			for _, fn := range fns {
				if err := fn(slug); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// organizationDescUpdatedAt is the schema descriptor for updated_at field.
	organizationDescUpdatedAt := organizationMixinFields0[7].Descriptor()
	// organization.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	organization.DefaultUpdatedAt = organizationDescUpdatedAt.Default.(func() time.Time)
	// organization.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	organization.UpdateDefaultUpdatedAt = organizationDescUpdatedAt.UpdateDefault.(func() time.Time)
	// organizationDescID is the schema descriptor for id field.
	organizationDescID := organizationMixinFields0[0].Descriptor()
	// organization.IDValidator is a validator for the "id" field. It is called by the builders before save.
	organization.IDValidator = organizationDescID.Validators[0].(func(string) error)
	userMixin := schema.User{}.Mixin()
	userMixinFields0 := userMixin[0].Fields()
	_ = userMixinFields0
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescAvatarURL is the schema descriptor for avatar_url field.
	userDescAvatarURL := userMixinFields0[1].Descriptor()
	// user.AvatarURLValidator is a validator for the "avatar_url" field. It is called by the builders before save.
	user.AvatarURLValidator = userDescAvatarURL.Validators[0].(func(string) error)
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userMixinFields0[2].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescCreatedBy is the schema descriptor for created_by field.
	userDescCreatedBy := userMixinFields0[3].Descriptor()
	// user.CreatedByValidator is a validator for the "created_by" field. It is called by the builders before save.
	user.CreatedByValidator = func() func(string) error {
		validators := userDescCreatedBy.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(created_by string) error {
			for _, fn := range fns {
				if err := fn(created_by); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescDisplayName is the schema descriptor for display_name field.
	userDescDisplayName := userMixinFields0[4].Descriptor()
	// user.DisplayNameValidator is a validator for the "display_name" field. It is called by the builders before save.
	user.DisplayNameValidator = func() func(string) error {
		validators := userDescDisplayName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(display_name string) error {
			for _, fn := range fns {
				if err := fn(display_name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userMixinFields0[5].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = func() func(string) error {
		validators := userDescEmail.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(email string) error {
			for _, fn := range fns {
				if err := fn(email); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescEtag is the schema descriptor for etag field.
	userDescEtag := userMixinFields0[6].Descriptor()
	// user.EtagValidator is a validator for the "etag" field. It is called by the builders before save.
	user.EtagValidator = userDescEtag.Validators[0].(func(string) error)
	// userDescFailedLoginAttempts is the schema descriptor for failed_login_attempts field.
	userDescFailedLoginAttempts := userMixinFields0[7].Descriptor()
	// user.DefaultFailedLoginAttempts holds the default value on creation for the failed_login_attempts field.
	user.DefaultFailedLoginAttempts = userDescFailedLoginAttempts.Default.(int)
	// userDescMustChangePassword is the schema descriptor for must_change_password field.
	userDescMustChangePassword := userMixinFields0[10].Descriptor()
	// user.DefaultMustChangePassword holds the default value on creation for the must_change_password field.
	user.DefaultMustChangePassword = userDescMustChangePassword.Default.(bool)
	// userDescPasswordHash is the schema descriptor for password_hash field.
	userDescPasswordHash := userMixinFields0[11].Descriptor()
	// user.PasswordHashValidator is a validator for the "password_hash" field. It is called by the builders before save.
	user.PasswordHashValidator = userDescPasswordHash.Validators[0].(func(string) error)
	// userDescUpdatedAt is the schema descriptor for updated_at field.
	userDescUpdatedAt := userMixinFields0[14].Descriptor()
	// user.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	user.DefaultUpdatedAt = userDescUpdatedAt.Default.(func() time.Time)
	// user.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	user.UpdateDefaultUpdatedAt = userDescUpdatedAt.UpdateDefault.(func() time.Time)
	// userDescID is the schema descriptor for id field.
	userDescID := userMixinFields0[0].Descriptor()
	// user.IDValidator is a validator for the "id" field. It is called by the builders before save.
	user.IDValidator = userDescID.Validators[0].(func(string) error)
	usergroupMixin := schema.UserGroup{}.Mixin()
	usergroupMixinFields0 := usergroupMixin[0].Fields()
	_ = usergroupMixinFields0
	usergroupFields := schema.UserGroup{}.Fields()
	_ = usergroupFields
	// usergroupDescUserID is the schema descriptor for user_id field.
	usergroupDescUserID := usergroupMixinFields0[0].Descriptor()
	// usergroup.UserIDValidator is a validator for the "user_id" field. It is called by the builders before save.
	usergroup.UserIDValidator = usergroupDescUserID.Validators[0].(func(string) error)
	// usergroupDescGroupID is the schema descriptor for group_id field.
	usergroupDescGroupID := usergroupMixinFields0[1].Descriptor()
	// usergroup.GroupIDValidator is a validator for the "group_id" field. It is called by the builders before save.
	usergroup.GroupIDValidator = usergroupDescGroupID.Validators[0].(func(string) error)
	userorgMixin := schema.UserOrg{}.Mixin()
	userorgMixinFields0 := userorgMixin[0].Fields()
	_ = userorgMixinFields0
	userorgFields := schema.UserOrg{}.Fields()
	_ = userorgFields
	// userorgDescUserID is the schema descriptor for user_id field.
	userorgDescUserID := userorgMixinFields0[0].Descriptor()
	// userorg.UserIDValidator is a validator for the "user_id" field. It is called by the builders before save.
	userorg.UserIDValidator = userorgDescUserID.Validators[0].(func(string) error)
	// userorgDescOrgID is the schema descriptor for org_id field.
	userorgDescOrgID := userorgMixinFields0[1].Descriptor()
	// userorg.OrgIDValidator is a validator for the "org_id" field. It is called by the builders before save.
	userorg.OrgIDValidator = userorgDescOrgID.Validators[0].(func(string) error)
}
