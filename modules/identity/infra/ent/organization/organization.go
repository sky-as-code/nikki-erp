// Code generated by ent, DO NOT EDIT.

package organization

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the organization type in the database.
	Label = "organization"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldDisplayName holds the string denoting the display_name field in the database.
	FieldDisplayName = "display_name"
	// FieldLegalName holds the string denoting the legal_name field in the database.
	FieldLegalName = "legal_name"
	// FieldPhoneNumber holds the string denoting the phone_number field in the database.
	FieldPhoneNumber = "phone_number"
	// FieldEtag holds the string denoting the etag field in the database.
	FieldEtag = "etag"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldSlug holds the string denoting the slug field in the database.
	FieldSlug = "slug"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeUsers holds the string denoting the users edge name in mutations.
	EdgeUsers = "users"
	// EdgeHierarchies holds the string denoting the hierarchies edge name in mutations.
	EdgeHierarchies = "hierarchies"
	// EdgeGroups holds the string denoting the groups edge name in mutations.
	EdgeGroups = "groups"
	// EdgeUserOrgs holds the string denoting the user_orgs edge name in mutations.
	EdgeUserOrgs = "user_orgs"
	// Table holds the table name of the organization in the database.
	Table = "ident_organizations"
	// UsersTable is the table that holds the users relation/edge. The primary key declared below.
	UsersTable = "ident_user_org_rel"
	// UsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UsersInverseTable = "ident_users"
	// HierarchiesTable is the table that holds the hierarchies relation/edge.
	HierarchiesTable = "ident_hierarchy_levels"
	// HierarchiesInverseTable is the table name for the HierarchyLevel entity.
	// It exists in this package in order to avoid circular dependency with the "hierarchylevel" package.
	HierarchiesInverseTable = "ident_hierarchy_levels"
	// HierarchiesColumn is the table column denoting the hierarchies relation/edge.
	HierarchiesColumn = "org_id"
	// GroupsTable is the table that holds the groups relation/edge.
	GroupsTable = "ident_groups"
	// GroupsInverseTable is the table name for the Group entity.
	// It exists in this package in order to avoid circular dependency with the "group" package.
	GroupsInverseTable = "ident_groups"
	// GroupsColumn is the table column denoting the groups relation/edge.
	GroupsColumn = "org_id"
	// UserOrgsTable is the table that holds the user_orgs relation/edge.
	UserOrgsTable = "ident_user_org_rel"
	// UserOrgsInverseTable is the table name for the UserOrg entity.
	// It exists in this package in order to avoid circular dependency with the "userorg" package.
	UserOrgsInverseTable = "ident_user_org_rel"
	// UserOrgsColumn is the table column denoting the user_orgs relation/edge.
	UserOrgsColumn = "org_id"
)

// Columns holds all SQL columns for organization fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldDeletedAt,
	FieldAddress,
	FieldDisplayName,
	FieldLegalName,
	FieldPhoneNumber,
	FieldEtag,
	FieldStatus,
	FieldSlug,
	FieldUpdatedAt,
}

var (
	// UsersPrimaryKey and UsersColumn2 are the table columns denoting the
	// primary key for the users relation (M2M).
	UsersPrimaryKey = []string{"user_id", "org_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the Organization queries.
type OrderOption = func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByAddress orders the results by the address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByDisplayName orders the results by the display_name field.
func ByDisplayName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayName, opts...).ToFunc()
}

// ByLegalName orders the results by the legal_name field.
func ByLegalName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLegalName, opts...).ToFunc()
}

// ByPhoneNumber orders the results by the phone_number field.
func ByPhoneNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhoneNumber, opts...).ToFunc()
}

// ByEtag orders the results by the etag field.
func ByEtag(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEtag, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// BySlug orders the results by the slug field.
func BySlug(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSlug, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUsersCount orders the results by users count.
func ByUsersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUsersStep(), opts...)
	}
}

// ByUsers orders the results by users terms.
func ByUsers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUsersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByHierarchiesCount orders the results by hierarchies count.
func ByHierarchiesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newHierarchiesStep(), opts...)
	}
}

// ByHierarchies orders the results by hierarchies terms.
func ByHierarchies(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHierarchiesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByGroupsCount orders the results by groups count.
func ByGroupsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGroupsStep(), opts...)
	}
}

// ByGroups orders the results by groups terms.
func ByGroups(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGroupsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserOrgsCount orders the results by user_orgs count.
func ByUserOrgsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserOrgsStep(), opts...)
	}
}

// ByUserOrgs orders the results by user_orgs terms.
func ByUserOrgs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserOrgsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// Added by NikkieERP scripts/ent_templates/dialect/sql/meta.tmpl
func NewUsersStepNikki() *sqlgraph.Step {
	return newUsersStep()
}

func newUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UsersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, UsersTable, UsersPrimaryKey...),
	)
}

// Added by NikkieERP scripts/ent_templates/dialect/sql/meta.tmpl
func NewHierarchiesStepNikki() *sqlgraph.Step {
	return newHierarchiesStep()
}

func newHierarchiesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HierarchiesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, HierarchiesTable, HierarchiesColumn),
	)
}

// Added by NikkieERP scripts/ent_templates/dialect/sql/meta.tmpl
func NewGroupsStepNikki() *sqlgraph.Step {
	return newGroupsStep()
}

func newGroupsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GroupsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, GroupsTable, GroupsColumn),
	)
}

// Added by NikkieERP scripts/ent_templates/dialect/sql/meta.tmpl
func NewUserOrgsStepNikki() *sqlgraph.Step {
	return newUserOrgsStep()
}

func newUserOrgsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserOrgsInverseTable, UserOrgsColumn),
		sqlgraph.Edge(sqlgraph.O2M, true, UserOrgsTable, UserOrgsColumn),
	)
}
