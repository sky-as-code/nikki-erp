// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky-as-code/nikki-erp/modules/identity/infra/ent/identstatusenum"
	"github.com/sky-as-code/nikki-erp/modules/identity/infra/ent/organization"
	"github.com/sky-as-code/nikki-erp/modules/identity/infra/ent/predicate"
	"github.com/sky-as-code/nikki-erp/modules/identity/infra/ent/user"
)

// IdentStatusEnumQuery is the builder for querying IdentStatusEnum entities.
type IdentStatusEnumQuery struct {
	config
	ctx        *QueryContext
	order      []identstatusenum.OrderOption
	inters     []Interceptor
	predicates []predicate.IdentStatusEnum
	withOrgs   *OrganizationQuery
	withUsers  *UserQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the IdentStatusEnumQuery builder.
func (iseq *IdentStatusEnumQuery) Where(ps ...predicate.IdentStatusEnum) *IdentStatusEnumQuery {
	iseq.predicates = append(iseq.predicates, ps...)
	return iseq
}

// Limit the number of records to be returned by this query.
func (iseq *IdentStatusEnumQuery) Limit(limit int) *IdentStatusEnumQuery {
	iseq.ctx.Limit = &limit
	return iseq
}

// Offset to start from.
func (iseq *IdentStatusEnumQuery) Offset(offset int) *IdentStatusEnumQuery {
	iseq.ctx.Offset = &offset
	return iseq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (iseq *IdentStatusEnumQuery) Unique(unique bool) *IdentStatusEnumQuery {
	iseq.ctx.Unique = &unique
	return iseq
}

// Order specifies how the records should be ordered.
func (iseq *IdentStatusEnumQuery) Order(o ...identstatusenum.OrderOption) *IdentStatusEnumQuery {
	iseq.order = append(iseq.order, o...)
	return iseq
}

// QueryOrgs chains the current query on the "orgs" edge.
func (iseq *IdentStatusEnumQuery) QueryOrgs() *OrganizationQuery {
	query := (&OrganizationClient{config: iseq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iseq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iseq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(identstatusenum.Table, identstatusenum.FieldID, selector),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, identstatusenum.OrgsTable, identstatusenum.OrgsColumn),
		)
		fromU = sqlgraph.SetNeighbors(iseq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUsers chains the current query on the "users" edge.
func (iseq *IdentStatusEnumQuery) QueryUsers() *UserQuery {
	query := (&UserClient{config: iseq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := iseq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := iseq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(identstatusenum.Table, identstatusenum.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, identstatusenum.UsersTable, identstatusenum.UsersColumn),
		)
		fromU = sqlgraph.SetNeighbors(iseq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first IdentStatusEnum entity from the query.
// Returns a *NotFoundError when no IdentStatusEnum was found.
func (iseq *IdentStatusEnumQuery) First(ctx context.Context) (*IdentStatusEnum, error) {
	nodes, err := iseq.Limit(1).All(setContextOp(ctx, iseq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{identstatusenum.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (iseq *IdentStatusEnumQuery) FirstX(ctx context.Context) *IdentStatusEnum {
	node, err := iseq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first IdentStatusEnum ID from the query.
// Returns a *NotFoundError when no IdentStatusEnum ID was found.
func (iseq *IdentStatusEnumQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = iseq.Limit(1).IDs(setContextOp(ctx, iseq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{identstatusenum.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (iseq *IdentStatusEnumQuery) FirstIDX(ctx context.Context) string {
	id, err := iseq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single IdentStatusEnum entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one IdentStatusEnum entity is found.
// Returns a *NotFoundError when no IdentStatusEnum entities are found.
func (iseq *IdentStatusEnumQuery) Only(ctx context.Context) (*IdentStatusEnum, error) {
	nodes, err := iseq.Limit(2).All(setContextOp(ctx, iseq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{identstatusenum.Label}
	default:
		return nil, &NotSingularError{identstatusenum.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (iseq *IdentStatusEnumQuery) OnlyX(ctx context.Context) *IdentStatusEnum {
	node, err := iseq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only IdentStatusEnum ID in the query.
// Returns a *NotSingularError when more than one IdentStatusEnum ID is found.
// Returns a *NotFoundError when no entities are found.
func (iseq *IdentStatusEnumQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = iseq.Limit(2).IDs(setContextOp(ctx, iseq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{identstatusenum.Label}
	default:
		err = &NotSingularError{identstatusenum.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (iseq *IdentStatusEnumQuery) OnlyIDX(ctx context.Context) string {
	id, err := iseq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of IdentStatusEnums.
func (iseq *IdentStatusEnumQuery) All(ctx context.Context) ([]*IdentStatusEnum, error) {
	ctx = setContextOp(ctx, iseq.ctx, ent.OpQueryAll)
	if err := iseq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*IdentStatusEnum, *IdentStatusEnumQuery]()
	return withInterceptors[[]*IdentStatusEnum](ctx, iseq, qr, iseq.inters)
}

// AllX is like All, but panics if an error occurs.
func (iseq *IdentStatusEnumQuery) AllX(ctx context.Context) []*IdentStatusEnum {
	nodes, err := iseq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of IdentStatusEnum IDs.
func (iseq *IdentStatusEnumQuery) IDs(ctx context.Context) (ids []string, err error) {
	if iseq.ctx.Unique == nil && iseq.path != nil {
		iseq.Unique(true)
	}
	ctx = setContextOp(ctx, iseq.ctx, ent.OpQueryIDs)
	if err = iseq.Select(identstatusenum.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (iseq *IdentStatusEnumQuery) IDsX(ctx context.Context) []string {
	ids, err := iseq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (iseq *IdentStatusEnumQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, iseq.ctx, ent.OpQueryCount)
	if err := iseq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, iseq, querierCount[*IdentStatusEnumQuery](), iseq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (iseq *IdentStatusEnumQuery) CountX(ctx context.Context) int {
	count, err := iseq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (iseq *IdentStatusEnumQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, iseq.ctx, ent.OpQueryExist)
	switch _, err := iseq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (iseq *IdentStatusEnumQuery) ExistX(ctx context.Context) bool {
	exist, err := iseq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the IdentStatusEnumQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (iseq *IdentStatusEnumQuery) Clone() *IdentStatusEnumQuery {
	if iseq == nil {
		return nil
	}
	return &IdentStatusEnumQuery{
		config:     iseq.config,
		ctx:        iseq.ctx.Clone(),
		order:      append([]identstatusenum.OrderOption{}, iseq.order...),
		inters:     append([]Interceptor{}, iseq.inters...),
		predicates: append([]predicate.IdentStatusEnum{}, iseq.predicates...),
		withOrgs:   iseq.withOrgs.Clone(),
		withUsers:  iseq.withUsers.Clone(),
		// clone intermediate query.
		sql:  iseq.sql.Clone(),
		path: iseq.path,
	}
}

// WithOrgs tells the query-builder to eager-load the nodes that are connected to
// the "orgs" edge. The optional arguments are used to configure the query builder of the edge.
func (iseq *IdentStatusEnumQuery) WithOrgs(opts ...func(*OrganizationQuery)) *IdentStatusEnumQuery {
	query := (&OrganizationClient{config: iseq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	iseq.withOrgs = query
	return iseq
}

// WithUsers tells the query-builder to eager-load the nodes that are connected to
// the "users" edge. The optional arguments are used to configure the query builder of the edge.
func (iseq *IdentStatusEnumQuery) WithUsers(opts ...func(*UserQuery)) *IdentStatusEnumQuery {
	query := (&UserClient{config: iseq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	iseq.withUsers = query
	return iseq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Etag string `json:"etag,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.IdentStatusEnum.Query().
//		GroupBy(identstatusenum.FieldEtag).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (iseq *IdentStatusEnumQuery) GroupBy(field string, fields ...string) *IdentStatusEnumGroupBy {
	iseq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &IdentStatusEnumGroupBy{build: iseq}
	grbuild.flds = &iseq.ctx.Fields
	grbuild.label = identstatusenum.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Etag string `json:"etag,omitempty"`
//	}
//
//	client.IdentStatusEnum.Query().
//		Select(identstatusenum.FieldEtag).
//		Scan(ctx, &v)
func (iseq *IdentStatusEnumQuery) Select(fields ...string) *IdentStatusEnumSelect {
	iseq.ctx.Fields = append(iseq.ctx.Fields, fields...)
	sbuild := &IdentStatusEnumSelect{IdentStatusEnumQuery: iseq}
	sbuild.label = identstatusenum.Label
	sbuild.flds, sbuild.scan = &iseq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a IdentStatusEnumSelect configured with the given aggregations.
func (iseq *IdentStatusEnumQuery) Aggregate(fns ...AggregateFunc) *IdentStatusEnumSelect {
	return iseq.Select().Aggregate(fns...)
}

func (iseq *IdentStatusEnumQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range iseq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, iseq); err != nil {
				return err
			}
		}
	}
	for _, f := range iseq.ctx.Fields {
		if !identstatusenum.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if iseq.path != nil {
		prev, err := iseq.path(ctx)
		if err != nil {
			return err
		}
		iseq.sql = prev
	}
	return nil
}

func (iseq *IdentStatusEnumQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*IdentStatusEnum, error) {
	var (
		nodes       = []*IdentStatusEnum{}
		_spec       = iseq.querySpec()
		loadedTypes = [2]bool{
			iseq.withOrgs != nil,
			iseq.withUsers != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*IdentStatusEnum).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &IdentStatusEnum{config: iseq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, iseq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := iseq.withOrgs; query != nil {
		if err := iseq.loadOrgs(ctx, query, nodes,
			func(n *IdentStatusEnum) { n.Edges.Orgs = []*Organization{} },
			func(n *IdentStatusEnum, e *Organization) { n.Edges.Orgs = append(n.Edges.Orgs, e) }); err != nil {
			return nil, err
		}
	}
	if query := iseq.withUsers; query != nil {
		if err := iseq.loadUsers(ctx, query, nodes,
			func(n *IdentStatusEnum) { n.Edges.Users = []*User{} },
			func(n *IdentStatusEnum, e *User) { n.Edges.Users = append(n.Edges.Users, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (iseq *IdentStatusEnumQuery) loadOrgs(ctx context.Context, query *OrganizationQuery, nodes []*IdentStatusEnum, init func(*IdentStatusEnum), assign func(*IdentStatusEnum, *Organization)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*IdentStatusEnum)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(organization.FieldStatusID)
	}
	query.Where(predicate.Organization(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(identstatusenum.OrgsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.StatusID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "status_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (iseq *IdentStatusEnumQuery) loadUsers(ctx context.Context, query *UserQuery, nodes []*IdentStatusEnum, init func(*IdentStatusEnum), assign func(*IdentStatusEnum, *User)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*IdentStatusEnum)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(user.FieldStatusID)
	}
	query.Where(predicate.User(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(identstatusenum.UsersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.StatusID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "status_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (iseq *IdentStatusEnumQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := iseq.querySpec()
	_spec.Node.Columns = iseq.ctx.Fields
	if len(iseq.ctx.Fields) > 0 {
		_spec.Unique = iseq.ctx.Unique != nil && *iseq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, iseq.driver, _spec)
}

func (iseq *IdentStatusEnumQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(identstatusenum.Table, identstatusenum.Columns, sqlgraph.NewFieldSpec(identstatusenum.FieldID, field.TypeString))
	_spec.From = iseq.sql
	if unique := iseq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if iseq.path != nil {
		_spec.Unique = true
	}
	if fields := iseq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, identstatusenum.FieldID)
		for i := range fields {
			if fields[i] != identstatusenum.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := iseq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := iseq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := iseq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := iseq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (iseq *IdentStatusEnumQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(iseq.driver.Dialect())
	t1 := builder.Table(identstatusenum.Table)
	columns := iseq.ctx.Fields
	if len(columns) == 0 {
		columns = identstatusenum.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if iseq.sql != nil {
		selector = iseq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if iseq.ctx.Unique != nil && *iseq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range iseq.predicates {
		p(selector)
	}
	for _, p := range iseq.order {
		p(selector)
	}
	if offset := iseq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := iseq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// IdentStatusEnumGroupBy is the group-by builder for IdentStatusEnum entities.
type IdentStatusEnumGroupBy struct {
	selector
	build *IdentStatusEnumQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (isegb *IdentStatusEnumGroupBy) Aggregate(fns ...AggregateFunc) *IdentStatusEnumGroupBy {
	isegb.fns = append(isegb.fns, fns...)
	return isegb
}

// Scan applies the selector query and scans the result into the given value.
func (isegb *IdentStatusEnumGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, isegb.build.ctx, ent.OpQueryGroupBy)
	if err := isegb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*IdentStatusEnumQuery, *IdentStatusEnumGroupBy](ctx, isegb.build, isegb, isegb.build.inters, v)
}

func (isegb *IdentStatusEnumGroupBy) sqlScan(ctx context.Context, root *IdentStatusEnumQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(isegb.fns))
	for _, fn := range isegb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*isegb.flds)+len(isegb.fns))
		for _, f := range *isegb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*isegb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := isegb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// IdentStatusEnumSelect is the builder for selecting fields of IdentStatusEnum entities.
type IdentStatusEnumSelect struct {
	*IdentStatusEnumQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ises *IdentStatusEnumSelect) Aggregate(fns ...AggregateFunc) *IdentStatusEnumSelect {
	ises.fns = append(ises.fns, fns...)
	return ises
}

// Scan applies the selector query and scans the result into the given value.
func (ises *IdentStatusEnumSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ises.ctx, ent.OpQuerySelect)
	if err := ises.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*IdentStatusEnumQuery, *IdentStatusEnumSelect](ctx, ises.IdentStatusEnumQuery, ises, ises.inters, v)
}

func (ises *IdentStatusEnumSelect) sqlScan(ctx context.Context, root *IdentStatusEnumQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ises.fns))
	for _, fn := range ises.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ises.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ises.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
