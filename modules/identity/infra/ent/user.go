// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/sky-as-code/nikki-erp/modules/identity/infra/ent/hierarchylevel"
	"github.com/sky-as-code/nikki-erp/modules/identity/infra/ent/user"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// URL to user's profile picture
	AvatarURL *string `json:"avatar_url,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// DisplayName holds the value of the "display_name" field.
	DisplayName string `json:"display_name,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"-"`
	// Etag holds the value of the "etag" field.
	Etag string `json:"etag,omitempty"`
	// HierarchyID holds the value of the "hierarchy_id" field.
	HierarchyID *string `json:"hierarchy_id,omitempty"`
	// Whether the user is an owner with root privileges in this deployment
	IsOwner bool `json:"is_owner,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges        UserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Groups holds the value of the groups edge.
	Groups []*Group `json:"groups,omitempty"`
	// Hierarchy holds the value of the hierarchy edge.
	Hierarchy *HierarchyLevel `json:"hierarchy,omitempty"`
	// Orgs holds the value of the orgs edge.
	Orgs []*Organization `json:"orgs,omitempty"`
	// UserGroups holds the value of the user_groups edge.
	UserGroups []*UserGroup `json:"user_groups,omitempty"`
	// UserOrgs holds the value of the user_orgs edge.
	UserOrgs []*UserOrg `json:"user_orgs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// GroupsOrErr returns the Groups value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) GroupsOrErr() ([]*Group, error) {
	if e.loadedTypes[0] {
		return e.Groups, nil
	}
	return nil, &NotLoadedError{edge: "groups"}
}

// HierarchyOrErr returns the Hierarchy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) HierarchyOrErr() (*HierarchyLevel, error) {
	if e.Hierarchy != nil {
		return e.Hierarchy, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: hierarchylevel.Label}
	}
	return nil, &NotLoadedError{edge: "hierarchy"}
}

// OrgsOrErr returns the Orgs value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) OrgsOrErr() ([]*Organization, error) {
	if e.loadedTypes[2] {
		return e.Orgs, nil
	}
	return nil, &NotLoadedError{edge: "orgs"}
}

// UserGroupsOrErr returns the UserGroups value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserGroupsOrErr() ([]*UserGroup, error) {
	if e.loadedTypes[3] {
		return e.UserGroups, nil
	}
	return nil, &NotLoadedError{edge: "user_groups"}
}

// UserOrgsOrErr returns the UserOrgs value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserOrgsOrErr() ([]*UserOrg, error) {
	if e.loadedTypes[4] {
		return e.UserOrgs, nil
	}
	return nil, &NotLoadedError{edge: "user_orgs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldIsOwner:
			values[i] = new(sql.NullBool)
		case user.FieldID, user.FieldAvatarURL, user.FieldDisplayName, user.FieldEmail, user.FieldEtag, user.FieldHierarchyID, user.FieldStatus:
			values[i] = new(sql.NullString)
		case user.FieldCreatedAt, user.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				u.ID = value.String
			}
		case user.FieldAvatarURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar_url", values[i])
			} else if value.Valid {
				u.AvatarURL = new(string)
				*u.AvatarURL = value.String
			}
		case user.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				u.CreatedAt = value.Time
			}
		case user.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				u.DisplayName = value.String
			}
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				u.Email = value.String
			}
		case user.FieldEtag:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field etag", values[i])
			} else if value.Valid {
				u.Etag = value.String
			}
		case user.FieldHierarchyID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hierarchy_id", values[i])
			} else if value.Valid {
				u.HierarchyID = new(string)
				*u.HierarchyID = value.String
			}
		case user.FieldIsOwner:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_owner", values[i])
			} else if value.Valid {
				u.IsOwner = value.Bool
			}
		case user.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				u.Status = value.String
			}
		case user.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				u.UpdatedAt = new(time.Time)
				*u.UpdatedAt = value.Time
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (u *User) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// QueryGroups queries the "groups" edge of the User entity.
func (u *User) QueryGroups() *GroupQuery {
	return NewUserClient(u.config).QueryGroups(u)
}

// QueryHierarchy queries the "hierarchy" edge of the User entity.
func (u *User) QueryHierarchy() *HierarchyLevelQuery {
	return NewUserClient(u.config).QueryHierarchy(u)
}

// QueryOrgs queries the "orgs" edge of the User entity.
func (u *User) QueryOrgs() *OrganizationQuery {
	return NewUserClient(u.config).QueryOrgs(u)
}

// QueryUserGroups queries the "user_groups" edge of the User entity.
func (u *User) QueryUserGroups() *UserGroupQuery {
	return NewUserClient(u.config).QueryUserGroups(u)
}

// QueryUserOrgs queries the "user_orgs" edge of the User entity.
func (u *User) QueryUserOrgs() *UserOrgQuery {
	return NewUserClient(u.config).QueryUserOrgs(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	if v := u.AvatarURL; v != nil {
		builder.WriteString("avatar_url=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(u.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("display_name=")
	builder.WriteString(u.DisplayName)
	builder.WriteString(", ")
	builder.WriteString("email=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("etag=")
	builder.WriteString(u.Etag)
	builder.WriteString(", ")
	if v := u.HierarchyID; v != nil {
		builder.WriteString("hierarchy_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("is_owner=")
	builder.WriteString(fmt.Sprintf("%v", u.IsOwner))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(u.Status)
	builder.WriteString(", ")
	if v := u.UpdatedAt; v != nil {
		builder.WriteString("updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User
