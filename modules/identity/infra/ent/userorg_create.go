// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky-as-code/nikki-erp/modules/identity/infra/ent/organization"
	"github.com/sky-as-code/nikki-erp/modules/identity/infra/ent/user"
	"github.com/sky-as-code/nikki-erp/modules/identity/infra/ent/userorg"
)

// UserOrgCreate is the builder for creating a UserOrg entity.
type UserOrgCreate struct {
	config
	mutation *UserOrgMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (uoc *UserOrgCreate) SetUserID(s string) *UserOrgCreate {
	uoc.mutation.SetUserID(s)
	return uoc
}

// SetOrgID sets the "org_id" field.
func (uoc *UserOrgCreate) SetOrgID(s string) *UserOrgCreate {
	uoc.mutation.SetOrgID(s)
	return uoc
}

// SetUser sets the "user" edge to the User entity.
func (uoc *UserOrgCreate) SetUser(u *User) *UserOrgCreate {
	return uoc.SetUserID(u.ID)
}

// SetOrg sets the "org" edge to the Organization entity.
func (uoc *UserOrgCreate) SetOrg(o *Organization) *UserOrgCreate {
	return uoc.SetOrgID(o.ID)
}

// Mutation returns the UserOrgMutation object of the builder.
func (uoc *UserOrgCreate) Mutation() *UserOrgMutation {
	return uoc.mutation
}

// Save creates the UserOrg in the database.
func (uoc *UserOrgCreate) Save(ctx context.Context) (*UserOrg, error) {
	return withHooks(ctx, uoc.sqlSave, uoc.mutation, uoc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uoc *UserOrgCreate) SaveX(ctx context.Context) *UserOrg {
	v, err := uoc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uoc *UserOrgCreate) Exec(ctx context.Context) error {
	_, err := uoc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uoc *UserOrgCreate) ExecX(ctx context.Context) {
	if err := uoc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uoc *UserOrgCreate) check() error {
	if _, ok := uoc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "UserOrg.user_id"`)}
	}
	if v, ok := uoc.mutation.UserID(); ok {
		if err := userorg.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "UserOrg.user_id": %w`, err)}
		}
	}
	if _, ok := uoc.mutation.OrgID(); !ok {
		return &ValidationError{Name: "org_id", err: errors.New(`ent: missing required field "UserOrg.org_id"`)}
	}
	if v, ok := uoc.mutation.OrgID(); ok {
		if err := userorg.OrgIDValidator(v); err != nil {
			return &ValidationError{Name: "org_id", err: fmt.Errorf(`ent: validator failed for field "UserOrg.org_id": %w`, err)}
		}
	}
	if len(uoc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "UserOrg.user"`)}
	}
	if len(uoc.mutation.OrgIDs()) == 0 {
		return &ValidationError{Name: "org", err: errors.New(`ent: missing required edge "UserOrg.org"`)}
	}
	return nil
}

func (uoc *UserOrgCreate) sqlSave(ctx context.Context) (*UserOrg, error) {
	if err := uoc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uoc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uoc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

func (uoc *UserOrgCreate) createSpec() (*UserOrg, *sqlgraph.CreateSpec) {
	var (
		_node = &UserOrg{config: uoc.config}
		_spec = sqlgraph.NewCreateSpec(userorg.Table, nil)
	)
	if nodes := uoc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userorg.UserTable,
			Columns: []string{userorg.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uoc.mutation.OrgIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userorg.OrgTable,
			Columns: []string{userorg.OrgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrgID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserOrgCreateBulk is the builder for creating many UserOrg entities in bulk.
type UserOrgCreateBulk struct {
	config
	err      error
	builders []*UserOrgCreate
}

// Save creates the UserOrg entities in the database.
func (uocb *UserOrgCreateBulk) Save(ctx context.Context) ([]*UserOrg, error) {
	if uocb.err != nil {
		return nil, uocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(uocb.builders))
	nodes := make([]*UserOrg, len(uocb.builders))
	mutators := make([]Mutator, len(uocb.builders))
	for i := range uocb.builders {
		func(i int, root context.Context) {
			builder := uocb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserOrgMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uocb *UserOrgCreateBulk) SaveX(ctx context.Context) []*UserOrg {
	v, err := uocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uocb *UserOrgCreateBulk) Exec(ctx context.Context) error {
	_, err := uocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uocb *UserOrgCreateBulk) ExecX(ctx context.Context) {
	if err := uocb.Exec(ctx); err != nil {
		panic(err)
	}
}
