// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky-as-code/nikki-erp/modules/identity/infra/ent/predicate"
	"github.com/sky-as-code/nikki-erp/modules/identity/infra/ent/user"
	"github.com/sky-as-code/nikki-erp/modules/identity/infra/ent/userstatusenum"
)

// UserStatusEnumUpdate is the builder for updating UserStatusEnum entities.
type UserStatusEnumUpdate struct {
	config
	hooks    []Hook
	mutation *UserStatusEnumMutation
}

// Where appends a list predicates to the UserStatusEnumUpdate builder.
func (useu *UserStatusEnumUpdate) Where(ps ...predicate.UserStatusEnum) *UserStatusEnumUpdate {
	useu.mutation.Where(ps...)
	return useu
}

// SetEtag sets the "etag" field.
func (useu *UserStatusEnumUpdate) SetEtag(s string) *UserStatusEnumUpdate {
	useu.mutation.SetEtag(s)
	return useu
}

// SetNillableEtag sets the "etag" field if the given value is not nil.
func (useu *UserStatusEnumUpdate) SetNillableEtag(s *string) *UserStatusEnumUpdate {
	if s != nil {
		useu.SetEtag(*s)
	}
	return useu
}

// SetLabel sets the "label" field.
func (useu *UserStatusEnumUpdate) SetLabel(m map[string]string) *UserStatusEnumUpdate {
	useu.mutation.SetLabel(m)
	return useu
}

// SetValue sets the "value" field.
func (useu *UserStatusEnumUpdate) SetValue(s string) *UserStatusEnumUpdate {
	useu.mutation.SetValue(s)
	return useu
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (useu *UserStatusEnumUpdate) SetNillableValue(s *string) *UserStatusEnumUpdate {
	if s != nil {
		useu.SetValue(*s)
	}
	return useu
}

// SetType sets the "type" field.
func (useu *UserStatusEnumUpdate) SetType(s string) *UserStatusEnumUpdate {
	useu.mutation.SetType(s)
	return useu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (useu *UserStatusEnumUpdate) SetNillableType(s *string) *UserStatusEnumUpdate {
	if s != nil {
		useu.SetType(*s)
	}
	return useu
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (useu *UserStatusEnumUpdate) AddUserIDs(ids ...string) *UserStatusEnumUpdate {
	useu.mutation.AddUserIDs(ids...)
	return useu
}

// AddUsers adds the "users" edges to the User entity.
func (useu *UserStatusEnumUpdate) AddUsers(u ...*User) *UserStatusEnumUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return useu.AddUserIDs(ids...)
}

// Mutation returns the UserStatusEnumMutation object of the builder.
func (useu *UserStatusEnumUpdate) Mutation() *UserStatusEnumMutation {
	return useu.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (useu *UserStatusEnumUpdate) ClearUsers() *UserStatusEnumUpdate {
	useu.mutation.ClearUsers()
	return useu
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (useu *UserStatusEnumUpdate) RemoveUserIDs(ids ...string) *UserStatusEnumUpdate {
	useu.mutation.RemoveUserIDs(ids...)
	return useu
}

// RemoveUsers removes "users" edges to User entities.
func (useu *UserStatusEnumUpdate) RemoveUsers(u ...*User) *UserStatusEnumUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return useu.RemoveUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (useu *UserStatusEnumUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, useu.sqlSave, useu.mutation, useu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (useu *UserStatusEnumUpdate) SaveX(ctx context.Context) int {
	affected, err := useu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (useu *UserStatusEnumUpdate) Exec(ctx context.Context) error {
	_, err := useu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (useu *UserStatusEnumUpdate) ExecX(ctx context.Context) {
	if err := useu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (useu *UserStatusEnumUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(userstatusenum.Table, userstatusenum.Columns, sqlgraph.NewFieldSpec(userstatusenum.FieldID, field.TypeString))
	if ps := useu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := useu.mutation.Etag(); ok {
		_spec.SetField(userstatusenum.FieldEtag, field.TypeString, value)
	}
	if value, ok := useu.mutation.Label(); ok {
		_spec.SetField(userstatusenum.FieldLabel, field.TypeJSON, value)
	}
	if value, ok := useu.mutation.Value(); ok {
		_spec.SetField(userstatusenum.FieldValue, field.TypeString, value)
	}
	if value, ok := useu.mutation.GetType(); ok {
		_spec.SetField(userstatusenum.FieldType, field.TypeString, value)
	}
	if useu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   userstatusenum.UsersTable,
			Columns: []string{userstatusenum.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := useu.mutation.RemovedUsersIDs(); len(nodes) > 0 && !useu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   userstatusenum.UsersTable,
			Columns: []string{userstatusenum.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := useu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   userstatusenum.UsersTable,
			Columns: []string{userstatusenum.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, useu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userstatusenum.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	useu.mutation.done = true
	return n, nil
}

// UserStatusEnumUpdateOne is the builder for updating a single UserStatusEnum entity.
type UserStatusEnumUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserStatusEnumMutation
}

// SetEtag sets the "etag" field.
func (useuo *UserStatusEnumUpdateOne) SetEtag(s string) *UserStatusEnumUpdateOne {
	useuo.mutation.SetEtag(s)
	return useuo
}

// SetNillableEtag sets the "etag" field if the given value is not nil.
func (useuo *UserStatusEnumUpdateOne) SetNillableEtag(s *string) *UserStatusEnumUpdateOne {
	if s != nil {
		useuo.SetEtag(*s)
	}
	return useuo
}

// SetLabel sets the "label" field.
func (useuo *UserStatusEnumUpdateOne) SetLabel(m map[string]string) *UserStatusEnumUpdateOne {
	useuo.mutation.SetLabel(m)
	return useuo
}

// SetValue sets the "value" field.
func (useuo *UserStatusEnumUpdateOne) SetValue(s string) *UserStatusEnumUpdateOne {
	useuo.mutation.SetValue(s)
	return useuo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (useuo *UserStatusEnumUpdateOne) SetNillableValue(s *string) *UserStatusEnumUpdateOne {
	if s != nil {
		useuo.SetValue(*s)
	}
	return useuo
}

// SetType sets the "type" field.
func (useuo *UserStatusEnumUpdateOne) SetType(s string) *UserStatusEnumUpdateOne {
	useuo.mutation.SetType(s)
	return useuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (useuo *UserStatusEnumUpdateOne) SetNillableType(s *string) *UserStatusEnumUpdateOne {
	if s != nil {
		useuo.SetType(*s)
	}
	return useuo
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (useuo *UserStatusEnumUpdateOne) AddUserIDs(ids ...string) *UserStatusEnumUpdateOne {
	useuo.mutation.AddUserIDs(ids...)
	return useuo
}

// AddUsers adds the "users" edges to the User entity.
func (useuo *UserStatusEnumUpdateOne) AddUsers(u ...*User) *UserStatusEnumUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return useuo.AddUserIDs(ids...)
}

// Mutation returns the UserStatusEnumMutation object of the builder.
func (useuo *UserStatusEnumUpdateOne) Mutation() *UserStatusEnumMutation {
	return useuo.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (useuo *UserStatusEnumUpdateOne) ClearUsers() *UserStatusEnumUpdateOne {
	useuo.mutation.ClearUsers()
	return useuo
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (useuo *UserStatusEnumUpdateOne) RemoveUserIDs(ids ...string) *UserStatusEnumUpdateOne {
	useuo.mutation.RemoveUserIDs(ids...)
	return useuo
}

// RemoveUsers removes "users" edges to User entities.
func (useuo *UserStatusEnumUpdateOne) RemoveUsers(u ...*User) *UserStatusEnumUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return useuo.RemoveUserIDs(ids...)
}

// Where appends a list predicates to the UserStatusEnumUpdate builder.
func (useuo *UserStatusEnumUpdateOne) Where(ps ...predicate.UserStatusEnum) *UserStatusEnumUpdateOne {
	useuo.mutation.Where(ps...)
	return useuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (useuo *UserStatusEnumUpdateOne) Select(field string, fields ...string) *UserStatusEnumUpdateOne {
	useuo.fields = append([]string{field}, fields...)
	return useuo
}

// Save executes the query and returns the updated UserStatusEnum entity.
func (useuo *UserStatusEnumUpdateOne) Save(ctx context.Context) (*UserStatusEnum, error) {
	return withHooks(ctx, useuo.sqlSave, useuo.mutation, useuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (useuo *UserStatusEnumUpdateOne) SaveX(ctx context.Context) *UserStatusEnum {
	node, err := useuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (useuo *UserStatusEnumUpdateOne) Exec(ctx context.Context) error {
	_, err := useuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (useuo *UserStatusEnumUpdateOne) ExecX(ctx context.Context) {
	if err := useuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (useuo *UserStatusEnumUpdateOne) sqlSave(ctx context.Context) (_node *UserStatusEnum, err error) {
	_spec := sqlgraph.NewUpdateSpec(userstatusenum.Table, userstatusenum.Columns, sqlgraph.NewFieldSpec(userstatusenum.FieldID, field.TypeString))
	id, ok := useuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserStatusEnum.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := useuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userstatusenum.FieldID)
		for _, f := range fields {
			if !userstatusenum.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userstatusenum.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := useuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := useuo.mutation.Etag(); ok {
		_spec.SetField(userstatusenum.FieldEtag, field.TypeString, value)
	}
	if value, ok := useuo.mutation.Label(); ok {
		_spec.SetField(userstatusenum.FieldLabel, field.TypeJSON, value)
	}
	if value, ok := useuo.mutation.Value(); ok {
		_spec.SetField(userstatusenum.FieldValue, field.TypeString, value)
	}
	if value, ok := useuo.mutation.GetType(); ok {
		_spec.SetField(userstatusenum.FieldType, field.TypeString, value)
	}
	if useuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   userstatusenum.UsersTable,
			Columns: []string{userstatusenum.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := useuo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !useuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   userstatusenum.UsersTable,
			Columns: []string{userstatusenum.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := useuo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   userstatusenum.UsersTable,
			Columns: []string{userstatusenum.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserStatusEnum{config: useuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, useuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userstatusenum.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	useuo.mutation.done = true
	return _node, nil
}
