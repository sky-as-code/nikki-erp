// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/sky-as-code/nikki-erp/modules/core/infra/ent/group"
	"github.com/sky-as-code/nikki-erp/modules/core/infra/ent/schema"
	"github.com/sky-as-code/nikki-erp/modules/core/infra/ent/user"
	"github.com/sky-as-code/nikki-erp/modules/core/infra/ent/usergroup"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	groupMixin := schema.Group{}.Mixin()
	groupMixinFields0 := groupMixin[0].Fields()
	_ = groupMixinFields0
	groupFields := schema.Group{}.Fields()
	_ = groupFields
	// groupDescName is the schema descriptor for name field.
	groupDescName := groupMixinFields0[1].Descriptor()
	// group.NameValidator is a validator for the "name" field. It is called by the builders before save.
	group.NameValidator = func() func(string) error {
		validators := groupDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// groupDescDescription is the schema descriptor for description field.
	groupDescDescription := groupMixinFields0[2].Descriptor()
	// group.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	group.DescriptionValidator = groupDescDescription.Validators[0].(func(string) error)
	// groupDescCreatedAt is the schema descriptor for created_at field.
	groupDescCreatedAt := groupMixinFields0[4].Descriptor()
	// group.DefaultCreatedAt holds the default value on creation for the created_at field.
	group.DefaultCreatedAt = groupDescCreatedAt.Default.(func() time.Time)
	// groupDescUpdatedAt is the schema descriptor for updated_at field.
	groupDescUpdatedAt := groupMixinFields0[5].Descriptor()
	// group.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	group.DefaultUpdatedAt = groupDescUpdatedAt.Default.(func() time.Time)
	// group.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	group.UpdateDefaultUpdatedAt = groupDescUpdatedAt.UpdateDefault.(func() time.Time)
	// groupDescID is the schema descriptor for id field.
	groupDescID := groupMixinFields0[0].Descriptor()
	// group.IDValidator is a validator for the "id" field. It is called by the builders before save.
	group.IDValidator = func() func(string) error {
		validators := groupDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	userMixin := schema.User{}.Mixin()
	userMixinFields0 := userMixin[0].Fields()
	_ = userMixinFields0
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescAvatarURL is the schema descriptor for avatar_url field.
	userDescAvatarURL := userMixinFields0[1].Descriptor()
	// user.AvatarURLValidator is a validator for the "avatar_url" field. It is called by the builders before save.
	user.AvatarURLValidator = userDescAvatarURL.Validators[0].(func(string) error)
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userMixinFields0[2].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescCreatedBy is the schema descriptor for created_by field.
	userDescCreatedBy := userMixinFields0[3].Descriptor()
	// user.CreatedByValidator is a validator for the "created_by" field. It is called by the builders before save.
	user.CreatedByValidator = userDescCreatedBy.Validators[0].(func(string) error)
	// userDescDisplayName is the schema descriptor for display_name field.
	userDescDisplayName := userMixinFields0[4].Descriptor()
	// user.DisplayNameValidator is a validator for the "display_name" field. It is called by the builders before save.
	user.DisplayNameValidator = func() func(string) error {
		validators := userDescDisplayName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(display_name string) error {
			for _, fn := range fns {
				if err := fn(display_name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userMixinFields0[5].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = func() func(string) error {
		validators := userDescEmail.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(email string) error {
			for _, fn := range fns {
				if err := fn(email); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescEtag is the schema descriptor for etag field.
	userDescEtag := userMixinFields0[6].Descriptor()
	// user.DefaultEtag holds the default value on creation for the etag field.
	user.DefaultEtag = userDescEtag.Default.(func() string)
	// user.EtagValidator is a validator for the "etag" field. It is called by the builders before save.
	user.EtagValidator = userDescEtag.Validators[0].(func(string) error)
	// userDescFailedLoginAttempts is the schema descriptor for failed_login_attempts field.
	userDescFailedLoginAttempts := userMixinFields0[7].Descriptor()
	// user.DefaultFailedLoginAttempts holds the default value on creation for the failed_login_attempts field.
	user.DefaultFailedLoginAttempts = userDescFailedLoginAttempts.Default.(int)
	// userDescMustChangePassword is the schema descriptor for must_change_password field.
	userDescMustChangePassword := userMixinFields0[10].Descriptor()
	// user.DefaultMustChangePassword holds the default value on creation for the must_change_password field.
	user.DefaultMustChangePassword = userDescMustChangePassword.Default.(bool)
	// userDescPasswordHash is the schema descriptor for password_hash field.
	userDescPasswordHash := userMixinFields0[11].Descriptor()
	// user.PasswordHashValidator is a validator for the "password_hash" field. It is called by the builders before save.
	user.PasswordHashValidator = func() func(string) error {
		validators := userDescPasswordHash.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(password_hash string) error {
			for _, fn := range fns {
				if err := fn(password_hash); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescPasswordChangedAt is the schema descriptor for password_changed_at field.
	userDescPasswordChangedAt := userMixinFields0[12].Descriptor()
	// user.DefaultPasswordChangedAt holds the default value on creation for the password_changed_at field.
	user.DefaultPasswordChangedAt = userDescPasswordChangedAt.Default.(func() time.Time)
	// userDescUpdatedAt is the schema descriptor for updated_at field.
	userDescUpdatedAt := userMixinFields0[14].Descriptor()
	// user.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	user.DefaultUpdatedAt = userDescUpdatedAt.Default.(func() time.Time)
	// user.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	user.UpdateDefaultUpdatedAt = userDescUpdatedAt.UpdateDefault.(func() time.Time)
	// userDescUsername is the schema descriptor for username field.
	userDescUsername := userMixinFields0[15].Descriptor()
	// user.UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	user.UsernameValidator = func() func(string) error {
		validators := userDescUsername.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(username string) error {
			for _, fn := range fns {
				if err := fn(username); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescID is the schema descriptor for id field.
	userDescID := userMixinFields0[0].Descriptor()
	// user.IDValidator is a validator for the "id" field. It is called by the builders before save.
	user.IDValidator = func() func(string) error {
		validators := userDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	usergroupMixin := schema.UserGroup{}.Mixin()
	usergroupMixinFields0 := usergroupMixin[0].Fields()
	_ = usergroupMixinFields0
	usergroupFields := schema.UserGroup{}.Fields()
	_ = usergroupFields
	// usergroupDescUserID is the schema descriptor for user_id field.
	usergroupDescUserID := usergroupMixinFields0[0].Descriptor()
	// usergroup.UserIDValidator is a validator for the "user_id" field. It is called by the builders before save.
	usergroup.UserIDValidator = func() func(string) error {
		validators := usergroupDescUserID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(user string) error {
			for _, fn := range fns {
				if err := fn(user); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// usergroupDescGroupID is the schema descriptor for group_id field.
	usergroupDescGroupID := usergroupMixinFields0[1].Descriptor()
	// usergroup.GroupIDValidator is a validator for the "group_id" field. It is called by the builders before save.
	usergroup.GroupIDValidator = func() func(string) error {
		validators := usergroupDescGroupID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(group string) error {
			for _, fn := range fns {
				if err := fn(group); err != nil {
					return err
				}
			}
			return nil
		}
	}()
}
