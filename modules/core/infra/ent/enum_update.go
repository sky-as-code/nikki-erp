// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky-as-code/nikki-erp/modules/core/infra/ent/enum"
	"github.com/sky-as-code/nikki-erp/modules/core/infra/ent/predicate"
)

// EnumUpdate is the builder for updating Enum entities.
type EnumUpdate struct {
	config
	hooks    []Hook
	mutation *EnumMutation
}

// Where appends a list predicates to the EnumUpdate builder.
func (eu *EnumUpdate) Where(ps ...predicate.Enum) *EnumUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetEtag sets the "etag" field.
func (eu *EnumUpdate) SetEtag(s string) *EnumUpdate {
	eu.mutation.SetEtag(s)
	return eu
}

// SetNillableEtag sets the "etag" field if the given value is not nil.
func (eu *EnumUpdate) SetNillableEtag(s *string) *EnumUpdate {
	if s != nil {
		eu.SetEtag(*s)
	}
	return eu
}

// SetLabel sets the "label" field.
func (eu *EnumUpdate) SetLabel(m map[string]string) *EnumUpdate {
	eu.mutation.SetLabel(m)
	return eu
}

// SetValue sets the "value" field.
func (eu *EnumUpdate) SetValue(s string) *EnumUpdate {
	eu.mutation.SetValue(s)
	return eu
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (eu *EnumUpdate) SetNillableValue(s *string) *EnumUpdate {
	if s != nil {
		eu.SetValue(*s)
	}
	return eu
}

// SetType sets the "type" field.
func (eu *EnumUpdate) SetType(s string) *EnumUpdate {
	eu.mutation.SetType(s)
	return eu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (eu *EnumUpdate) SetNillableType(s *string) *EnumUpdate {
	if s != nil {
		eu.SetType(*s)
	}
	return eu
}

// Mutation returns the EnumMutation object of the builder.
func (eu *EnumUpdate) Mutation() *EnumMutation {
	return eu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EnumUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EnumUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EnumUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EnumUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eu *EnumUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(enum.Table, enum.Columns, sqlgraph.NewFieldSpec(enum.FieldID, field.TypeString))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.Etag(); ok {
		_spec.SetField(enum.FieldEtag, field.TypeString, value)
	}
	if value, ok := eu.mutation.Label(); ok {
		_spec.SetField(enum.FieldLabel, field.TypeJSON, value)
	}
	if value, ok := eu.mutation.Value(); ok {
		_spec.SetField(enum.FieldValue, field.TypeString, value)
	}
	if value, ok := eu.mutation.GetType(); ok {
		_spec.SetField(enum.FieldType, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{enum.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// EnumUpdateOne is the builder for updating a single Enum entity.
type EnumUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EnumMutation
}

// SetEtag sets the "etag" field.
func (euo *EnumUpdateOne) SetEtag(s string) *EnumUpdateOne {
	euo.mutation.SetEtag(s)
	return euo
}

// SetNillableEtag sets the "etag" field if the given value is not nil.
func (euo *EnumUpdateOne) SetNillableEtag(s *string) *EnumUpdateOne {
	if s != nil {
		euo.SetEtag(*s)
	}
	return euo
}

// SetLabel sets the "label" field.
func (euo *EnumUpdateOne) SetLabel(m map[string]string) *EnumUpdateOne {
	euo.mutation.SetLabel(m)
	return euo
}

// SetValue sets the "value" field.
func (euo *EnumUpdateOne) SetValue(s string) *EnumUpdateOne {
	euo.mutation.SetValue(s)
	return euo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (euo *EnumUpdateOne) SetNillableValue(s *string) *EnumUpdateOne {
	if s != nil {
		euo.SetValue(*s)
	}
	return euo
}

// SetType sets the "type" field.
func (euo *EnumUpdateOne) SetType(s string) *EnumUpdateOne {
	euo.mutation.SetType(s)
	return euo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (euo *EnumUpdateOne) SetNillableType(s *string) *EnumUpdateOne {
	if s != nil {
		euo.SetType(*s)
	}
	return euo
}

// Mutation returns the EnumMutation object of the builder.
func (euo *EnumUpdateOne) Mutation() *EnumMutation {
	return euo.mutation
}

// Where appends a list predicates to the EnumUpdate builder.
func (euo *EnumUpdateOne) Where(ps ...predicate.Enum) *EnumUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EnumUpdateOne) Select(field string, fields ...string) *EnumUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Enum entity.
func (euo *EnumUpdateOne) Save(ctx context.Context) (*Enum, error) {
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EnumUpdateOne) SaveX(ctx context.Context) *Enum {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EnumUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EnumUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (euo *EnumUpdateOne) sqlSave(ctx context.Context) (_node *Enum, err error) {
	_spec := sqlgraph.NewUpdateSpec(enum.Table, enum.Columns, sqlgraph.NewFieldSpec(enum.FieldID, field.TypeString))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Enum.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, enum.FieldID)
		for _, f := range fields {
			if !enum.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != enum.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.Etag(); ok {
		_spec.SetField(enum.FieldEtag, field.TypeString, value)
	}
	if value, ok := euo.mutation.Label(); ok {
		_spec.SetField(enum.FieldLabel, field.TypeJSON, value)
	}
	if value, ok := euo.mutation.Value(); ok {
		_spec.SetField(enum.FieldValue, field.TypeString, value)
	}
	if value, ok := euo.mutation.GetType(); ok {
		_spec.SetField(enum.FieldType, field.TypeString, value)
	}
	_node = &Enum{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{enum.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
