// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/sky-as-code/nikki-erp/modules/core/infra/ent/enum"
)

// Enum is the model entity for the Enum schema.
type Enum struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Etag holds the value of the "etag" field.
	Etag string `json:"etag,omitempty"`
	// Label holds the value of the "label" field.
	Label map[string]string `json:"label,omitempty"`
	// Value holds the value of the "value" field.
	Value string `json:"value,omitempty"`
	// Type holds the value of the "type" field.
	Type         string `json:"type,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Enum) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case enum.FieldLabel:
			values[i] = new([]byte)
		case enum.FieldID, enum.FieldEtag, enum.FieldValue, enum.FieldType:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Enum fields.
func (e *Enum) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case enum.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				e.ID = value.String
			}
		case enum.FieldEtag:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field etag", values[i])
			} else if value.Valid {
				e.Etag = value.String
			}
		case enum.FieldLabel:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field label", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &e.Label); err != nil {
					return fmt.Errorf("unmarshal field label: %w", err)
				}
			}
		case enum.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				e.Value = value.String
			}
		case enum.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				e.Type = value.String
			}
		default:
			e.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the Enum.
// This includes values selected through modifiers, order, etc.
func (e *Enum) GetValue(name string) (ent.Value, error) {
	return e.selectValues.Get(name)
}

// Update returns a builder for updating this Enum.
// Note that you need to call Enum.Unwrap() before calling this method if this Enum
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Enum) Update() *EnumUpdateOne {
	return NewEnumClient(e.config).UpdateOne(e)
}

// Unwrap unwraps the Enum entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Enum) Unwrap() *Enum {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Enum is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Enum) String() string {
	var builder strings.Builder
	builder.WriteString("Enum(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("etag=")
	builder.WriteString(e.Etag)
	builder.WriteString(", ")
	builder.WriteString("label=")
	builder.WriteString(fmt.Sprintf("%v", e.Label))
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(e.Value)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(e.Type)
	builder.WriteByte(')')
	return builder.String()
}

// Enums is a parsable slice of Enum.
type Enums []*Enum
