// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.cloudokyo.dev/backcommon/pkg/core/config/types (interfaces: ConfigLoader)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	fault "github.com/sky-as-code/nikki-erp/common/fault"
)

// MockConfigLoader is a mock of ConfigLoader interface.
type MockConfigLoader struct {
	ctrl     *gomock.Controller
	recorder *MockConfigLoaderMockRecorder
}

// MockConfigLoaderMockRecorder is the mock recorder for MockConfigLoader.
type MockConfigLoaderMockRecorder struct {
	mock *MockConfigLoader
}

// NewMockConfigLoader creates a new mock instance.
func NewMockConfigLoader(ctrl *gomock.Controller) *MockConfigLoader {
	mock := &MockConfigLoader{ctrl: ctrl}
	mock.recorder = &MockConfigLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigLoader) EXPECT() *MockConfigLoaderMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockConfigLoader) Get(arg0 string) (string, fault.error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(fault.error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockConfigLoaderMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockConfigLoader)(nil).Get), arg0)
}

// Init mocks base method.
func (m *MockConfigLoader) Init() fault.error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(fault.error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockConfigLoaderMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockConfigLoader)(nil).Init))
}
