// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky-as-code/nikki-erp/common/model"
	"github.com/sky-as-code/nikki-erp/modules/authenticate/infra/ent/authnenum"
)

// AuthNEnumCreate is the builder for creating a AuthNEnum entity.
type AuthNEnumCreate struct {
	config
	mutation *AuthNEnumMutation
	hooks    []Hook
}

// SetEtag sets the "etag" field.
func (anc *AuthNEnumCreate) SetEtag(s string) *AuthNEnumCreate {
	anc.mutation.SetEtag(s)
	return anc
}

// SetLabel sets the "label" field.
func (anc *AuthNEnumCreate) SetLabel(mj model.LangJson) *AuthNEnumCreate {
	anc.mutation.SetLabel(mj)
	return anc
}

// SetValue sets the "value" field.
func (anc *AuthNEnumCreate) SetValue(s string) *AuthNEnumCreate {
	anc.mutation.SetValue(s)
	return anc
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (anc *AuthNEnumCreate) SetNillableValue(s *string) *AuthNEnumCreate {
	if s != nil {
		anc.SetValue(*s)
	}
	return anc
}

// SetType sets the "type" field.
func (anc *AuthNEnumCreate) SetType(s string) *AuthNEnumCreate {
	anc.mutation.SetType(s)
	return anc
}

// SetID sets the "id" field.
func (anc *AuthNEnumCreate) SetID(s string) *AuthNEnumCreate {
	anc.mutation.SetID(s)
	return anc
}

// Mutation returns the AuthNEnumMutation object of the builder.
func (anc *AuthNEnumCreate) Mutation() *AuthNEnumMutation {
	return anc.mutation
}

// Save creates the AuthNEnum in the database.
func (anc *AuthNEnumCreate) Save(ctx context.Context) (*AuthNEnum, error) {
	return withHooks(ctx, anc.sqlSave, anc.mutation, anc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (anc *AuthNEnumCreate) SaveX(ctx context.Context) *AuthNEnum {
	v, err := anc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (anc *AuthNEnumCreate) Exec(ctx context.Context) error {
	_, err := anc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (anc *AuthNEnumCreate) ExecX(ctx context.Context) {
	if err := anc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (anc *AuthNEnumCreate) check() error {
	if _, ok := anc.mutation.Etag(); !ok {
		return &ValidationError{Name: "etag", err: errors.New(`ent: missing required field "AuthNEnum.etag"`)}
	}
	if _, ok := anc.mutation.Label(); !ok {
		return &ValidationError{Name: "label", err: errors.New(`ent: missing required field "AuthNEnum.label"`)}
	}
	if _, ok := anc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "AuthNEnum.type"`)}
	}
	return nil
}

func (anc *AuthNEnumCreate) sqlSave(ctx context.Context) (*AuthNEnum, error) {
	if err := anc.check(); err != nil {
		return nil, err
	}
	_node, _spec := anc.createSpec()
	if err := sqlgraph.CreateNode(ctx, anc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected AuthNEnum.ID type: %T", _spec.ID.Value)
		}
	}
	anc.mutation.id = &_node.ID
	anc.mutation.done = true
	return _node, nil
}

func (anc *AuthNEnumCreate) createSpec() (*AuthNEnum, *sqlgraph.CreateSpec) {
	var (
		_node = &AuthNEnum{config: anc.config}
		_spec = sqlgraph.NewCreateSpec(authnenum.Table, sqlgraph.NewFieldSpec(authnenum.FieldID, field.TypeString))
	)
	if id, ok := anc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := anc.mutation.Etag(); ok {
		_spec.SetField(authnenum.FieldEtag, field.TypeString, value)
		_node.Etag = value
	}
	if value, ok := anc.mutation.Label(); ok {
		_spec.SetField(authnenum.FieldLabel, field.TypeJSON, value)
		_node.Label = value
	}
	if value, ok := anc.mutation.Value(); ok {
		_spec.SetField(authnenum.FieldValue, field.TypeString, value)
		_node.Value = &value
	}
	if value, ok := anc.mutation.GetType(); ok {
		_spec.SetField(authnenum.FieldType, field.TypeString, value)
		_node.Type = value
	}
	return _node, _spec
}

// AuthNEnumCreateBulk is the builder for creating many AuthNEnum entities in bulk.
type AuthNEnumCreateBulk struct {
	config
	err      error
	builders []*AuthNEnumCreate
}

// Save creates the AuthNEnum entities in the database.
func (ancb *AuthNEnumCreateBulk) Save(ctx context.Context) ([]*AuthNEnum, error) {
	if ancb.err != nil {
		return nil, ancb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ancb.builders))
	nodes := make([]*AuthNEnum, len(ancb.builders))
	mutators := make([]Mutator, len(ancb.builders))
	for i := range ancb.builders {
		func(i int, root context.Context) {
			builder := ancb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AuthNEnumMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ancb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ancb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ancb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ancb *AuthNEnumCreateBulk) SaveX(ctx context.Context) []*AuthNEnum {
	v, err := ancb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ancb *AuthNEnumCreateBulk) Exec(ctx context.Context) error {
	_, err := ancb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ancb *AuthNEnumCreateBulk) ExecX(ctx context.Context) {
	if err := ancb.Exec(ctx); err != nil {
		panic(err)
	}
}
