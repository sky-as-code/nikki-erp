// Code generated by ent, DO NOT EDIT.

package methodsetting

import (
	"entgo.io/ent/dialect/sql"
	"github.com/sky-as-code/nikki-erp/modules/authenticate/infra/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldContainsFold(FieldID, id))
}

// Method applies equality check predicate on the "method" field. It's identical to MethodEQ.
func Method(v string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldEQ(FieldMethod, v))
}

// Order applies equality check predicate on the "order" field. It's identical to OrderEQ.
func Order(v int) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldEQ(FieldOrder, v))
}

// MaxFailures applies equality check predicate on the "max_failures" field. It's identical to MaxFailuresEQ.
func MaxFailures(v int) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldEQ(FieldMaxFailures, v))
}

// LockDurationSecs applies equality check predicate on the "lock_duration_secs" field. It's identical to LockDurationSecsEQ.
func LockDurationSecs(v int) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldEQ(FieldLockDurationSecs, v))
}

// SubjectType applies equality check predicate on the "subject_type" field. It's identical to SubjectTypeEQ.
func SubjectType(v string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldEQ(FieldSubjectType, v))
}

// SubjectRef applies equality check predicate on the "subject_ref" field. It's identical to SubjectRefEQ.
func SubjectRef(v string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldEQ(FieldSubjectRef, v))
}

// SubjectSourceRef applies equality check predicate on the "subject_source_ref" field. It's identical to SubjectSourceRefEQ.
func SubjectSourceRef(v string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldEQ(FieldSubjectSourceRef, v))
}

// MethodEQ applies the EQ predicate on the "method" field.
func MethodEQ(v string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldEQ(FieldMethod, v))
}

// MethodNEQ applies the NEQ predicate on the "method" field.
func MethodNEQ(v string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldNEQ(FieldMethod, v))
}

// MethodIn applies the In predicate on the "method" field.
func MethodIn(vs ...string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldIn(FieldMethod, vs...))
}

// MethodNotIn applies the NotIn predicate on the "method" field.
func MethodNotIn(vs ...string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldNotIn(FieldMethod, vs...))
}

// MethodGT applies the GT predicate on the "method" field.
func MethodGT(v string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldGT(FieldMethod, v))
}

// MethodGTE applies the GTE predicate on the "method" field.
func MethodGTE(v string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldGTE(FieldMethod, v))
}

// MethodLT applies the LT predicate on the "method" field.
func MethodLT(v string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldLT(FieldMethod, v))
}

// MethodLTE applies the LTE predicate on the "method" field.
func MethodLTE(v string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldLTE(FieldMethod, v))
}

// MethodContains applies the Contains predicate on the "method" field.
func MethodContains(v string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldContains(FieldMethod, v))
}

// MethodHasPrefix applies the HasPrefix predicate on the "method" field.
func MethodHasPrefix(v string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldHasPrefix(FieldMethod, v))
}

// MethodHasSuffix applies the HasSuffix predicate on the "method" field.
func MethodHasSuffix(v string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldHasSuffix(FieldMethod, v))
}

// MethodEqualFold applies the EqualFold predicate on the "method" field.
func MethodEqualFold(v string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldEqualFold(FieldMethod, v))
}

// MethodContainsFold applies the ContainsFold predicate on the "method" field.
func MethodContainsFold(v string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldContainsFold(FieldMethod, v))
}

// OrderEQ applies the EQ predicate on the "order" field.
func OrderEQ(v int) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldEQ(FieldOrder, v))
}

// OrderNEQ applies the NEQ predicate on the "order" field.
func OrderNEQ(v int) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldNEQ(FieldOrder, v))
}

// OrderIn applies the In predicate on the "order" field.
func OrderIn(vs ...int) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldIn(FieldOrder, vs...))
}

// OrderNotIn applies the NotIn predicate on the "order" field.
func OrderNotIn(vs ...int) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldNotIn(FieldOrder, vs...))
}

// OrderGT applies the GT predicate on the "order" field.
func OrderGT(v int) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldGT(FieldOrder, v))
}

// OrderGTE applies the GTE predicate on the "order" field.
func OrderGTE(v int) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldGTE(FieldOrder, v))
}

// OrderLT applies the LT predicate on the "order" field.
func OrderLT(v int) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldLT(FieldOrder, v))
}

// OrderLTE applies the LTE predicate on the "order" field.
func OrderLTE(v int) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldLTE(FieldOrder, v))
}

// MaxFailuresEQ applies the EQ predicate on the "max_failures" field.
func MaxFailuresEQ(v int) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldEQ(FieldMaxFailures, v))
}

// MaxFailuresNEQ applies the NEQ predicate on the "max_failures" field.
func MaxFailuresNEQ(v int) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldNEQ(FieldMaxFailures, v))
}

// MaxFailuresIn applies the In predicate on the "max_failures" field.
func MaxFailuresIn(vs ...int) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldIn(FieldMaxFailures, vs...))
}

// MaxFailuresNotIn applies the NotIn predicate on the "max_failures" field.
func MaxFailuresNotIn(vs ...int) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldNotIn(FieldMaxFailures, vs...))
}

// MaxFailuresGT applies the GT predicate on the "max_failures" field.
func MaxFailuresGT(v int) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldGT(FieldMaxFailures, v))
}

// MaxFailuresGTE applies the GTE predicate on the "max_failures" field.
func MaxFailuresGTE(v int) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldGTE(FieldMaxFailures, v))
}

// MaxFailuresLT applies the LT predicate on the "max_failures" field.
func MaxFailuresLT(v int) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldLT(FieldMaxFailures, v))
}

// MaxFailuresLTE applies the LTE predicate on the "max_failures" field.
func MaxFailuresLTE(v int) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldLTE(FieldMaxFailures, v))
}

// LockDurationSecsEQ applies the EQ predicate on the "lock_duration_secs" field.
func LockDurationSecsEQ(v int) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldEQ(FieldLockDurationSecs, v))
}

// LockDurationSecsNEQ applies the NEQ predicate on the "lock_duration_secs" field.
func LockDurationSecsNEQ(v int) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldNEQ(FieldLockDurationSecs, v))
}

// LockDurationSecsIn applies the In predicate on the "lock_duration_secs" field.
func LockDurationSecsIn(vs ...int) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldIn(FieldLockDurationSecs, vs...))
}

// LockDurationSecsNotIn applies the NotIn predicate on the "lock_duration_secs" field.
func LockDurationSecsNotIn(vs ...int) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldNotIn(FieldLockDurationSecs, vs...))
}

// LockDurationSecsGT applies the GT predicate on the "lock_duration_secs" field.
func LockDurationSecsGT(v int) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldGT(FieldLockDurationSecs, v))
}

// LockDurationSecsGTE applies the GTE predicate on the "lock_duration_secs" field.
func LockDurationSecsGTE(v int) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldGTE(FieldLockDurationSecs, v))
}

// LockDurationSecsLT applies the LT predicate on the "lock_duration_secs" field.
func LockDurationSecsLT(v int) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldLT(FieldLockDurationSecs, v))
}

// LockDurationSecsLTE applies the LTE predicate on the "lock_duration_secs" field.
func LockDurationSecsLTE(v int) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldLTE(FieldLockDurationSecs, v))
}

// LockDurationSecsIsNil applies the IsNil predicate on the "lock_duration_secs" field.
func LockDurationSecsIsNil() predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldIsNull(FieldLockDurationSecs))
}

// LockDurationSecsNotNil applies the NotNil predicate on the "lock_duration_secs" field.
func LockDurationSecsNotNil() predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldNotNull(FieldLockDurationSecs))
}

// SubjectTypeEQ applies the EQ predicate on the "subject_type" field.
func SubjectTypeEQ(v string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldEQ(FieldSubjectType, v))
}

// SubjectTypeNEQ applies the NEQ predicate on the "subject_type" field.
func SubjectTypeNEQ(v string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldNEQ(FieldSubjectType, v))
}

// SubjectTypeIn applies the In predicate on the "subject_type" field.
func SubjectTypeIn(vs ...string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldIn(FieldSubjectType, vs...))
}

// SubjectTypeNotIn applies the NotIn predicate on the "subject_type" field.
func SubjectTypeNotIn(vs ...string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldNotIn(FieldSubjectType, vs...))
}

// SubjectTypeGT applies the GT predicate on the "subject_type" field.
func SubjectTypeGT(v string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldGT(FieldSubjectType, v))
}

// SubjectTypeGTE applies the GTE predicate on the "subject_type" field.
func SubjectTypeGTE(v string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldGTE(FieldSubjectType, v))
}

// SubjectTypeLT applies the LT predicate on the "subject_type" field.
func SubjectTypeLT(v string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldLT(FieldSubjectType, v))
}

// SubjectTypeLTE applies the LTE predicate on the "subject_type" field.
func SubjectTypeLTE(v string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldLTE(FieldSubjectType, v))
}

// SubjectTypeContains applies the Contains predicate on the "subject_type" field.
func SubjectTypeContains(v string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldContains(FieldSubjectType, v))
}

// SubjectTypeHasPrefix applies the HasPrefix predicate on the "subject_type" field.
func SubjectTypeHasPrefix(v string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldHasPrefix(FieldSubjectType, v))
}

// SubjectTypeHasSuffix applies the HasSuffix predicate on the "subject_type" field.
func SubjectTypeHasSuffix(v string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldHasSuffix(FieldSubjectType, v))
}

// SubjectTypeEqualFold applies the EqualFold predicate on the "subject_type" field.
func SubjectTypeEqualFold(v string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldEqualFold(FieldSubjectType, v))
}

// SubjectTypeContainsFold applies the ContainsFold predicate on the "subject_type" field.
func SubjectTypeContainsFold(v string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldContainsFold(FieldSubjectType, v))
}

// SubjectRefEQ applies the EQ predicate on the "subject_ref" field.
func SubjectRefEQ(v string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldEQ(FieldSubjectRef, v))
}

// SubjectRefNEQ applies the NEQ predicate on the "subject_ref" field.
func SubjectRefNEQ(v string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldNEQ(FieldSubjectRef, v))
}

// SubjectRefIn applies the In predicate on the "subject_ref" field.
func SubjectRefIn(vs ...string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldIn(FieldSubjectRef, vs...))
}

// SubjectRefNotIn applies the NotIn predicate on the "subject_ref" field.
func SubjectRefNotIn(vs ...string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldNotIn(FieldSubjectRef, vs...))
}

// SubjectRefGT applies the GT predicate on the "subject_ref" field.
func SubjectRefGT(v string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldGT(FieldSubjectRef, v))
}

// SubjectRefGTE applies the GTE predicate on the "subject_ref" field.
func SubjectRefGTE(v string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldGTE(FieldSubjectRef, v))
}

// SubjectRefLT applies the LT predicate on the "subject_ref" field.
func SubjectRefLT(v string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldLT(FieldSubjectRef, v))
}

// SubjectRefLTE applies the LTE predicate on the "subject_ref" field.
func SubjectRefLTE(v string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldLTE(FieldSubjectRef, v))
}

// SubjectRefContains applies the Contains predicate on the "subject_ref" field.
func SubjectRefContains(v string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldContains(FieldSubjectRef, v))
}

// SubjectRefHasPrefix applies the HasPrefix predicate on the "subject_ref" field.
func SubjectRefHasPrefix(v string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldHasPrefix(FieldSubjectRef, v))
}

// SubjectRefHasSuffix applies the HasSuffix predicate on the "subject_ref" field.
func SubjectRefHasSuffix(v string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldHasSuffix(FieldSubjectRef, v))
}

// SubjectRefIsNil applies the IsNil predicate on the "subject_ref" field.
func SubjectRefIsNil() predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldIsNull(FieldSubjectRef))
}

// SubjectRefNotNil applies the NotNil predicate on the "subject_ref" field.
func SubjectRefNotNil() predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldNotNull(FieldSubjectRef))
}

// SubjectRefEqualFold applies the EqualFold predicate on the "subject_ref" field.
func SubjectRefEqualFold(v string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldEqualFold(FieldSubjectRef, v))
}

// SubjectRefContainsFold applies the ContainsFold predicate on the "subject_ref" field.
func SubjectRefContainsFold(v string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldContainsFold(FieldSubjectRef, v))
}

// SubjectSourceRefEQ applies the EQ predicate on the "subject_source_ref" field.
func SubjectSourceRefEQ(v string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldEQ(FieldSubjectSourceRef, v))
}

// SubjectSourceRefNEQ applies the NEQ predicate on the "subject_source_ref" field.
func SubjectSourceRefNEQ(v string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldNEQ(FieldSubjectSourceRef, v))
}

// SubjectSourceRefIn applies the In predicate on the "subject_source_ref" field.
func SubjectSourceRefIn(vs ...string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldIn(FieldSubjectSourceRef, vs...))
}

// SubjectSourceRefNotIn applies the NotIn predicate on the "subject_source_ref" field.
func SubjectSourceRefNotIn(vs ...string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldNotIn(FieldSubjectSourceRef, vs...))
}

// SubjectSourceRefGT applies the GT predicate on the "subject_source_ref" field.
func SubjectSourceRefGT(v string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldGT(FieldSubjectSourceRef, v))
}

// SubjectSourceRefGTE applies the GTE predicate on the "subject_source_ref" field.
func SubjectSourceRefGTE(v string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldGTE(FieldSubjectSourceRef, v))
}

// SubjectSourceRefLT applies the LT predicate on the "subject_source_ref" field.
func SubjectSourceRefLT(v string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldLT(FieldSubjectSourceRef, v))
}

// SubjectSourceRefLTE applies the LTE predicate on the "subject_source_ref" field.
func SubjectSourceRefLTE(v string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldLTE(FieldSubjectSourceRef, v))
}

// SubjectSourceRefContains applies the Contains predicate on the "subject_source_ref" field.
func SubjectSourceRefContains(v string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldContains(FieldSubjectSourceRef, v))
}

// SubjectSourceRefHasPrefix applies the HasPrefix predicate on the "subject_source_ref" field.
func SubjectSourceRefHasPrefix(v string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldHasPrefix(FieldSubjectSourceRef, v))
}

// SubjectSourceRefHasSuffix applies the HasSuffix predicate on the "subject_source_ref" field.
func SubjectSourceRefHasSuffix(v string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldHasSuffix(FieldSubjectSourceRef, v))
}

// SubjectSourceRefIsNil applies the IsNil predicate on the "subject_source_ref" field.
func SubjectSourceRefIsNil() predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldIsNull(FieldSubjectSourceRef))
}

// SubjectSourceRefNotNil applies the NotNil predicate on the "subject_source_ref" field.
func SubjectSourceRefNotNil() predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldNotNull(FieldSubjectSourceRef))
}

// SubjectSourceRefEqualFold applies the EqualFold predicate on the "subject_source_ref" field.
func SubjectSourceRefEqualFold(v string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldEqualFold(FieldSubjectSourceRef, v))
}

// SubjectSourceRefContainsFold applies the ContainsFold predicate on the "subject_source_ref" field.
func SubjectSourceRefContainsFold(v string) predicate.MethodSetting {
	return predicate.MethodSetting(sql.FieldContainsFold(FieldSubjectSourceRef, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MethodSetting) predicate.MethodSetting {
	return predicate.MethodSetting(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MethodSetting) predicate.MethodSetting {
	return predicate.MethodSetting(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MethodSetting) predicate.MethodSetting {
	return predicate.MethodSetting(sql.NotPredicates(p))
}
