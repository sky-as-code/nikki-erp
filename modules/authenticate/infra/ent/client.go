// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/sky-as-code/nikki-erp/modules/authenticate/infra/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"github.com/sky-as-code/nikki-erp/modules/authenticate/infra/ent/authnenum"
	"github.com/sky-as-code/nikki-erp/modules/authenticate/infra/ent/loginattempt"
	"github.com/sky-as-code/nikki-erp/modules/authenticate/infra/ent/methodsetting"
	"github.com/sky-as-code/nikki-erp/modules/authenticate/infra/ent/passwordstore"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// AuthNEnum is the client for interacting with the AuthNEnum builders.
	AuthNEnum *AuthNEnumClient
	// LoginAttempt is the client for interacting with the LoginAttempt builders.
	LoginAttempt *LoginAttemptClient
	// MethodSetting is the client for interacting with the MethodSetting builders.
	MethodSetting *MethodSettingClient
	// PasswordStore is the client for interacting with the PasswordStore builders.
	PasswordStore *PasswordStoreClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.AuthNEnum = NewAuthNEnumClient(c.config)
	c.LoginAttempt = NewLoginAttemptClient(c.config)
	c.MethodSetting = NewMethodSettingClient(c.config)
	c.PasswordStore = NewPasswordStoreClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		AuthNEnum:     NewAuthNEnumClient(cfg),
		LoginAttempt:  NewLoginAttemptClient(cfg),
		MethodSetting: NewMethodSettingClient(cfg),
		PasswordStore: NewPasswordStoreClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		AuthNEnum:     NewAuthNEnumClient(cfg),
		LoginAttempt:  NewLoginAttemptClient(cfg),
		MethodSetting: NewMethodSettingClient(cfg),
		PasswordStore: NewPasswordStoreClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		AuthNEnum.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.AuthNEnum.Use(hooks...)
	c.LoginAttempt.Use(hooks...)
	c.MethodSetting.Use(hooks...)
	c.PasswordStore.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.AuthNEnum.Intercept(interceptors...)
	c.LoginAttempt.Intercept(interceptors...)
	c.MethodSetting.Intercept(interceptors...)
	c.PasswordStore.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AuthNEnumMutation:
		return c.AuthNEnum.mutate(ctx, m)
	case *LoginAttemptMutation:
		return c.LoginAttempt.mutate(ctx, m)
	case *MethodSettingMutation:
		return c.MethodSetting.mutate(ctx, m)
	case *PasswordStoreMutation:
		return c.PasswordStore.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AuthNEnumClient is a client for the AuthNEnum schema.
type AuthNEnumClient struct {
	config
}

// NewAuthNEnumClient returns a client for the AuthNEnum from the given config.
func NewAuthNEnumClient(c config) *AuthNEnumClient {
	return &AuthNEnumClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `authnenum.Hooks(f(g(h())))`.
func (c *AuthNEnumClient) Use(hooks ...Hook) {
	c.hooks.AuthNEnum = append(c.hooks.AuthNEnum, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `authnenum.Intercept(f(g(h())))`.
func (c *AuthNEnumClient) Intercept(interceptors ...Interceptor) {
	c.inters.AuthNEnum = append(c.inters.AuthNEnum, interceptors...)
}

// Create returns a builder for creating a AuthNEnum entity.
func (c *AuthNEnumClient) Create() *AuthNEnumCreate {
	mutation := newAuthNEnumMutation(c.config, OpCreate)
	return &AuthNEnumCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AuthNEnum entities.
func (c *AuthNEnumClient) CreateBulk(builders ...*AuthNEnumCreate) *AuthNEnumCreateBulk {
	return &AuthNEnumCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AuthNEnumClient) MapCreateBulk(slice any, setFunc func(*AuthNEnumCreate, int)) *AuthNEnumCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AuthNEnumCreateBulk{err: fmt.Errorf("calling to AuthNEnumClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AuthNEnumCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AuthNEnumCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AuthNEnum.
func (c *AuthNEnumClient) Update() *AuthNEnumUpdate {
	mutation := newAuthNEnumMutation(c.config, OpUpdate)
	return &AuthNEnumUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AuthNEnumClient) UpdateOne(an *AuthNEnum) *AuthNEnumUpdateOne {
	mutation := newAuthNEnumMutation(c.config, OpUpdateOne, withAuthNEnum(an))
	return &AuthNEnumUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AuthNEnumClient) UpdateOneID(id string) *AuthNEnumUpdateOne {
	mutation := newAuthNEnumMutation(c.config, OpUpdateOne, withAuthNEnumID(id))
	return &AuthNEnumUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AuthNEnum.
func (c *AuthNEnumClient) Delete() *AuthNEnumDelete {
	mutation := newAuthNEnumMutation(c.config, OpDelete)
	return &AuthNEnumDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AuthNEnumClient) DeleteOne(an *AuthNEnum) *AuthNEnumDeleteOne {
	return c.DeleteOneID(an.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AuthNEnumClient) DeleteOneID(id string) *AuthNEnumDeleteOne {
	builder := c.Delete().Where(authnenum.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AuthNEnumDeleteOne{builder}
}

// Query returns a query builder for AuthNEnum.
func (c *AuthNEnumClient) Query() *AuthNEnumQuery {
	return &AuthNEnumQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAuthNEnum},
		inters: c.Interceptors(),
	}
}

// Get returns a AuthNEnum entity by its id.
func (c *AuthNEnumClient) Get(ctx context.Context, id string) (*AuthNEnum, error) {
	return c.Query().Where(authnenum.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AuthNEnumClient) GetX(ctx context.Context, id string) *AuthNEnum {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AuthNEnumClient) Hooks() []Hook {
	return c.hooks.AuthNEnum
}

// Interceptors returns the client interceptors.
func (c *AuthNEnumClient) Interceptors() []Interceptor {
	return c.inters.AuthNEnum
}

func (c *AuthNEnumClient) mutate(ctx context.Context, m *AuthNEnumMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AuthNEnumCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AuthNEnumUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AuthNEnumUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AuthNEnumDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AuthNEnum mutation op: %q", m.Op())
	}
}

// LoginAttemptClient is a client for the LoginAttempt schema.
type LoginAttemptClient struct {
	config
}

// NewLoginAttemptClient returns a client for the LoginAttempt from the given config.
func NewLoginAttemptClient(c config) *LoginAttemptClient {
	return &LoginAttemptClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `loginattempt.Hooks(f(g(h())))`.
func (c *LoginAttemptClient) Use(hooks ...Hook) {
	c.hooks.LoginAttempt = append(c.hooks.LoginAttempt, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `loginattempt.Intercept(f(g(h())))`.
func (c *LoginAttemptClient) Intercept(interceptors ...Interceptor) {
	c.inters.LoginAttempt = append(c.inters.LoginAttempt, interceptors...)
}

// Create returns a builder for creating a LoginAttempt entity.
func (c *LoginAttemptClient) Create() *LoginAttemptCreate {
	mutation := newLoginAttemptMutation(c.config, OpCreate)
	return &LoginAttemptCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of LoginAttempt entities.
func (c *LoginAttemptClient) CreateBulk(builders ...*LoginAttemptCreate) *LoginAttemptCreateBulk {
	return &LoginAttemptCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *LoginAttemptClient) MapCreateBulk(slice any, setFunc func(*LoginAttemptCreate, int)) *LoginAttemptCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &LoginAttemptCreateBulk{err: fmt.Errorf("calling to LoginAttemptClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*LoginAttemptCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &LoginAttemptCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for LoginAttempt.
func (c *LoginAttemptClient) Update() *LoginAttemptUpdate {
	mutation := newLoginAttemptMutation(c.config, OpUpdate)
	return &LoginAttemptUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LoginAttemptClient) UpdateOne(la *LoginAttempt) *LoginAttemptUpdateOne {
	mutation := newLoginAttemptMutation(c.config, OpUpdateOne, withLoginAttempt(la))
	return &LoginAttemptUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LoginAttemptClient) UpdateOneID(id string) *LoginAttemptUpdateOne {
	mutation := newLoginAttemptMutation(c.config, OpUpdateOne, withLoginAttemptID(id))
	return &LoginAttemptUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for LoginAttempt.
func (c *LoginAttemptClient) Delete() *LoginAttemptDelete {
	mutation := newLoginAttemptMutation(c.config, OpDelete)
	return &LoginAttemptDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LoginAttemptClient) DeleteOne(la *LoginAttempt) *LoginAttemptDeleteOne {
	return c.DeleteOneID(la.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *LoginAttemptClient) DeleteOneID(id string) *LoginAttemptDeleteOne {
	builder := c.Delete().Where(loginattempt.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LoginAttemptDeleteOne{builder}
}

// Query returns a query builder for LoginAttempt.
func (c *LoginAttemptClient) Query() *LoginAttemptQuery {
	return &LoginAttemptQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeLoginAttempt},
		inters: c.Interceptors(),
	}
}

// Get returns a LoginAttempt entity by its id.
func (c *LoginAttemptClient) Get(ctx context.Context, id string) (*LoginAttempt, error) {
	return c.Query().Where(loginattempt.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LoginAttemptClient) GetX(ctx context.Context, id string) *LoginAttempt {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *LoginAttemptClient) Hooks() []Hook {
	return c.hooks.LoginAttempt
}

// Interceptors returns the client interceptors.
func (c *LoginAttemptClient) Interceptors() []Interceptor {
	return c.inters.LoginAttempt
}

func (c *LoginAttemptClient) mutate(ctx context.Context, m *LoginAttemptMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&LoginAttemptCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&LoginAttemptUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&LoginAttemptUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&LoginAttemptDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown LoginAttempt mutation op: %q", m.Op())
	}
}

// MethodSettingClient is a client for the MethodSetting schema.
type MethodSettingClient struct {
	config
}

// NewMethodSettingClient returns a client for the MethodSetting from the given config.
func NewMethodSettingClient(c config) *MethodSettingClient {
	return &MethodSettingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `methodsetting.Hooks(f(g(h())))`.
func (c *MethodSettingClient) Use(hooks ...Hook) {
	c.hooks.MethodSetting = append(c.hooks.MethodSetting, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `methodsetting.Intercept(f(g(h())))`.
func (c *MethodSettingClient) Intercept(interceptors ...Interceptor) {
	c.inters.MethodSetting = append(c.inters.MethodSetting, interceptors...)
}

// Create returns a builder for creating a MethodSetting entity.
func (c *MethodSettingClient) Create() *MethodSettingCreate {
	mutation := newMethodSettingMutation(c.config, OpCreate)
	return &MethodSettingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MethodSetting entities.
func (c *MethodSettingClient) CreateBulk(builders ...*MethodSettingCreate) *MethodSettingCreateBulk {
	return &MethodSettingCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MethodSettingClient) MapCreateBulk(slice any, setFunc func(*MethodSettingCreate, int)) *MethodSettingCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MethodSettingCreateBulk{err: fmt.Errorf("calling to MethodSettingClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MethodSettingCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MethodSettingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MethodSetting.
func (c *MethodSettingClient) Update() *MethodSettingUpdate {
	mutation := newMethodSettingMutation(c.config, OpUpdate)
	return &MethodSettingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MethodSettingClient) UpdateOne(ms *MethodSetting) *MethodSettingUpdateOne {
	mutation := newMethodSettingMutation(c.config, OpUpdateOne, withMethodSetting(ms))
	return &MethodSettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MethodSettingClient) UpdateOneID(id string) *MethodSettingUpdateOne {
	mutation := newMethodSettingMutation(c.config, OpUpdateOne, withMethodSettingID(id))
	return &MethodSettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MethodSetting.
func (c *MethodSettingClient) Delete() *MethodSettingDelete {
	mutation := newMethodSettingMutation(c.config, OpDelete)
	return &MethodSettingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MethodSettingClient) DeleteOne(ms *MethodSetting) *MethodSettingDeleteOne {
	return c.DeleteOneID(ms.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MethodSettingClient) DeleteOneID(id string) *MethodSettingDeleteOne {
	builder := c.Delete().Where(methodsetting.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MethodSettingDeleteOne{builder}
}

// Query returns a query builder for MethodSetting.
func (c *MethodSettingClient) Query() *MethodSettingQuery {
	return &MethodSettingQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMethodSetting},
		inters: c.Interceptors(),
	}
}

// Get returns a MethodSetting entity by its id.
func (c *MethodSettingClient) Get(ctx context.Context, id string) (*MethodSetting, error) {
	return c.Query().Where(methodsetting.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MethodSettingClient) GetX(ctx context.Context, id string) *MethodSetting {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *MethodSettingClient) Hooks() []Hook {
	return c.hooks.MethodSetting
}

// Interceptors returns the client interceptors.
func (c *MethodSettingClient) Interceptors() []Interceptor {
	return c.inters.MethodSetting
}

func (c *MethodSettingClient) mutate(ctx context.Context, m *MethodSettingMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MethodSettingCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MethodSettingUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MethodSettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MethodSettingDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown MethodSetting mutation op: %q", m.Op())
	}
}

// PasswordStoreClient is a client for the PasswordStore schema.
type PasswordStoreClient struct {
	config
}

// NewPasswordStoreClient returns a client for the PasswordStore from the given config.
func NewPasswordStoreClient(c config) *PasswordStoreClient {
	return &PasswordStoreClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `passwordstore.Hooks(f(g(h())))`.
func (c *PasswordStoreClient) Use(hooks ...Hook) {
	c.hooks.PasswordStore = append(c.hooks.PasswordStore, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `passwordstore.Intercept(f(g(h())))`.
func (c *PasswordStoreClient) Intercept(interceptors ...Interceptor) {
	c.inters.PasswordStore = append(c.inters.PasswordStore, interceptors...)
}

// Create returns a builder for creating a PasswordStore entity.
func (c *PasswordStoreClient) Create() *PasswordStoreCreate {
	mutation := newPasswordStoreMutation(c.config, OpCreate)
	return &PasswordStoreCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PasswordStore entities.
func (c *PasswordStoreClient) CreateBulk(builders ...*PasswordStoreCreate) *PasswordStoreCreateBulk {
	return &PasswordStoreCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PasswordStoreClient) MapCreateBulk(slice any, setFunc func(*PasswordStoreCreate, int)) *PasswordStoreCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PasswordStoreCreateBulk{err: fmt.Errorf("calling to PasswordStoreClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PasswordStoreCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PasswordStoreCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PasswordStore.
func (c *PasswordStoreClient) Update() *PasswordStoreUpdate {
	mutation := newPasswordStoreMutation(c.config, OpUpdate)
	return &PasswordStoreUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PasswordStoreClient) UpdateOne(ps *PasswordStore) *PasswordStoreUpdateOne {
	mutation := newPasswordStoreMutation(c.config, OpUpdateOne, withPasswordStore(ps))
	return &PasswordStoreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PasswordStoreClient) UpdateOneID(id string) *PasswordStoreUpdateOne {
	mutation := newPasswordStoreMutation(c.config, OpUpdateOne, withPasswordStoreID(id))
	return &PasswordStoreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PasswordStore.
func (c *PasswordStoreClient) Delete() *PasswordStoreDelete {
	mutation := newPasswordStoreMutation(c.config, OpDelete)
	return &PasswordStoreDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PasswordStoreClient) DeleteOne(ps *PasswordStore) *PasswordStoreDeleteOne {
	return c.DeleteOneID(ps.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PasswordStoreClient) DeleteOneID(id string) *PasswordStoreDeleteOne {
	builder := c.Delete().Where(passwordstore.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PasswordStoreDeleteOne{builder}
}

// Query returns a query builder for PasswordStore.
func (c *PasswordStoreClient) Query() *PasswordStoreQuery {
	return &PasswordStoreQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePasswordStore},
		inters: c.Interceptors(),
	}
}

// Get returns a PasswordStore entity by its id.
func (c *PasswordStoreClient) Get(ctx context.Context, id string) (*PasswordStore, error) {
	return c.Query().Where(passwordstore.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PasswordStoreClient) GetX(ctx context.Context, id string) *PasswordStore {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PasswordStoreClient) Hooks() []Hook {
	return c.hooks.PasswordStore
}

// Interceptors returns the client interceptors.
func (c *PasswordStoreClient) Interceptors() []Interceptor {
	return c.inters.PasswordStore
}

func (c *PasswordStoreClient) mutate(ctx context.Context, m *PasswordStoreMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PasswordStoreCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PasswordStoreUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PasswordStoreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PasswordStoreDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PasswordStore mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		AuthNEnum, LoginAttempt, MethodSetting, PasswordStore []ent.Hook
	}
	inters struct {
		AuthNEnum, LoginAttempt, MethodSetting, PasswordStore []ent.Interceptor
	}
)
