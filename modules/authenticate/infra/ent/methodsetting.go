// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/sky-as-code/nikki-erp/modules/authenticate/infra/ent/methodsetting"
)

// MethodSetting is the model entity for the MethodSetting schema.
type MethodSetting struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Method holds the value of the "method" field.
	Method string `json:"method,omitempty"`
	// Order holds the value of the "order" field.
	Order int `json:"order,omitempty"`
	// MaxFailures holds the value of the "max_failures" field.
	MaxFailures int `json:"max_failures,omitempty"`
	// LockDurationSecs holds the value of the "lock_duration_secs" field.
	LockDurationSecs *int `json:"lock_duration_secs,omitempty"`
	// SubjectType holds the value of the "subject_type" field.
	SubjectType string `json:"subject_type,omitempty"`
	// SubjectRef holds the value of the "subject_ref" field.
	SubjectRef *string `json:"subject_ref,omitempty"`
	// SubjectSourceRef holds the value of the "subject_source_ref" field.
	SubjectSourceRef *string `json:"subject_source_ref,omitempty"`
	selectValues     sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MethodSetting) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case methodsetting.FieldOrder, methodsetting.FieldMaxFailures, methodsetting.FieldLockDurationSecs:
			values[i] = new(sql.NullInt64)
		case methodsetting.FieldID, methodsetting.FieldMethod, methodsetting.FieldSubjectType, methodsetting.FieldSubjectRef, methodsetting.FieldSubjectSourceRef:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MethodSetting fields.
func (ms *MethodSetting) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case methodsetting.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ms.ID = value.String
			}
		case methodsetting.FieldMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field method", values[i])
			} else if value.Valid {
				ms.Method = value.String
			}
		case methodsetting.FieldOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order", values[i])
			} else if value.Valid {
				ms.Order = int(value.Int64)
			}
		case methodsetting.FieldMaxFailures:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field max_failures", values[i])
			} else if value.Valid {
				ms.MaxFailures = int(value.Int64)
			}
		case methodsetting.FieldLockDurationSecs:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field lock_duration_secs", values[i])
			} else if value.Valid {
				ms.LockDurationSecs = new(int)
				*ms.LockDurationSecs = int(value.Int64)
			}
		case methodsetting.FieldSubjectType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subject_type", values[i])
			} else if value.Valid {
				ms.SubjectType = value.String
			}
		case methodsetting.FieldSubjectRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subject_ref", values[i])
			} else if value.Valid {
				ms.SubjectRef = new(string)
				*ms.SubjectRef = value.String
			}
		case methodsetting.FieldSubjectSourceRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subject_source_ref", values[i])
			} else if value.Valid {
				ms.SubjectSourceRef = new(string)
				*ms.SubjectSourceRef = value.String
			}
		default:
			ms.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MethodSetting.
// This includes values selected through modifiers, order, etc.
func (ms *MethodSetting) Value(name string) (ent.Value, error) {
	return ms.selectValues.Get(name)
}

// Update returns a builder for updating this MethodSetting.
// Note that you need to call MethodSetting.Unwrap() before calling this method if this MethodSetting
// was returned from a transaction, and the transaction was committed or rolled back.
func (ms *MethodSetting) Update() *MethodSettingUpdateOne {
	return NewMethodSettingClient(ms.config).UpdateOne(ms)
}

// Unwrap unwraps the MethodSetting entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ms *MethodSetting) Unwrap() *MethodSetting {
	_tx, ok := ms.config.driver.(*txDriver)
	if !ok {
		panic("ent: MethodSetting is not a transactional entity")
	}
	ms.config.driver = _tx.drv
	return ms
}

// String implements the fmt.Stringer.
func (ms *MethodSetting) String() string {
	var builder strings.Builder
	builder.WriteString("MethodSetting(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ms.ID))
	builder.WriteString("method=")
	builder.WriteString(ms.Method)
	builder.WriteString(", ")
	builder.WriteString("order=")
	builder.WriteString(fmt.Sprintf("%v", ms.Order))
	builder.WriteString(", ")
	builder.WriteString("max_failures=")
	builder.WriteString(fmt.Sprintf("%v", ms.MaxFailures))
	builder.WriteString(", ")
	if v := ms.LockDurationSecs; v != nil {
		builder.WriteString("lock_duration_secs=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("subject_type=")
	builder.WriteString(ms.SubjectType)
	builder.WriteString(", ")
	if v := ms.SubjectRef; v != nil {
		builder.WriteString("subject_ref=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := ms.SubjectSourceRef; v != nil {
		builder.WriteString("subject_source_ref=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// MethodSettings is a parsable slice of MethodSetting.
type MethodSettings []*MethodSetting
