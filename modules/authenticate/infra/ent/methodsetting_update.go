// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky-as-code/nikki-erp/modules/authenticate/infra/ent/methodsetting"
	"github.com/sky-as-code/nikki-erp/modules/authenticate/infra/ent/predicate"
)

// MethodSettingUpdate is the builder for updating MethodSetting entities.
type MethodSettingUpdate struct {
	config
	hooks    []Hook
	mutation *MethodSettingMutation
}

// Where appends a list predicates to the MethodSettingUpdate builder.
func (msu *MethodSettingUpdate) Where(ps ...predicate.MethodSetting) *MethodSettingUpdate {
	msu.mutation.Where(ps...)
	return msu
}

// SetMethod sets the "method" field.
func (msu *MethodSettingUpdate) SetMethod(s string) *MethodSettingUpdate {
	msu.mutation.SetMethod(s)
	return msu
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (msu *MethodSettingUpdate) SetNillableMethod(s *string) *MethodSettingUpdate {
	if s != nil {
		msu.SetMethod(*s)
	}
	return msu
}

// SetOrder sets the "order" field.
func (msu *MethodSettingUpdate) SetOrder(i int) *MethodSettingUpdate {
	msu.mutation.ResetOrder()
	msu.mutation.SetOrder(i)
	return msu
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (msu *MethodSettingUpdate) SetNillableOrder(i *int) *MethodSettingUpdate {
	if i != nil {
		msu.SetOrder(*i)
	}
	return msu
}

// AddOrder adds i to the "order" field.
func (msu *MethodSettingUpdate) AddOrder(i int) *MethodSettingUpdate {
	msu.mutation.AddOrder(i)
	return msu
}

// SetMaxFailures sets the "max_failures" field.
func (msu *MethodSettingUpdate) SetMaxFailures(i int) *MethodSettingUpdate {
	msu.mutation.ResetMaxFailures()
	msu.mutation.SetMaxFailures(i)
	return msu
}

// SetNillableMaxFailures sets the "max_failures" field if the given value is not nil.
func (msu *MethodSettingUpdate) SetNillableMaxFailures(i *int) *MethodSettingUpdate {
	if i != nil {
		msu.SetMaxFailures(*i)
	}
	return msu
}

// AddMaxFailures adds i to the "max_failures" field.
func (msu *MethodSettingUpdate) AddMaxFailures(i int) *MethodSettingUpdate {
	msu.mutation.AddMaxFailures(i)
	return msu
}

// SetLockDurationSecs sets the "lock_duration_secs" field.
func (msu *MethodSettingUpdate) SetLockDurationSecs(i int) *MethodSettingUpdate {
	msu.mutation.ResetLockDurationSecs()
	msu.mutation.SetLockDurationSecs(i)
	return msu
}

// SetNillableLockDurationSecs sets the "lock_duration_secs" field if the given value is not nil.
func (msu *MethodSettingUpdate) SetNillableLockDurationSecs(i *int) *MethodSettingUpdate {
	if i != nil {
		msu.SetLockDurationSecs(*i)
	}
	return msu
}

// AddLockDurationSecs adds i to the "lock_duration_secs" field.
func (msu *MethodSettingUpdate) AddLockDurationSecs(i int) *MethodSettingUpdate {
	msu.mutation.AddLockDurationSecs(i)
	return msu
}

// ClearLockDurationSecs clears the value of the "lock_duration_secs" field.
func (msu *MethodSettingUpdate) ClearLockDurationSecs() *MethodSettingUpdate {
	msu.mutation.ClearLockDurationSecs()
	return msu
}

// Mutation returns the MethodSettingMutation object of the builder.
func (msu *MethodSettingUpdate) Mutation() *MethodSettingMutation {
	return msu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (msu *MethodSettingUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, msu.sqlSave, msu.mutation, msu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (msu *MethodSettingUpdate) SaveX(ctx context.Context) int {
	affected, err := msu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (msu *MethodSettingUpdate) Exec(ctx context.Context) error {
	_, err := msu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (msu *MethodSettingUpdate) ExecX(ctx context.Context) {
	if err := msu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (msu *MethodSettingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(methodsetting.Table, methodsetting.Columns, sqlgraph.NewFieldSpec(methodsetting.FieldID, field.TypeString))
	if ps := msu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := msu.mutation.Method(); ok {
		_spec.SetField(methodsetting.FieldMethod, field.TypeString, value)
	}
	if value, ok := msu.mutation.Order(); ok {
		_spec.SetField(methodsetting.FieldOrder, field.TypeInt, value)
	}
	if value, ok := msu.mutation.AddedOrder(); ok {
		_spec.AddField(methodsetting.FieldOrder, field.TypeInt, value)
	}
	if value, ok := msu.mutation.MaxFailures(); ok {
		_spec.SetField(methodsetting.FieldMaxFailures, field.TypeInt, value)
	}
	if value, ok := msu.mutation.AddedMaxFailures(); ok {
		_spec.AddField(methodsetting.FieldMaxFailures, field.TypeInt, value)
	}
	if value, ok := msu.mutation.LockDurationSecs(); ok {
		_spec.SetField(methodsetting.FieldLockDurationSecs, field.TypeInt, value)
	}
	if value, ok := msu.mutation.AddedLockDurationSecs(); ok {
		_spec.AddField(methodsetting.FieldLockDurationSecs, field.TypeInt, value)
	}
	if msu.mutation.LockDurationSecsCleared() {
		_spec.ClearField(methodsetting.FieldLockDurationSecs, field.TypeInt)
	}
	if msu.mutation.SubjectRefCleared() {
		_spec.ClearField(methodsetting.FieldSubjectRef, field.TypeString)
	}
	if msu.mutation.SubjectSourceRefCleared() {
		_spec.ClearField(methodsetting.FieldSubjectSourceRef, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, msu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{methodsetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	msu.mutation.done = true
	return n, nil
}

// MethodSettingUpdateOne is the builder for updating a single MethodSetting entity.
type MethodSettingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MethodSettingMutation
}

// SetMethod sets the "method" field.
func (msuo *MethodSettingUpdateOne) SetMethod(s string) *MethodSettingUpdateOne {
	msuo.mutation.SetMethod(s)
	return msuo
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (msuo *MethodSettingUpdateOne) SetNillableMethod(s *string) *MethodSettingUpdateOne {
	if s != nil {
		msuo.SetMethod(*s)
	}
	return msuo
}

// SetOrder sets the "order" field.
func (msuo *MethodSettingUpdateOne) SetOrder(i int) *MethodSettingUpdateOne {
	msuo.mutation.ResetOrder()
	msuo.mutation.SetOrder(i)
	return msuo
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (msuo *MethodSettingUpdateOne) SetNillableOrder(i *int) *MethodSettingUpdateOne {
	if i != nil {
		msuo.SetOrder(*i)
	}
	return msuo
}

// AddOrder adds i to the "order" field.
func (msuo *MethodSettingUpdateOne) AddOrder(i int) *MethodSettingUpdateOne {
	msuo.mutation.AddOrder(i)
	return msuo
}

// SetMaxFailures sets the "max_failures" field.
func (msuo *MethodSettingUpdateOne) SetMaxFailures(i int) *MethodSettingUpdateOne {
	msuo.mutation.ResetMaxFailures()
	msuo.mutation.SetMaxFailures(i)
	return msuo
}

// SetNillableMaxFailures sets the "max_failures" field if the given value is not nil.
func (msuo *MethodSettingUpdateOne) SetNillableMaxFailures(i *int) *MethodSettingUpdateOne {
	if i != nil {
		msuo.SetMaxFailures(*i)
	}
	return msuo
}

// AddMaxFailures adds i to the "max_failures" field.
func (msuo *MethodSettingUpdateOne) AddMaxFailures(i int) *MethodSettingUpdateOne {
	msuo.mutation.AddMaxFailures(i)
	return msuo
}

// SetLockDurationSecs sets the "lock_duration_secs" field.
func (msuo *MethodSettingUpdateOne) SetLockDurationSecs(i int) *MethodSettingUpdateOne {
	msuo.mutation.ResetLockDurationSecs()
	msuo.mutation.SetLockDurationSecs(i)
	return msuo
}

// SetNillableLockDurationSecs sets the "lock_duration_secs" field if the given value is not nil.
func (msuo *MethodSettingUpdateOne) SetNillableLockDurationSecs(i *int) *MethodSettingUpdateOne {
	if i != nil {
		msuo.SetLockDurationSecs(*i)
	}
	return msuo
}

// AddLockDurationSecs adds i to the "lock_duration_secs" field.
func (msuo *MethodSettingUpdateOne) AddLockDurationSecs(i int) *MethodSettingUpdateOne {
	msuo.mutation.AddLockDurationSecs(i)
	return msuo
}

// ClearLockDurationSecs clears the value of the "lock_duration_secs" field.
func (msuo *MethodSettingUpdateOne) ClearLockDurationSecs() *MethodSettingUpdateOne {
	msuo.mutation.ClearLockDurationSecs()
	return msuo
}

// Mutation returns the MethodSettingMutation object of the builder.
func (msuo *MethodSettingUpdateOne) Mutation() *MethodSettingMutation {
	return msuo.mutation
}

// Where appends a list predicates to the MethodSettingUpdate builder.
func (msuo *MethodSettingUpdateOne) Where(ps ...predicate.MethodSetting) *MethodSettingUpdateOne {
	msuo.mutation.Where(ps...)
	return msuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (msuo *MethodSettingUpdateOne) Select(field string, fields ...string) *MethodSettingUpdateOne {
	msuo.fields = append([]string{field}, fields...)
	return msuo
}

// Save executes the query and returns the updated MethodSetting entity.
func (msuo *MethodSettingUpdateOne) Save(ctx context.Context) (*MethodSetting, error) {
	return withHooks(ctx, msuo.sqlSave, msuo.mutation, msuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (msuo *MethodSettingUpdateOne) SaveX(ctx context.Context) *MethodSetting {
	node, err := msuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (msuo *MethodSettingUpdateOne) Exec(ctx context.Context) error {
	_, err := msuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (msuo *MethodSettingUpdateOne) ExecX(ctx context.Context) {
	if err := msuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (msuo *MethodSettingUpdateOne) sqlSave(ctx context.Context) (_node *MethodSetting, err error) {
	_spec := sqlgraph.NewUpdateSpec(methodsetting.Table, methodsetting.Columns, sqlgraph.NewFieldSpec(methodsetting.FieldID, field.TypeString))
	id, ok := msuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MethodSetting.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := msuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, methodsetting.FieldID)
		for _, f := range fields {
			if !methodsetting.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != methodsetting.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := msuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := msuo.mutation.Method(); ok {
		_spec.SetField(methodsetting.FieldMethod, field.TypeString, value)
	}
	if value, ok := msuo.mutation.Order(); ok {
		_spec.SetField(methodsetting.FieldOrder, field.TypeInt, value)
	}
	if value, ok := msuo.mutation.AddedOrder(); ok {
		_spec.AddField(methodsetting.FieldOrder, field.TypeInt, value)
	}
	if value, ok := msuo.mutation.MaxFailures(); ok {
		_spec.SetField(methodsetting.FieldMaxFailures, field.TypeInt, value)
	}
	if value, ok := msuo.mutation.AddedMaxFailures(); ok {
		_spec.AddField(methodsetting.FieldMaxFailures, field.TypeInt, value)
	}
	if value, ok := msuo.mutation.LockDurationSecs(); ok {
		_spec.SetField(methodsetting.FieldLockDurationSecs, field.TypeInt, value)
	}
	if value, ok := msuo.mutation.AddedLockDurationSecs(); ok {
		_spec.AddField(methodsetting.FieldLockDurationSecs, field.TypeInt, value)
	}
	if msuo.mutation.LockDurationSecsCleared() {
		_spec.ClearField(methodsetting.FieldLockDurationSecs, field.TypeInt)
	}
	if msuo.mutation.SubjectRefCleared() {
		_spec.ClearField(methodsetting.FieldSubjectRef, field.TypeString)
	}
	if msuo.mutation.SubjectSourceRefCleared() {
		_spec.ClearField(methodsetting.FieldSubjectSourceRef, field.TypeString)
	}
	_node = &MethodSetting{config: msuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, msuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{methodsetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	msuo.mutation.done = true
	return _node, nil
}
