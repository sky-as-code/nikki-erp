// Code generated by ent, DO NOT EDIT.

package loginattempt

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the loginattempt type in the database.
	Label = "login_attempt"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldMethods holds the string denoting the methods field in the database.
	FieldMethods = "methods"
	// FieldCurrentMethod holds the string denoting the current_method field in the database.
	FieldCurrentMethod = "current_method"
	// FieldDeviceIP holds the string denoting the device_ip field in the database.
	FieldDeviceIP = "device_ip"
	// FieldDeviceName holds the string denoting the device_name field in the database.
	FieldDeviceName = "device_name"
	// FieldDeviceLocation holds the string denoting the device_location field in the database.
	FieldDeviceLocation = "device_location"
	// FieldExpiredAt holds the string denoting the expired_at field in the database.
	FieldExpiredAt = "expired_at"
	// FieldIsGenuine holds the string denoting the is_genuine field in the database.
	FieldIsGenuine = "is_genuine"
	// FieldSubjectType holds the string denoting the subject_type field in the database.
	FieldSubjectType = "subject_type"
	// FieldSubjectRef holds the string denoting the subject_ref field in the database.
	FieldSubjectRef = "subject_ref"
	// FieldSubjectSourceRef holds the string denoting the subject_source_ref field in the database.
	FieldSubjectSourceRef = "subject_source_ref"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the loginattempt in the database.
	Table = "authn_attempts"
)

// Columns holds all SQL columns for loginattempt fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldMethods,
	FieldCurrentMethod,
	FieldDeviceIP,
	FieldDeviceName,
	FieldDeviceLocation,
	FieldExpiredAt,
	FieldIsGenuine,
	FieldSubjectType,
	FieldSubjectRef,
	FieldSubjectSourceRef,
	FieldStatus,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the LoginAttempt queries.
type OrderOption = func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByCurrentMethod orders the results by the current_method field.
func ByCurrentMethod(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrentMethod, opts...).ToFunc()
}

// ByDeviceIP orders the results by the device_ip field.
func ByDeviceIP(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeviceIP, opts...).ToFunc()
}

// ByDeviceName orders the results by the device_name field.
func ByDeviceName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeviceName, opts...).ToFunc()
}

// ByDeviceLocation orders the results by the device_location field.
func ByDeviceLocation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeviceLocation, opts...).ToFunc()
}

// ByExpiredAt orders the results by the expired_at field.
func ByExpiredAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpiredAt, opts...).ToFunc()
}

// ByIsGenuine orders the results by the is_genuine field.
func ByIsGenuine(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsGenuine, opts...).ToFunc()
}

// BySubjectType orders the results by the subject_type field.
func BySubjectType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubjectType, opts...).ToFunc()
}

// BySubjectRef orders the results by the subject_ref field.
func BySubjectRef(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubjectRef, opts...).ToFunc()
}

// BySubjectSourceRef orders the results by the subject_source_ref field.
func BySubjectSourceRef(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubjectSourceRef, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
