// Code generated by ent, DO NOT EDIT.

package loginattempt

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/sky-as-code/nikki-erp/modules/authenticate/infra/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldEQ(FieldCreatedAt, v))
}

// CurrentMethod applies equality check predicate on the "current_method" field. It's identical to CurrentMethodEQ.
func CurrentMethod(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldEQ(FieldCurrentMethod, v))
}

// DeviceIP applies equality check predicate on the "device_ip" field. It's identical to DeviceIPEQ.
func DeviceIP(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldEQ(FieldDeviceIP, v))
}

// DeviceName applies equality check predicate on the "device_name" field. It's identical to DeviceNameEQ.
func DeviceName(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldEQ(FieldDeviceName, v))
}

// DeviceLocation applies equality check predicate on the "device_location" field. It's identical to DeviceLocationEQ.
func DeviceLocation(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldEQ(FieldDeviceLocation, v))
}

// ExpiredAt applies equality check predicate on the "expired_at" field. It's identical to ExpiredAtEQ.
func ExpiredAt(v time.Time) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldEQ(FieldExpiredAt, v))
}

// IsGenuine applies equality check predicate on the "is_genuine" field. It's identical to IsGenuineEQ.
func IsGenuine(v bool) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldEQ(FieldIsGenuine, v))
}

// SubjectType applies equality check predicate on the "subject_type" field. It's identical to SubjectTypeEQ.
func SubjectType(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldEQ(FieldSubjectType, v))
}

// SubjectRef applies equality check predicate on the "subject_ref" field. It's identical to SubjectRefEQ.
func SubjectRef(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldEQ(FieldSubjectRef, v))
}

// SubjectSourceRef applies equality check predicate on the "subject_source_ref" field. It's identical to SubjectSourceRefEQ.
func SubjectSourceRef(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldEQ(FieldSubjectSourceRef, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldEQ(FieldStatus, v))
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldEQ(FieldUsername, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldLTE(FieldCreatedAt, v))
}

// CurrentMethodEQ applies the EQ predicate on the "current_method" field.
func CurrentMethodEQ(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldEQ(FieldCurrentMethod, v))
}

// CurrentMethodNEQ applies the NEQ predicate on the "current_method" field.
func CurrentMethodNEQ(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldNEQ(FieldCurrentMethod, v))
}

// CurrentMethodIn applies the In predicate on the "current_method" field.
func CurrentMethodIn(vs ...string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldIn(FieldCurrentMethod, vs...))
}

// CurrentMethodNotIn applies the NotIn predicate on the "current_method" field.
func CurrentMethodNotIn(vs ...string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldNotIn(FieldCurrentMethod, vs...))
}

// CurrentMethodGT applies the GT predicate on the "current_method" field.
func CurrentMethodGT(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldGT(FieldCurrentMethod, v))
}

// CurrentMethodGTE applies the GTE predicate on the "current_method" field.
func CurrentMethodGTE(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldGTE(FieldCurrentMethod, v))
}

// CurrentMethodLT applies the LT predicate on the "current_method" field.
func CurrentMethodLT(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldLT(FieldCurrentMethod, v))
}

// CurrentMethodLTE applies the LTE predicate on the "current_method" field.
func CurrentMethodLTE(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldLTE(FieldCurrentMethod, v))
}

// CurrentMethodContains applies the Contains predicate on the "current_method" field.
func CurrentMethodContains(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldContains(FieldCurrentMethod, v))
}

// CurrentMethodHasPrefix applies the HasPrefix predicate on the "current_method" field.
func CurrentMethodHasPrefix(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldHasPrefix(FieldCurrentMethod, v))
}

// CurrentMethodHasSuffix applies the HasSuffix predicate on the "current_method" field.
func CurrentMethodHasSuffix(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldHasSuffix(FieldCurrentMethod, v))
}

// CurrentMethodIsNil applies the IsNil predicate on the "current_method" field.
func CurrentMethodIsNil() predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldIsNull(FieldCurrentMethod))
}

// CurrentMethodNotNil applies the NotNil predicate on the "current_method" field.
func CurrentMethodNotNil() predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldNotNull(FieldCurrentMethod))
}

// CurrentMethodEqualFold applies the EqualFold predicate on the "current_method" field.
func CurrentMethodEqualFold(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldEqualFold(FieldCurrentMethod, v))
}

// CurrentMethodContainsFold applies the ContainsFold predicate on the "current_method" field.
func CurrentMethodContainsFold(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldContainsFold(FieldCurrentMethod, v))
}

// DeviceIPEQ applies the EQ predicate on the "device_ip" field.
func DeviceIPEQ(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldEQ(FieldDeviceIP, v))
}

// DeviceIPNEQ applies the NEQ predicate on the "device_ip" field.
func DeviceIPNEQ(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldNEQ(FieldDeviceIP, v))
}

// DeviceIPIn applies the In predicate on the "device_ip" field.
func DeviceIPIn(vs ...string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldIn(FieldDeviceIP, vs...))
}

// DeviceIPNotIn applies the NotIn predicate on the "device_ip" field.
func DeviceIPNotIn(vs ...string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldNotIn(FieldDeviceIP, vs...))
}

// DeviceIPGT applies the GT predicate on the "device_ip" field.
func DeviceIPGT(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldGT(FieldDeviceIP, v))
}

// DeviceIPGTE applies the GTE predicate on the "device_ip" field.
func DeviceIPGTE(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldGTE(FieldDeviceIP, v))
}

// DeviceIPLT applies the LT predicate on the "device_ip" field.
func DeviceIPLT(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldLT(FieldDeviceIP, v))
}

// DeviceIPLTE applies the LTE predicate on the "device_ip" field.
func DeviceIPLTE(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldLTE(FieldDeviceIP, v))
}

// DeviceIPContains applies the Contains predicate on the "device_ip" field.
func DeviceIPContains(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldContains(FieldDeviceIP, v))
}

// DeviceIPHasPrefix applies the HasPrefix predicate on the "device_ip" field.
func DeviceIPHasPrefix(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldHasPrefix(FieldDeviceIP, v))
}

// DeviceIPHasSuffix applies the HasSuffix predicate on the "device_ip" field.
func DeviceIPHasSuffix(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldHasSuffix(FieldDeviceIP, v))
}

// DeviceIPIsNil applies the IsNil predicate on the "device_ip" field.
func DeviceIPIsNil() predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldIsNull(FieldDeviceIP))
}

// DeviceIPNotNil applies the NotNil predicate on the "device_ip" field.
func DeviceIPNotNil() predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldNotNull(FieldDeviceIP))
}

// DeviceIPEqualFold applies the EqualFold predicate on the "device_ip" field.
func DeviceIPEqualFold(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldEqualFold(FieldDeviceIP, v))
}

// DeviceIPContainsFold applies the ContainsFold predicate on the "device_ip" field.
func DeviceIPContainsFold(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldContainsFold(FieldDeviceIP, v))
}

// DeviceNameEQ applies the EQ predicate on the "device_name" field.
func DeviceNameEQ(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldEQ(FieldDeviceName, v))
}

// DeviceNameNEQ applies the NEQ predicate on the "device_name" field.
func DeviceNameNEQ(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldNEQ(FieldDeviceName, v))
}

// DeviceNameIn applies the In predicate on the "device_name" field.
func DeviceNameIn(vs ...string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldIn(FieldDeviceName, vs...))
}

// DeviceNameNotIn applies the NotIn predicate on the "device_name" field.
func DeviceNameNotIn(vs ...string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldNotIn(FieldDeviceName, vs...))
}

// DeviceNameGT applies the GT predicate on the "device_name" field.
func DeviceNameGT(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldGT(FieldDeviceName, v))
}

// DeviceNameGTE applies the GTE predicate on the "device_name" field.
func DeviceNameGTE(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldGTE(FieldDeviceName, v))
}

// DeviceNameLT applies the LT predicate on the "device_name" field.
func DeviceNameLT(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldLT(FieldDeviceName, v))
}

// DeviceNameLTE applies the LTE predicate on the "device_name" field.
func DeviceNameLTE(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldLTE(FieldDeviceName, v))
}

// DeviceNameContains applies the Contains predicate on the "device_name" field.
func DeviceNameContains(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldContains(FieldDeviceName, v))
}

// DeviceNameHasPrefix applies the HasPrefix predicate on the "device_name" field.
func DeviceNameHasPrefix(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldHasPrefix(FieldDeviceName, v))
}

// DeviceNameHasSuffix applies the HasSuffix predicate on the "device_name" field.
func DeviceNameHasSuffix(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldHasSuffix(FieldDeviceName, v))
}

// DeviceNameIsNil applies the IsNil predicate on the "device_name" field.
func DeviceNameIsNil() predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldIsNull(FieldDeviceName))
}

// DeviceNameNotNil applies the NotNil predicate on the "device_name" field.
func DeviceNameNotNil() predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldNotNull(FieldDeviceName))
}

// DeviceNameEqualFold applies the EqualFold predicate on the "device_name" field.
func DeviceNameEqualFold(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldEqualFold(FieldDeviceName, v))
}

// DeviceNameContainsFold applies the ContainsFold predicate on the "device_name" field.
func DeviceNameContainsFold(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldContainsFold(FieldDeviceName, v))
}

// DeviceLocationEQ applies the EQ predicate on the "device_location" field.
func DeviceLocationEQ(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldEQ(FieldDeviceLocation, v))
}

// DeviceLocationNEQ applies the NEQ predicate on the "device_location" field.
func DeviceLocationNEQ(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldNEQ(FieldDeviceLocation, v))
}

// DeviceLocationIn applies the In predicate on the "device_location" field.
func DeviceLocationIn(vs ...string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldIn(FieldDeviceLocation, vs...))
}

// DeviceLocationNotIn applies the NotIn predicate on the "device_location" field.
func DeviceLocationNotIn(vs ...string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldNotIn(FieldDeviceLocation, vs...))
}

// DeviceLocationGT applies the GT predicate on the "device_location" field.
func DeviceLocationGT(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldGT(FieldDeviceLocation, v))
}

// DeviceLocationGTE applies the GTE predicate on the "device_location" field.
func DeviceLocationGTE(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldGTE(FieldDeviceLocation, v))
}

// DeviceLocationLT applies the LT predicate on the "device_location" field.
func DeviceLocationLT(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldLT(FieldDeviceLocation, v))
}

// DeviceLocationLTE applies the LTE predicate on the "device_location" field.
func DeviceLocationLTE(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldLTE(FieldDeviceLocation, v))
}

// DeviceLocationContains applies the Contains predicate on the "device_location" field.
func DeviceLocationContains(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldContains(FieldDeviceLocation, v))
}

// DeviceLocationHasPrefix applies the HasPrefix predicate on the "device_location" field.
func DeviceLocationHasPrefix(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldHasPrefix(FieldDeviceLocation, v))
}

// DeviceLocationHasSuffix applies the HasSuffix predicate on the "device_location" field.
func DeviceLocationHasSuffix(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldHasSuffix(FieldDeviceLocation, v))
}

// DeviceLocationIsNil applies the IsNil predicate on the "device_location" field.
func DeviceLocationIsNil() predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldIsNull(FieldDeviceLocation))
}

// DeviceLocationNotNil applies the NotNil predicate on the "device_location" field.
func DeviceLocationNotNil() predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldNotNull(FieldDeviceLocation))
}

// DeviceLocationEqualFold applies the EqualFold predicate on the "device_location" field.
func DeviceLocationEqualFold(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldEqualFold(FieldDeviceLocation, v))
}

// DeviceLocationContainsFold applies the ContainsFold predicate on the "device_location" field.
func DeviceLocationContainsFold(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldContainsFold(FieldDeviceLocation, v))
}

// ExpiredAtEQ applies the EQ predicate on the "expired_at" field.
func ExpiredAtEQ(v time.Time) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldEQ(FieldExpiredAt, v))
}

// ExpiredAtNEQ applies the NEQ predicate on the "expired_at" field.
func ExpiredAtNEQ(v time.Time) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldNEQ(FieldExpiredAt, v))
}

// ExpiredAtIn applies the In predicate on the "expired_at" field.
func ExpiredAtIn(vs ...time.Time) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldIn(FieldExpiredAt, vs...))
}

// ExpiredAtNotIn applies the NotIn predicate on the "expired_at" field.
func ExpiredAtNotIn(vs ...time.Time) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldNotIn(FieldExpiredAt, vs...))
}

// ExpiredAtGT applies the GT predicate on the "expired_at" field.
func ExpiredAtGT(v time.Time) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldGT(FieldExpiredAt, v))
}

// ExpiredAtGTE applies the GTE predicate on the "expired_at" field.
func ExpiredAtGTE(v time.Time) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldGTE(FieldExpiredAt, v))
}

// ExpiredAtLT applies the LT predicate on the "expired_at" field.
func ExpiredAtLT(v time.Time) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldLT(FieldExpiredAt, v))
}

// ExpiredAtLTE applies the LTE predicate on the "expired_at" field.
func ExpiredAtLTE(v time.Time) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldLTE(FieldExpiredAt, v))
}

// IsGenuineEQ applies the EQ predicate on the "is_genuine" field.
func IsGenuineEQ(v bool) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldEQ(FieldIsGenuine, v))
}

// IsGenuineNEQ applies the NEQ predicate on the "is_genuine" field.
func IsGenuineNEQ(v bool) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldNEQ(FieldIsGenuine, v))
}

// SubjectTypeEQ applies the EQ predicate on the "subject_type" field.
func SubjectTypeEQ(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldEQ(FieldSubjectType, v))
}

// SubjectTypeNEQ applies the NEQ predicate on the "subject_type" field.
func SubjectTypeNEQ(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldNEQ(FieldSubjectType, v))
}

// SubjectTypeIn applies the In predicate on the "subject_type" field.
func SubjectTypeIn(vs ...string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldIn(FieldSubjectType, vs...))
}

// SubjectTypeNotIn applies the NotIn predicate on the "subject_type" field.
func SubjectTypeNotIn(vs ...string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldNotIn(FieldSubjectType, vs...))
}

// SubjectTypeGT applies the GT predicate on the "subject_type" field.
func SubjectTypeGT(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldGT(FieldSubjectType, v))
}

// SubjectTypeGTE applies the GTE predicate on the "subject_type" field.
func SubjectTypeGTE(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldGTE(FieldSubjectType, v))
}

// SubjectTypeLT applies the LT predicate on the "subject_type" field.
func SubjectTypeLT(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldLT(FieldSubjectType, v))
}

// SubjectTypeLTE applies the LTE predicate on the "subject_type" field.
func SubjectTypeLTE(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldLTE(FieldSubjectType, v))
}

// SubjectTypeContains applies the Contains predicate on the "subject_type" field.
func SubjectTypeContains(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldContains(FieldSubjectType, v))
}

// SubjectTypeHasPrefix applies the HasPrefix predicate on the "subject_type" field.
func SubjectTypeHasPrefix(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldHasPrefix(FieldSubjectType, v))
}

// SubjectTypeHasSuffix applies the HasSuffix predicate on the "subject_type" field.
func SubjectTypeHasSuffix(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldHasSuffix(FieldSubjectType, v))
}

// SubjectTypeEqualFold applies the EqualFold predicate on the "subject_type" field.
func SubjectTypeEqualFold(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldEqualFold(FieldSubjectType, v))
}

// SubjectTypeContainsFold applies the ContainsFold predicate on the "subject_type" field.
func SubjectTypeContainsFold(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldContainsFold(FieldSubjectType, v))
}

// SubjectRefEQ applies the EQ predicate on the "subject_ref" field.
func SubjectRefEQ(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldEQ(FieldSubjectRef, v))
}

// SubjectRefNEQ applies the NEQ predicate on the "subject_ref" field.
func SubjectRefNEQ(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldNEQ(FieldSubjectRef, v))
}

// SubjectRefIn applies the In predicate on the "subject_ref" field.
func SubjectRefIn(vs ...string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldIn(FieldSubjectRef, vs...))
}

// SubjectRefNotIn applies the NotIn predicate on the "subject_ref" field.
func SubjectRefNotIn(vs ...string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldNotIn(FieldSubjectRef, vs...))
}

// SubjectRefGT applies the GT predicate on the "subject_ref" field.
func SubjectRefGT(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldGT(FieldSubjectRef, v))
}

// SubjectRefGTE applies the GTE predicate on the "subject_ref" field.
func SubjectRefGTE(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldGTE(FieldSubjectRef, v))
}

// SubjectRefLT applies the LT predicate on the "subject_ref" field.
func SubjectRefLT(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldLT(FieldSubjectRef, v))
}

// SubjectRefLTE applies the LTE predicate on the "subject_ref" field.
func SubjectRefLTE(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldLTE(FieldSubjectRef, v))
}

// SubjectRefContains applies the Contains predicate on the "subject_ref" field.
func SubjectRefContains(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldContains(FieldSubjectRef, v))
}

// SubjectRefHasPrefix applies the HasPrefix predicate on the "subject_ref" field.
func SubjectRefHasPrefix(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldHasPrefix(FieldSubjectRef, v))
}

// SubjectRefHasSuffix applies the HasSuffix predicate on the "subject_ref" field.
func SubjectRefHasSuffix(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldHasSuffix(FieldSubjectRef, v))
}

// SubjectRefEqualFold applies the EqualFold predicate on the "subject_ref" field.
func SubjectRefEqualFold(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldEqualFold(FieldSubjectRef, v))
}

// SubjectRefContainsFold applies the ContainsFold predicate on the "subject_ref" field.
func SubjectRefContainsFold(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldContainsFold(FieldSubjectRef, v))
}

// SubjectSourceRefEQ applies the EQ predicate on the "subject_source_ref" field.
func SubjectSourceRefEQ(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldEQ(FieldSubjectSourceRef, v))
}

// SubjectSourceRefNEQ applies the NEQ predicate on the "subject_source_ref" field.
func SubjectSourceRefNEQ(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldNEQ(FieldSubjectSourceRef, v))
}

// SubjectSourceRefIn applies the In predicate on the "subject_source_ref" field.
func SubjectSourceRefIn(vs ...string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldIn(FieldSubjectSourceRef, vs...))
}

// SubjectSourceRefNotIn applies the NotIn predicate on the "subject_source_ref" field.
func SubjectSourceRefNotIn(vs ...string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldNotIn(FieldSubjectSourceRef, vs...))
}

// SubjectSourceRefGT applies the GT predicate on the "subject_source_ref" field.
func SubjectSourceRefGT(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldGT(FieldSubjectSourceRef, v))
}

// SubjectSourceRefGTE applies the GTE predicate on the "subject_source_ref" field.
func SubjectSourceRefGTE(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldGTE(FieldSubjectSourceRef, v))
}

// SubjectSourceRefLT applies the LT predicate on the "subject_source_ref" field.
func SubjectSourceRefLT(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldLT(FieldSubjectSourceRef, v))
}

// SubjectSourceRefLTE applies the LTE predicate on the "subject_source_ref" field.
func SubjectSourceRefLTE(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldLTE(FieldSubjectSourceRef, v))
}

// SubjectSourceRefContains applies the Contains predicate on the "subject_source_ref" field.
func SubjectSourceRefContains(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldContains(FieldSubjectSourceRef, v))
}

// SubjectSourceRefHasPrefix applies the HasPrefix predicate on the "subject_source_ref" field.
func SubjectSourceRefHasPrefix(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldHasPrefix(FieldSubjectSourceRef, v))
}

// SubjectSourceRefHasSuffix applies the HasSuffix predicate on the "subject_source_ref" field.
func SubjectSourceRefHasSuffix(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldHasSuffix(FieldSubjectSourceRef, v))
}

// SubjectSourceRefIsNil applies the IsNil predicate on the "subject_source_ref" field.
func SubjectSourceRefIsNil() predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldIsNull(FieldSubjectSourceRef))
}

// SubjectSourceRefNotNil applies the NotNil predicate on the "subject_source_ref" field.
func SubjectSourceRefNotNil() predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldNotNull(FieldSubjectSourceRef))
}

// SubjectSourceRefEqualFold applies the EqualFold predicate on the "subject_source_ref" field.
func SubjectSourceRefEqualFold(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldEqualFold(FieldSubjectSourceRef, v))
}

// SubjectSourceRefContainsFold applies the ContainsFold predicate on the "subject_source_ref" field.
func SubjectSourceRefContainsFold(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldContainsFold(FieldSubjectSourceRef, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldContainsFold(FieldStatus, v))
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldLTE(FieldUsername, v))
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldContains(FieldUsername, v))
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldHasPrefix(FieldUsername, v))
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldHasSuffix(FieldUsername, v))
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldEqualFold(FieldUsername, v))
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldContainsFold(FieldUsername, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.FieldNotNull(FieldUpdatedAt))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.LoginAttempt) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.LoginAttempt) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.LoginAttempt) predicate.LoginAttempt {
	return predicate.LoginAttempt(sql.NotPredicates(p))
}
