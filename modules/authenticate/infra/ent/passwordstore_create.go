// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky-as-code/nikki-erp/modules/authenticate/infra/ent/passwordstore"
)

// PasswordStoreCreate is the builder for creating a PasswordStore entity.
type PasswordStoreCreate struct {
	config
	mutation *PasswordStoreMutation
	hooks    []Hook
}

// SetPassword sets the "password" field.
func (psc *PasswordStoreCreate) SetPassword(s string) *PasswordStoreCreate {
	psc.mutation.SetPassword(s)
	return psc
}

// SetPasswordExpiredAt sets the "password_expired_at" field.
func (psc *PasswordStoreCreate) SetPasswordExpiredAt(t time.Time) *PasswordStoreCreate {
	psc.mutation.SetPasswordExpiredAt(t)
	return psc
}

// SetNillablePasswordExpiredAt sets the "password_expired_at" field if the given value is not nil.
func (psc *PasswordStoreCreate) SetNillablePasswordExpiredAt(t *time.Time) *PasswordStoreCreate {
	if t != nil {
		psc.SetPasswordExpiredAt(*t)
	}
	return psc
}

// SetPasswordUpdatedAt sets the "password_updated_at" field.
func (psc *PasswordStoreCreate) SetPasswordUpdatedAt(t time.Time) *PasswordStoreCreate {
	psc.mutation.SetPasswordUpdatedAt(t)
	return psc
}

// SetPasswordtmp sets the "passwordtmp" field.
func (psc *PasswordStoreCreate) SetPasswordtmp(s string) *PasswordStoreCreate {
	psc.mutation.SetPasswordtmp(s)
	return psc
}

// SetNillablePasswordtmp sets the "passwordtmp" field if the given value is not nil.
func (psc *PasswordStoreCreate) SetNillablePasswordtmp(s *string) *PasswordStoreCreate {
	if s != nil {
		psc.SetPasswordtmp(*s)
	}
	return psc
}

// SetPasswordtmpExpiredAt sets the "passwordtmp_expired_at" field.
func (psc *PasswordStoreCreate) SetPasswordtmpExpiredAt(t time.Time) *PasswordStoreCreate {
	psc.mutation.SetPasswordtmpExpiredAt(t)
	return psc
}

// SetNillablePasswordtmpExpiredAt sets the "passwordtmp_expired_at" field if the given value is not nil.
func (psc *PasswordStoreCreate) SetNillablePasswordtmpExpiredAt(t *time.Time) *PasswordStoreCreate {
	if t != nil {
		psc.SetPasswordtmpExpiredAt(*t)
	}
	return psc
}

// SetPasswordotp sets the "passwordotp" field.
func (psc *PasswordStoreCreate) SetPasswordotp(s string) *PasswordStoreCreate {
	psc.mutation.SetPasswordotp(s)
	return psc
}

// SetNillablePasswordotp sets the "passwordotp" field if the given value is not nil.
func (psc *PasswordStoreCreate) SetNillablePasswordotp(s *string) *PasswordStoreCreate {
	if s != nil {
		psc.SetPasswordotp(*s)
	}
	return psc
}

// SetPasswordotpExpiredAt sets the "passwordotp_expired_at" field.
func (psc *PasswordStoreCreate) SetPasswordotpExpiredAt(t time.Time) *PasswordStoreCreate {
	psc.mutation.SetPasswordotpExpiredAt(t)
	return psc
}

// SetNillablePasswordotpExpiredAt sets the "passwordotp_expired_at" field if the given value is not nil.
func (psc *PasswordStoreCreate) SetNillablePasswordotpExpiredAt(t *time.Time) *PasswordStoreCreate {
	if t != nil {
		psc.SetPasswordotpExpiredAt(*t)
	}
	return psc
}

// SetSubjectType sets the "subject_type" field.
func (psc *PasswordStoreCreate) SetSubjectType(s string) *PasswordStoreCreate {
	psc.mutation.SetSubjectType(s)
	return psc
}

// SetSubjectRef sets the "subject_ref" field.
func (psc *PasswordStoreCreate) SetSubjectRef(s string) *PasswordStoreCreate {
	psc.mutation.SetSubjectRef(s)
	return psc
}

// SetSubjectSourceRef sets the "subject_source_ref" field.
func (psc *PasswordStoreCreate) SetSubjectSourceRef(s string) *PasswordStoreCreate {
	psc.mutation.SetSubjectSourceRef(s)
	return psc
}

// SetNillableSubjectSourceRef sets the "subject_source_ref" field if the given value is not nil.
func (psc *PasswordStoreCreate) SetNillableSubjectSourceRef(s *string) *PasswordStoreCreate {
	if s != nil {
		psc.SetSubjectSourceRef(*s)
	}
	return psc
}

// SetID sets the "id" field.
func (psc *PasswordStoreCreate) SetID(s string) *PasswordStoreCreate {
	psc.mutation.SetID(s)
	return psc
}

// Mutation returns the PasswordStoreMutation object of the builder.
func (psc *PasswordStoreCreate) Mutation() *PasswordStoreMutation {
	return psc.mutation
}

// Save creates the PasswordStore in the database.
func (psc *PasswordStoreCreate) Save(ctx context.Context) (*PasswordStore, error) {
	return withHooks(ctx, psc.sqlSave, psc.mutation, psc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (psc *PasswordStoreCreate) SaveX(ctx context.Context) *PasswordStore {
	v, err := psc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (psc *PasswordStoreCreate) Exec(ctx context.Context) error {
	_, err := psc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psc *PasswordStoreCreate) ExecX(ctx context.Context) {
	if err := psc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psc *PasswordStoreCreate) check() error {
	if _, ok := psc.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`ent: missing required field "PasswordStore.password"`)}
	}
	if _, ok := psc.mutation.PasswordUpdatedAt(); !ok {
		return &ValidationError{Name: "password_updated_at", err: errors.New(`ent: missing required field "PasswordStore.password_updated_at"`)}
	}
	if _, ok := psc.mutation.SubjectType(); !ok {
		return &ValidationError{Name: "subject_type", err: errors.New(`ent: missing required field "PasswordStore.subject_type"`)}
	}
	if _, ok := psc.mutation.SubjectRef(); !ok {
		return &ValidationError{Name: "subject_ref", err: errors.New(`ent: missing required field "PasswordStore.subject_ref"`)}
	}
	return nil
}

func (psc *PasswordStoreCreate) sqlSave(ctx context.Context) (*PasswordStore, error) {
	if err := psc.check(); err != nil {
		return nil, err
	}
	_node, _spec := psc.createSpec()
	if err := sqlgraph.CreateNode(ctx, psc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected PasswordStore.ID type: %T", _spec.ID.Value)
		}
	}
	psc.mutation.id = &_node.ID
	psc.mutation.done = true
	return _node, nil
}

func (psc *PasswordStoreCreate) createSpec() (*PasswordStore, *sqlgraph.CreateSpec) {
	var (
		_node = &PasswordStore{config: psc.config}
		_spec = sqlgraph.NewCreateSpec(passwordstore.Table, sqlgraph.NewFieldSpec(passwordstore.FieldID, field.TypeString))
	)
	if id, ok := psc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := psc.mutation.Password(); ok {
		_spec.SetField(passwordstore.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := psc.mutation.PasswordExpiredAt(); ok {
		_spec.SetField(passwordstore.FieldPasswordExpiredAt, field.TypeTime, value)
		_node.PasswordExpiredAt = &value
	}
	if value, ok := psc.mutation.PasswordUpdatedAt(); ok {
		_spec.SetField(passwordstore.FieldPasswordUpdatedAt, field.TypeTime, value)
		_node.PasswordUpdatedAt = value
	}
	if value, ok := psc.mutation.Passwordtmp(); ok {
		_spec.SetField(passwordstore.FieldPasswordtmp, field.TypeString, value)
		_node.Passwordtmp = &value
	}
	if value, ok := psc.mutation.PasswordtmpExpiredAt(); ok {
		_spec.SetField(passwordstore.FieldPasswordtmpExpiredAt, field.TypeTime, value)
		_node.PasswordtmpExpiredAt = &value
	}
	if value, ok := psc.mutation.Passwordotp(); ok {
		_spec.SetField(passwordstore.FieldPasswordotp, field.TypeString, value)
		_node.Passwordotp = &value
	}
	if value, ok := psc.mutation.PasswordotpExpiredAt(); ok {
		_spec.SetField(passwordstore.FieldPasswordotpExpiredAt, field.TypeTime, value)
		_node.PasswordotpExpiredAt = &value
	}
	if value, ok := psc.mutation.SubjectType(); ok {
		_spec.SetField(passwordstore.FieldSubjectType, field.TypeString, value)
		_node.SubjectType = value
	}
	if value, ok := psc.mutation.SubjectRef(); ok {
		_spec.SetField(passwordstore.FieldSubjectRef, field.TypeString, value)
		_node.SubjectRef = value
	}
	if value, ok := psc.mutation.SubjectSourceRef(); ok {
		_spec.SetField(passwordstore.FieldSubjectSourceRef, field.TypeString, value)
		_node.SubjectSourceRef = &value
	}
	return _node, _spec
}

// PasswordStoreCreateBulk is the builder for creating many PasswordStore entities in bulk.
type PasswordStoreCreateBulk struct {
	config
	err      error
	builders []*PasswordStoreCreate
}

// Save creates the PasswordStore entities in the database.
func (pscb *PasswordStoreCreateBulk) Save(ctx context.Context) ([]*PasswordStore, error) {
	if pscb.err != nil {
		return nil, pscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pscb.builders))
	nodes := make([]*PasswordStore, len(pscb.builders))
	mutators := make([]Mutator, len(pscb.builders))
	for i := range pscb.builders {
		func(i int, root context.Context) {
			builder := pscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PasswordStoreMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pscb *PasswordStoreCreateBulk) SaveX(ctx context.Context) []*PasswordStore {
	v, err := pscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pscb *PasswordStoreCreateBulk) Exec(ctx context.Context) error {
	_, err := pscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pscb *PasswordStoreCreateBulk) ExecX(ctx context.Context) {
	if err := pscb.Exec(ctx); err != nil {
		panic(err)
	}
}
