// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky-as-code/nikki-erp/common/model"
	"github.com/sky-as-code/nikki-erp/modules/authenticate/infra/ent/authnenum"
	"github.com/sky-as-code/nikki-erp/modules/authenticate/infra/ent/predicate"
)

// AuthNEnumUpdate is the builder for updating AuthNEnum entities.
type AuthNEnumUpdate struct {
	config
	hooks    []Hook
	mutation *AuthNEnumMutation
}

// Where appends a list predicates to the AuthNEnumUpdate builder.
func (anu *AuthNEnumUpdate) Where(ps ...predicate.AuthNEnum) *AuthNEnumUpdate {
	anu.mutation.Where(ps...)
	return anu
}

// SetEtag sets the "etag" field.
func (anu *AuthNEnumUpdate) SetEtag(s string) *AuthNEnumUpdate {
	anu.mutation.SetEtag(s)
	return anu
}

// SetNillableEtag sets the "etag" field if the given value is not nil.
func (anu *AuthNEnumUpdate) SetNillableEtag(s *string) *AuthNEnumUpdate {
	if s != nil {
		anu.SetEtag(*s)
	}
	return anu
}

// SetLabel sets the "label" field.
func (anu *AuthNEnumUpdate) SetLabel(mj model.LangJson) *AuthNEnumUpdate {
	anu.mutation.SetLabel(mj)
	return anu
}

// SetValue sets the "value" field.
func (anu *AuthNEnumUpdate) SetValue(s string) *AuthNEnumUpdate {
	anu.mutation.SetValue(s)
	return anu
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (anu *AuthNEnumUpdate) SetNillableValue(s *string) *AuthNEnumUpdate {
	if s != nil {
		anu.SetValue(*s)
	}
	return anu
}

// ClearValue clears the value of the "value" field.
func (anu *AuthNEnumUpdate) ClearValue() *AuthNEnumUpdate {
	anu.mutation.ClearValue()
	return anu
}

// SetType sets the "type" field.
func (anu *AuthNEnumUpdate) SetType(s string) *AuthNEnumUpdate {
	anu.mutation.SetType(s)
	return anu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (anu *AuthNEnumUpdate) SetNillableType(s *string) *AuthNEnumUpdate {
	if s != nil {
		anu.SetType(*s)
	}
	return anu
}

// Mutation returns the AuthNEnumMutation object of the builder.
func (anu *AuthNEnumUpdate) Mutation() *AuthNEnumMutation {
	return anu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (anu *AuthNEnumUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, anu.sqlSave, anu.mutation, anu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (anu *AuthNEnumUpdate) SaveX(ctx context.Context) int {
	affected, err := anu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (anu *AuthNEnumUpdate) Exec(ctx context.Context) error {
	_, err := anu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (anu *AuthNEnumUpdate) ExecX(ctx context.Context) {
	if err := anu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (anu *AuthNEnumUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(authnenum.Table, authnenum.Columns, sqlgraph.NewFieldSpec(authnenum.FieldID, field.TypeString))
	if ps := anu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := anu.mutation.Etag(); ok {
		_spec.SetField(authnenum.FieldEtag, field.TypeString, value)
	}
	if value, ok := anu.mutation.Label(); ok {
		_spec.SetField(authnenum.FieldLabel, field.TypeJSON, value)
	}
	if value, ok := anu.mutation.Value(); ok {
		_spec.SetField(authnenum.FieldValue, field.TypeString, value)
	}
	if anu.mutation.ValueCleared() {
		_spec.ClearField(authnenum.FieldValue, field.TypeString)
	}
	if value, ok := anu.mutation.GetType(); ok {
		_spec.SetField(authnenum.FieldType, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, anu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authnenum.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	anu.mutation.done = true
	return n, nil
}

// AuthNEnumUpdateOne is the builder for updating a single AuthNEnum entity.
type AuthNEnumUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AuthNEnumMutation
}

// SetEtag sets the "etag" field.
func (anuo *AuthNEnumUpdateOne) SetEtag(s string) *AuthNEnumUpdateOne {
	anuo.mutation.SetEtag(s)
	return anuo
}

// SetNillableEtag sets the "etag" field if the given value is not nil.
func (anuo *AuthNEnumUpdateOne) SetNillableEtag(s *string) *AuthNEnumUpdateOne {
	if s != nil {
		anuo.SetEtag(*s)
	}
	return anuo
}

// SetLabel sets the "label" field.
func (anuo *AuthNEnumUpdateOne) SetLabel(mj model.LangJson) *AuthNEnumUpdateOne {
	anuo.mutation.SetLabel(mj)
	return anuo
}

// SetValue sets the "value" field.
func (anuo *AuthNEnumUpdateOne) SetValue(s string) *AuthNEnumUpdateOne {
	anuo.mutation.SetValue(s)
	return anuo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (anuo *AuthNEnumUpdateOne) SetNillableValue(s *string) *AuthNEnumUpdateOne {
	if s != nil {
		anuo.SetValue(*s)
	}
	return anuo
}

// ClearValue clears the value of the "value" field.
func (anuo *AuthNEnumUpdateOne) ClearValue() *AuthNEnumUpdateOne {
	anuo.mutation.ClearValue()
	return anuo
}

// SetType sets the "type" field.
func (anuo *AuthNEnumUpdateOne) SetType(s string) *AuthNEnumUpdateOne {
	anuo.mutation.SetType(s)
	return anuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (anuo *AuthNEnumUpdateOne) SetNillableType(s *string) *AuthNEnumUpdateOne {
	if s != nil {
		anuo.SetType(*s)
	}
	return anuo
}

// Mutation returns the AuthNEnumMutation object of the builder.
func (anuo *AuthNEnumUpdateOne) Mutation() *AuthNEnumMutation {
	return anuo.mutation
}

// Where appends a list predicates to the AuthNEnumUpdate builder.
func (anuo *AuthNEnumUpdateOne) Where(ps ...predicate.AuthNEnum) *AuthNEnumUpdateOne {
	anuo.mutation.Where(ps...)
	return anuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (anuo *AuthNEnumUpdateOne) Select(field string, fields ...string) *AuthNEnumUpdateOne {
	anuo.fields = append([]string{field}, fields...)
	return anuo
}

// Save executes the query and returns the updated AuthNEnum entity.
func (anuo *AuthNEnumUpdateOne) Save(ctx context.Context) (*AuthNEnum, error) {
	return withHooks(ctx, anuo.sqlSave, anuo.mutation, anuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (anuo *AuthNEnumUpdateOne) SaveX(ctx context.Context) *AuthNEnum {
	node, err := anuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (anuo *AuthNEnumUpdateOne) Exec(ctx context.Context) error {
	_, err := anuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (anuo *AuthNEnumUpdateOne) ExecX(ctx context.Context) {
	if err := anuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (anuo *AuthNEnumUpdateOne) sqlSave(ctx context.Context) (_node *AuthNEnum, err error) {
	_spec := sqlgraph.NewUpdateSpec(authnenum.Table, authnenum.Columns, sqlgraph.NewFieldSpec(authnenum.FieldID, field.TypeString))
	id, ok := anuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AuthNEnum.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := anuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, authnenum.FieldID)
		for _, f := range fields {
			if !authnenum.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != authnenum.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := anuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := anuo.mutation.Etag(); ok {
		_spec.SetField(authnenum.FieldEtag, field.TypeString, value)
	}
	if value, ok := anuo.mutation.Label(); ok {
		_spec.SetField(authnenum.FieldLabel, field.TypeJSON, value)
	}
	if value, ok := anuo.mutation.Value(); ok {
		_spec.SetField(authnenum.FieldValue, field.TypeString, value)
	}
	if anuo.mutation.ValueCleared() {
		_spec.ClearField(authnenum.FieldValue, field.TypeString)
	}
	if value, ok := anuo.mutation.GetType(); ok {
		_spec.SetField(authnenum.FieldType, field.TypeString, value)
	}
	_node = &AuthNEnum{config: anuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, anuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authnenum.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	anuo.mutation.done = true
	return _node, nil
}
