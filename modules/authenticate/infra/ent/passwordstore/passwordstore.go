// Code generated by ent, DO NOT EDIT.

package passwordstore

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the passwordstore type in the database.
	Label = "password_store"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldPasswordExpiredAt holds the string denoting the password_expired_at field in the database.
	FieldPasswordExpiredAt = "password_expired_at"
	// FieldPasswordUpdatedAt holds the string denoting the password_updated_at field in the database.
	FieldPasswordUpdatedAt = "password_updated_at"
	// FieldPasswordtmp holds the string denoting the passwordtmp field in the database.
	FieldPasswordtmp = "passwordtmp"
	// FieldPasswordtmpExpiredAt holds the string denoting the passwordtmp_expired_at field in the database.
	FieldPasswordtmpExpiredAt = "passwordtmp_expired_at"
	// FieldPasswordotp holds the string denoting the passwordotp field in the database.
	FieldPasswordotp = "passwordotp"
	// FieldPasswordotpExpiredAt holds the string denoting the passwordotp_expired_at field in the database.
	FieldPasswordotpExpiredAt = "passwordotp_expired_at"
	// FieldSubjectType holds the string denoting the subject_type field in the database.
	FieldSubjectType = "subject_type"
	// FieldSubjectRef holds the string denoting the subject_ref field in the database.
	FieldSubjectRef = "subject_ref"
	// FieldSubjectSourceRef holds the string denoting the subject_source_ref field in the database.
	FieldSubjectSourceRef = "subject_source_ref"
	// Table holds the table name of the passwordstore in the database.
	Table = "authn_password_stores"
)

// Columns holds all SQL columns for passwordstore fields.
var Columns = []string{
	FieldID,
	FieldPassword,
	FieldPasswordExpiredAt,
	FieldPasswordUpdatedAt,
	FieldPasswordtmp,
	FieldPasswordtmpExpiredAt,
	FieldPasswordotp,
	FieldPasswordotpExpiredAt,
	FieldSubjectType,
	FieldSubjectRef,
	FieldSubjectSourceRef,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the PasswordStore queries.
type OrderOption = func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByPasswordExpiredAt orders the results by the password_expired_at field.
func ByPasswordExpiredAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPasswordExpiredAt, opts...).ToFunc()
}

// ByPasswordUpdatedAt orders the results by the password_updated_at field.
func ByPasswordUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPasswordUpdatedAt, opts...).ToFunc()
}

// ByPasswordtmp orders the results by the passwordtmp field.
func ByPasswordtmp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPasswordtmp, opts...).ToFunc()
}

// ByPasswordtmpExpiredAt orders the results by the passwordtmp_expired_at field.
func ByPasswordtmpExpiredAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPasswordtmpExpiredAt, opts...).ToFunc()
}

// ByPasswordotp orders the results by the passwordotp field.
func ByPasswordotp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPasswordotp, opts...).ToFunc()
}

// ByPasswordotpExpiredAt orders the results by the passwordotp_expired_at field.
func ByPasswordotpExpiredAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPasswordotpExpiredAt, opts...).ToFunc()
}

// BySubjectType orders the results by the subject_type field.
func BySubjectType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubjectType, opts...).ToFunc()
}

// BySubjectRef orders the results by the subject_ref field.
func BySubjectRef(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubjectRef, opts...).ToFunc()
}

// BySubjectSourceRef orders the results by the subject_source_ref field.
func BySubjectSourceRef(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubjectSourceRef, opts...).ToFunc()
}
