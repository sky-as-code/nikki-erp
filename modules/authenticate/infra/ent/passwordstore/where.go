// Code generated by ent, DO NOT EDIT.

package passwordstore

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/sky-as-code/nikki-erp/modules/authenticate/infra/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldContainsFold(FieldID, id))
}

// Password applies equality check predicate on the "password" field. It's identical to PasswordEQ.
func Password(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldEQ(FieldPassword, v))
}

// PasswordExpiredAt applies equality check predicate on the "password_expired_at" field. It's identical to PasswordExpiredAtEQ.
func PasswordExpiredAt(v time.Time) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldEQ(FieldPasswordExpiredAt, v))
}

// PasswordUpdatedAt applies equality check predicate on the "password_updated_at" field. It's identical to PasswordUpdatedAtEQ.
func PasswordUpdatedAt(v time.Time) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldEQ(FieldPasswordUpdatedAt, v))
}

// Passwordtmp applies equality check predicate on the "passwordtmp" field. It's identical to PasswordtmpEQ.
func Passwordtmp(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldEQ(FieldPasswordtmp, v))
}

// PasswordtmpExpiredAt applies equality check predicate on the "passwordtmp_expired_at" field. It's identical to PasswordtmpExpiredAtEQ.
func PasswordtmpExpiredAt(v time.Time) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldEQ(FieldPasswordtmpExpiredAt, v))
}

// Passwordotp applies equality check predicate on the "passwordotp" field. It's identical to PasswordotpEQ.
func Passwordotp(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldEQ(FieldPasswordotp, v))
}

// PasswordotpExpiredAt applies equality check predicate on the "passwordotp_expired_at" field. It's identical to PasswordotpExpiredAtEQ.
func PasswordotpExpiredAt(v time.Time) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldEQ(FieldPasswordotpExpiredAt, v))
}

// SubjectType applies equality check predicate on the "subject_type" field. It's identical to SubjectTypeEQ.
func SubjectType(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldEQ(FieldSubjectType, v))
}

// SubjectRef applies equality check predicate on the "subject_ref" field. It's identical to SubjectRefEQ.
func SubjectRef(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldEQ(FieldSubjectRef, v))
}

// SubjectSourceRef applies equality check predicate on the "subject_source_ref" field. It's identical to SubjectSourceRefEQ.
func SubjectSourceRef(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldEQ(FieldSubjectSourceRef, v))
}

// PasswordEQ applies the EQ predicate on the "password" field.
func PasswordEQ(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldEQ(FieldPassword, v))
}

// PasswordNEQ applies the NEQ predicate on the "password" field.
func PasswordNEQ(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldNEQ(FieldPassword, v))
}

// PasswordIn applies the In predicate on the "password" field.
func PasswordIn(vs ...string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldIn(FieldPassword, vs...))
}

// PasswordNotIn applies the NotIn predicate on the "password" field.
func PasswordNotIn(vs ...string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldNotIn(FieldPassword, vs...))
}

// PasswordGT applies the GT predicate on the "password" field.
func PasswordGT(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldGT(FieldPassword, v))
}

// PasswordGTE applies the GTE predicate on the "password" field.
func PasswordGTE(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldGTE(FieldPassword, v))
}

// PasswordLT applies the LT predicate on the "password" field.
func PasswordLT(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldLT(FieldPassword, v))
}

// PasswordLTE applies the LTE predicate on the "password" field.
func PasswordLTE(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldLTE(FieldPassword, v))
}

// PasswordContains applies the Contains predicate on the "password" field.
func PasswordContains(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldContains(FieldPassword, v))
}

// PasswordHasPrefix applies the HasPrefix predicate on the "password" field.
func PasswordHasPrefix(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldHasPrefix(FieldPassword, v))
}

// PasswordHasSuffix applies the HasSuffix predicate on the "password" field.
func PasswordHasSuffix(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldHasSuffix(FieldPassword, v))
}

// PasswordEqualFold applies the EqualFold predicate on the "password" field.
func PasswordEqualFold(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldEqualFold(FieldPassword, v))
}

// PasswordContainsFold applies the ContainsFold predicate on the "password" field.
func PasswordContainsFold(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldContainsFold(FieldPassword, v))
}

// PasswordExpiredAtEQ applies the EQ predicate on the "password_expired_at" field.
func PasswordExpiredAtEQ(v time.Time) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldEQ(FieldPasswordExpiredAt, v))
}

// PasswordExpiredAtNEQ applies the NEQ predicate on the "password_expired_at" field.
func PasswordExpiredAtNEQ(v time.Time) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldNEQ(FieldPasswordExpiredAt, v))
}

// PasswordExpiredAtIn applies the In predicate on the "password_expired_at" field.
func PasswordExpiredAtIn(vs ...time.Time) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldIn(FieldPasswordExpiredAt, vs...))
}

// PasswordExpiredAtNotIn applies the NotIn predicate on the "password_expired_at" field.
func PasswordExpiredAtNotIn(vs ...time.Time) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldNotIn(FieldPasswordExpiredAt, vs...))
}

// PasswordExpiredAtGT applies the GT predicate on the "password_expired_at" field.
func PasswordExpiredAtGT(v time.Time) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldGT(FieldPasswordExpiredAt, v))
}

// PasswordExpiredAtGTE applies the GTE predicate on the "password_expired_at" field.
func PasswordExpiredAtGTE(v time.Time) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldGTE(FieldPasswordExpiredAt, v))
}

// PasswordExpiredAtLT applies the LT predicate on the "password_expired_at" field.
func PasswordExpiredAtLT(v time.Time) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldLT(FieldPasswordExpiredAt, v))
}

// PasswordExpiredAtLTE applies the LTE predicate on the "password_expired_at" field.
func PasswordExpiredAtLTE(v time.Time) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldLTE(FieldPasswordExpiredAt, v))
}

// PasswordExpiredAtIsNil applies the IsNil predicate on the "password_expired_at" field.
func PasswordExpiredAtIsNil() predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldIsNull(FieldPasswordExpiredAt))
}

// PasswordExpiredAtNotNil applies the NotNil predicate on the "password_expired_at" field.
func PasswordExpiredAtNotNil() predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldNotNull(FieldPasswordExpiredAt))
}

// PasswordUpdatedAtEQ applies the EQ predicate on the "password_updated_at" field.
func PasswordUpdatedAtEQ(v time.Time) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldEQ(FieldPasswordUpdatedAt, v))
}

// PasswordUpdatedAtNEQ applies the NEQ predicate on the "password_updated_at" field.
func PasswordUpdatedAtNEQ(v time.Time) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldNEQ(FieldPasswordUpdatedAt, v))
}

// PasswordUpdatedAtIn applies the In predicate on the "password_updated_at" field.
func PasswordUpdatedAtIn(vs ...time.Time) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldIn(FieldPasswordUpdatedAt, vs...))
}

// PasswordUpdatedAtNotIn applies the NotIn predicate on the "password_updated_at" field.
func PasswordUpdatedAtNotIn(vs ...time.Time) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldNotIn(FieldPasswordUpdatedAt, vs...))
}

// PasswordUpdatedAtGT applies the GT predicate on the "password_updated_at" field.
func PasswordUpdatedAtGT(v time.Time) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldGT(FieldPasswordUpdatedAt, v))
}

// PasswordUpdatedAtGTE applies the GTE predicate on the "password_updated_at" field.
func PasswordUpdatedAtGTE(v time.Time) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldGTE(FieldPasswordUpdatedAt, v))
}

// PasswordUpdatedAtLT applies the LT predicate on the "password_updated_at" field.
func PasswordUpdatedAtLT(v time.Time) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldLT(FieldPasswordUpdatedAt, v))
}

// PasswordUpdatedAtLTE applies the LTE predicate on the "password_updated_at" field.
func PasswordUpdatedAtLTE(v time.Time) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldLTE(FieldPasswordUpdatedAt, v))
}

// PasswordtmpEQ applies the EQ predicate on the "passwordtmp" field.
func PasswordtmpEQ(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldEQ(FieldPasswordtmp, v))
}

// PasswordtmpNEQ applies the NEQ predicate on the "passwordtmp" field.
func PasswordtmpNEQ(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldNEQ(FieldPasswordtmp, v))
}

// PasswordtmpIn applies the In predicate on the "passwordtmp" field.
func PasswordtmpIn(vs ...string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldIn(FieldPasswordtmp, vs...))
}

// PasswordtmpNotIn applies the NotIn predicate on the "passwordtmp" field.
func PasswordtmpNotIn(vs ...string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldNotIn(FieldPasswordtmp, vs...))
}

// PasswordtmpGT applies the GT predicate on the "passwordtmp" field.
func PasswordtmpGT(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldGT(FieldPasswordtmp, v))
}

// PasswordtmpGTE applies the GTE predicate on the "passwordtmp" field.
func PasswordtmpGTE(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldGTE(FieldPasswordtmp, v))
}

// PasswordtmpLT applies the LT predicate on the "passwordtmp" field.
func PasswordtmpLT(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldLT(FieldPasswordtmp, v))
}

// PasswordtmpLTE applies the LTE predicate on the "passwordtmp" field.
func PasswordtmpLTE(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldLTE(FieldPasswordtmp, v))
}

// PasswordtmpContains applies the Contains predicate on the "passwordtmp" field.
func PasswordtmpContains(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldContains(FieldPasswordtmp, v))
}

// PasswordtmpHasPrefix applies the HasPrefix predicate on the "passwordtmp" field.
func PasswordtmpHasPrefix(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldHasPrefix(FieldPasswordtmp, v))
}

// PasswordtmpHasSuffix applies the HasSuffix predicate on the "passwordtmp" field.
func PasswordtmpHasSuffix(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldHasSuffix(FieldPasswordtmp, v))
}

// PasswordtmpIsNil applies the IsNil predicate on the "passwordtmp" field.
func PasswordtmpIsNil() predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldIsNull(FieldPasswordtmp))
}

// PasswordtmpNotNil applies the NotNil predicate on the "passwordtmp" field.
func PasswordtmpNotNil() predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldNotNull(FieldPasswordtmp))
}

// PasswordtmpEqualFold applies the EqualFold predicate on the "passwordtmp" field.
func PasswordtmpEqualFold(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldEqualFold(FieldPasswordtmp, v))
}

// PasswordtmpContainsFold applies the ContainsFold predicate on the "passwordtmp" field.
func PasswordtmpContainsFold(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldContainsFold(FieldPasswordtmp, v))
}

// PasswordtmpExpiredAtEQ applies the EQ predicate on the "passwordtmp_expired_at" field.
func PasswordtmpExpiredAtEQ(v time.Time) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldEQ(FieldPasswordtmpExpiredAt, v))
}

// PasswordtmpExpiredAtNEQ applies the NEQ predicate on the "passwordtmp_expired_at" field.
func PasswordtmpExpiredAtNEQ(v time.Time) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldNEQ(FieldPasswordtmpExpiredAt, v))
}

// PasswordtmpExpiredAtIn applies the In predicate on the "passwordtmp_expired_at" field.
func PasswordtmpExpiredAtIn(vs ...time.Time) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldIn(FieldPasswordtmpExpiredAt, vs...))
}

// PasswordtmpExpiredAtNotIn applies the NotIn predicate on the "passwordtmp_expired_at" field.
func PasswordtmpExpiredAtNotIn(vs ...time.Time) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldNotIn(FieldPasswordtmpExpiredAt, vs...))
}

// PasswordtmpExpiredAtGT applies the GT predicate on the "passwordtmp_expired_at" field.
func PasswordtmpExpiredAtGT(v time.Time) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldGT(FieldPasswordtmpExpiredAt, v))
}

// PasswordtmpExpiredAtGTE applies the GTE predicate on the "passwordtmp_expired_at" field.
func PasswordtmpExpiredAtGTE(v time.Time) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldGTE(FieldPasswordtmpExpiredAt, v))
}

// PasswordtmpExpiredAtLT applies the LT predicate on the "passwordtmp_expired_at" field.
func PasswordtmpExpiredAtLT(v time.Time) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldLT(FieldPasswordtmpExpiredAt, v))
}

// PasswordtmpExpiredAtLTE applies the LTE predicate on the "passwordtmp_expired_at" field.
func PasswordtmpExpiredAtLTE(v time.Time) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldLTE(FieldPasswordtmpExpiredAt, v))
}

// PasswordtmpExpiredAtIsNil applies the IsNil predicate on the "passwordtmp_expired_at" field.
func PasswordtmpExpiredAtIsNil() predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldIsNull(FieldPasswordtmpExpiredAt))
}

// PasswordtmpExpiredAtNotNil applies the NotNil predicate on the "passwordtmp_expired_at" field.
func PasswordtmpExpiredAtNotNil() predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldNotNull(FieldPasswordtmpExpiredAt))
}

// PasswordotpEQ applies the EQ predicate on the "passwordotp" field.
func PasswordotpEQ(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldEQ(FieldPasswordotp, v))
}

// PasswordotpNEQ applies the NEQ predicate on the "passwordotp" field.
func PasswordotpNEQ(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldNEQ(FieldPasswordotp, v))
}

// PasswordotpIn applies the In predicate on the "passwordotp" field.
func PasswordotpIn(vs ...string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldIn(FieldPasswordotp, vs...))
}

// PasswordotpNotIn applies the NotIn predicate on the "passwordotp" field.
func PasswordotpNotIn(vs ...string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldNotIn(FieldPasswordotp, vs...))
}

// PasswordotpGT applies the GT predicate on the "passwordotp" field.
func PasswordotpGT(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldGT(FieldPasswordotp, v))
}

// PasswordotpGTE applies the GTE predicate on the "passwordotp" field.
func PasswordotpGTE(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldGTE(FieldPasswordotp, v))
}

// PasswordotpLT applies the LT predicate on the "passwordotp" field.
func PasswordotpLT(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldLT(FieldPasswordotp, v))
}

// PasswordotpLTE applies the LTE predicate on the "passwordotp" field.
func PasswordotpLTE(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldLTE(FieldPasswordotp, v))
}

// PasswordotpContains applies the Contains predicate on the "passwordotp" field.
func PasswordotpContains(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldContains(FieldPasswordotp, v))
}

// PasswordotpHasPrefix applies the HasPrefix predicate on the "passwordotp" field.
func PasswordotpHasPrefix(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldHasPrefix(FieldPasswordotp, v))
}

// PasswordotpHasSuffix applies the HasSuffix predicate on the "passwordotp" field.
func PasswordotpHasSuffix(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldHasSuffix(FieldPasswordotp, v))
}

// PasswordotpIsNil applies the IsNil predicate on the "passwordotp" field.
func PasswordotpIsNil() predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldIsNull(FieldPasswordotp))
}

// PasswordotpNotNil applies the NotNil predicate on the "passwordotp" field.
func PasswordotpNotNil() predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldNotNull(FieldPasswordotp))
}

// PasswordotpEqualFold applies the EqualFold predicate on the "passwordotp" field.
func PasswordotpEqualFold(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldEqualFold(FieldPasswordotp, v))
}

// PasswordotpContainsFold applies the ContainsFold predicate on the "passwordotp" field.
func PasswordotpContainsFold(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldContainsFold(FieldPasswordotp, v))
}

// PasswordotpExpiredAtEQ applies the EQ predicate on the "passwordotp_expired_at" field.
func PasswordotpExpiredAtEQ(v time.Time) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldEQ(FieldPasswordotpExpiredAt, v))
}

// PasswordotpExpiredAtNEQ applies the NEQ predicate on the "passwordotp_expired_at" field.
func PasswordotpExpiredAtNEQ(v time.Time) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldNEQ(FieldPasswordotpExpiredAt, v))
}

// PasswordotpExpiredAtIn applies the In predicate on the "passwordotp_expired_at" field.
func PasswordotpExpiredAtIn(vs ...time.Time) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldIn(FieldPasswordotpExpiredAt, vs...))
}

// PasswordotpExpiredAtNotIn applies the NotIn predicate on the "passwordotp_expired_at" field.
func PasswordotpExpiredAtNotIn(vs ...time.Time) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldNotIn(FieldPasswordotpExpiredAt, vs...))
}

// PasswordotpExpiredAtGT applies the GT predicate on the "passwordotp_expired_at" field.
func PasswordotpExpiredAtGT(v time.Time) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldGT(FieldPasswordotpExpiredAt, v))
}

// PasswordotpExpiredAtGTE applies the GTE predicate on the "passwordotp_expired_at" field.
func PasswordotpExpiredAtGTE(v time.Time) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldGTE(FieldPasswordotpExpiredAt, v))
}

// PasswordotpExpiredAtLT applies the LT predicate on the "passwordotp_expired_at" field.
func PasswordotpExpiredAtLT(v time.Time) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldLT(FieldPasswordotpExpiredAt, v))
}

// PasswordotpExpiredAtLTE applies the LTE predicate on the "passwordotp_expired_at" field.
func PasswordotpExpiredAtLTE(v time.Time) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldLTE(FieldPasswordotpExpiredAt, v))
}

// PasswordotpExpiredAtIsNil applies the IsNil predicate on the "passwordotp_expired_at" field.
func PasswordotpExpiredAtIsNil() predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldIsNull(FieldPasswordotpExpiredAt))
}

// PasswordotpExpiredAtNotNil applies the NotNil predicate on the "passwordotp_expired_at" field.
func PasswordotpExpiredAtNotNil() predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldNotNull(FieldPasswordotpExpiredAt))
}

// SubjectTypeEQ applies the EQ predicate on the "subject_type" field.
func SubjectTypeEQ(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldEQ(FieldSubjectType, v))
}

// SubjectTypeNEQ applies the NEQ predicate on the "subject_type" field.
func SubjectTypeNEQ(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldNEQ(FieldSubjectType, v))
}

// SubjectTypeIn applies the In predicate on the "subject_type" field.
func SubjectTypeIn(vs ...string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldIn(FieldSubjectType, vs...))
}

// SubjectTypeNotIn applies the NotIn predicate on the "subject_type" field.
func SubjectTypeNotIn(vs ...string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldNotIn(FieldSubjectType, vs...))
}

// SubjectTypeGT applies the GT predicate on the "subject_type" field.
func SubjectTypeGT(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldGT(FieldSubjectType, v))
}

// SubjectTypeGTE applies the GTE predicate on the "subject_type" field.
func SubjectTypeGTE(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldGTE(FieldSubjectType, v))
}

// SubjectTypeLT applies the LT predicate on the "subject_type" field.
func SubjectTypeLT(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldLT(FieldSubjectType, v))
}

// SubjectTypeLTE applies the LTE predicate on the "subject_type" field.
func SubjectTypeLTE(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldLTE(FieldSubjectType, v))
}

// SubjectTypeContains applies the Contains predicate on the "subject_type" field.
func SubjectTypeContains(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldContains(FieldSubjectType, v))
}

// SubjectTypeHasPrefix applies the HasPrefix predicate on the "subject_type" field.
func SubjectTypeHasPrefix(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldHasPrefix(FieldSubjectType, v))
}

// SubjectTypeHasSuffix applies the HasSuffix predicate on the "subject_type" field.
func SubjectTypeHasSuffix(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldHasSuffix(FieldSubjectType, v))
}

// SubjectTypeEqualFold applies the EqualFold predicate on the "subject_type" field.
func SubjectTypeEqualFold(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldEqualFold(FieldSubjectType, v))
}

// SubjectTypeContainsFold applies the ContainsFold predicate on the "subject_type" field.
func SubjectTypeContainsFold(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldContainsFold(FieldSubjectType, v))
}

// SubjectRefEQ applies the EQ predicate on the "subject_ref" field.
func SubjectRefEQ(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldEQ(FieldSubjectRef, v))
}

// SubjectRefNEQ applies the NEQ predicate on the "subject_ref" field.
func SubjectRefNEQ(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldNEQ(FieldSubjectRef, v))
}

// SubjectRefIn applies the In predicate on the "subject_ref" field.
func SubjectRefIn(vs ...string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldIn(FieldSubjectRef, vs...))
}

// SubjectRefNotIn applies the NotIn predicate on the "subject_ref" field.
func SubjectRefNotIn(vs ...string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldNotIn(FieldSubjectRef, vs...))
}

// SubjectRefGT applies the GT predicate on the "subject_ref" field.
func SubjectRefGT(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldGT(FieldSubjectRef, v))
}

// SubjectRefGTE applies the GTE predicate on the "subject_ref" field.
func SubjectRefGTE(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldGTE(FieldSubjectRef, v))
}

// SubjectRefLT applies the LT predicate on the "subject_ref" field.
func SubjectRefLT(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldLT(FieldSubjectRef, v))
}

// SubjectRefLTE applies the LTE predicate on the "subject_ref" field.
func SubjectRefLTE(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldLTE(FieldSubjectRef, v))
}

// SubjectRefContains applies the Contains predicate on the "subject_ref" field.
func SubjectRefContains(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldContains(FieldSubjectRef, v))
}

// SubjectRefHasPrefix applies the HasPrefix predicate on the "subject_ref" field.
func SubjectRefHasPrefix(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldHasPrefix(FieldSubjectRef, v))
}

// SubjectRefHasSuffix applies the HasSuffix predicate on the "subject_ref" field.
func SubjectRefHasSuffix(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldHasSuffix(FieldSubjectRef, v))
}

// SubjectRefEqualFold applies the EqualFold predicate on the "subject_ref" field.
func SubjectRefEqualFold(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldEqualFold(FieldSubjectRef, v))
}

// SubjectRefContainsFold applies the ContainsFold predicate on the "subject_ref" field.
func SubjectRefContainsFold(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldContainsFold(FieldSubjectRef, v))
}

// SubjectSourceRefEQ applies the EQ predicate on the "subject_source_ref" field.
func SubjectSourceRefEQ(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldEQ(FieldSubjectSourceRef, v))
}

// SubjectSourceRefNEQ applies the NEQ predicate on the "subject_source_ref" field.
func SubjectSourceRefNEQ(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldNEQ(FieldSubjectSourceRef, v))
}

// SubjectSourceRefIn applies the In predicate on the "subject_source_ref" field.
func SubjectSourceRefIn(vs ...string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldIn(FieldSubjectSourceRef, vs...))
}

// SubjectSourceRefNotIn applies the NotIn predicate on the "subject_source_ref" field.
func SubjectSourceRefNotIn(vs ...string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldNotIn(FieldSubjectSourceRef, vs...))
}

// SubjectSourceRefGT applies the GT predicate on the "subject_source_ref" field.
func SubjectSourceRefGT(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldGT(FieldSubjectSourceRef, v))
}

// SubjectSourceRefGTE applies the GTE predicate on the "subject_source_ref" field.
func SubjectSourceRefGTE(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldGTE(FieldSubjectSourceRef, v))
}

// SubjectSourceRefLT applies the LT predicate on the "subject_source_ref" field.
func SubjectSourceRefLT(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldLT(FieldSubjectSourceRef, v))
}

// SubjectSourceRefLTE applies the LTE predicate on the "subject_source_ref" field.
func SubjectSourceRefLTE(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldLTE(FieldSubjectSourceRef, v))
}

// SubjectSourceRefContains applies the Contains predicate on the "subject_source_ref" field.
func SubjectSourceRefContains(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldContains(FieldSubjectSourceRef, v))
}

// SubjectSourceRefHasPrefix applies the HasPrefix predicate on the "subject_source_ref" field.
func SubjectSourceRefHasPrefix(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldHasPrefix(FieldSubjectSourceRef, v))
}

// SubjectSourceRefHasSuffix applies the HasSuffix predicate on the "subject_source_ref" field.
func SubjectSourceRefHasSuffix(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldHasSuffix(FieldSubjectSourceRef, v))
}

// SubjectSourceRefIsNil applies the IsNil predicate on the "subject_source_ref" field.
func SubjectSourceRefIsNil() predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldIsNull(FieldSubjectSourceRef))
}

// SubjectSourceRefNotNil applies the NotNil predicate on the "subject_source_ref" field.
func SubjectSourceRefNotNil() predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldNotNull(FieldSubjectSourceRef))
}

// SubjectSourceRefEqualFold applies the EqualFold predicate on the "subject_source_ref" field.
func SubjectSourceRefEqualFold(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldEqualFold(FieldSubjectSourceRef, v))
}

// SubjectSourceRefContainsFold applies the ContainsFold predicate on the "subject_source_ref" field.
func SubjectSourceRefContainsFold(v string) predicate.PasswordStore {
	return predicate.PasswordStore(sql.FieldContainsFold(FieldSubjectSourceRef, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PasswordStore) predicate.PasswordStore {
	return predicate.PasswordStore(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PasswordStore) predicate.PasswordStore {
	return predicate.PasswordStore(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PasswordStore) predicate.PasswordStore {
	return predicate.PasswordStore(sql.NotPredicates(p))
}
