// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky-as-code/nikki-erp/modules/authenticate/infra/ent/loginattempt"
	"github.com/sky-as-code/nikki-erp/modules/authenticate/infra/ent/predicate"
)

// LoginAttemptUpdate is the builder for updating LoginAttempt entities.
type LoginAttemptUpdate struct {
	config
	hooks    []Hook
	mutation *LoginAttemptMutation
}

// Where appends a list predicates to the LoginAttemptUpdate builder.
func (lau *LoginAttemptUpdate) Where(ps ...predicate.LoginAttempt) *LoginAttemptUpdate {
	lau.mutation.Where(ps...)
	return lau
}

// SetCurrentMethod sets the "current_method" field.
func (lau *LoginAttemptUpdate) SetCurrentMethod(s string) *LoginAttemptUpdate {
	lau.mutation.SetCurrentMethod(s)
	return lau
}

// SetNillableCurrentMethod sets the "current_method" field if the given value is not nil.
func (lau *LoginAttemptUpdate) SetNillableCurrentMethod(s *string) *LoginAttemptUpdate {
	if s != nil {
		lau.SetCurrentMethod(*s)
	}
	return lau
}

// ClearCurrentMethod clears the value of the "current_method" field.
func (lau *LoginAttemptUpdate) ClearCurrentMethod() *LoginAttemptUpdate {
	lau.mutation.ClearCurrentMethod()
	return lau
}

// SetDeviceIP sets the "device_ip" field.
func (lau *LoginAttemptUpdate) SetDeviceIP(s string) *LoginAttemptUpdate {
	lau.mutation.SetDeviceIP(s)
	return lau
}

// SetNillableDeviceIP sets the "device_ip" field if the given value is not nil.
func (lau *LoginAttemptUpdate) SetNillableDeviceIP(s *string) *LoginAttemptUpdate {
	if s != nil {
		lau.SetDeviceIP(*s)
	}
	return lau
}

// ClearDeviceIP clears the value of the "device_ip" field.
func (lau *LoginAttemptUpdate) ClearDeviceIP() *LoginAttemptUpdate {
	lau.mutation.ClearDeviceIP()
	return lau
}

// SetDeviceName sets the "device_name" field.
func (lau *LoginAttemptUpdate) SetDeviceName(s string) *LoginAttemptUpdate {
	lau.mutation.SetDeviceName(s)
	return lau
}

// SetNillableDeviceName sets the "device_name" field if the given value is not nil.
func (lau *LoginAttemptUpdate) SetNillableDeviceName(s *string) *LoginAttemptUpdate {
	if s != nil {
		lau.SetDeviceName(*s)
	}
	return lau
}

// ClearDeviceName clears the value of the "device_name" field.
func (lau *LoginAttemptUpdate) ClearDeviceName() *LoginAttemptUpdate {
	lau.mutation.ClearDeviceName()
	return lau
}

// SetDeviceLocation sets the "device_location" field.
func (lau *LoginAttemptUpdate) SetDeviceLocation(s string) *LoginAttemptUpdate {
	lau.mutation.SetDeviceLocation(s)
	return lau
}

// SetNillableDeviceLocation sets the "device_location" field if the given value is not nil.
func (lau *LoginAttemptUpdate) SetNillableDeviceLocation(s *string) *LoginAttemptUpdate {
	if s != nil {
		lau.SetDeviceLocation(*s)
	}
	return lau
}

// ClearDeviceLocation clears the value of the "device_location" field.
func (lau *LoginAttemptUpdate) ClearDeviceLocation() *LoginAttemptUpdate {
	lau.mutation.ClearDeviceLocation()
	return lau
}

// SetExpiredAt sets the "expired_at" field.
func (lau *LoginAttemptUpdate) SetExpiredAt(t time.Time) *LoginAttemptUpdate {
	lau.mutation.SetExpiredAt(t)
	return lau
}

// SetNillableExpiredAt sets the "expired_at" field if the given value is not nil.
func (lau *LoginAttemptUpdate) SetNillableExpiredAt(t *time.Time) *LoginAttemptUpdate {
	if t != nil {
		lau.SetExpiredAt(*t)
	}
	return lau
}

// SetIsGenuine sets the "is_genuine" field.
func (lau *LoginAttemptUpdate) SetIsGenuine(b bool) *LoginAttemptUpdate {
	lau.mutation.SetIsGenuine(b)
	return lau
}

// SetNillableIsGenuine sets the "is_genuine" field if the given value is not nil.
func (lau *LoginAttemptUpdate) SetNillableIsGenuine(b *bool) *LoginAttemptUpdate {
	if b != nil {
		lau.SetIsGenuine(*b)
	}
	return lau
}

// SetStatus sets the "status" field.
func (lau *LoginAttemptUpdate) SetStatus(s string) *LoginAttemptUpdate {
	lau.mutation.SetStatus(s)
	return lau
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (lau *LoginAttemptUpdate) SetNillableStatus(s *string) *LoginAttemptUpdate {
	if s != nil {
		lau.SetStatus(*s)
	}
	return lau
}

// SetUpdatedAt sets the "updated_at" field.
func (lau *LoginAttemptUpdate) SetUpdatedAt(t time.Time) *LoginAttemptUpdate {
	lau.mutation.SetUpdatedAt(t)
	return lau
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (lau *LoginAttemptUpdate) SetNillableUpdatedAt(t *time.Time) *LoginAttemptUpdate {
	if t != nil {
		lau.SetUpdatedAt(*t)
	}
	return lau
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (lau *LoginAttemptUpdate) ClearUpdatedAt() *LoginAttemptUpdate {
	lau.mutation.ClearUpdatedAt()
	return lau
}

// Mutation returns the LoginAttemptMutation object of the builder.
func (lau *LoginAttemptUpdate) Mutation() *LoginAttemptMutation {
	return lau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lau *LoginAttemptUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, lau.sqlSave, lau.mutation, lau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lau *LoginAttemptUpdate) SaveX(ctx context.Context) int {
	affected, err := lau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lau *LoginAttemptUpdate) Exec(ctx context.Context) error {
	_, err := lau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lau *LoginAttemptUpdate) ExecX(ctx context.Context) {
	if err := lau.Exec(ctx); err != nil {
		panic(err)
	}
}

func (lau *LoginAttemptUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(loginattempt.Table, loginattempt.Columns, sqlgraph.NewFieldSpec(loginattempt.FieldID, field.TypeString))
	if ps := lau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lau.mutation.CurrentMethod(); ok {
		_spec.SetField(loginattempt.FieldCurrentMethod, field.TypeString, value)
	}
	if lau.mutation.CurrentMethodCleared() {
		_spec.ClearField(loginattempt.FieldCurrentMethod, field.TypeString)
	}
	if value, ok := lau.mutation.DeviceIP(); ok {
		_spec.SetField(loginattempt.FieldDeviceIP, field.TypeString, value)
	}
	if lau.mutation.DeviceIPCleared() {
		_spec.ClearField(loginattempt.FieldDeviceIP, field.TypeString)
	}
	if value, ok := lau.mutation.DeviceName(); ok {
		_spec.SetField(loginattempt.FieldDeviceName, field.TypeString, value)
	}
	if lau.mutation.DeviceNameCleared() {
		_spec.ClearField(loginattempt.FieldDeviceName, field.TypeString)
	}
	if value, ok := lau.mutation.DeviceLocation(); ok {
		_spec.SetField(loginattempt.FieldDeviceLocation, field.TypeString, value)
	}
	if lau.mutation.DeviceLocationCleared() {
		_spec.ClearField(loginattempt.FieldDeviceLocation, field.TypeString)
	}
	if value, ok := lau.mutation.ExpiredAt(); ok {
		_spec.SetField(loginattempt.FieldExpiredAt, field.TypeTime, value)
	}
	if value, ok := lau.mutation.IsGenuine(); ok {
		_spec.SetField(loginattempt.FieldIsGenuine, field.TypeBool, value)
	}
	if lau.mutation.SubjectSourceRefCleared() {
		_spec.ClearField(loginattempt.FieldSubjectSourceRef, field.TypeString)
	}
	if value, ok := lau.mutation.Status(); ok {
		_spec.SetField(loginattempt.FieldStatus, field.TypeString, value)
	}
	if value, ok := lau.mutation.UpdatedAt(); ok {
		_spec.SetField(loginattempt.FieldUpdatedAt, field.TypeTime, value)
	}
	if lau.mutation.UpdatedAtCleared() {
		_spec.ClearField(loginattempt.FieldUpdatedAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{loginattempt.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lau.mutation.done = true
	return n, nil
}

// LoginAttemptUpdateOne is the builder for updating a single LoginAttempt entity.
type LoginAttemptUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LoginAttemptMutation
}

// SetCurrentMethod sets the "current_method" field.
func (lauo *LoginAttemptUpdateOne) SetCurrentMethod(s string) *LoginAttemptUpdateOne {
	lauo.mutation.SetCurrentMethod(s)
	return lauo
}

// SetNillableCurrentMethod sets the "current_method" field if the given value is not nil.
func (lauo *LoginAttemptUpdateOne) SetNillableCurrentMethod(s *string) *LoginAttemptUpdateOne {
	if s != nil {
		lauo.SetCurrentMethod(*s)
	}
	return lauo
}

// ClearCurrentMethod clears the value of the "current_method" field.
func (lauo *LoginAttemptUpdateOne) ClearCurrentMethod() *LoginAttemptUpdateOne {
	lauo.mutation.ClearCurrentMethod()
	return lauo
}

// SetDeviceIP sets the "device_ip" field.
func (lauo *LoginAttemptUpdateOne) SetDeviceIP(s string) *LoginAttemptUpdateOne {
	lauo.mutation.SetDeviceIP(s)
	return lauo
}

// SetNillableDeviceIP sets the "device_ip" field if the given value is not nil.
func (lauo *LoginAttemptUpdateOne) SetNillableDeviceIP(s *string) *LoginAttemptUpdateOne {
	if s != nil {
		lauo.SetDeviceIP(*s)
	}
	return lauo
}

// ClearDeviceIP clears the value of the "device_ip" field.
func (lauo *LoginAttemptUpdateOne) ClearDeviceIP() *LoginAttemptUpdateOne {
	lauo.mutation.ClearDeviceIP()
	return lauo
}

// SetDeviceName sets the "device_name" field.
func (lauo *LoginAttemptUpdateOne) SetDeviceName(s string) *LoginAttemptUpdateOne {
	lauo.mutation.SetDeviceName(s)
	return lauo
}

// SetNillableDeviceName sets the "device_name" field if the given value is not nil.
func (lauo *LoginAttemptUpdateOne) SetNillableDeviceName(s *string) *LoginAttemptUpdateOne {
	if s != nil {
		lauo.SetDeviceName(*s)
	}
	return lauo
}

// ClearDeviceName clears the value of the "device_name" field.
func (lauo *LoginAttemptUpdateOne) ClearDeviceName() *LoginAttemptUpdateOne {
	lauo.mutation.ClearDeviceName()
	return lauo
}

// SetDeviceLocation sets the "device_location" field.
func (lauo *LoginAttemptUpdateOne) SetDeviceLocation(s string) *LoginAttemptUpdateOne {
	lauo.mutation.SetDeviceLocation(s)
	return lauo
}

// SetNillableDeviceLocation sets the "device_location" field if the given value is not nil.
func (lauo *LoginAttemptUpdateOne) SetNillableDeviceLocation(s *string) *LoginAttemptUpdateOne {
	if s != nil {
		lauo.SetDeviceLocation(*s)
	}
	return lauo
}

// ClearDeviceLocation clears the value of the "device_location" field.
func (lauo *LoginAttemptUpdateOne) ClearDeviceLocation() *LoginAttemptUpdateOne {
	lauo.mutation.ClearDeviceLocation()
	return lauo
}

// SetExpiredAt sets the "expired_at" field.
func (lauo *LoginAttemptUpdateOne) SetExpiredAt(t time.Time) *LoginAttemptUpdateOne {
	lauo.mutation.SetExpiredAt(t)
	return lauo
}

// SetNillableExpiredAt sets the "expired_at" field if the given value is not nil.
func (lauo *LoginAttemptUpdateOne) SetNillableExpiredAt(t *time.Time) *LoginAttemptUpdateOne {
	if t != nil {
		lauo.SetExpiredAt(*t)
	}
	return lauo
}

// SetIsGenuine sets the "is_genuine" field.
func (lauo *LoginAttemptUpdateOne) SetIsGenuine(b bool) *LoginAttemptUpdateOne {
	lauo.mutation.SetIsGenuine(b)
	return lauo
}

// SetNillableIsGenuine sets the "is_genuine" field if the given value is not nil.
func (lauo *LoginAttemptUpdateOne) SetNillableIsGenuine(b *bool) *LoginAttemptUpdateOne {
	if b != nil {
		lauo.SetIsGenuine(*b)
	}
	return lauo
}

// SetStatus sets the "status" field.
func (lauo *LoginAttemptUpdateOne) SetStatus(s string) *LoginAttemptUpdateOne {
	lauo.mutation.SetStatus(s)
	return lauo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (lauo *LoginAttemptUpdateOne) SetNillableStatus(s *string) *LoginAttemptUpdateOne {
	if s != nil {
		lauo.SetStatus(*s)
	}
	return lauo
}

// SetUpdatedAt sets the "updated_at" field.
func (lauo *LoginAttemptUpdateOne) SetUpdatedAt(t time.Time) *LoginAttemptUpdateOne {
	lauo.mutation.SetUpdatedAt(t)
	return lauo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (lauo *LoginAttemptUpdateOne) SetNillableUpdatedAt(t *time.Time) *LoginAttemptUpdateOne {
	if t != nil {
		lauo.SetUpdatedAt(*t)
	}
	return lauo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (lauo *LoginAttemptUpdateOne) ClearUpdatedAt() *LoginAttemptUpdateOne {
	lauo.mutation.ClearUpdatedAt()
	return lauo
}

// Mutation returns the LoginAttemptMutation object of the builder.
func (lauo *LoginAttemptUpdateOne) Mutation() *LoginAttemptMutation {
	return lauo.mutation
}

// Where appends a list predicates to the LoginAttemptUpdate builder.
func (lauo *LoginAttemptUpdateOne) Where(ps ...predicate.LoginAttempt) *LoginAttemptUpdateOne {
	lauo.mutation.Where(ps...)
	return lauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (lauo *LoginAttemptUpdateOne) Select(field string, fields ...string) *LoginAttemptUpdateOne {
	lauo.fields = append([]string{field}, fields...)
	return lauo
}

// Save executes the query and returns the updated LoginAttempt entity.
func (lauo *LoginAttemptUpdateOne) Save(ctx context.Context) (*LoginAttempt, error) {
	return withHooks(ctx, lauo.sqlSave, lauo.mutation, lauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lauo *LoginAttemptUpdateOne) SaveX(ctx context.Context) *LoginAttempt {
	node, err := lauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (lauo *LoginAttemptUpdateOne) Exec(ctx context.Context) error {
	_, err := lauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lauo *LoginAttemptUpdateOne) ExecX(ctx context.Context) {
	if err := lauo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (lauo *LoginAttemptUpdateOne) sqlSave(ctx context.Context) (_node *LoginAttempt, err error) {
	_spec := sqlgraph.NewUpdateSpec(loginattempt.Table, loginattempt.Columns, sqlgraph.NewFieldSpec(loginattempt.FieldID, field.TypeString))
	id, ok := lauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LoginAttempt.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := lauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, loginattempt.FieldID)
		for _, f := range fields {
			if !loginattempt.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != loginattempt.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := lauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lauo.mutation.CurrentMethod(); ok {
		_spec.SetField(loginattempt.FieldCurrentMethod, field.TypeString, value)
	}
	if lauo.mutation.CurrentMethodCleared() {
		_spec.ClearField(loginattempt.FieldCurrentMethod, field.TypeString)
	}
	if value, ok := lauo.mutation.DeviceIP(); ok {
		_spec.SetField(loginattempt.FieldDeviceIP, field.TypeString, value)
	}
	if lauo.mutation.DeviceIPCleared() {
		_spec.ClearField(loginattempt.FieldDeviceIP, field.TypeString)
	}
	if value, ok := lauo.mutation.DeviceName(); ok {
		_spec.SetField(loginattempt.FieldDeviceName, field.TypeString, value)
	}
	if lauo.mutation.DeviceNameCleared() {
		_spec.ClearField(loginattempt.FieldDeviceName, field.TypeString)
	}
	if value, ok := lauo.mutation.DeviceLocation(); ok {
		_spec.SetField(loginattempt.FieldDeviceLocation, field.TypeString, value)
	}
	if lauo.mutation.DeviceLocationCleared() {
		_spec.ClearField(loginattempt.FieldDeviceLocation, field.TypeString)
	}
	if value, ok := lauo.mutation.ExpiredAt(); ok {
		_spec.SetField(loginattempt.FieldExpiredAt, field.TypeTime, value)
	}
	if value, ok := lauo.mutation.IsGenuine(); ok {
		_spec.SetField(loginattempt.FieldIsGenuine, field.TypeBool, value)
	}
	if lauo.mutation.SubjectSourceRefCleared() {
		_spec.ClearField(loginattempt.FieldSubjectSourceRef, field.TypeString)
	}
	if value, ok := lauo.mutation.Status(); ok {
		_spec.SetField(loginattempt.FieldStatus, field.TypeString, value)
	}
	if value, ok := lauo.mutation.UpdatedAt(); ok {
		_spec.SetField(loginattempt.FieldUpdatedAt, field.TypeTime, value)
	}
	if lauo.mutation.UpdatedAtCleared() {
		_spec.ClearField(loginattempt.FieldUpdatedAt, field.TypeTime)
	}
	_node = &LoginAttempt{config: lauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, lauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{loginattempt.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	lauo.mutation.done = true
	return _node, nil
}
