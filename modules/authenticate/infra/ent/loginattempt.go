// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/sky-as-code/nikki-erp/modules/authenticate/infra/ent/loginattempt"
)

// LoginAttempt is the model entity for the LoginAttempt schema.
type LoginAttempt struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Methods holds the value of the "methods" field.
	Methods []string `json:"methods,omitempty"`
	// CurrentMethod holds the value of the "current_method" field.
	CurrentMethod *string `json:"current_method,omitempty"`
	// DeviceIP holds the value of the "device_ip" field.
	DeviceIP *string `json:"device_ip,omitempty"`
	// DeviceName holds the value of the "device_name" field.
	DeviceName *string `json:"device_name,omitempty"`
	// DeviceLocation holds the value of the "device_location" field.
	DeviceLocation *string `json:"device_location,omitempty"`
	// ExpiredAt holds the value of the "expired_at" field.
	ExpiredAt time.Time `json:"expired_at,omitempty"`
	// Whether user has confirmed it is them
	IsGenuine bool `json:"is_genuine,omitempty"`
	// SubjectType holds the value of the "subject_type" field.
	SubjectType string `json:"subject_type,omitempty"`
	// SubjectRef holds the value of the "subject_ref" field.
	SubjectRef string `json:"subject_ref,omitempty"`
	// SubjectSourceRef holds the value of the "subject_source_ref" field.
	SubjectSourceRef *string `json:"subject_source_ref,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    *time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LoginAttempt) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case loginattempt.FieldMethods:
			values[i] = new([]byte)
		case loginattempt.FieldIsGenuine:
			values[i] = new(sql.NullBool)
		case loginattempt.FieldID, loginattempt.FieldCurrentMethod, loginattempt.FieldDeviceIP, loginattempt.FieldDeviceName, loginattempt.FieldDeviceLocation, loginattempt.FieldSubjectType, loginattempt.FieldSubjectRef, loginattempt.FieldSubjectSourceRef, loginattempt.FieldStatus, loginattempt.FieldUsername:
			values[i] = new(sql.NullString)
		case loginattempt.FieldCreatedAt, loginattempt.FieldExpiredAt, loginattempt.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LoginAttempt fields.
func (la *LoginAttempt) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case loginattempt.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				la.ID = value.String
			}
		case loginattempt.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				la.CreatedAt = value.Time
			}
		case loginattempt.FieldMethods:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field methods", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &la.Methods); err != nil {
					return fmt.Errorf("unmarshal field methods: %w", err)
				}
			}
		case loginattempt.FieldCurrentMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field current_method", values[i])
			} else if value.Valid {
				la.CurrentMethod = new(string)
				*la.CurrentMethod = value.String
			}
		case loginattempt.FieldDeviceIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field device_ip", values[i])
			} else if value.Valid {
				la.DeviceIP = new(string)
				*la.DeviceIP = value.String
			}
		case loginattempt.FieldDeviceName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field device_name", values[i])
			} else if value.Valid {
				la.DeviceName = new(string)
				*la.DeviceName = value.String
			}
		case loginattempt.FieldDeviceLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field device_location", values[i])
			} else if value.Valid {
				la.DeviceLocation = new(string)
				*la.DeviceLocation = value.String
			}
		case loginattempt.FieldExpiredAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expired_at", values[i])
			} else if value.Valid {
				la.ExpiredAt = value.Time
			}
		case loginattempt.FieldIsGenuine:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_genuine", values[i])
			} else if value.Valid {
				la.IsGenuine = value.Bool
			}
		case loginattempt.FieldSubjectType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subject_type", values[i])
			} else if value.Valid {
				la.SubjectType = value.String
			}
		case loginattempt.FieldSubjectRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subject_ref", values[i])
			} else if value.Valid {
				la.SubjectRef = value.String
			}
		case loginattempt.FieldSubjectSourceRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subject_source_ref", values[i])
			} else if value.Valid {
				la.SubjectSourceRef = new(string)
				*la.SubjectSourceRef = value.String
			}
		case loginattempt.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				la.Status = value.String
			}
		case loginattempt.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				la.Username = value.String
			}
		case loginattempt.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				la.UpdatedAt = new(time.Time)
				*la.UpdatedAt = value.Time
			}
		default:
			la.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the LoginAttempt.
// This includes values selected through modifiers, order, etc.
func (la *LoginAttempt) Value(name string) (ent.Value, error) {
	return la.selectValues.Get(name)
}

// Update returns a builder for updating this LoginAttempt.
// Note that you need to call LoginAttempt.Unwrap() before calling this method if this LoginAttempt
// was returned from a transaction, and the transaction was committed or rolled back.
func (la *LoginAttempt) Update() *LoginAttemptUpdateOne {
	return NewLoginAttemptClient(la.config).UpdateOne(la)
}

// Unwrap unwraps the LoginAttempt entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (la *LoginAttempt) Unwrap() *LoginAttempt {
	_tx, ok := la.config.driver.(*txDriver)
	if !ok {
		panic("ent: LoginAttempt is not a transactional entity")
	}
	la.config.driver = _tx.drv
	return la
}

// String implements the fmt.Stringer.
func (la *LoginAttempt) String() string {
	var builder strings.Builder
	builder.WriteString("LoginAttempt(")
	builder.WriteString(fmt.Sprintf("id=%v, ", la.ID))
	builder.WriteString("created_at=")
	builder.WriteString(la.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("methods=")
	builder.WriteString(fmt.Sprintf("%v", la.Methods))
	builder.WriteString(", ")
	if v := la.CurrentMethod; v != nil {
		builder.WriteString("current_method=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := la.DeviceIP; v != nil {
		builder.WriteString("device_ip=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := la.DeviceName; v != nil {
		builder.WriteString("device_name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := la.DeviceLocation; v != nil {
		builder.WriteString("device_location=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("expired_at=")
	builder.WriteString(la.ExpiredAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("is_genuine=")
	builder.WriteString(fmt.Sprintf("%v", la.IsGenuine))
	builder.WriteString(", ")
	builder.WriteString("subject_type=")
	builder.WriteString(la.SubjectType)
	builder.WriteString(", ")
	builder.WriteString("subject_ref=")
	builder.WriteString(la.SubjectRef)
	builder.WriteString(", ")
	if v := la.SubjectSourceRef; v != nil {
		builder.WriteString("subject_source_ref=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(la.Status)
	builder.WriteString(", ")
	builder.WriteString("username=")
	builder.WriteString(la.Username)
	builder.WriteString(", ")
	if v := la.UpdatedAt; v != nil {
		builder.WriteString("updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// LoginAttempts is a parsable slice of LoginAttempt.
type LoginAttempts []*LoginAttempt
