// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky-as-code/nikki-erp/modules/authenticate/infra/ent/authnenum"
	"github.com/sky-as-code/nikki-erp/modules/authenticate/infra/ent/predicate"
)

// AuthNEnumDelete is the builder for deleting a AuthNEnum entity.
type AuthNEnumDelete struct {
	config
	hooks    []Hook
	mutation *AuthNEnumMutation
}

// Where appends a list predicates to the AuthNEnumDelete builder.
func (and *AuthNEnumDelete) Where(ps ...predicate.AuthNEnum) *AuthNEnumDelete {
	and.mutation.Where(ps...)
	return and
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (and *AuthNEnumDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, and.sqlExec, and.mutation, and.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (and *AuthNEnumDelete) ExecX(ctx context.Context) int {
	n, err := and.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (and *AuthNEnumDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(authnenum.Table, sqlgraph.NewFieldSpec(authnenum.FieldID, field.TypeString))
	if ps := and.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, and.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	and.mutation.done = true
	return affected, err
}

// AuthNEnumDeleteOne is the builder for deleting a single AuthNEnum entity.
type AuthNEnumDeleteOne struct {
	and *AuthNEnumDelete
}

// Where appends a list predicates to the AuthNEnumDelete builder.
func (ando *AuthNEnumDeleteOne) Where(ps ...predicate.AuthNEnum) *AuthNEnumDeleteOne {
	ando.and.mutation.Where(ps...)
	return ando
}

// Exec executes the deletion query.
func (ando *AuthNEnumDeleteOne) Exec(ctx context.Context) error {
	n, err := ando.and.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{authnenum.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ando *AuthNEnumDeleteOne) ExecX(ctx context.Context) {
	if err := ando.Exec(ctx); err != nil {
		panic(err)
	}
}
