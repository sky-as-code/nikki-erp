// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky-as-code/nikki-erp/modules/authenticate/infra/ent/methodsetting"
)

// MethodSettingCreate is the builder for creating a MethodSetting entity.
type MethodSettingCreate struct {
	config
	mutation *MethodSettingMutation
	hooks    []Hook
}

// SetMethod sets the "method" field.
func (msc *MethodSettingCreate) SetMethod(s string) *MethodSettingCreate {
	msc.mutation.SetMethod(s)
	return msc
}

// SetOrder sets the "order" field.
func (msc *MethodSettingCreate) SetOrder(i int) *MethodSettingCreate {
	msc.mutation.SetOrder(i)
	return msc
}

// SetMaxFailures sets the "max_failures" field.
func (msc *MethodSettingCreate) SetMaxFailures(i int) *MethodSettingCreate {
	msc.mutation.SetMaxFailures(i)
	return msc
}

// SetLockDurationSecs sets the "lock_duration_secs" field.
func (msc *MethodSettingCreate) SetLockDurationSecs(i int) *MethodSettingCreate {
	msc.mutation.SetLockDurationSecs(i)
	return msc
}

// SetNillableLockDurationSecs sets the "lock_duration_secs" field if the given value is not nil.
func (msc *MethodSettingCreate) SetNillableLockDurationSecs(i *int) *MethodSettingCreate {
	if i != nil {
		msc.SetLockDurationSecs(*i)
	}
	return msc
}

// SetSubjectType sets the "subject_type" field.
func (msc *MethodSettingCreate) SetSubjectType(s string) *MethodSettingCreate {
	msc.mutation.SetSubjectType(s)
	return msc
}

// SetSubjectRef sets the "subject_ref" field.
func (msc *MethodSettingCreate) SetSubjectRef(s string) *MethodSettingCreate {
	msc.mutation.SetSubjectRef(s)
	return msc
}

// SetNillableSubjectRef sets the "subject_ref" field if the given value is not nil.
func (msc *MethodSettingCreate) SetNillableSubjectRef(s *string) *MethodSettingCreate {
	if s != nil {
		msc.SetSubjectRef(*s)
	}
	return msc
}

// SetSubjectSourceRef sets the "subject_source_ref" field.
func (msc *MethodSettingCreate) SetSubjectSourceRef(s string) *MethodSettingCreate {
	msc.mutation.SetSubjectSourceRef(s)
	return msc
}

// SetNillableSubjectSourceRef sets the "subject_source_ref" field if the given value is not nil.
func (msc *MethodSettingCreate) SetNillableSubjectSourceRef(s *string) *MethodSettingCreate {
	if s != nil {
		msc.SetSubjectSourceRef(*s)
	}
	return msc
}

// SetID sets the "id" field.
func (msc *MethodSettingCreate) SetID(s string) *MethodSettingCreate {
	msc.mutation.SetID(s)
	return msc
}

// Mutation returns the MethodSettingMutation object of the builder.
func (msc *MethodSettingCreate) Mutation() *MethodSettingMutation {
	return msc.mutation
}

// Save creates the MethodSetting in the database.
func (msc *MethodSettingCreate) Save(ctx context.Context) (*MethodSetting, error) {
	return withHooks(ctx, msc.sqlSave, msc.mutation, msc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (msc *MethodSettingCreate) SaveX(ctx context.Context) *MethodSetting {
	v, err := msc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (msc *MethodSettingCreate) Exec(ctx context.Context) error {
	_, err := msc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (msc *MethodSettingCreate) ExecX(ctx context.Context) {
	if err := msc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (msc *MethodSettingCreate) check() error {
	if _, ok := msc.mutation.Method(); !ok {
		return &ValidationError{Name: "method", err: errors.New(`ent: missing required field "MethodSetting.method"`)}
	}
	if _, ok := msc.mutation.Order(); !ok {
		return &ValidationError{Name: "order", err: errors.New(`ent: missing required field "MethodSetting.order"`)}
	}
	if _, ok := msc.mutation.MaxFailures(); !ok {
		return &ValidationError{Name: "max_failures", err: errors.New(`ent: missing required field "MethodSetting.max_failures"`)}
	}
	if _, ok := msc.mutation.SubjectType(); !ok {
		return &ValidationError{Name: "subject_type", err: errors.New(`ent: missing required field "MethodSetting.subject_type"`)}
	}
	return nil
}

func (msc *MethodSettingCreate) sqlSave(ctx context.Context) (*MethodSetting, error) {
	if err := msc.check(); err != nil {
		return nil, err
	}
	_node, _spec := msc.createSpec()
	if err := sqlgraph.CreateNode(ctx, msc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected MethodSetting.ID type: %T", _spec.ID.Value)
		}
	}
	msc.mutation.id = &_node.ID
	msc.mutation.done = true
	return _node, nil
}

func (msc *MethodSettingCreate) createSpec() (*MethodSetting, *sqlgraph.CreateSpec) {
	var (
		_node = &MethodSetting{config: msc.config}
		_spec = sqlgraph.NewCreateSpec(methodsetting.Table, sqlgraph.NewFieldSpec(methodsetting.FieldID, field.TypeString))
	)
	if id, ok := msc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := msc.mutation.Method(); ok {
		_spec.SetField(methodsetting.FieldMethod, field.TypeString, value)
		_node.Method = value
	}
	if value, ok := msc.mutation.Order(); ok {
		_spec.SetField(methodsetting.FieldOrder, field.TypeInt, value)
		_node.Order = value
	}
	if value, ok := msc.mutation.MaxFailures(); ok {
		_spec.SetField(methodsetting.FieldMaxFailures, field.TypeInt, value)
		_node.MaxFailures = value
	}
	if value, ok := msc.mutation.LockDurationSecs(); ok {
		_spec.SetField(methodsetting.FieldLockDurationSecs, field.TypeInt, value)
		_node.LockDurationSecs = &value
	}
	if value, ok := msc.mutation.SubjectType(); ok {
		_spec.SetField(methodsetting.FieldSubjectType, field.TypeString, value)
		_node.SubjectType = value
	}
	if value, ok := msc.mutation.SubjectRef(); ok {
		_spec.SetField(methodsetting.FieldSubjectRef, field.TypeString, value)
		_node.SubjectRef = &value
	}
	if value, ok := msc.mutation.SubjectSourceRef(); ok {
		_spec.SetField(methodsetting.FieldSubjectSourceRef, field.TypeString, value)
		_node.SubjectSourceRef = &value
	}
	return _node, _spec
}

// MethodSettingCreateBulk is the builder for creating many MethodSetting entities in bulk.
type MethodSettingCreateBulk struct {
	config
	err      error
	builders []*MethodSettingCreate
}

// Save creates the MethodSetting entities in the database.
func (mscb *MethodSettingCreateBulk) Save(ctx context.Context) ([]*MethodSetting, error) {
	if mscb.err != nil {
		return nil, mscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mscb.builders))
	nodes := make([]*MethodSetting, len(mscb.builders))
	mutators := make([]Mutator, len(mscb.builders))
	for i := range mscb.builders {
		func(i int, root context.Context) {
			builder := mscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MethodSettingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mscb *MethodSettingCreateBulk) SaveX(ctx context.Context) []*MethodSetting {
	v, err := mscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mscb *MethodSettingCreateBulk) Exec(ctx context.Context) error {
	_, err := mscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mscb *MethodSettingCreateBulk) ExecX(ctx context.Context) {
	if err := mscb.Exec(ctx); err != nil {
		panic(err)
	}
}
