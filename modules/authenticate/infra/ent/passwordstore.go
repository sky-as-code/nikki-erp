// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/sky-as-code/nikki-erp/modules/authenticate/infra/ent/passwordstore"
)

// PasswordStore is the model entity for the PasswordStore schema.
type PasswordStore struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Password holds the value of the "password" field.
	Password *string `json:"password,omitempty"`
	// PasswordExpiredAt holds the value of the "password_expired_at" field.
	PasswordExpiredAt *time.Time `json:"password_expired_at,omitempty"`
	// PasswordUpdatedAt holds the value of the "password_updated_at" field.
	PasswordUpdatedAt *time.Time `json:"password_updated_at,omitempty"`
	// Passwordtmp holds the value of the "passwordtmp" field.
	Passwordtmp *string `json:"passwordtmp,omitempty"`
	// PasswordtmpExpiredAt holds the value of the "passwordtmp_expired_at" field.
	PasswordtmpExpiredAt *time.Time `json:"passwordtmp_expired_at,omitempty"`
	// Passwordotp holds the value of the "passwordotp" field.
	Passwordotp *string `json:"passwordotp,omitempty"`
	// PasswordotpExpiredAt holds the value of the "passwordotp_expired_at" field.
	PasswordotpExpiredAt *time.Time `json:"passwordotp_expired_at,omitempty"`
	// SubjectType holds the value of the "subject_type" field.
	SubjectType string `json:"subject_type,omitempty"`
	// SubjectRef holds the value of the "subject_ref" field.
	SubjectRef string `json:"subject_ref,omitempty"`
	// SubjectSourceRef holds the value of the "subject_source_ref" field.
	SubjectSourceRef *string `json:"subject_source_ref,omitempty"`
	selectValues     sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PasswordStore) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case passwordstore.FieldID, passwordstore.FieldPassword, passwordstore.FieldPasswordtmp, passwordstore.FieldPasswordotp, passwordstore.FieldSubjectType, passwordstore.FieldSubjectRef, passwordstore.FieldSubjectSourceRef:
			values[i] = new(sql.NullString)
		case passwordstore.FieldPasswordExpiredAt, passwordstore.FieldPasswordUpdatedAt, passwordstore.FieldPasswordtmpExpiredAt, passwordstore.FieldPasswordotpExpiredAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PasswordStore fields.
func (ps *PasswordStore) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case passwordstore.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ps.ID = value.String
			}
		case passwordstore.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				ps.Password = new(string)
				*ps.Password = value.String
			}
		case passwordstore.FieldPasswordExpiredAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field password_expired_at", values[i])
			} else if value.Valid {
				ps.PasswordExpiredAt = new(time.Time)
				*ps.PasswordExpiredAt = value.Time
			}
		case passwordstore.FieldPasswordUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field password_updated_at", values[i])
			} else if value.Valid {
				ps.PasswordUpdatedAt = new(time.Time)
				*ps.PasswordUpdatedAt = value.Time
			}
		case passwordstore.FieldPasswordtmp:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field passwordtmp", values[i])
			} else if value.Valid {
				ps.Passwordtmp = new(string)
				*ps.Passwordtmp = value.String
			}
		case passwordstore.FieldPasswordtmpExpiredAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field passwordtmp_expired_at", values[i])
			} else if value.Valid {
				ps.PasswordtmpExpiredAt = new(time.Time)
				*ps.PasswordtmpExpiredAt = value.Time
			}
		case passwordstore.FieldPasswordotp:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field passwordotp", values[i])
			} else if value.Valid {
				ps.Passwordotp = new(string)
				*ps.Passwordotp = value.String
			}
		case passwordstore.FieldPasswordotpExpiredAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field passwordotp_expired_at", values[i])
			} else if value.Valid {
				ps.PasswordotpExpiredAt = new(time.Time)
				*ps.PasswordotpExpiredAt = value.Time
			}
		case passwordstore.FieldSubjectType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subject_type", values[i])
			} else if value.Valid {
				ps.SubjectType = value.String
			}
		case passwordstore.FieldSubjectRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subject_ref", values[i])
			} else if value.Valid {
				ps.SubjectRef = value.String
			}
		case passwordstore.FieldSubjectSourceRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subject_source_ref", values[i])
			} else if value.Valid {
				ps.SubjectSourceRef = new(string)
				*ps.SubjectSourceRef = value.String
			}
		default:
			ps.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PasswordStore.
// This includes values selected through modifiers, order, etc.
func (ps *PasswordStore) Value(name string) (ent.Value, error) {
	return ps.selectValues.Get(name)
}

// Update returns a builder for updating this PasswordStore.
// Note that you need to call PasswordStore.Unwrap() before calling this method if this PasswordStore
// was returned from a transaction, and the transaction was committed or rolled back.
func (ps *PasswordStore) Update() *PasswordStoreUpdateOne {
	return NewPasswordStoreClient(ps.config).UpdateOne(ps)
}

// Unwrap unwraps the PasswordStore entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ps *PasswordStore) Unwrap() *PasswordStore {
	_tx, ok := ps.config.driver.(*txDriver)
	if !ok {
		panic("ent: PasswordStore is not a transactional entity")
	}
	ps.config.driver = _tx.drv
	return ps
}

// String implements the fmt.Stringer.
func (ps *PasswordStore) String() string {
	var builder strings.Builder
	builder.WriteString("PasswordStore(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ps.ID))
	if v := ps.Password; v != nil {
		builder.WriteString("password=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := ps.PasswordExpiredAt; v != nil {
		builder.WriteString("password_expired_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := ps.PasswordUpdatedAt; v != nil {
		builder.WriteString("password_updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := ps.Passwordtmp; v != nil {
		builder.WriteString("passwordtmp=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := ps.PasswordtmpExpiredAt; v != nil {
		builder.WriteString("passwordtmp_expired_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := ps.Passwordotp; v != nil {
		builder.WriteString("passwordotp=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := ps.PasswordotpExpiredAt; v != nil {
		builder.WriteString("passwordotp_expired_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("subject_type=")
	builder.WriteString(ps.SubjectType)
	builder.WriteString(", ")
	builder.WriteString("subject_ref=")
	builder.WriteString(ps.SubjectRef)
	builder.WriteString(", ")
	if v := ps.SubjectSourceRef; v != nil {
		builder.WriteString("subject_source_ref=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// PasswordStores is a parsable slice of PasswordStore.
type PasswordStores []*PasswordStore
