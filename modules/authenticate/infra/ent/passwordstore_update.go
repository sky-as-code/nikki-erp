// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky-as-code/nikki-erp/modules/authenticate/infra/ent/passwordstore"
	"github.com/sky-as-code/nikki-erp/modules/authenticate/infra/ent/predicate"
)

// PasswordStoreUpdate is the builder for updating PasswordStore entities.
type PasswordStoreUpdate struct {
	config
	hooks    []Hook
	mutation *PasswordStoreMutation
}

// Where appends a list predicates to the PasswordStoreUpdate builder.
func (psu *PasswordStoreUpdate) Where(ps ...predicate.PasswordStore) *PasswordStoreUpdate {
	psu.mutation.Where(ps...)
	return psu
}

// SetPassword sets the "password" field.
func (psu *PasswordStoreUpdate) SetPassword(s string) *PasswordStoreUpdate {
	psu.mutation.SetPassword(s)
	return psu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (psu *PasswordStoreUpdate) SetNillablePassword(s *string) *PasswordStoreUpdate {
	if s != nil {
		psu.SetPassword(*s)
	}
	return psu
}

// ClearPassword clears the value of the "password" field.
func (psu *PasswordStoreUpdate) ClearPassword() *PasswordStoreUpdate {
	psu.mutation.ClearPassword()
	return psu
}

// SetPasswordExpiredAt sets the "password_expired_at" field.
func (psu *PasswordStoreUpdate) SetPasswordExpiredAt(t time.Time) *PasswordStoreUpdate {
	psu.mutation.SetPasswordExpiredAt(t)
	return psu
}

// SetNillablePasswordExpiredAt sets the "password_expired_at" field if the given value is not nil.
func (psu *PasswordStoreUpdate) SetNillablePasswordExpiredAt(t *time.Time) *PasswordStoreUpdate {
	if t != nil {
		psu.SetPasswordExpiredAt(*t)
	}
	return psu
}

// ClearPasswordExpiredAt clears the value of the "password_expired_at" field.
func (psu *PasswordStoreUpdate) ClearPasswordExpiredAt() *PasswordStoreUpdate {
	psu.mutation.ClearPasswordExpiredAt()
	return psu
}

// SetPasswordUpdatedAt sets the "password_updated_at" field.
func (psu *PasswordStoreUpdate) SetPasswordUpdatedAt(t time.Time) *PasswordStoreUpdate {
	psu.mutation.SetPasswordUpdatedAt(t)
	return psu
}

// SetNillablePasswordUpdatedAt sets the "password_updated_at" field if the given value is not nil.
func (psu *PasswordStoreUpdate) SetNillablePasswordUpdatedAt(t *time.Time) *PasswordStoreUpdate {
	if t != nil {
		psu.SetPasswordUpdatedAt(*t)
	}
	return psu
}

// ClearPasswordUpdatedAt clears the value of the "password_updated_at" field.
func (psu *PasswordStoreUpdate) ClearPasswordUpdatedAt() *PasswordStoreUpdate {
	psu.mutation.ClearPasswordUpdatedAt()
	return psu
}

// SetPasswordtmp sets the "passwordtmp" field.
func (psu *PasswordStoreUpdate) SetPasswordtmp(s string) *PasswordStoreUpdate {
	psu.mutation.SetPasswordtmp(s)
	return psu
}

// SetNillablePasswordtmp sets the "passwordtmp" field if the given value is not nil.
func (psu *PasswordStoreUpdate) SetNillablePasswordtmp(s *string) *PasswordStoreUpdate {
	if s != nil {
		psu.SetPasswordtmp(*s)
	}
	return psu
}

// ClearPasswordtmp clears the value of the "passwordtmp" field.
func (psu *PasswordStoreUpdate) ClearPasswordtmp() *PasswordStoreUpdate {
	psu.mutation.ClearPasswordtmp()
	return psu
}

// SetPasswordtmpExpiredAt sets the "passwordtmp_expired_at" field.
func (psu *PasswordStoreUpdate) SetPasswordtmpExpiredAt(t time.Time) *PasswordStoreUpdate {
	psu.mutation.SetPasswordtmpExpiredAt(t)
	return psu
}

// SetNillablePasswordtmpExpiredAt sets the "passwordtmp_expired_at" field if the given value is not nil.
func (psu *PasswordStoreUpdate) SetNillablePasswordtmpExpiredAt(t *time.Time) *PasswordStoreUpdate {
	if t != nil {
		psu.SetPasswordtmpExpiredAt(*t)
	}
	return psu
}

// ClearPasswordtmpExpiredAt clears the value of the "passwordtmp_expired_at" field.
func (psu *PasswordStoreUpdate) ClearPasswordtmpExpiredAt() *PasswordStoreUpdate {
	psu.mutation.ClearPasswordtmpExpiredAt()
	return psu
}

// SetPasswordotp sets the "passwordotp" field.
func (psu *PasswordStoreUpdate) SetPasswordotp(s string) *PasswordStoreUpdate {
	psu.mutation.SetPasswordotp(s)
	return psu
}

// SetNillablePasswordotp sets the "passwordotp" field if the given value is not nil.
func (psu *PasswordStoreUpdate) SetNillablePasswordotp(s *string) *PasswordStoreUpdate {
	if s != nil {
		psu.SetPasswordotp(*s)
	}
	return psu
}

// ClearPasswordotp clears the value of the "passwordotp" field.
func (psu *PasswordStoreUpdate) ClearPasswordotp() *PasswordStoreUpdate {
	psu.mutation.ClearPasswordotp()
	return psu
}

// SetPasswordotpExpiredAt sets the "passwordotp_expired_at" field.
func (psu *PasswordStoreUpdate) SetPasswordotpExpiredAt(t time.Time) *PasswordStoreUpdate {
	psu.mutation.SetPasswordotpExpiredAt(t)
	return psu
}

// SetNillablePasswordotpExpiredAt sets the "passwordotp_expired_at" field if the given value is not nil.
func (psu *PasswordStoreUpdate) SetNillablePasswordotpExpiredAt(t *time.Time) *PasswordStoreUpdate {
	if t != nil {
		psu.SetPasswordotpExpiredAt(*t)
	}
	return psu
}

// ClearPasswordotpExpiredAt clears the value of the "passwordotp_expired_at" field.
func (psu *PasswordStoreUpdate) ClearPasswordotpExpiredAt() *PasswordStoreUpdate {
	psu.mutation.ClearPasswordotpExpiredAt()
	return psu
}

// Mutation returns the PasswordStoreMutation object of the builder.
func (psu *PasswordStoreUpdate) Mutation() *PasswordStoreMutation {
	return psu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (psu *PasswordStoreUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, psu.sqlSave, psu.mutation, psu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (psu *PasswordStoreUpdate) SaveX(ctx context.Context) int {
	affected, err := psu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (psu *PasswordStoreUpdate) Exec(ctx context.Context) error {
	_, err := psu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psu *PasswordStoreUpdate) ExecX(ctx context.Context) {
	if err := psu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (psu *PasswordStoreUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(passwordstore.Table, passwordstore.Columns, sqlgraph.NewFieldSpec(passwordstore.FieldID, field.TypeString))
	if ps := psu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psu.mutation.Password(); ok {
		_spec.SetField(passwordstore.FieldPassword, field.TypeString, value)
	}
	if psu.mutation.PasswordCleared() {
		_spec.ClearField(passwordstore.FieldPassword, field.TypeString)
	}
	if value, ok := psu.mutation.PasswordExpiredAt(); ok {
		_spec.SetField(passwordstore.FieldPasswordExpiredAt, field.TypeTime, value)
	}
	if psu.mutation.PasswordExpiredAtCleared() {
		_spec.ClearField(passwordstore.FieldPasswordExpiredAt, field.TypeTime)
	}
	if value, ok := psu.mutation.PasswordUpdatedAt(); ok {
		_spec.SetField(passwordstore.FieldPasswordUpdatedAt, field.TypeTime, value)
	}
	if psu.mutation.PasswordUpdatedAtCleared() {
		_spec.ClearField(passwordstore.FieldPasswordUpdatedAt, field.TypeTime)
	}
	if value, ok := psu.mutation.Passwordtmp(); ok {
		_spec.SetField(passwordstore.FieldPasswordtmp, field.TypeString, value)
	}
	if psu.mutation.PasswordtmpCleared() {
		_spec.ClearField(passwordstore.FieldPasswordtmp, field.TypeString)
	}
	if value, ok := psu.mutation.PasswordtmpExpiredAt(); ok {
		_spec.SetField(passwordstore.FieldPasswordtmpExpiredAt, field.TypeTime, value)
	}
	if psu.mutation.PasswordtmpExpiredAtCleared() {
		_spec.ClearField(passwordstore.FieldPasswordtmpExpiredAt, field.TypeTime)
	}
	if value, ok := psu.mutation.Passwordotp(); ok {
		_spec.SetField(passwordstore.FieldPasswordotp, field.TypeString, value)
	}
	if psu.mutation.PasswordotpCleared() {
		_spec.ClearField(passwordstore.FieldPasswordotp, field.TypeString)
	}
	if value, ok := psu.mutation.PasswordotpExpiredAt(); ok {
		_spec.SetField(passwordstore.FieldPasswordotpExpiredAt, field.TypeTime, value)
	}
	if psu.mutation.PasswordotpExpiredAtCleared() {
		_spec.ClearField(passwordstore.FieldPasswordotpExpiredAt, field.TypeTime)
	}
	if psu.mutation.SubjectSourceRefCleared() {
		_spec.ClearField(passwordstore.FieldSubjectSourceRef, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, psu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{passwordstore.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	psu.mutation.done = true
	return n, nil
}

// PasswordStoreUpdateOne is the builder for updating a single PasswordStore entity.
type PasswordStoreUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PasswordStoreMutation
}

// SetPassword sets the "password" field.
func (psuo *PasswordStoreUpdateOne) SetPassword(s string) *PasswordStoreUpdateOne {
	psuo.mutation.SetPassword(s)
	return psuo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (psuo *PasswordStoreUpdateOne) SetNillablePassword(s *string) *PasswordStoreUpdateOne {
	if s != nil {
		psuo.SetPassword(*s)
	}
	return psuo
}

// ClearPassword clears the value of the "password" field.
func (psuo *PasswordStoreUpdateOne) ClearPassword() *PasswordStoreUpdateOne {
	psuo.mutation.ClearPassword()
	return psuo
}

// SetPasswordExpiredAt sets the "password_expired_at" field.
func (psuo *PasswordStoreUpdateOne) SetPasswordExpiredAt(t time.Time) *PasswordStoreUpdateOne {
	psuo.mutation.SetPasswordExpiredAt(t)
	return psuo
}

// SetNillablePasswordExpiredAt sets the "password_expired_at" field if the given value is not nil.
func (psuo *PasswordStoreUpdateOne) SetNillablePasswordExpiredAt(t *time.Time) *PasswordStoreUpdateOne {
	if t != nil {
		psuo.SetPasswordExpiredAt(*t)
	}
	return psuo
}

// ClearPasswordExpiredAt clears the value of the "password_expired_at" field.
func (psuo *PasswordStoreUpdateOne) ClearPasswordExpiredAt() *PasswordStoreUpdateOne {
	psuo.mutation.ClearPasswordExpiredAt()
	return psuo
}

// SetPasswordUpdatedAt sets the "password_updated_at" field.
func (psuo *PasswordStoreUpdateOne) SetPasswordUpdatedAt(t time.Time) *PasswordStoreUpdateOne {
	psuo.mutation.SetPasswordUpdatedAt(t)
	return psuo
}

// SetNillablePasswordUpdatedAt sets the "password_updated_at" field if the given value is not nil.
func (psuo *PasswordStoreUpdateOne) SetNillablePasswordUpdatedAt(t *time.Time) *PasswordStoreUpdateOne {
	if t != nil {
		psuo.SetPasswordUpdatedAt(*t)
	}
	return psuo
}

// ClearPasswordUpdatedAt clears the value of the "password_updated_at" field.
func (psuo *PasswordStoreUpdateOne) ClearPasswordUpdatedAt() *PasswordStoreUpdateOne {
	psuo.mutation.ClearPasswordUpdatedAt()
	return psuo
}

// SetPasswordtmp sets the "passwordtmp" field.
func (psuo *PasswordStoreUpdateOne) SetPasswordtmp(s string) *PasswordStoreUpdateOne {
	psuo.mutation.SetPasswordtmp(s)
	return psuo
}

// SetNillablePasswordtmp sets the "passwordtmp" field if the given value is not nil.
func (psuo *PasswordStoreUpdateOne) SetNillablePasswordtmp(s *string) *PasswordStoreUpdateOne {
	if s != nil {
		psuo.SetPasswordtmp(*s)
	}
	return psuo
}

// ClearPasswordtmp clears the value of the "passwordtmp" field.
func (psuo *PasswordStoreUpdateOne) ClearPasswordtmp() *PasswordStoreUpdateOne {
	psuo.mutation.ClearPasswordtmp()
	return psuo
}

// SetPasswordtmpExpiredAt sets the "passwordtmp_expired_at" field.
func (psuo *PasswordStoreUpdateOne) SetPasswordtmpExpiredAt(t time.Time) *PasswordStoreUpdateOne {
	psuo.mutation.SetPasswordtmpExpiredAt(t)
	return psuo
}

// SetNillablePasswordtmpExpiredAt sets the "passwordtmp_expired_at" field if the given value is not nil.
func (psuo *PasswordStoreUpdateOne) SetNillablePasswordtmpExpiredAt(t *time.Time) *PasswordStoreUpdateOne {
	if t != nil {
		psuo.SetPasswordtmpExpiredAt(*t)
	}
	return psuo
}

// ClearPasswordtmpExpiredAt clears the value of the "passwordtmp_expired_at" field.
func (psuo *PasswordStoreUpdateOne) ClearPasswordtmpExpiredAt() *PasswordStoreUpdateOne {
	psuo.mutation.ClearPasswordtmpExpiredAt()
	return psuo
}

// SetPasswordotp sets the "passwordotp" field.
func (psuo *PasswordStoreUpdateOne) SetPasswordotp(s string) *PasswordStoreUpdateOne {
	psuo.mutation.SetPasswordotp(s)
	return psuo
}

// SetNillablePasswordotp sets the "passwordotp" field if the given value is not nil.
func (psuo *PasswordStoreUpdateOne) SetNillablePasswordotp(s *string) *PasswordStoreUpdateOne {
	if s != nil {
		psuo.SetPasswordotp(*s)
	}
	return psuo
}

// ClearPasswordotp clears the value of the "passwordotp" field.
func (psuo *PasswordStoreUpdateOne) ClearPasswordotp() *PasswordStoreUpdateOne {
	psuo.mutation.ClearPasswordotp()
	return psuo
}

// SetPasswordotpExpiredAt sets the "passwordotp_expired_at" field.
func (psuo *PasswordStoreUpdateOne) SetPasswordotpExpiredAt(t time.Time) *PasswordStoreUpdateOne {
	psuo.mutation.SetPasswordotpExpiredAt(t)
	return psuo
}

// SetNillablePasswordotpExpiredAt sets the "passwordotp_expired_at" field if the given value is not nil.
func (psuo *PasswordStoreUpdateOne) SetNillablePasswordotpExpiredAt(t *time.Time) *PasswordStoreUpdateOne {
	if t != nil {
		psuo.SetPasswordotpExpiredAt(*t)
	}
	return psuo
}

// ClearPasswordotpExpiredAt clears the value of the "passwordotp_expired_at" field.
func (psuo *PasswordStoreUpdateOne) ClearPasswordotpExpiredAt() *PasswordStoreUpdateOne {
	psuo.mutation.ClearPasswordotpExpiredAt()
	return psuo
}

// Mutation returns the PasswordStoreMutation object of the builder.
func (psuo *PasswordStoreUpdateOne) Mutation() *PasswordStoreMutation {
	return psuo.mutation
}

// Where appends a list predicates to the PasswordStoreUpdate builder.
func (psuo *PasswordStoreUpdateOne) Where(ps ...predicate.PasswordStore) *PasswordStoreUpdateOne {
	psuo.mutation.Where(ps...)
	return psuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (psuo *PasswordStoreUpdateOne) Select(field string, fields ...string) *PasswordStoreUpdateOne {
	psuo.fields = append([]string{field}, fields...)
	return psuo
}

// Save executes the query and returns the updated PasswordStore entity.
func (psuo *PasswordStoreUpdateOne) Save(ctx context.Context) (*PasswordStore, error) {
	return withHooks(ctx, psuo.sqlSave, psuo.mutation, psuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (psuo *PasswordStoreUpdateOne) SaveX(ctx context.Context) *PasswordStore {
	node, err := psuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (psuo *PasswordStoreUpdateOne) Exec(ctx context.Context) error {
	_, err := psuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psuo *PasswordStoreUpdateOne) ExecX(ctx context.Context) {
	if err := psuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (psuo *PasswordStoreUpdateOne) sqlSave(ctx context.Context) (_node *PasswordStore, err error) {
	_spec := sqlgraph.NewUpdateSpec(passwordstore.Table, passwordstore.Columns, sqlgraph.NewFieldSpec(passwordstore.FieldID, field.TypeString))
	id, ok := psuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PasswordStore.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := psuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, passwordstore.FieldID)
		for _, f := range fields {
			if !passwordstore.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != passwordstore.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := psuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psuo.mutation.Password(); ok {
		_spec.SetField(passwordstore.FieldPassword, field.TypeString, value)
	}
	if psuo.mutation.PasswordCleared() {
		_spec.ClearField(passwordstore.FieldPassword, field.TypeString)
	}
	if value, ok := psuo.mutation.PasswordExpiredAt(); ok {
		_spec.SetField(passwordstore.FieldPasswordExpiredAt, field.TypeTime, value)
	}
	if psuo.mutation.PasswordExpiredAtCleared() {
		_spec.ClearField(passwordstore.FieldPasswordExpiredAt, field.TypeTime)
	}
	if value, ok := psuo.mutation.PasswordUpdatedAt(); ok {
		_spec.SetField(passwordstore.FieldPasswordUpdatedAt, field.TypeTime, value)
	}
	if psuo.mutation.PasswordUpdatedAtCleared() {
		_spec.ClearField(passwordstore.FieldPasswordUpdatedAt, field.TypeTime)
	}
	if value, ok := psuo.mutation.Passwordtmp(); ok {
		_spec.SetField(passwordstore.FieldPasswordtmp, field.TypeString, value)
	}
	if psuo.mutation.PasswordtmpCleared() {
		_spec.ClearField(passwordstore.FieldPasswordtmp, field.TypeString)
	}
	if value, ok := psuo.mutation.PasswordtmpExpiredAt(); ok {
		_spec.SetField(passwordstore.FieldPasswordtmpExpiredAt, field.TypeTime, value)
	}
	if psuo.mutation.PasswordtmpExpiredAtCleared() {
		_spec.ClearField(passwordstore.FieldPasswordtmpExpiredAt, field.TypeTime)
	}
	if value, ok := psuo.mutation.Passwordotp(); ok {
		_spec.SetField(passwordstore.FieldPasswordotp, field.TypeString, value)
	}
	if psuo.mutation.PasswordotpCleared() {
		_spec.ClearField(passwordstore.FieldPasswordotp, field.TypeString)
	}
	if value, ok := psuo.mutation.PasswordotpExpiredAt(); ok {
		_spec.SetField(passwordstore.FieldPasswordotpExpiredAt, field.TypeTime, value)
	}
	if psuo.mutation.PasswordotpExpiredAtCleared() {
		_spec.ClearField(passwordstore.FieldPasswordotpExpiredAt, field.TypeTime)
	}
	if psuo.mutation.SubjectSourceRefCleared() {
		_spec.ClearField(passwordstore.FieldSubjectSourceRef, field.TypeString)
	}
	_node = &PasswordStore{config: psuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, psuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{passwordstore.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	psuo.mutation.done = true
	return _node, nil
}
