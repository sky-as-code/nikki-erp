// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/predicate"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/rolerolesuite"
)

// RoleRoleSuiteDelete is the builder for deleting a RoleRoleSuite entity.
type RoleRoleSuiteDelete struct {
	config
	hooks    []Hook
	mutation *RoleRoleSuiteMutation
}

// Where appends a list predicates to the RoleRoleSuiteDelete builder.
func (rrsd *RoleRoleSuiteDelete) Where(ps ...predicate.RoleRoleSuite) *RoleRoleSuiteDelete {
	rrsd.mutation.Where(ps...)
	return rrsd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (rrsd *RoleRoleSuiteDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, rrsd.sqlExec, rrsd.mutation, rrsd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (rrsd *RoleRoleSuiteDelete) ExecX(ctx context.Context) int {
	n, err := rrsd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (rrsd *RoleRoleSuiteDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(rolerolesuite.Table, nil)
	if ps := rrsd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, rrsd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	rrsd.mutation.done = true
	return affected, err
}

// RoleRoleSuiteDeleteOne is the builder for deleting a single RoleRoleSuite entity.
type RoleRoleSuiteDeleteOne struct {
	rrsd *RoleRoleSuiteDelete
}

// Where appends a list predicates to the RoleRoleSuiteDelete builder.
func (rrsdo *RoleRoleSuiteDeleteOne) Where(ps ...predicate.RoleRoleSuite) *RoleRoleSuiteDeleteOne {
	rrsdo.rrsd.mutation.Where(ps...)
	return rrsdo
}

// Exec executes the deletion query.
func (rrsdo *RoleRoleSuiteDeleteOne) Exec(ctx context.Context) error {
	n, err := rrsdo.rrsd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{rolerolesuite.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (rrsdo *RoleRoleSuiteDeleteOne) ExecX(ctx context.Context) {
	if err := rrsdo.Exec(ctx); err != nil {
		panic(err)
	}
}
