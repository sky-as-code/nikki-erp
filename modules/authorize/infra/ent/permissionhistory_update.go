// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/permissionhistory"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/predicate"
)

// PermissionHistoryUpdate is the builder for updating PermissionHistory entities.
type PermissionHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *PermissionHistoryMutation
}

// Where appends a list predicates to the PermissionHistoryUpdate builder.
func (phu *PermissionHistoryUpdate) Where(ps ...predicate.PermissionHistory) *PermissionHistoryUpdate {
	phu.mutation.Where(ps...)
	return phu
}

// Mutation returns the PermissionHistoryMutation object of the builder.
func (phu *PermissionHistoryUpdate) Mutation() *PermissionHistoryMutation {
	return phu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (phu *PermissionHistoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, phu.sqlSave, phu.mutation, phu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (phu *PermissionHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := phu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (phu *PermissionHistoryUpdate) Exec(ctx context.Context) error {
	_, err := phu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (phu *PermissionHistoryUpdate) ExecX(ctx context.Context) {
	if err := phu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (phu *PermissionHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(permissionhistory.Table, permissionhistory.Columns, sqlgraph.NewFieldSpec(permissionhistory.FieldID, field.TypeString))
	if ps := phu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if phu.mutation.EntitlementExprCleared() {
		_spec.ClearField(permissionhistory.FieldEntitlementExpr, field.TypeString)
	}
	if phu.mutation.RoleNameCleared() {
		_spec.ClearField(permissionhistory.FieldRoleName, field.TypeString)
	}
	if phu.mutation.RoleSuiteNameCleared() {
		_spec.ClearField(permissionhistory.FieldRoleSuiteName, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, phu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{permissionhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	phu.mutation.done = true
	return n, nil
}

// PermissionHistoryUpdateOne is the builder for updating a single PermissionHistory entity.
type PermissionHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PermissionHistoryMutation
}

// Mutation returns the PermissionHistoryMutation object of the builder.
func (phuo *PermissionHistoryUpdateOne) Mutation() *PermissionHistoryMutation {
	return phuo.mutation
}

// Where appends a list predicates to the PermissionHistoryUpdate builder.
func (phuo *PermissionHistoryUpdateOne) Where(ps ...predicate.PermissionHistory) *PermissionHistoryUpdateOne {
	phuo.mutation.Where(ps...)
	return phuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (phuo *PermissionHistoryUpdateOne) Select(field string, fields ...string) *PermissionHistoryUpdateOne {
	phuo.fields = append([]string{field}, fields...)
	return phuo
}

// Save executes the query and returns the updated PermissionHistory entity.
func (phuo *PermissionHistoryUpdateOne) Save(ctx context.Context) (*PermissionHistory, error) {
	return withHooks(ctx, phuo.sqlSave, phuo.mutation, phuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (phuo *PermissionHistoryUpdateOne) SaveX(ctx context.Context) *PermissionHistory {
	node, err := phuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (phuo *PermissionHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := phuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (phuo *PermissionHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := phuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (phuo *PermissionHistoryUpdateOne) sqlSave(ctx context.Context) (_node *PermissionHistory, err error) {
	_spec := sqlgraph.NewUpdateSpec(permissionhistory.Table, permissionhistory.Columns, sqlgraph.NewFieldSpec(permissionhistory.FieldID, field.TypeString))
	id, ok := phuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PermissionHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := phuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, permissionhistory.FieldID)
		for _, f := range fields {
			if !permissionhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != permissionhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := phuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if phuo.mutation.EntitlementExprCleared() {
		_spec.ClearField(permissionhistory.FieldEntitlementExpr, field.TypeString)
	}
	if phuo.mutation.RoleNameCleared() {
		_spec.ClearField(permissionhistory.FieldRoleName, field.TypeString)
	}
	if phuo.mutation.RoleSuiteNameCleared() {
		_spec.ClearField(permissionhistory.FieldRoleSuiteName, field.TypeString)
	}
	_node = &PermissionHistory{config: phuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, phuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{permissionhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	phuo.mutation.done = true
	return _node, nil
}
