// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/entitlementassignment"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/permissionhistory"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/predicate"
)

// EntitlementAssignmentUpdate is the builder for updating EntitlementAssignment entities.
type EntitlementAssignmentUpdate struct {
	config
	hooks    []Hook
	mutation *EntitlementAssignmentMutation
}

// Where appends a list predicates to the EntitlementAssignmentUpdate builder.
func (eau *EntitlementAssignmentUpdate) Where(ps ...predicate.EntitlementAssignment) *EntitlementAssignmentUpdate {
	eau.mutation.Where(ps...)
	return eau
}

// SetActionName sets the "action_name" field.
func (eau *EntitlementAssignmentUpdate) SetActionName(s string) *EntitlementAssignmentUpdate {
	eau.mutation.SetActionName(s)
	return eau
}

// SetNillableActionName sets the "action_name" field if the given value is not nil.
func (eau *EntitlementAssignmentUpdate) SetNillableActionName(s *string) *EntitlementAssignmentUpdate {
	if s != nil {
		eau.SetActionName(*s)
	}
	return eau
}

// ClearActionName clears the value of the "action_name" field.
func (eau *EntitlementAssignmentUpdate) ClearActionName() *EntitlementAssignmentUpdate {
	eau.mutation.ClearActionName()
	return eau
}

// SetResourceName sets the "resource_name" field.
func (eau *EntitlementAssignmentUpdate) SetResourceName(s string) *EntitlementAssignmentUpdate {
	eau.mutation.SetResourceName(s)
	return eau
}

// SetNillableResourceName sets the "resource_name" field if the given value is not nil.
func (eau *EntitlementAssignmentUpdate) SetNillableResourceName(s *string) *EntitlementAssignmentUpdate {
	if s != nil {
		eau.SetResourceName(*s)
	}
	return eau
}

// ClearResourceName clears the value of the "resource_name" field.
func (eau *EntitlementAssignmentUpdate) ClearResourceName() *EntitlementAssignmentUpdate {
	eau.mutation.ClearResourceName()
	return eau
}

// AddPermissionHistoryIDs adds the "permission_histories" edge to the PermissionHistory entity by IDs.
func (eau *EntitlementAssignmentUpdate) AddPermissionHistoryIDs(ids ...string) *EntitlementAssignmentUpdate {
	eau.mutation.AddPermissionHistoryIDs(ids...)
	return eau
}

// AddPermissionHistories adds the "permission_histories" edges to the PermissionHistory entity.
func (eau *EntitlementAssignmentUpdate) AddPermissionHistories(p ...*PermissionHistory) *EntitlementAssignmentUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eau.AddPermissionHistoryIDs(ids...)
}

// Mutation returns the EntitlementAssignmentMutation object of the builder.
func (eau *EntitlementAssignmentUpdate) Mutation() *EntitlementAssignmentMutation {
	return eau.mutation
}

// ClearPermissionHistories clears all "permission_histories" edges to the PermissionHistory entity.
func (eau *EntitlementAssignmentUpdate) ClearPermissionHistories() *EntitlementAssignmentUpdate {
	eau.mutation.ClearPermissionHistories()
	return eau
}

// RemovePermissionHistoryIDs removes the "permission_histories" edge to PermissionHistory entities by IDs.
func (eau *EntitlementAssignmentUpdate) RemovePermissionHistoryIDs(ids ...string) *EntitlementAssignmentUpdate {
	eau.mutation.RemovePermissionHistoryIDs(ids...)
	return eau
}

// RemovePermissionHistories removes "permission_histories" edges to PermissionHistory entities.
func (eau *EntitlementAssignmentUpdate) RemovePermissionHistories(p ...*PermissionHistory) *EntitlementAssignmentUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eau.RemovePermissionHistoryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eau *EntitlementAssignmentUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eau.sqlSave, eau.mutation, eau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eau *EntitlementAssignmentUpdate) SaveX(ctx context.Context) int {
	affected, err := eau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eau *EntitlementAssignmentUpdate) Exec(ctx context.Context) error {
	_, err := eau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eau *EntitlementAssignmentUpdate) ExecX(ctx context.Context) {
	if err := eau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eau *EntitlementAssignmentUpdate) check() error {
	if eau.mutation.EntitlementCleared() && len(eau.mutation.EntitlementIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "EntitlementAssignment.entitlement"`)
	}
	return nil
}

func (eau *EntitlementAssignmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(entitlementassignment.Table, entitlementassignment.Columns, sqlgraph.NewFieldSpec(entitlementassignment.FieldID, field.TypeString))
	if ps := eau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eau.mutation.ActionName(); ok {
		_spec.SetField(entitlementassignment.FieldActionName, field.TypeString, value)
	}
	if eau.mutation.ActionNameCleared() {
		_spec.ClearField(entitlementassignment.FieldActionName, field.TypeString)
	}
	if value, ok := eau.mutation.ResourceName(); ok {
		_spec.SetField(entitlementassignment.FieldResourceName, field.TypeString, value)
	}
	if eau.mutation.ResourceNameCleared() {
		_spec.ClearField(entitlementassignment.FieldResourceName, field.TypeString)
	}
	if eau.mutation.OrgIDCleared() {
		_spec.ClearField(entitlementassignment.FieldOrgID, field.TypeString)
	}
	if eau.mutation.PermissionHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   entitlementassignment.PermissionHistoriesTable,
			Columns: []string{entitlementassignment.PermissionHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permissionhistory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eau.mutation.RemovedPermissionHistoriesIDs(); len(nodes) > 0 && !eau.mutation.PermissionHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   entitlementassignment.PermissionHistoriesTable,
			Columns: []string{entitlementassignment.PermissionHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permissionhistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eau.mutation.PermissionHistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   entitlementassignment.PermissionHistoriesTable,
			Columns: []string{entitlementassignment.PermissionHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permissionhistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entitlementassignment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eau.mutation.done = true
	return n, nil
}

// EntitlementAssignmentUpdateOne is the builder for updating a single EntitlementAssignment entity.
type EntitlementAssignmentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EntitlementAssignmentMutation
}

// SetActionName sets the "action_name" field.
func (eauo *EntitlementAssignmentUpdateOne) SetActionName(s string) *EntitlementAssignmentUpdateOne {
	eauo.mutation.SetActionName(s)
	return eauo
}

// SetNillableActionName sets the "action_name" field if the given value is not nil.
func (eauo *EntitlementAssignmentUpdateOne) SetNillableActionName(s *string) *EntitlementAssignmentUpdateOne {
	if s != nil {
		eauo.SetActionName(*s)
	}
	return eauo
}

// ClearActionName clears the value of the "action_name" field.
func (eauo *EntitlementAssignmentUpdateOne) ClearActionName() *EntitlementAssignmentUpdateOne {
	eauo.mutation.ClearActionName()
	return eauo
}

// SetResourceName sets the "resource_name" field.
func (eauo *EntitlementAssignmentUpdateOne) SetResourceName(s string) *EntitlementAssignmentUpdateOne {
	eauo.mutation.SetResourceName(s)
	return eauo
}

// SetNillableResourceName sets the "resource_name" field if the given value is not nil.
func (eauo *EntitlementAssignmentUpdateOne) SetNillableResourceName(s *string) *EntitlementAssignmentUpdateOne {
	if s != nil {
		eauo.SetResourceName(*s)
	}
	return eauo
}

// ClearResourceName clears the value of the "resource_name" field.
func (eauo *EntitlementAssignmentUpdateOne) ClearResourceName() *EntitlementAssignmentUpdateOne {
	eauo.mutation.ClearResourceName()
	return eauo
}

// AddPermissionHistoryIDs adds the "permission_histories" edge to the PermissionHistory entity by IDs.
func (eauo *EntitlementAssignmentUpdateOne) AddPermissionHistoryIDs(ids ...string) *EntitlementAssignmentUpdateOne {
	eauo.mutation.AddPermissionHistoryIDs(ids...)
	return eauo
}

// AddPermissionHistories adds the "permission_histories" edges to the PermissionHistory entity.
func (eauo *EntitlementAssignmentUpdateOne) AddPermissionHistories(p ...*PermissionHistory) *EntitlementAssignmentUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eauo.AddPermissionHistoryIDs(ids...)
}

// Mutation returns the EntitlementAssignmentMutation object of the builder.
func (eauo *EntitlementAssignmentUpdateOne) Mutation() *EntitlementAssignmentMutation {
	return eauo.mutation
}

// ClearPermissionHistories clears all "permission_histories" edges to the PermissionHistory entity.
func (eauo *EntitlementAssignmentUpdateOne) ClearPermissionHistories() *EntitlementAssignmentUpdateOne {
	eauo.mutation.ClearPermissionHistories()
	return eauo
}

// RemovePermissionHistoryIDs removes the "permission_histories" edge to PermissionHistory entities by IDs.
func (eauo *EntitlementAssignmentUpdateOne) RemovePermissionHistoryIDs(ids ...string) *EntitlementAssignmentUpdateOne {
	eauo.mutation.RemovePermissionHistoryIDs(ids...)
	return eauo
}

// RemovePermissionHistories removes "permission_histories" edges to PermissionHistory entities.
func (eauo *EntitlementAssignmentUpdateOne) RemovePermissionHistories(p ...*PermissionHistory) *EntitlementAssignmentUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eauo.RemovePermissionHistoryIDs(ids...)
}

// Where appends a list predicates to the EntitlementAssignmentUpdate builder.
func (eauo *EntitlementAssignmentUpdateOne) Where(ps ...predicate.EntitlementAssignment) *EntitlementAssignmentUpdateOne {
	eauo.mutation.Where(ps...)
	return eauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (eauo *EntitlementAssignmentUpdateOne) Select(field string, fields ...string) *EntitlementAssignmentUpdateOne {
	eauo.fields = append([]string{field}, fields...)
	return eauo
}

// Save executes the query and returns the updated EntitlementAssignment entity.
func (eauo *EntitlementAssignmentUpdateOne) Save(ctx context.Context) (*EntitlementAssignment, error) {
	return withHooks(ctx, eauo.sqlSave, eauo.mutation, eauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eauo *EntitlementAssignmentUpdateOne) SaveX(ctx context.Context) *EntitlementAssignment {
	node, err := eauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (eauo *EntitlementAssignmentUpdateOne) Exec(ctx context.Context) error {
	_, err := eauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eauo *EntitlementAssignmentUpdateOne) ExecX(ctx context.Context) {
	if err := eauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eauo *EntitlementAssignmentUpdateOne) check() error {
	if eauo.mutation.EntitlementCleared() && len(eauo.mutation.EntitlementIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "EntitlementAssignment.entitlement"`)
	}
	return nil
}

func (eauo *EntitlementAssignmentUpdateOne) sqlSave(ctx context.Context) (_node *EntitlementAssignment, err error) {
	if err := eauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(entitlementassignment.Table, entitlementassignment.Columns, sqlgraph.NewFieldSpec(entitlementassignment.FieldID, field.TypeString))
	id, ok := eauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EntitlementAssignment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := eauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, entitlementassignment.FieldID)
		for _, f := range fields {
			if !entitlementassignment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != entitlementassignment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := eauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eauo.mutation.ActionName(); ok {
		_spec.SetField(entitlementassignment.FieldActionName, field.TypeString, value)
	}
	if eauo.mutation.ActionNameCleared() {
		_spec.ClearField(entitlementassignment.FieldActionName, field.TypeString)
	}
	if value, ok := eauo.mutation.ResourceName(); ok {
		_spec.SetField(entitlementassignment.FieldResourceName, field.TypeString, value)
	}
	if eauo.mutation.ResourceNameCleared() {
		_spec.ClearField(entitlementassignment.FieldResourceName, field.TypeString)
	}
	if eauo.mutation.OrgIDCleared() {
		_spec.ClearField(entitlementassignment.FieldOrgID, field.TypeString)
	}
	if eauo.mutation.PermissionHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   entitlementassignment.PermissionHistoriesTable,
			Columns: []string{entitlementassignment.PermissionHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permissionhistory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eauo.mutation.RemovedPermissionHistoriesIDs(); len(nodes) > 0 && !eauo.mutation.PermissionHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   entitlementassignment.PermissionHistoriesTable,
			Columns: []string{entitlementassignment.PermissionHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permissionhistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eauo.mutation.PermissionHistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   entitlementassignment.PermissionHistoriesTable,
			Columns: []string{entitlementassignment.PermissionHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permissionhistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EntitlementAssignment{config: eauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, eauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entitlementassignment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	eauo.mutation.done = true
	return _node, nil
}
