// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/permissionhistory"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/predicate"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/revokerequest"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/role"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/rolesuite"
)

// RevokeRequestUpdate is the builder for updating RevokeRequest entities.
type RevokeRequestUpdate struct {
	config
	hooks    []Hook
	mutation *RevokeRequestMutation
}

// Where appends a list predicates to the RevokeRequestUpdate builder.
func (rru *RevokeRequestUpdate) Where(ps ...predicate.RevokeRequest) *RevokeRequestUpdate {
	rru.mutation.Where(ps...)
	return rru
}

// SetEtag sets the "etag" field.
func (rru *RevokeRequestUpdate) SetEtag(s string) *RevokeRequestUpdate {
	rru.mutation.SetEtag(s)
	return rru
}

// SetNillableEtag sets the "etag" field if the given value is not nil.
func (rru *RevokeRequestUpdate) SetNillableEtag(s *string) *RevokeRequestUpdate {
	if s != nil {
		rru.SetEtag(*s)
	}
	return rru
}

// SetTargetRoleID sets the "target_role_id" field.
func (rru *RevokeRequestUpdate) SetTargetRoleID(s string) *RevokeRequestUpdate {
	rru.mutation.SetTargetRoleID(s)
	return rru
}

// SetNillableTargetRoleID sets the "target_role_id" field if the given value is not nil.
func (rru *RevokeRequestUpdate) SetNillableTargetRoleID(s *string) *RevokeRequestUpdate {
	if s != nil {
		rru.SetTargetRoleID(*s)
	}
	return rru
}

// ClearTargetRoleID clears the value of the "target_role_id" field.
func (rru *RevokeRequestUpdate) ClearTargetRoleID() *RevokeRequestUpdate {
	rru.mutation.ClearTargetRoleID()
	return rru
}

// SetTargetRoleName sets the "target_role_name" field.
func (rru *RevokeRequestUpdate) SetTargetRoleName(s string) *RevokeRequestUpdate {
	rru.mutation.SetTargetRoleName(s)
	return rru
}

// SetNillableTargetRoleName sets the "target_role_name" field if the given value is not nil.
func (rru *RevokeRequestUpdate) SetNillableTargetRoleName(s *string) *RevokeRequestUpdate {
	if s != nil {
		rru.SetTargetRoleName(*s)
	}
	return rru
}

// SetTargetSuiteID sets the "target_suite_id" field.
func (rru *RevokeRequestUpdate) SetTargetSuiteID(s string) *RevokeRequestUpdate {
	rru.mutation.SetTargetSuiteID(s)
	return rru
}

// SetNillableTargetSuiteID sets the "target_suite_id" field if the given value is not nil.
func (rru *RevokeRequestUpdate) SetNillableTargetSuiteID(s *string) *RevokeRequestUpdate {
	if s != nil {
		rru.SetTargetSuiteID(*s)
	}
	return rru
}

// ClearTargetSuiteID clears the value of the "target_suite_id" field.
func (rru *RevokeRequestUpdate) ClearTargetSuiteID() *RevokeRequestUpdate {
	rru.mutation.ClearTargetSuiteID()
	return rru
}

// SetTargetSuiteName sets the "target_suite_name" field.
func (rru *RevokeRequestUpdate) SetTargetSuiteName(s string) *RevokeRequestUpdate {
	rru.mutation.SetTargetSuiteName(s)
	return rru
}

// SetNillableTargetSuiteName sets the "target_suite_name" field if the given value is not nil.
func (rru *RevokeRequestUpdate) SetNillableTargetSuiteName(s *string) *RevokeRequestUpdate {
	if s != nil {
		rru.SetTargetSuiteName(*s)
	}
	return rru
}

// SetStatus sets the "status" field.
func (rru *RevokeRequestUpdate) SetStatus(r revokerequest.Status) *RevokeRequestUpdate {
	rru.mutation.SetStatus(r)
	return rru
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (rru *RevokeRequestUpdate) SetNillableStatus(r *revokerequest.Status) *RevokeRequestUpdate {
	if r != nil {
		rru.SetStatus(*r)
	}
	return rru
}

// AddPermissionHistoryIDs adds the "permission_histories" edge to the PermissionHistory entity by IDs.
func (rru *RevokeRequestUpdate) AddPermissionHistoryIDs(ids ...string) *RevokeRequestUpdate {
	rru.mutation.AddPermissionHistoryIDs(ids...)
	return rru
}

// AddPermissionHistories adds the "permission_histories" edges to the PermissionHistory entity.
func (rru *RevokeRequestUpdate) AddPermissionHistories(p ...*PermissionHistory) *RevokeRequestUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rru.AddPermissionHistoryIDs(ids...)
}

// SetRoleID sets the "role" edge to the Role entity by ID.
func (rru *RevokeRequestUpdate) SetRoleID(id string) *RevokeRequestUpdate {
	rru.mutation.SetRoleID(id)
	return rru
}

// SetNillableRoleID sets the "role" edge to the Role entity by ID if the given value is not nil.
func (rru *RevokeRequestUpdate) SetNillableRoleID(id *string) *RevokeRequestUpdate {
	if id != nil {
		rru = rru.SetRoleID(*id)
	}
	return rru
}

// SetRole sets the "role" edge to the Role entity.
func (rru *RevokeRequestUpdate) SetRole(r *Role) *RevokeRequestUpdate {
	return rru.SetRoleID(r.ID)
}

// SetRoleSuiteID sets the "role_suite" edge to the RoleSuite entity by ID.
func (rru *RevokeRequestUpdate) SetRoleSuiteID(id string) *RevokeRequestUpdate {
	rru.mutation.SetRoleSuiteID(id)
	return rru
}

// SetNillableRoleSuiteID sets the "role_suite" edge to the RoleSuite entity by ID if the given value is not nil.
func (rru *RevokeRequestUpdate) SetNillableRoleSuiteID(id *string) *RevokeRequestUpdate {
	if id != nil {
		rru = rru.SetRoleSuiteID(*id)
	}
	return rru
}

// SetRoleSuite sets the "role_suite" edge to the RoleSuite entity.
func (rru *RevokeRequestUpdate) SetRoleSuite(r *RoleSuite) *RevokeRequestUpdate {
	return rru.SetRoleSuiteID(r.ID)
}

// Mutation returns the RevokeRequestMutation object of the builder.
func (rru *RevokeRequestUpdate) Mutation() *RevokeRequestMutation {
	return rru.mutation
}

// ClearPermissionHistories clears all "permission_histories" edges to the PermissionHistory entity.
func (rru *RevokeRequestUpdate) ClearPermissionHistories() *RevokeRequestUpdate {
	rru.mutation.ClearPermissionHistories()
	return rru
}

// RemovePermissionHistoryIDs removes the "permission_histories" edge to PermissionHistory entities by IDs.
func (rru *RevokeRequestUpdate) RemovePermissionHistoryIDs(ids ...string) *RevokeRequestUpdate {
	rru.mutation.RemovePermissionHistoryIDs(ids...)
	return rru
}

// RemovePermissionHistories removes "permission_histories" edges to PermissionHistory entities.
func (rru *RevokeRequestUpdate) RemovePermissionHistories(p ...*PermissionHistory) *RevokeRequestUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rru.RemovePermissionHistoryIDs(ids...)
}

// ClearRole clears the "role" edge to the Role entity.
func (rru *RevokeRequestUpdate) ClearRole() *RevokeRequestUpdate {
	rru.mutation.ClearRole()
	return rru
}

// ClearRoleSuite clears the "role_suite" edge to the RoleSuite entity.
func (rru *RevokeRequestUpdate) ClearRoleSuite() *RevokeRequestUpdate {
	rru.mutation.ClearRoleSuite()
	return rru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rru *RevokeRequestUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rru.sqlSave, rru.mutation, rru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rru *RevokeRequestUpdate) SaveX(ctx context.Context) int {
	affected, err := rru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rru *RevokeRequestUpdate) Exec(ctx context.Context) error {
	_, err := rru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rru *RevokeRequestUpdate) ExecX(ctx context.Context) {
	if err := rru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rru *RevokeRequestUpdate) check() error {
	if v, ok := rru.mutation.Status(); ok {
		if err := revokerequest.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "RevokeRequest.status": %w`, err)}
		}
	}
	return nil
}

func (rru *RevokeRequestUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(revokerequest.Table, revokerequest.Columns, sqlgraph.NewFieldSpec(revokerequest.FieldID, field.TypeString))
	if ps := rru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if rru.mutation.AttachmentURLCleared() {
		_spec.ClearField(revokerequest.FieldAttachmentURL, field.TypeString)
	}
	if rru.mutation.CommentCleared() {
		_spec.ClearField(revokerequest.FieldComment, field.TypeString)
	}
	if value, ok := rru.mutation.Etag(); ok {
		_spec.SetField(revokerequest.FieldEtag, field.TypeString, value)
	}
	if value, ok := rru.mutation.TargetRoleName(); ok {
		_spec.SetField(revokerequest.FieldTargetRoleName, field.TypeString, value)
	}
	if value, ok := rru.mutation.TargetSuiteName(); ok {
		_spec.SetField(revokerequest.FieldTargetSuiteName, field.TypeString, value)
	}
	if value, ok := rru.mutation.Status(); ok {
		_spec.SetField(revokerequest.FieldStatus, field.TypeEnum, value)
	}
	if rru.mutation.PermissionHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   revokerequest.PermissionHistoriesTable,
			Columns: []string{revokerequest.PermissionHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permissionhistory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rru.mutation.RemovedPermissionHistoriesIDs(); len(nodes) > 0 && !rru.mutation.PermissionHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   revokerequest.PermissionHistoriesTable,
			Columns: []string{revokerequest.PermissionHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permissionhistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rru.mutation.PermissionHistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   revokerequest.PermissionHistoriesTable,
			Columns: []string{revokerequest.PermissionHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permissionhistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rru.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   revokerequest.RoleTable,
			Columns: []string{revokerequest.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rru.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   revokerequest.RoleTable,
			Columns: []string{revokerequest.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rru.mutation.RoleSuiteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   revokerequest.RoleSuiteTable,
			Columns: []string{revokerequest.RoleSuiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolesuite.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rru.mutation.RoleSuiteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   revokerequest.RoleSuiteTable,
			Columns: []string{revokerequest.RoleSuiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolesuite.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{revokerequest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rru.mutation.done = true
	return n, nil
}

// RevokeRequestUpdateOne is the builder for updating a single RevokeRequest entity.
type RevokeRequestUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RevokeRequestMutation
}

// SetEtag sets the "etag" field.
func (rruo *RevokeRequestUpdateOne) SetEtag(s string) *RevokeRequestUpdateOne {
	rruo.mutation.SetEtag(s)
	return rruo
}

// SetNillableEtag sets the "etag" field if the given value is not nil.
func (rruo *RevokeRequestUpdateOne) SetNillableEtag(s *string) *RevokeRequestUpdateOne {
	if s != nil {
		rruo.SetEtag(*s)
	}
	return rruo
}

// SetTargetRoleID sets the "target_role_id" field.
func (rruo *RevokeRequestUpdateOne) SetTargetRoleID(s string) *RevokeRequestUpdateOne {
	rruo.mutation.SetTargetRoleID(s)
	return rruo
}

// SetNillableTargetRoleID sets the "target_role_id" field if the given value is not nil.
func (rruo *RevokeRequestUpdateOne) SetNillableTargetRoleID(s *string) *RevokeRequestUpdateOne {
	if s != nil {
		rruo.SetTargetRoleID(*s)
	}
	return rruo
}

// ClearTargetRoleID clears the value of the "target_role_id" field.
func (rruo *RevokeRequestUpdateOne) ClearTargetRoleID() *RevokeRequestUpdateOne {
	rruo.mutation.ClearTargetRoleID()
	return rruo
}

// SetTargetRoleName sets the "target_role_name" field.
func (rruo *RevokeRequestUpdateOne) SetTargetRoleName(s string) *RevokeRequestUpdateOne {
	rruo.mutation.SetTargetRoleName(s)
	return rruo
}

// SetNillableTargetRoleName sets the "target_role_name" field if the given value is not nil.
func (rruo *RevokeRequestUpdateOne) SetNillableTargetRoleName(s *string) *RevokeRequestUpdateOne {
	if s != nil {
		rruo.SetTargetRoleName(*s)
	}
	return rruo
}

// SetTargetSuiteID sets the "target_suite_id" field.
func (rruo *RevokeRequestUpdateOne) SetTargetSuiteID(s string) *RevokeRequestUpdateOne {
	rruo.mutation.SetTargetSuiteID(s)
	return rruo
}

// SetNillableTargetSuiteID sets the "target_suite_id" field if the given value is not nil.
func (rruo *RevokeRequestUpdateOne) SetNillableTargetSuiteID(s *string) *RevokeRequestUpdateOne {
	if s != nil {
		rruo.SetTargetSuiteID(*s)
	}
	return rruo
}

// ClearTargetSuiteID clears the value of the "target_suite_id" field.
func (rruo *RevokeRequestUpdateOne) ClearTargetSuiteID() *RevokeRequestUpdateOne {
	rruo.mutation.ClearTargetSuiteID()
	return rruo
}

// SetTargetSuiteName sets the "target_suite_name" field.
func (rruo *RevokeRequestUpdateOne) SetTargetSuiteName(s string) *RevokeRequestUpdateOne {
	rruo.mutation.SetTargetSuiteName(s)
	return rruo
}

// SetNillableTargetSuiteName sets the "target_suite_name" field if the given value is not nil.
func (rruo *RevokeRequestUpdateOne) SetNillableTargetSuiteName(s *string) *RevokeRequestUpdateOne {
	if s != nil {
		rruo.SetTargetSuiteName(*s)
	}
	return rruo
}

// SetStatus sets the "status" field.
func (rruo *RevokeRequestUpdateOne) SetStatus(r revokerequest.Status) *RevokeRequestUpdateOne {
	rruo.mutation.SetStatus(r)
	return rruo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (rruo *RevokeRequestUpdateOne) SetNillableStatus(r *revokerequest.Status) *RevokeRequestUpdateOne {
	if r != nil {
		rruo.SetStatus(*r)
	}
	return rruo
}

// AddPermissionHistoryIDs adds the "permission_histories" edge to the PermissionHistory entity by IDs.
func (rruo *RevokeRequestUpdateOne) AddPermissionHistoryIDs(ids ...string) *RevokeRequestUpdateOne {
	rruo.mutation.AddPermissionHistoryIDs(ids...)
	return rruo
}

// AddPermissionHistories adds the "permission_histories" edges to the PermissionHistory entity.
func (rruo *RevokeRequestUpdateOne) AddPermissionHistories(p ...*PermissionHistory) *RevokeRequestUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rruo.AddPermissionHistoryIDs(ids...)
}

// SetRoleID sets the "role" edge to the Role entity by ID.
func (rruo *RevokeRequestUpdateOne) SetRoleID(id string) *RevokeRequestUpdateOne {
	rruo.mutation.SetRoleID(id)
	return rruo
}

// SetNillableRoleID sets the "role" edge to the Role entity by ID if the given value is not nil.
func (rruo *RevokeRequestUpdateOne) SetNillableRoleID(id *string) *RevokeRequestUpdateOne {
	if id != nil {
		rruo = rruo.SetRoleID(*id)
	}
	return rruo
}

// SetRole sets the "role" edge to the Role entity.
func (rruo *RevokeRequestUpdateOne) SetRole(r *Role) *RevokeRequestUpdateOne {
	return rruo.SetRoleID(r.ID)
}

// SetRoleSuiteID sets the "role_suite" edge to the RoleSuite entity by ID.
func (rruo *RevokeRequestUpdateOne) SetRoleSuiteID(id string) *RevokeRequestUpdateOne {
	rruo.mutation.SetRoleSuiteID(id)
	return rruo
}

// SetNillableRoleSuiteID sets the "role_suite" edge to the RoleSuite entity by ID if the given value is not nil.
func (rruo *RevokeRequestUpdateOne) SetNillableRoleSuiteID(id *string) *RevokeRequestUpdateOne {
	if id != nil {
		rruo = rruo.SetRoleSuiteID(*id)
	}
	return rruo
}

// SetRoleSuite sets the "role_suite" edge to the RoleSuite entity.
func (rruo *RevokeRequestUpdateOne) SetRoleSuite(r *RoleSuite) *RevokeRequestUpdateOne {
	return rruo.SetRoleSuiteID(r.ID)
}

// Mutation returns the RevokeRequestMutation object of the builder.
func (rruo *RevokeRequestUpdateOne) Mutation() *RevokeRequestMutation {
	return rruo.mutation
}

// ClearPermissionHistories clears all "permission_histories" edges to the PermissionHistory entity.
func (rruo *RevokeRequestUpdateOne) ClearPermissionHistories() *RevokeRequestUpdateOne {
	rruo.mutation.ClearPermissionHistories()
	return rruo
}

// RemovePermissionHistoryIDs removes the "permission_histories" edge to PermissionHistory entities by IDs.
func (rruo *RevokeRequestUpdateOne) RemovePermissionHistoryIDs(ids ...string) *RevokeRequestUpdateOne {
	rruo.mutation.RemovePermissionHistoryIDs(ids...)
	return rruo
}

// RemovePermissionHistories removes "permission_histories" edges to PermissionHistory entities.
func (rruo *RevokeRequestUpdateOne) RemovePermissionHistories(p ...*PermissionHistory) *RevokeRequestUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rruo.RemovePermissionHistoryIDs(ids...)
}

// ClearRole clears the "role" edge to the Role entity.
func (rruo *RevokeRequestUpdateOne) ClearRole() *RevokeRequestUpdateOne {
	rruo.mutation.ClearRole()
	return rruo
}

// ClearRoleSuite clears the "role_suite" edge to the RoleSuite entity.
func (rruo *RevokeRequestUpdateOne) ClearRoleSuite() *RevokeRequestUpdateOne {
	rruo.mutation.ClearRoleSuite()
	return rruo
}

// Where appends a list predicates to the RevokeRequestUpdate builder.
func (rruo *RevokeRequestUpdateOne) Where(ps ...predicate.RevokeRequest) *RevokeRequestUpdateOne {
	rruo.mutation.Where(ps...)
	return rruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rruo *RevokeRequestUpdateOne) Select(field string, fields ...string) *RevokeRequestUpdateOne {
	rruo.fields = append([]string{field}, fields...)
	return rruo
}

// Save executes the query and returns the updated RevokeRequest entity.
func (rruo *RevokeRequestUpdateOne) Save(ctx context.Context) (*RevokeRequest, error) {
	return withHooks(ctx, rruo.sqlSave, rruo.mutation, rruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rruo *RevokeRequestUpdateOne) SaveX(ctx context.Context) *RevokeRequest {
	node, err := rruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rruo *RevokeRequestUpdateOne) Exec(ctx context.Context) error {
	_, err := rruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rruo *RevokeRequestUpdateOne) ExecX(ctx context.Context) {
	if err := rruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rruo *RevokeRequestUpdateOne) check() error {
	if v, ok := rruo.mutation.Status(); ok {
		if err := revokerequest.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "RevokeRequest.status": %w`, err)}
		}
	}
	return nil
}

func (rruo *RevokeRequestUpdateOne) sqlSave(ctx context.Context) (_node *RevokeRequest, err error) {
	if err := rruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(revokerequest.Table, revokerequest.Columns, sqlgraph.NewFieldSpec(revokerequest.FieldID, field.TypeString))
	id, ok := rruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RevokeRequest.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, revokerequest.FieldID)
		for _, f := range fields {
			if !revokerequest.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != revokerequest.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if rruo.mutation.AttachmentURLCleared() {
		_spec.ClearField(revokerequest.FieldAttachmentURL, field.TypeString)
	}
	if rruo.mutation.CommentCleared() {
		_spec.ClearField(revokerequest.FieldComment, field.TypeString)
	}
	if value, ok := rruo.mutation.Etag(); ok {
		_spec.SetField(revokerequest.FieldEtag, field.TypeString, value)
	}
	if value, ok := rruo.mutation.TargetRoleName(); ok {
		_spec.SetField(revokerequest.FieldTargetRoleName, field.TypeString, value)
	}
	if value, ok := rruo.mutation.TargetSuiteName(); ok {
		_spec.SetField(revokerequest.FieldTargetSuiteName, field.TypeString, value)
	}
	if value, ok := rruo.mutation.Status(); ok {
		_spec.SetField(revokerequest.FieldStatus, field.TypeEnum, value)
	}
	if rruo.mutation.PermissionHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   revokerequest.PermissionHistoriesTable,
			Columns: []string{revokerequest.PermissionHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permissionhistory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rruo.mutation.RemovedPermissionHistoriesIDs(); len(nodes) > 0 && !rruo.mutation.PermissionHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   revokerequest.PermissionHistoriesTable,
			Columns: []string{revokerequest.PermissionHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permissionhistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rruo.mutation.PermissionHistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   revokerequest.PermissionHistoriesTable,
			Columns: []string{revokerequest.PermissionHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permissionhistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rruo.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   revokerequest.RoleTable,
			Columns: []string{revokerequest.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rruo.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   revokerequest.RoleTable,
			Columns: []string{revokerequest.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rruo.mutation.RoleSuiteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   revokerequest.RoleSuiteTable,
			Columns: []string{revokerequest.RoleSuiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolesuite.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rruo.mutation.RoleSuiteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   revokerequest.RoleSuiteTable,
			Columns: []string{revokerequest.RoleSuiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolesuite.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &RevokeRequest{config: rruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{revokerequest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rruo.mutation.done = true
	return _node, nil
}
