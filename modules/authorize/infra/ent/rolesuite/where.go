// Code generated by ent, DO NOT EDIT.

package rolesuite

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldEQ(FieldCreatedBy, v))
}

// DisplayName applies equality check predicate on the "display_name" field. It's identical to DisplayNameEQ.
func DisplayName(v string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldEQ(FieldDisplayName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldEQ(FieldDescription, v))
}

// Etag applies equality check predicate on the "etag" field. It's identical to EtagEQ.
func Etag(v string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldEQ(FieldEtag, v))
}

// OwnerID applies equality check predicate on the "owner_id" field. It's identical to OwnerIDEQ.
func OwnerID(v string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldEQ(FieldOwnerID, v))
}

// IsRequestable applies equality check predicate on the "is_requestable" field. It's identical to IsRequestableEQ.
func IsRequestable(v bool) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldEQ(FieldIsRequestable, v))
}

// IsRequiredAttachment applies equality check predicate on the "is_required_attachment" field. It's identical to IsRequiredAttachmentEQ.
func IsRequiredAttachment(v bool) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldEQ(FieldIsRequiredAttachment, v))
}

// IsRequiredComment applies equality check predicate on the "is_required_comment" field. It's identical to IsRequiredCommentEQ.
func IsRequiredComment(v bool) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldEQ(FieldIsRequiredComment, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldContainsFold(FieldCreatedBy, v))
}

// DisplayNameEQ applies the EQ predicate on the "display_name" field.
func DisplayNameEQ(v string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldEQ(FieldDisplayName, v))
}

// DisplayNameNEQ applies the NEQ predicate on the "display_name" field.
func DisplayNameNEQ(v string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldNEQ(FieldDisplayName, v))
}

// DisplayNameIn applies the In predicate on the "display_name" field.
func DisplayNameIn(vs ...string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldIn(FieldDisplayName, vs...))
}

// DisplayNameNotIn applies the NotIn predicate on the "display_name" field.
func DisplayNameNotIn(vs ...string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldNotIn(FieldDisplayName, vs...))
}

// DisplayNameGT applies the GT predicate on the "display_name" field.
func DisplayNameGT(v string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldGT(FieldDisplayName, v))
}

// DisplayNameGTE applies the GTE predicate on the "display_name" field.
func DisplayNameGTE(v string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldGTE(FieldDisplayName, v))
}

// DisplayNameLT applies the LT predicate on the "display_name" field.
func DisplayNameLT(v string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldLT(FieldDisplayName, v))
}

// DisplayNameLTE applies the LTE predicate on the "display_name" field.
func DisplayNameLTE(v string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldLTE(FieldDisplayName, v))
}

// DisplayNameContains applies the Contains predicate on the "display_name" field.
func DisplayNameContains(v string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldContains(FieldDisplayName, v))
}

// DisplayNameHasPrefix applies the HasPrefix predicate on the "display_name" field.
func DisplayNameHasPrefix(v string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldHasPrefix(FieldDisplayName, v))
}

// DisplayNameHasSuffix applies the HasSuffix predicate on the "display_name" field.
func DisplayNameHasSuffix(v string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldHasSuffix(FieldDisplayName, v))
}

// DisplayNameEqualFold applies the EqualFold predicate on the "display_name" field.
func DisplayNameEqualFold(v string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldEqualFold(FieldDisplayName, v))
}

// DisplayNameContainsFold applies the ContainsFold predicate on the "display_name" field.
func DisplayNameContainsFold(v string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldContainsFold(FieldDisplayName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldContainsFold(FieldDescription, v))
}

// EtagEQ applies the EQ predicate on the "etag" field.
func EtagEQ(v string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldEQ(FieldEtag, v))
}

// EtagNEQ applies the NEQ predicate on the "etag" field.
func EtagNEQ(v string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldNEQ(FieldEtag, v))
}

// EtagIn applies the In predicate on the "etag" field.
func EtagIn(vs ...string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldIn(FieldEtag, vs...))
}

// EtagNotIn applies the NotIn predicate on the "etag" field.
func EtagNotIn(vs ...string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldNotIn(FieldEtag, vs...))
}

// EtagGT applies the GT predicate on the "etag" field.
func EtagGT(v string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldGT(FieldEtag, v))
}

// EtagGTE applies the GTE predicate on the "etag" field.
func EtagGTE(v string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldGTE(FieldEtag, v))
}

// EtagLT applies the LT predicate on the "etag" field.
func EtagLT(v string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldLT(FieldEtag, v))
}

// EtagLTE applies the LTE predicate on the "etag" field.
func EtagLTE(v string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldLTE(FieldEtag, v))
}

// EtagContains applies the Contains predicate on the "etag" field.
func EtagContains(v string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldContains(FieldEtag, v))
}

// EtagHasPrefix applies the HasPrefix predicate on the "etag" field.
func EtagHasPrefix(v string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldHasPrefix(FieldEtag, v))
}

// EtagHasSuffix applies the HasSuffix predicate on the "etag" field.
func EtagHasSuffix(v string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldHasSuffix(FieldEtag, v))
}

// EtagEqualFold applies the EqualFold predicate on the "etag" field.
func EtagEqualFold(v string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldEqualFold(FieldEtag, v))
}

// EtagContainsFold applies the ContainsFold predicate on the "etag" field.
func EtagContainsFold(v string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldContainsFold(FieldEtag, v))
}

// OwnerTypeEQ applies the EQ predicate on the "owner_type" field.
func OwnerTypeEQ(v OwnerType) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldEQ(FieldOwnerType, v))
}

// OwnerTypeNEQ applies the NEQ predicate on the "owner_type" field.
func OwnerTypeNEQ(v OwnerType) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldNEQ(FieldOwnerType, v))
}

// OwnerTypeIn applies the In predicate on the "owner_type" field.
func OwnerTypeIn(vs ...OwnerType) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldIn(FieldOwnerType, vs...))
}

// OwnerTypeNotIn applies the NotIn predicate on the "owner_type" field.
func OwnerTypeNotIn(vs ...OwnerType) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldNotIn(FieldOwnerType, vs...))
}

// OwnerIDEQ applies the EQ predicate on the "owner_id" field.
func OwnerIDEQ(v string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldEQ(FieldOwnerID, v))
}

// OwnerIDNEQ applies the NEQ predicate on the "owner_id" field.
func OwnerIDNEQ(v string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldNEQ(FieldOwnerID, v))
}

// OwnerIDIn applies the In predicate on the "owner_id" field.
func OwnerIDIn(vs ...string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldIn(FieldOwnerID, vs...))
}

// OwnerIDNotIn applies the NotIn predicate on the "owner_id" field.
func OwnerIDNotIn(vs ...string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldNotIn(FieldOwnerID, vs...))
}

// OwnerIDGT applies the GT predicate on the "owner_id" field.
func OwnerIDGT(v string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldGT(FieldOwnerID, v))
}

// OwnerIDGTE applies the GTE predicate on the "owner_id" field.
func OwnerIDGTE(v string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldGTE(FieldOwnerID, v))
}

// OwnerIDLT applies the LT predicate on the "owner_id" field.
func OwnerIDLT(v string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldLT(FieldOwnerID, v))
}

// OwnerIDLTE applies the LTE predicate on the "owner_id" field.
func OwnerIDLTE(v string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldLTE(FieldOwnerID, v))
}

// OwnerIDContains applies the Contains predicate on the "owner_id" field.
func OwnerIDContains(v string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldContains(FieldOwnerID, v))
}

// OwnerIDHasPrefix applies the HasPrefix predicate on the "owner_id" field.
func OwnerIDHasPrefix(v string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldHasPrefix(FieldOwnerID, v))
}

// OwnerIDHasSuffix applies the HasSuffix predicate on the "owner_id" field.
func OwnerIDHasSuffix(v string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldHasSuffix(FieldOwnerID, v))
}

// OwnerIDEqualFold applies the EqualFold predicate on the "owner_id" field.
func OwnerIDEqualFold(v string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldEqualFold(FieldOwnerID, v))
}

// OwnerIDContainsFold applies the ContainsFold predicate on the "owner_id" field.
func OwnerIDContainsFold(v string) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldContainsFold(FieldOwnerID, v))
}

// IsRequestableEQ applies the EQ predicate on the "is_requestable" field.
func IsRequestableEQ(v bool) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldEQ(FieldIsRequestable, v))
}

// IsRequestableNEQ applies the NEQ predicate on the "is_requestable" field.
func IsRequestableNEQ(v bool) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldNEQ(FieldIsRequestable, v))
}

// IsRequiredAttachmentEQ applies the EQ predicate on the "is_required_attachment" field.
func IsRequiredAttachmentEQ(v bool) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldEQ(FieldIsRequiredAttachment, v))
}

// IsRequiredAttachmentNEQ applies the NEQ predicate on the "is_required_attachment" field.
func IsRequiredAttachmentNEQ(v bool) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldNEQ(FieldIsRequiredAttachment, v))
}

// IsRequiredCommentEQ applies the EQ predicate on the "is_required_comment" field.
func IsRequiredCommentEQ(v bool) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldEQ(FieldIsRequiredComment, v))
}

// IsRequiredCommentNEQ applies the NEQ predicate on the "is_required_comment" field.
func IsRequiredCommentNEQ(v bool) predicate.RoleSuite {
	return predicate.RoleSuite(sql.FieldNEQ(FieldIsRequiredComment, v))
}

// HasRolesuiteUsers applies the HasEdge predicate on the "rolesuite_users" edge.
func HasRolesuiteUsers() predicate.RoleSuite {
	return predicate.RoleSuite(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, RolesuiteUsersTable, RolesuiteUsersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRolesuiteUsersWith applies the HasEdge predicate on the "rolesuite_users" edge with a given conditions (other predicates).
func HasRolesuiteUsersWith(preds ...predicate.RoleSuiteUser) predicate.RoleSuite {
	return predicate.RoleSuite(func(s *sql.Selector) {
		step := newRolesuiteUsersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPermissionHistories applies the HasEdge predicate on the "permission_histories" edge.
func HasPermissionHistories() predicate.RoleSuite {
	return predicate.RoleSuite(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, PermissionHistoriesTable, PermissionHistoriesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPermissionHistoriesWith applies the HasEdge predicate on the "permission_histories" edge with a given conditions (other predicates).
func HasPermissionHistoriesWith(preds ...predicate.PermissionHistory) predicate.RoleSuite {
	return predicate.RoleSuite(func(s *sql.Selector) {
		step := newPermissionHistoriesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGrantRequests applies the HasEdge predicate on the "grant_requests" edge.
func HasGrantRequests() predicate.RoleSuite {
	return predicate.RoleSuite(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, GrantRequestsTable, GrantRequestsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGrantRequestsWith applies the HasEdge predicate on the "grant_requests" edge with a given conditions (other predicates).
func HasGrantRequestsWith(preds ...predicate.GrantRequest) predicate.RoleSuite {
	return predicate.RoleSuite(func(s *sql.Selector) {
		step := newGrantRequestsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRevokeRequests applies the HasEdge predicate on the "revoke_requests" edge.
func HasRevokeRequests() predicate.RoleSuite {
	return predicate.RoleSuite(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, RevokeRequestsTable, RevokeRequestsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRevokeRequestsWith applies the HasEdge predicate on the "revoke_requests" edge with a given conditions (other predicates).
func HasRevokeRequestsWith(preds ...predicate.RevokeRequest) predicate.RoleSuite {
	return predicate.RoleSuite(func(s *sql.Selector) {
		step := newRevokeRequestsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRoles applies the HasEdge predicate on the "roles" edge.
func HasRoles() predicate.RoleSuite {
	return predicate.RoleSuite(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, RolesTable, RolesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRolesWith applies the HasEdge predicate on the "roles" edge with a given conditions (other predicates).
func HasRolesWith(preds ...predicate.Role) predicate.RoleSuite {
	return predicate.RoleSuite(func(s *sql.Selector) {
		step := newRolesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRoleRolesuite applies the HasEdge predicate on the "role_rolesuite" edge.
func HasRoleRolesuite() predicate.RoleSuite {
	return predicate.RoleSuite(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, RoleRolesuiteTable, RoleRolesuiteColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRoleRolesuiteWith applies the HasEdge predicate on the "role_rolesuite" edge with a given conditions (other predicates).
func HasRoleRolesuiteWith(preds ...predicate.RoleRoleSuite) predicate.RoleSuite {
	return predicate.RoleSuite(func(s *sql.Selector) {
		step := newRoleRolesuiteStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.RoleSuite) predicate.RoleSuite {
	return predicate.RoleSuite(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.RoleSuite) predicate.RoleSuite {
	return predicate.RoleSuite(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.RoleSuite) predicate.RoleSuite {
	return predicate.RoleSuite(sql.NotPredicates(p))
}
