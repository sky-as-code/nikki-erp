// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/grantrequest"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/grantresponse"
)

// GrantResponseCreate is the builder for creating a GrantResponse entity.
type GrantResponseCreate struct {
	config
	mutation *GrantResponseMutation
	hooks    []Hook
}

// SetRequestID sets the "request_id" field.
func (grc *GrantResponseCreate) SetRequestID(s string) *GrantResponseCreate {
	grc.mutation.SetRequestID(s)
	return grc
}

// SetIsApproved sets the "is_approved" field.
func (grc *GrantResponseCreate) SetIsApproved(b bool) *GrantResponseCreate {
	grc.mutation.SetIsApproved(b)
	return grc
}

// SetReason sets the "reason" field.
func (grc *GrantResponseCreate) SetReason(s string) *GrantResponseCreate {
	grc.mutation.SetReason(s)
	return grc
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (grc *GrantResponseCreate) SetNillableReason(s *string) *GrantResponseCreate {
	if s != nil {
		grc.SetReason(*s)
	}
	return grc
}

// SetResponderID sets the "responder_id" field.
func (grc *GrantResponseCreate) SetResponderID(s string) *GrantResponseCreate {
	grc.mutation.SetResponderID(s)
	return grc
}

// SetCreatedAt sets the "created_at" field.
func (grc *GrantResponseCreate) SetCreatedAt(t time.Time) *GrantResponseCreate {
	grc.mutation.SetCreatedAt(t)
	return grc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (grc *GrantResponseCreate) SetNillableCreatedAt(t *time.Time) *GrantResponseCreate {
	if t != nil {
		grc.SetCreatedAt(*t)
	}
	return grc
}

// SetEtag sets the "etag" field.
func (grc *GrantResponseCreate) SetEtag(s string) *GrantResponseCreate {
	grc.mutation.SetEtag(s)
	return grc
}

// SetID sets the "id" field.
func (grc *GrantResponseCreate) SetID(s string) *GrantResponseCreate {
	grc.mutation.SetID(s)
	return grc
}

// SetGrantRequestID sets the "grant_request" edge to the GrantRequest entity by ID.
func (grc *GrantResponseCreate) SetGrantRequestID(id string) *GrantResponseCreate {
	grc.mutation.SetGrantRequestID(id)
	return grc
}

// SetGrantRequest sets the "grant_request" edge to the GrantRequest entity.
func (grc *GrantResponseCreate) SetGrantRequest(g *GrantRequest) *GrantResponseCreate {
	return grc.SetGrantRequestID(g.ID)
}

// Mutation returns the GrantResponseMutation object of the builder.
func (grc *GrantResponseCreate) Mutation() *GrantResponseMutation {
	return grc.mutation
}

// Save creates the GrantResponse in the database.
func (grc *GrantResponseCreate) Save(ctx context.Context) (*GrantResponse, error) {
	grc.defaults()
	return withHooks(ctx, grc.sqlSave, grc.mutation, grc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (grc *GrantResponseCreate) SaveX(ctx context.Context) *GrantResponse {
	v, err := grc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (grc *GrantResponseCreate) Exec(ctx context.Context) error {
	_, err := grc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (grc *GrantResponseCreate) ExecX(ctx context.Context) {
	if err := grc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (grc *GrantResponseCreate) defaults() {
	if _, ok := grc.mutation.CreatedAt(); !ok {
		v := grantresponse.DefaultCreatedAt()
		grc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (grc *GrantResponseCreate) check() error {
	if _, ok := grc.mutation.RequestID(); !ok {
		return &ValidationError{Name: "request_id", err: errors.New(`ent: missing required field "GrantResponse.request_id"`)}
	}
	if _, ok := grc.mutation.IsApproved(); !ok {
		return &ValidationError{Name: "is_approved", err: errors.New(`ent: missing required field "GrantResponse.is_approved"`)}
	}
	if _, ok := grc.mutation.ResponderID(); !ok {
		return &ValidationError{Name: "responder_id", err: errors.New(`ent: missing required field "GrantResponse.responder_id"`)}
	}
	if _, ok := grc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "GrantResponse.created_at"`)}
	}
	if _, ok := grc.mutation.Etag(); !ok {
		return &ValidationError{Name: "etag", err: errors.New(`ent: missing required field "GrantResponse.etag"`)}
	}
	if len(grc.mutation.GrantRequestIDs()) == 0 {
		return &ValidationError{Name: "grant_request", err: errors.New(`ent: missing required edge "GrantResponse.grant_request"`)}
	}
	return nil
}

func (grc *GrantResponseCreate) sqlSave(ctx context.Context) (*GrantResponse, error) {
	if err := grc.check(); err != nil {
		return nil, err
	}
	_node, _spec := grc.createSpec()
	if err := sqlgraph.CreateNode(ctx, grc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected GrantResponse.ID type: %T", _spec.ID.Value)
		}
	}
	grc.mutation.id = &_node.ID
	grc.mutation.done = true
	return _node, nil
}

func (grc *GrantResponseCreate) createSpec() (*GrantResponse, *sqlgraph.CreateSpec) {
	var (
		_node = &GrantResponse{config: grc.config}
		_spec = sqlgraph.NewCreateSpec(grantresponse.Table, sqlgraph.NewFieldSpec(grantresponse.FieldID, field.TypeString))
	)
	if id, ok := grc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := grc.mutation.IsApproved(); ok {
		_spec.SetField(grantresponse.FieldIsApproved, field.TypeBool, value)
		_node.IsApproved = value
	}
	if value, ok := grc.mutation.Reason(); ok {
		_spec.SetField(grantresponse.FieldReason, field.TypeString, value)
		_node.Reason = &value
	}
	if value, ok := grc.mutation.ResponderID(); ok {
		_spec.SetField(grantresponse.FieldResponderID, field.TypeString, value)
		_node.ResponderID = value
	}
	if value, ok := grc.mutation.CreatedAt(); ok {
		_spec.SetField(grantresponse.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := grc.mutation.Etag(); ok {
		_spec.SetField(grantresponse.FieldEtag, field.TypeString, value)
		_node.Etag = value
	}
	if nodes := grc.mutation.GrantRequestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   grantresponse.GrantRequestTable,
			Columns: []string{grantresponse.GrantRequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grantrequest.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RequestID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// GrantResponseCreateBulk is the builder for creating many GrantResponse entities in bulk.
type GrantResponseCreateBulk struct {
	config
	err      error
	builders []*GrantResponseCreate
}

// Save creates the GrantResponse entities in the database.
func (grcb *GrantResponseCreateBulk) Save(ctx context.Context) ([]*GrantResponse, error) {
	if grcb.err != nil {
		return nil, grcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(grcb.builders))
	nodes := make([]*GrantResponse, len(grcb.builders))
	mutators := make([]Mutator, len(grcb.builders))
	for i := range grcb.builders {
		func(i int, root context.Context) {
			builder := grcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GrantResponseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, grcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, grcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, grcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (grcb *GrantResponseCreateBulk) SaveX(ctx context.Context) []*GrantResponse {
	v, err := grcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (grcb *GrantResponseCreateBulk) Exec(ctx context.Context) error {
	_, err := grcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (grcb *GrantResponseCreateBulk) ExecX(ctx context.Context) {
	if err := grcb.Exec(ctx); err != nil {
		panic(err)
	}
}
