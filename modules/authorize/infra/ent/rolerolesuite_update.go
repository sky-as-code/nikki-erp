// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/predicate"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/rolerolesuite"
)

// RoleRoleSuiteUpdate is the builder for updating RoleRoleSuite entities.
type RoleRoleSuiteUpdate struct {
	config
	hooks    []Hook
	mutation *RoleRoleSuiteMutation
}

// Where appends a list predicates to the RoleRoleSuiteUpdate builder.
func (rrsu *RoleRoleSuiteUpdate) Where(ps ...predicate.RoleRoleSuite) *RoleRoleSuiteUpdate {
	rrsu.mutation.Where(ps...)
	return rrsu
}

// Mutation returns the RoleRoleSuiteMutation object of the builder.
func (rrsu *RoleRoleSuiteUpdate) Mutation() *RoleRoleSuiteMutation {
	return rrsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rrsu *RoleRoleSuiteUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rrsu.sqlSave, rrsu.mutation, rrsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rrsu *RoleRoleSuiteUpdate) SaveX(ctx context.Context) int {
	affected, err := rrsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rrsu *RoleRoleSuiteUpdate) Exec(ctx context.Context) error {
	_, err := rrsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rrsu *RoleRoleSuiteUpdate) ExecX(ctx context.Context) {
	if err := rrsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rrsu *RoleRoleSuiteUpdate) check() error {
	if rrsu.mutation.RoleCleared() && len(rrsu.mutation.RoleIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "RoleRoleSuite.role"`)
	}
	if rrsu.mutation.RoleSuiteCleared() && len(rrsu.mutation.RoleSuiteIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "RoleRoleSuite.role_suite"`)
	}
	return nil
}

func (rrsu *RoleRoleSuiteUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rrsu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(rolerolesuite.Table, rolerolesuite.Columns, sqlgraph.NewFieldSpec(rolerolesuite.FieldRoleSuiteID, field.TypeString), sqlgraph.NewFieldSpec(rolerolesuite.FieldRoleID, field.TypeString))
	if ps := rrsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rrsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rolerolesuite.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rrsu.mutation.done = true
	return n, nil
}

// RoleRoleSuiteUpdateOne is the builder for updating a single RoleRoleSuite entity.
type RoleRoleSuiteUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RoleRoleSuiteMutation
}

// Mutation returns the RoleRoleSuiteMutation object of the builder.
func (rrsuo *RoleRoleSuiteUpdateOne) Mutation() *RoleRoleSuiteMutation {
	return rrsuo.mutation
}

// Where appends a list predicates to the RoleRoleSuiteUpdate builder.
func (rrsuo *RoleRoleSuiteUpdateOne) Where(ps ...predicate.RoleRoleSuite) *RoleRoleSuiteUpdateOne {
	rrsuo.mutation.Where(ps...)
	return rrsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rrsuo *RoleRoleSuiteUpdateOne) Select(field string, fields ...string) *RoleRoleSuiteUpdateOne {
	rrsuo.fields = append([]string{field}, fields...)
	return rrsuo
}

// Save executes the query and returns the updated RoleRoleSuite entity.
func (rrsuo *RoleRoleSuiteUpdateOne) Save(ctx context.Context) (*RoleRoleSuite, error) {
	return withHooks(ctx, rrsuo.sqlSave, rrsuo.mutation, rrsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rrsuo *RoleRoleSuiteUpdateOne) SaveX(ctx context.Context) *RoleRoleSuite {
	node, err := rrsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rrsuo *RoleRoleSuiteUpdateOne) Exec(ctx context.Context) error {
	_, err := rrsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rrsuo *RoleRoleSuiteUpdateOne) ExecX(ctx context.Context) {
	if err := rrsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rrsuo *RoleRoleSuiteUpdateOne) check() error {
	if rrsuo.mutation.RoleCleared() && len(rrsuo.mutation.RoleIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "RoleRoleSuite.role"`)
	}
	if rrsuo.mutation.RoleSuiteCleared() && len(rrsuo.mutation.RoleSuiteIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "RoleRoleSuite.role_suite"`)
	}
	return nil
}

func (rrsuo *RoleRoleSuiteUpdateOne) sqlSave(ctx context.Context) (_node *RoleRoleSuite, err error) {
	if err := rrsuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(rolerolesuite.Table, rolerolesuite.Columns, sqlgraph.NewFieldSpec(rolerolesuite.FieldRoleSuiteID, field.TypeString), sqlgraph.NewFieldSpec(rolerolesuite.FieldRoleID, field.TypeString))
	if id, ok := rrsuo.mutation.RoleSuiteID(); !ok {
		return nil, &ValidationError{Name: "role_suite_id", err: errors.New(`ent: missing "RoleRoleSuite.role_suite_id" for update`)}
	} else {
		_spec.Node.CompositeID[0].Value = id
	}
	if id, ok := rrsuo.mutation.RoleID(); !ok {
		return nil, &ValidationError{Name: "role_id", err: errors.New(`ent: missing "RoleRoleSuite.role_id" for update`)}
	} else {
		_spec.Node.CompositeID[1].Value = id
	}
	if fields := rrsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, len(fields))
		for i, f := range fields {
			if !rolerolesuite.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			_spec.Node.Columns[i] = f
		}
	}
	if ps := rrsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_node = &RoleRoleSuite{config: rrsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rrsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rolerolesuite.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rrsuo.mutation.done = true
	return _node, nil
}
