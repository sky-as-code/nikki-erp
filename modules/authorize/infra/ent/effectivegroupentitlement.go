// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/effectivegroupentitlement"
)

// EffectiveGroupEntitlement is the model entity for the EffectiveGroupEntitlement schema.
type EffectiveGroupEntitlement struct {
	config `json:"-"`
	// GroupID holds the value of the "group_id" field.
	GroupID string `json:"group_id,omitempty"`
	// ActionExpr holds the value of the "action_expr" field.
	ActionExpr string `json:"action_expr,omitempty"`
	// ResourceID holds the value of the "resource_id" field.
	ResourceID *string `json:"resource_id,omitempty"`
	// ResourceName holds the value of the "resource_name" field.
	ResourceName *string `json:"resource_name,omitempty"`
	// ScopeRef holds the value of the "scope_ref" field.
	ScopeRef *string `json:"scope_ref,omitempty"`
	// ScopeType holds the value of the "scope_type" field.
	ScopeType *string `json:"scope_type,omitempty"`
	// ActionID holds the value of the "action_id" field.
	ActionID *string `json:"action_id,omitempty"`
	// ActionName holds the value of the "action_name" field.
	ActionName *string `json:"action_name,omitempty"`
	// Source holds the value of the "source" field.
	Source       string `json:"source,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EffectiveGroupEntitlement) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case effectivegroupentitlement.FieldGroupID, effectivegroupentitlement.FieldActionExpr, effectivegroupentitlement.FieldResourceID, effectivegroupentitlement.FieldResourceName, effectivegroupentitlement.FieldScopeRef, effectivegroupentitlement.FieldScopeType, effectivegroupentitlement.FieldActionID, effectivegroupentitlement.FieldActionName, effectivegroupentitlement.FieldSource:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EffectiveGroupEntitlement fields.
func (ege *EffectiveGroupEntitlement) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case effectivegroupentitlement.FieldGroupID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field group_id", values[i])
			} else if value.Valid {
				ege.GroupID = value.String
			}
		case effectivegroupentitlement.FieldActionExpr:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field action_expr", values[i])
			} else if value.Valid {
				ege.ActionExpr = value.String
			}
		case effectivegroupentitlement.FieldResourceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource_id", values[i])
			} else if value.Valid {
				ege.ResourceID = new(string)
				*ege.ResourceID = value.String
			}
		case effectivegroupentitlement.FieldResourceName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource_name", values[i])
			} else if value.Valid {
				ege.ResourceName = new(string)
				*ege.ResourceName = value.String
			}
		case effectivegroupentitlement.FieldScopeRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field scope_ref", values[i])
			} else if value.Valid {
				ege.ScopeRef = new(string)
				*ege.ScopeRef = value.String
			}
		case effectivegroupentitlement.FieldScopeType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field scope_type", values[i])
			} else if value.Valid {
				ege.ScopeType = new(string)
				*ege.ScopeType = value.String
			}
		case effectivegroupentitlement.FieldActionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field action_id", values[i])
			} else if value.Valid {
				ege.ActionID = new(string)
				*ege.ActionID = value.String
			}
		case effectivegroupentitlement.FieldActionName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field action_name", values[i])
			} else if value.Valid {
				ege.ActionName = new(string)
				*ege.ActionName = value.String
			}
		case effectivegroupentitlement.FieldSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source", values[i])
			} else if value.Valid {
				ege.Source = value.String
			}
		default:
			ege.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EffectiveGroupEntitlement.
// This includes values selected through modifiers, order, etc.
func (ege *EffectiveGroupEntitlement) Value(name string) (ent.Value, error) {
	return ege.selectValues.Get(name)
}

// Unwrap unwraps the EffectiveGroupEntitlement entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ege *EffectiveGroupEntitlement) Unwrap() *EffectiveGroupEntitlement {
	_tx, ok := ege.config.driver.(*txDriver)
	if !ok {
		panic("ent: EffectiveGroupEntitlement is not a transactional entity")
	}
	ege.config.driver = _tx.drv
	return ege
}

// String implements the fmt.Stringer.
func (ege *EffectiveGroupEntitlement) String() string {
	var builder strings.Builder
	builder.WriteString("EffectiveGroupEntitlement(")
	builder.WriteString("group_id=")
	builder.WriteString(ege.GroupID)
	builder.WriteString(", ")
	builder.WriteString("action_expr=")
	builder.WriteString(ege.ActionExpr)
	builder.WriteString(", ")
	if v := ege.ResourceID; v != nil {
		builder.WriteString("resource_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := ege.ResourceName; v != nil {
		builder.WriteString("resource_name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := ege.ScopeRef; v != nil {
		builder.WriteString("scope_ref=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := ege.ScopeType; v != nil {
		builder.WriteString("scope_type=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := ege.ActionID; v != nil {
		builder.WriteString("action_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := ege.ActionName; v != nil {
		builder.WriteString("action_name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("source=")
	builder.WriteString(ege.Source)
	builder.WriteByte(')')
	return builder.String()
}

// EffectiveGroupEntitlements is a parsable slice of EffectiveGroupEntitlement.
type EffectiveGroupEntitlements []*EffectiveGroupEntitlement
