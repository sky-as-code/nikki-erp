// Code generated by ent, DO NOT EDIT.

package resource

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the resource type in the database.
	Label = "resource"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldResourceType holds the string denoting the resource_type field in the database.
	FieldResourceType = "resource_type"
	// FieldResourceRef holds the string denoting the resource_ref field in the database.
	FieldResourceRef = "resource_ref"
	// FieldScopeType holds the string denoting the scope_type field in the database.
	FieldScopeType = "scope_type"
	// EdgeActions holds the string denoting the actions edge name in mutations.
	EdgeActions = "actions"
	// EdgeEntitlements holds the string denoting the entitlements edge name in mutations.
	EdgeEntitlements = "entitlements"
	// Table holds the table name of the resource in the database.
	Table = "authz_resources"
	// ActionsTable is the table that holds the actions relation/edge.
	ActionsTable = "authz_actions"
	// ActionsInverseTable is the table name for the Action entity.
	// It exists in this package in order to avoid circular dependency with the "action" package.
	ActionsInverseTable = "authz_actions"
	// ActionsColumn is the table column denoting the actions relation/edge.
	ActionsColumn = "resource_id"
	// EntitlementsTable is the table that holds the entitlements relation/edge.
	EntitlementsTable = "authz_entitlements"
	// EntitlementsInverseTable is the table name for the Entitlement entity.
	// It exists in this package in order to avoid circular dependency with the "entitlement" package.
	EntitlementsInverseTable = "authz_entitlements"
	// EntitlementsColumn is the table column denoting the entitlements relation/edge.
	EntitlementsColumn = "resource_id"
)

// Columns holds all SQL columns for resource fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
	FieldResourceType,
	FieldResourceRef,
	FieldScopeType,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// ResourceType defines the type for the "resource_type" enum field.
type ResourceType string

// ResourceType values.
const (
	ResourceTypeNikkiApplication ResourceType = "nikki_application"
	ResourceTypeCustom           ResourceType = "custom"
)

func (rt ResourceType) String() string {
	return string(rt)
}

// ResourceTypeValidator is a validator for the "resource_type" field enum values. It is called by the builders before save.
func ResourceTypeValidator(rt ResourceType) error {
	switch rt {
	case ResourceTypeNikkiApplication, ResourceTypeCustom:
		return nil
	default:
		return fmt.Errorf("resource: invalid enum value for resource_type field: %q", rt)
	}
}

// ScopeType defines the type for the "scope_type" enum field.
type ScopeType string

// ScopeType values.
const (
	ScopeTypeDomain    ScopeType = "domain"
	ScopeTypeOrg       ScopeType = "org"
	ScopeTypeHierarchy ScopeType = "hierarchy"
	ScopeTypePrivate   ScopeType = "private"
)

func (st ScopeType) String() string {
	return string(st)
}

// ScopeTypeValidator is a validator for the "scope_type" field enum values. It is called by the builders before save.
func ScopeTypeValidator(st ScopeType) error {
	switch st {
	case ScopeTypeDomain, ScopeTypeOrg, ScopeTypeHierarchy, ScopeTypePrivate:
		return nil
	default:
		return fmt.Errorf("resource: invalid enum value for scope_type field: %q", st)
	}
}

// OrderOption defines the ordering options for the Resource queries.
type OrderOption = func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByResourceType orders the results by the resource_type field.
func ByResourceType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResourceType, opts...).ToFunc()
}

// ByResourceRef orders the results by the resource_ref field.
func ByResourceRef(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResourceRef, opts...).ToFunc()
}

// ByScopeType orders the results by the scope_type field.
func ByScopeType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScopeType, opts...).ToFunc()
}

// ByActionsCount orders the results by actions count.
func ByActionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newActionsStep(), opts...)
	}
}

// ByActions orders the results by actions terms.
func ByActions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newActionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEntitlementsCount orders the results by entitlements count.
func ByEntitlementsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEntitlementsStep(), opts...)
	}
}

// ByEntitlements orders the results by entitlements terms.
func ByEntitlements(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEntitlementsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newActionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ActionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ActionsTable, ActionsColumn),
	)
}
func newEntitlementsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EntitlementsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, EntitlementsTable, EntitlementsColumn),
	)
}
