// Code generated by ent, DO NOT EDIT.

package resource

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Resource {
	return predicate.Resource(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Resource {
	return predicate.Resource(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Resource {
	return predicate.Resource(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Resource {
	return predicate.Resource(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Resource {
	return predicate.Resource(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Resource {
	return predicate.Resource(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Resource {
	return predicate.Resource(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Resource {
	return predicate.Resource(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Resource {
	return predicate.Resource(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Resource {
	return predicate.Resource(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Resource {
	return predicate.Resource(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Resource {
	return predicate.Resource(sql.FieldEQ(FieldCreatedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Resource {
	return predicate.Resource(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Resource {
	return predicate.Resource(sql.FieldEQ(FieldDescription, v))
}

// Etag applies equality check predicate on the "etag" field. It's identical to EtagEQ.
func Etag(v string) predicate.Resource {
	return predicate.Resource(sql.FieldEQ(FieldEtag, v))
}

// ResourceRef applies equality check predicate on the "resource_ref" field. It's identical to ResourceRefEQ.
func ResourceRef(v string) predicate.Resource {
	return predicate.Resource(sql.FieldEQ(FieldResourceRef, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Resource {
	return predicate.Resource(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Resource {
	return predicate.Resource(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Resource {
	return predicate.Resource(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Resource {
	return predicate.Resource(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Resource {
	return predicate.Resource(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Resource {
	return predicate.Resource(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Resource {
	return predicate.Resource(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Resource {
	return predicate.Resource(sql.FieldLTE(FieldCreatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Resource {
	return predicate.Resource(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Resource {
	return predicate.Resource(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Resource {
	return predicate.Resource(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Resource {
	return predicate.Resource(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Resource {
	return predicate.Resource(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Resource {
	return predicate.Resource(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Resource {
	return predicate.Resource(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Resource {
	return predicate.Resource(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Resource {
	return predicate.Resource(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Resource {
	return predicate.Resource(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Resource {
	return predicate.Resource(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Resource {
	return predicate.Resource(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Resource {
	return predicate.Resource(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Resource {
	return predicate.Resource(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Resource {
	return predicate.Resource(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Resource {
	return predicate.Resource(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Resource {
	return predicate.Resource(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Resource {
	return predicate.Resource(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Resource {
	return predicate.Resource(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Resource {
	return predicate.Resource(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Resource {
	return predicate.Resource(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Resource {
	return predicate.Resource(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Resource {
	return predicate.Resource(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Resource {
	return predicate.Resource(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Resource {
	return predicate.Resource(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Resource {
	return predicate.Resource(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Resource {
	return predicate.Resource(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Resource {
	return predicate.Resource(sql.FieldContainsFold(FieldDescription, v))
}

// EtagEQ applies the EQ predicate on the "etag" field.
func EtagEQ(v string) predicate.Resource {
	return predicate.Resource(sql.FieldEQ(FieldEtag, v))
}

// EtagNEQ applies the NEQ predicate on the "etag" field.
func EtagNEQ(v string) predicate.Resource {
	return predicate.Resource(sql.FieldNEQ(FieldEtag, v))
}

// EtagIn applies the In predicate on the "etag" field.
func EtagIn(vs ...string) predicate.Resource {
	return predicate.Resource(sql.FieldIn(FieldEtag, vs...))
}

// EtagNotIn applies the NotIn predicate on the "etag" field.
func EtagNotIn(vs ...string) predicate.Resource {
	return predicate.Resource(sql.FieldNotIn(FieldEtag, vs...))
}

// EtagGT applies the GT predicate on the "etag" field.
func EtagGT(v string) predicate.Resource {
	return predicate.Resource(sql.FieldGT(FieldEtag, v))
}

// EtagGTE applies the GTE predicate on the "etag" field.
func EtagGTE(v string) predicate.Resource {
	return predicate.Resource(sql.FieldGTE(FieldEtag, v))
}

// EtagLT applies the LT predicate on the "etag" field.
func EtagLT(v string) predicate.Resource {
	return predicate.Resource(sql.FieldLT(FieldEtag, v))
}

// EtagLTE applies the LTE predicate on the "etag" field.
func EtagLTE(v string) predicate.Resource {
	return predicate.Resource(sql.FieldLTE(FieldEtag, v))
}

// EtagContains applies the Contains predicate on the "etag" field.
func EtagContains(v string) predicate.Resource {
	return predicate.Resource(sql.FieldContains(FieldEtag, v))
}

// EtagHasPrefix applies the HasPrefix predicate on the "etag" field.
func EtagHasPrefix(v string) predicate.Resource {
	return predicate.Resource(sql.FieldHasPrefix(FieldEtag, v))
}

// EtagHasSuffix applies the HasSuffix predicate on the "etag" field.
func EtagHasSuffix(v string) predicate.Resource {
	return predicate.Resource(sql.FieldHasSuffix(FieldEtag, v))
}

// EtagEqualFold applies the EqualFold predicate on the "etag" field.
func EtagEqualFold(v string) predicate.Resource {
	return predicate.Resource(sql.FieldEqualFold(FieldEtag, v))
}

// EtagContainsFold applies the ContainsFold predicate on the "etag" field.
func EtagContainsFold(v string) predicate.Resource {
	return predicate.Resource(sql.FieldContainsFold(FieldEtag, v))
}

// ResourceTypeEQ applies the EQ predicate on the "resource_type" field.
func ResourceTypeEQ(v ResourceType) predicate.Resource {
	return predicate.Resource(sql.FieldEQ(FieldResourceType, v))
}

// ResourceTypeNEQ applies the NEQ predicate on the "resource_type" field.
func ResourceTypeNEQ(v ResourceType) predicate.Resource {
	return predicate.Resource(sql.FieldNEQ(FieldResourceType, v))
}

// ResourceTypeIn applies the In predicate on the "resource_type" field.
func ResourceTypeIn(vs ...ResourceType) predicate.Resource {
	return predicate.Resource(sql.FieldIn(FieldResourceType, vs...))
}

// ResourceTypeNotIn applies the NotIn predicate on the "resource_type" field.
func ResourceTypeNotIn(vs ...ResourceType) predicate.Resource {
	return predicate.Resource(sql.FieldNotIn(FieldResourceType, vs...))
}

// ResourceRefEQ applies the EQ predicate on the "resource_ref" field.
func ResourceRefEQ(v string) predicate.Resource {
	return predicate.Resource(sql.FieldEQ(FieldResourceRef, v))
}

// ResourceRefNEQ applies the NEQ predicate on the "resource_ref" field.
func ResourceRefNEQ(v string) predicate.Resource {
	return predicate.Resource(sql.FieldNEQ(FieldResourceRef, v))
}

// ResourceRefIn applies the In predicate on the "resource_ref" field.
func ResourceRefIn(vs ...string) predicate.Resource {
	return predicate.Resource(sql.FieldIn(FieldResourceRef, vs...))
}

// ResourceRefNotIn applies the NotIn predicate on the "resource_ref" field.
func ResourceRefNotIn(vs ...string) predicate.Resource {
	return predicate.Resource(sql.FieldNotIn(FieldResourceRef, vs...))
}

// ResourceRefGT applies the GT predicate on the "resource_ref" field.
func ResourceRefGT(v string) predicate.Resource {
	return predicate.Resource(sql.FieldGT(FieldResourceRef, v))
}

// ResourceRefGTE applies the GTE predicate on the "resource_ref" field.
func ResourceRefGTE(v string) predicate.Resource {
	return predicate.Resource(sql.FieldGTE(FieldResourceRef, v))
}

// ResourceRefLT applies the LT predicate on the "resource_ref" field.
func ResourceRefLT(v string) predicate.Resource {
	return predicate.Resource(sql.FieldLT(FieldResourceRef, v))
}

// ResourceRefLTE applies the LTE predicate on the "resource_ref" field.
func ResourceRefLTE(v string) predicate.Resource {
	return predicate.Resource(sql.FieldLTE(FieldResourceRef, v))
}

// ResourceRefContains applies the Contains predicate on the "resource_ref" field.
func ResourceRefContains(v string) predicate.Resource {
	return predicate.Resource(sql.FieldContains(FieldResourceRef, v))
}

// ResourceRefHasPrefix applies the HasPrefix predicate on the "resource_ref" field.
func ResourceRefHasPrefix(v string) predicate.Resource {
	return predicate.Resource(sql.FieldHasPrefix(FieldResourceRef, v))
}

// ResourceRefHasSuffix applies the HasSuffix predicate on the "resource_ref" field.
func ResourceRefHasSuffix(v string) predicate.Resource {
	return predicate.Resource(sql.FieldHasSuffix(FieldResourceRef, v))
}

// ResourceRefIsNil applies the IsNil predicate on the "resource_ref" field.
func ResourceRefIsNil() predicate.Resource {
	return predicate.Resource(sql.FieldIsNull(FieldResourceRef))
}

// ResourceRefNotNil applies the NotNil predicate on the "resource_ref" field.
func ResourceRefNotNil() predicate.Resource {
	return predicate.Resource(sql.FieldNotNull(FieldResourceRef))
}

// ResourceRefEqualFold applies the EqualFold predicate on the "resource_ref" field.
func ResourceRefEqualFold(v string) predicate.Resource {
	return predicate.Resource(sql.FieldEqualFold(FieldResourceRef, v))
}

// ResourceRefContainsFold applies the ContainsFold predicate on the "resource_ref" field.
func ResourceRefContainsFold(v string) predicate.Resource {
	return predicate.Resource(sql.FieldContainsFold(FieldResourceRef, v))
}

// ScopeTypeEQ applies the EQ predicate on the "scope_type" field.
func ScopeTypeEQ(v ScopeType) predicate.Resource {
	return predicate.Resource(sql.FieldEQ(FieldScopeType, v))
}

// ScopeTypeNEQ applies the NEQ predicate on the "scope_type" field.
func ScopeTypeNEQ(v ScopeType) predicate.Resource {
	return predicate.Resource(sql.FieldNEQ(FieldScopeType, v))
}

// ScopeTypeIn applies the In predicate on the "scope_type" field.
func ScopeTypeIn(vs ...ScopeType) predicate.Resource {
	return predicate.Resource(sql.FieldIn(FieldScopeType, vs...))
}

// ScopeTypeNotIn applies the NotIn predicate on the "scope_type" field.
func ScopeTypeNotIn(vs ...ScopeType) predicate.Resource {
	return predicate.Resource(sql.FieldNotIn(FieldScopeType, vs...))
}

// HasActions applies the HasEdge predicate on the "actions" edge.
func HasActions() predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ActionsTable, ActionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasActionsWith applies the HasEdge predicate on the "actions" edge with a given conditions (other predicates).
func HasActionsWith(preds ...predicate.Action) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		step := newActionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEntitlements applies the HasEdge predicate on the "entitlements" edge.
func HasEntitlements() predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, EntitlementsTable, EntitlementsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEntitlementsWith applies the HasEdge predicate on the "entitlements" edge with a given conditions (other predicates).
func HasEntitlementsWith(preds ...predicate.Entitlement) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		step := newEntitlementsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Resource) predicate.Resource {
	return predicate.Resource(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Resource) predicate.Resource {
	return predicate.Resource(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Resource) predicate.Resource {
	return predicate.Resource(sql.NotPredicates(p))
}
