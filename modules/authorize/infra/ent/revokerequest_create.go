// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/permissionhistory"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/revokerequest"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/role"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/rolesuite"
)

// RevokeRequestCreate is the builder for creating a RevokeRequest entity.
type RevokeRequestCreate struct {
	config
	mutation *RevokeRequestMutation
	hooks    []Hook
}

// SetAttachmentURL sets the "attachment_url" field.
func (rrc *RevokeRequestCreate) SetAttachmentURL(s string) *RevokeRequestCreate {
	rrc.mutation.SetAttachmentURL(s)
	return rrc
}

// SetNillableAttachmentURL sets the "attachment_url" field if the given value is not nil.
func (rrc *RevokeRequestCreate) SetNillableAttachmentURL(s *string) *RevokeRequestCreate {
	if s != nil {
		rrc.SetAttachmentURL(*s)
	}
	return rrc
}

// SetComment sets the "comment" field.
func (rrc *RevokeRequestCreate) SetComment(s string) *RevokeRequestCreate {
	rrc.mutation.SetComment(s)
	return rrc
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (rrc *RevokeRequestCreate) SetNillableComment(s *string) *RevokeRequestCreate {
	if s != nil {
		rrc.SetComment(*s)
	}
	return rrc
}

// SetCreatedAt sets the "created_at" field.
func (rrc *RevokeRequestCreate) SetCreatedAt(t time.Time) *RevokeRequestCreate {
	rrc.mutation.SetCreatedAt(t)
	return rrc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rrc *RevokeRequestCreate) SetNillableCreatedAt(t *time.Time) *RevokeRequestCreate {
	if t != nil {
		rrc.SetCreatedAt(*t)
	}
	return rrc
}

// SetCreatedBy sets the "created_by" field.
func (rrc *RevokeRequestCreate) SetCreatedBy(s string) *RevokeRequestCreate {
	rrc.mutation.SetCreatedBy(s)
	return rrc
}

// SetEtag sets the "etag" field.
func (rrc *RevokeRequestCreate) SetEtag(s string) *RevokeRequestCreate {
	rrc.mutation.SetEtag(s)
	return rrc
}

// SetReceiverID sets the "receiver_id" field.
func (rrc *RevokeRequestCreate) SetReceiverID(s string) *RevokeRequestCreate {
	rrc.mutation.SetReceiverID(s)
	return rrc
}

// SetReceiverType sets the "receiver_type" field.
func (rrc *RevokeRequestCreate) SetReceiverType(rt revokerequest.ReceiverType) *RevokeRequestCreate {
	rrc.mutation.SetReceiverType(rt)
	return rrc
}

// SetTargetType sets the "target_type" field.
func (rrc *RevokeRequestCreate) SetTargetType(rt revokerequest.TargetType) *RevokeRequestCreate {
	rrc.mutation.SetTargetType(rt)
	return rrc
}

// SetTargetRoleID sets the "target_role_id" field.
func (rrc *RevokeRequestCreate) SetTargetRoleID(s string) *RevokeRequestCreate {
	rrc.mutation.SetTargetRoleID(s)
	return rrc
}

// SetNillableTargetRoleID sets the "target_role_id" field if the given value is not nil.
func (rrc *RevokeRequestCreate) SetNillableTargetRoleID(s *string) *RevokeRequestCreate {
	if s != nil {
		rrc.SetTargetRoleID(*s)
	}
	return rrc
}

// SetTargetRoleName sets the "target_role_name" field.
func (rrc *RevokeRequestCreate) SetTargetRoleName(s string) *RevokeRequestCreate {
	rrc.mutation.SetTargetRoleName(s)
	return rrc
}

// SetNillableTargetRoleName sets the "target_role_name" field if the given value is not nil.
func (rrc *RevokeRequestCreate) SetNillableTargetRoleName(s *string) *RevokeRequestCreate {
	if s != nil {
		rrc.SetTargetRoleName(*s)
	}
	return rrc
}

// SetTargetSuiteID sets the "target_suite_id" field.
func (rrc *RevokeRequestCreate) SetTargetSuiteID(s string) *RevokeRequestCreate {
	rrc.mutation.SetTargetSuiteID(s)
	return rrc
}

// SetNillableTargetSuiteID sets the "target_suite_id" field if the given value is not nil.
func (rrc *RevokeRequestCreate) SetNillableTargetSuiteID(s *string) *RevokeRequestCreate {
	if s != nil {
		rrc.SetTargetSuiteID(*s)
	}
	return rrc
}

// SetTargetSuiteName sets the "target_suite_name" field.
func (rrc *RevokeRequestCreate) SetTargetSuiteName(s string) *RevokeRequestCreate {
	rrc.mutation.SetTargetSuiteName(s)
	return rrc
}

// SetNillableTargetSuiteName sets the "target_suite_name" field if the given value is not nil.
func (rrc *RevokeRequestCreate) SetNillableTargetSuiteName(s *string) *RevokeRequestCreate {
	if s != nil {
		rrc.SetTargetSuiteName(*s)
	}
	return rrc
}

// SetStatus sets the "status" field.
func (rrc *RevokeRequestCreate) SetStatus(r revokerequest.Status) *RevokeRequestCreate {
	rrc.mutation.SetStatus(r)
	return rrc
}

// SetID sets the "id" field.
func (rrc *RevokeRequestCreate) SetID(s string) *RevokeRequestCreate {
	rrc.mutation.SetID(s)
	return rrc
}

// AddPermissionHistoryIDs adds the "permission_histories" edge to the PermissionHistory entity by IDs.
func (rrc *RevokeRequestCreate) AddPermissionHistoryIDs(ids ...string) *RevokeRequestCreate {
	rrc.mutation.AddPermissionHistoryIDs(ids...)
	return rrc
}

// AddPermissionHistories adds the "permission_histories" edges to the PermissionHistory entity.
func (rrc *RevokeRequestCreate) AddPermissionHistories(p ...*PermissionHistory) *RevokeRequestCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rrc.AddPermissionHistoryIDs(ids...)
}

// SetRoleID sets the "role" edge to the Role entity by ID.
func (rrc *RevokeRequestCreate) SetRoleID(id string) *RevokeRequestCreate {
	rrc.mutation.SetRoleID(id)
	return rrc
}

// SetNillableRoleID sets the "role" edge to the Role entity by ID if the given value is not nil.
func (rrc *RevokeRequestCreate) SetNillableRoleID(id *string) *RevokeRequestCreate {
	if id != nil {
		rrc = rrc.SetRoleID(*id)
	}
	return rrc
}

// SetRole sets the "role" edge to the Role entity.
func (rrc *RevokeRequestCreate) SetRole(r *Role) *RevokeRequestCreate {
	return rrc.SetRoleID(r.ID)
}

// SetRoleSuiteID sets the "role_suite" edge to the RoleSuite entity by ID.
func (rrc *RevokeRequestCreate) SetRoleSuiteID(id string) *RevokeRequestCreate {
	rrc.mutation.SetRoleSuiteID(id)
	return rrc
}

// SetNillableRoleSuiteID sets the "role_suite" edge to the RoleSuite entity by ID if the given value is not nil.
func (rrc *RevokeRequestCreate) SetNillableRoleSuiteID(id *string) *RevokeRequestCreate {
	if id != nil {
		rrc = rrc.SetRoleSuiteID(*id)
	}
	return rrc
}

// SetRoleSuite sets the "role_suite" edge to the RoleSuite entity.
func (rrc *RevokeRequestCreate) SetRoleSuite(r *RoleSuite) *RevokeRequestCreate {
	return rrc.SetRoleSuiteID(r.ID)
}

// Mutation returns the RevokeRequestMutation object of the builder.
func (rrc *RevokeRequestCreate) Mutation() *RevokeRequestMutation {
	return rrc.mutation
}

// Save creates the RevokeRequest in the database.
func (rrc *RevokeRequestCreate) Save(ctx context.Context) (*RevokeRequest, error) {
	rrc.defaults()
	return withHooks(ctx, rrc.sqlSave, rrc.mutation, rrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rrc *RevokeRequestCreate) SaveX(ctx context.Context) *RevokeRequest {
	v, err := rrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rrc *RevokeRequestCreate) Exec(ctx context.Context) error {
	_, err := rrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rrc *RevokeRequestCreate) ExecX(ctx context.Context) {
	if err := rrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rrc *RevokeRequestCreate) defaults() {
	if _, ok := rrc.mutation.CreatedAt(); !ok {
		v := revokerequest.DefaultCreatedAt()
		rrc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rrc *RevokeRequestCreate) check() error {
	if _, ok := rrc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "RevokeRequest.created_at"`)}
	}
	if _, ok := rrc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "RevokeRequest.created_by"`)}
	}
	if _, ok := rrc.mutation.Etag(); !ok {
		return &ValidationError{Name: "etag", err: errors.New(`ent: missing required field "RevokeRequest.etag"`)}
	}
	if _, ok := rrc.mutation.ReceiverID(); !ok {
		return &ValidationError{Name: "receiver_id", err: errors.New(`ent: missing required field "RevokeRequest.receiver_id"`)}
	}
	if _, ok := rrc.mutation.ReceiverType(); !ok {
		return &ValidationError{Name: "receiver_type", err: errors.New(`ent: missing required field "RevokeRequest.receiver_type"`)}
	}
	if v, ok := rrc.mutation.ReceiverType(); ok {
		if err := revokerequest.ReceiverTypeValidator(v); err != nil {
			return &ValidationError{Name: "receiver_type", err: fmt.Errorf(`ent: validator failed for field "RevokeRequest.receiver_type": %w`, err)}
		}
	}
	if _, ok := rrc.mutation.TargetType(); !ok {
		return &ValidationError{Name: "target_type", err: errors.New(`ent: missing required field "RevokeRequest.target_type"`)}
	}
	if v, ok := rrc.mutation.TargetType(); ok {
		if err := revokerequest.TargetTypeValidator(v); err != nil {
			return &ValidationError{Name: "target_type", err: fmt.Errorf(`ent: validator failed for field "RevokeRequest.target_type": %w`, err)}
		}
	}
	if _, ok := rrc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "RevokeRequest.status"`)}
	}
	if v, ok := rrc.mutation.Status(); ok {
		if err := revokerequest.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "RevokeRequest.status": %w`, err)}
		}
	}
	return nil
}

func (rrc *RevokeRequestCreate) sqlSave(ctx context.Context) (*RevokeRequest, error) {
	if err := rrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected RevokeRequest.ID type: %T", _spec.ID.Value)
		}
	}
	rrc.mutation.id = &_node.ID
	rrc.mutation.done = true
	return _node, nil
}

func (rrc *RevokeRequestCreate) createSpec() (*RevokeRequest, *sqlgraph.CreateSpec) {
	var (
		_node = &RevokeRequest{config: rrc.config}
		_spec = sqlgraph.NewCreateSpec(revokerequest.Table, sqlgraph.NewFieldSpec(revokerequest.FieldID, field.TypeString))
	)
	if id, ok := rrc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rrc.mutation.AttachmentURL(); ok {
		_spec.SetField(revokerequest.FieldAttachmentURL, field.TypeString, value)
		_node.AttachmentURL = &value
	}
	if value, ok := rrc.mutation.Comment(); ok {
		_spec.SetField(revokerequest.FieldComment, field.TypeString, value)
		_node.Comment = &value
	}
	if value, ok := rrc.mutation.CreatedAt(); ok {
		_spec.SetField(revokerequest.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rrc.mutation.CreatedBy(); ok {
		_spec.SetField(revokerequest.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := rrc.mutation.Etag(); ok {
		_spec.SetField(revokerequest.FieldEtag, field.TypeString, value)
		_node.Etag = value
	}
	if value, ok := rrc.mutation.ReceiverID(); ok {
		_spec.SetField(revokerequest.FieldReceiverID, field.TypeString, value)
		_node.ReceiverID = value
	}
	if value, ok := rrc.mutation.ReceiverType(); ok {
		_spec.SetField(revokerequest.FieldReceiverType, field.TypeEnum, value)
		_node.ReceiverType = value
	}
	if value, ok := rrc.mutation.TargetType(); ok {
		_spec.SetField(revokerequest.FieldTargetType, field.TypeEnum, value)
		_node.TargetType = value
	}
	if value, ok := rrc.mutation.TargetRoleName(); ok {
		_spec.SetField(revokerequest.FieldTargetRoleName, field.TypeString, value)
		_node.TargetRoleName = &value
	}
	if value, ok := rrc.mutation.TargetSuiteName(); ok {
		_spec.SetField(revokerequest.FieldTargetSuiteName, field.TypeString, value)
		_node.TargetSuiteName = &value
	}
	if value, ok := rrc.mutation.Status(); ok {
		_spec.SetField(revokerequest.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if nodes := rrc.mutation.PermissionHistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   revokerequest.PermissionHistoriesTable,
			Columns: []string{revokerequest.PermissionHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permissionhistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rrc.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   revokerequest.RoleTable,
			Columns: []string{revokerequest.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TargetRoleID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rrc.mutation.RoleSuiteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   revokerequest.RoleSuiteTable,
			Columns: []string{revokerequest.RoleSuiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolesuite.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TargetSuiteID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RevokeRequestCreateBulk is the builder for creating many RevokeRequest entities in bulk.
type RevokeRequestCreateBulk struct {
	config
	err      error
	builders []*RevokeRequestCreate
}

// Save creates the RevokeRequest entities in the database.
func (rrcb *RevokeRequestCreateBulk) Save(ctx context.Context) ([]*RevokeRequest, error) {
	if rrcb.err != nil {
		return nil, rrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rrcb.builders))
	nodes := make([]*RevokeRequest, len(rrcb.builders))
	mutators := make([]Mutator, len(rrcb.builders))
	for i := range rrcb.builders {
		func(i int, root context.Context) {
			builder := rrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RevokeRequestMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rrcb *RevokeRequestCreateBulk) SaveX(ctx context.Context) []*RevokeRequest {
	v, err := rrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rrcb *RevokeRequestCreateBulk) Exec(ctx context.Context) error {
	_, err := rrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rrcb *RevokeRequestCreateBulk) ExecX(ctx context.Context) {
	if err := rrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
