// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/action"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/entitlement"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/entitlementassignment"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/grantrequest"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/permissionhistory"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/resource"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/revokerequest"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/role"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/rolerolesuite"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/rolesuite"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/rolesuiteuser"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/roleuser"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Action is the client for interacting with the Action builders.
	Action *ActionClient
	// EffectiveGroupEntitlement is the client for interacting with the EffectiveGroupEntitlement builders.
	EffectiveGroupEntitlement *EffectiveGroupEntitlementClient
	// EffectiveUserEntitlement is the client for interacting with the EffectiveUserEntitlement builders.
	EffectiveUserEntitlement *EffectiveUserEntitlementClient
	// Entitlement is the client for interacting with the Entitlement builders.
	Entitlement *EntitlementClient
	// EntitlementAssignment is the client for interacting with the EntitlementAssignment builders.
	EntitlementAssignment *EntitlementAssignmentClient
	// GrantRequest is the client for interacting with the GrantRequest builders.
	GrantRequest *GrantRequestClient
	// PermissionHistory is the client for interacting with the PermissionHistory builders.
	PermissionHistory *PermissionHistoryClient
	// Resource is the client for interacting with the Resource builders.
	Resource *ResourceClient
	// RevokeRequest is the client for interacting with the RevokeRequest builders.
	RevokeRequest *RevokeRequestClient
	// Role is the client for interacting with the Role builders.
	Role *RoleClient
	// RoleRoleSuite is the client for interacting with the RoleRoleSuite builders.
	RoleRoleSuite *RoleRoleSuiteClient
	// RoleSuite is the client for interacting with the RoleSuite builders.
	RoleSuite *RoleSuiteClient
	// RoleSuiteUser is the client for interacting with the RoleSuiteUser builders.
	RoleSuiteUser *RoleSuiteUserClient
	// RoleUser is the client for interacting with the RoleUser builders.
	RoleUser *RoleUserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Action = NewActionClient(c.config)
	c.EffectiveGroupEntitlement = NewEffectiveGroupEntitlementClient(c.config)
	c.EffectiveUserEntitlement = NewEffectiveUserEntitlementClient(c.config)
	c.Entitlement = NewEntitlementClient(c.config)
	c.EntitlementAssignment = NewEntitlementAssignmentClient(c.config)
	c.GrantRequest = NewGrantRequestClient(c.config)
	c.PermissionHistory = NewPermissionHistoryClient(c.config)
	c.Resource = NewResourceClient(c.config)
	c.RevokeRequest = NewRevokeRequestClient(c.config)
	c.Role = NewRoleClient(c.config)
	c.RoleRoleSuite = NewRoleRoleSuiteClient(c.config)
	c.RoleSuite = NewRoleSuiteClient(c.config)
	c.RoleSuiteUser = NewRoleSuiteUserClient(c.config)
	c.RoleUser = NewRoleUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                       ctx,
		config:                    cfg,
		Action:                    NewActionClient(cfg),
		EffectiveGroupEntitlement: NewEffectiveGroupEntitlementClient(cfg),
		EffectiveUserEntitlement:  NewEffectiveUserEntitlementClient(cfg),
		Entitlement:               NewEntitlementClient(cfg),
		EntitlementAssignment:     NewEntitlementAssignmentClient(cfg),
		GrantRequest:              NewGrantRequestClient(cfg),
		PermissionHistory:         NewPermissionHistoryClient(cfg),
		Resource:                  NewResourceClient(cfg),
		RevokeRequest:             NewRevokeRequestClient(cfg),
		Role:                      NewRoleClient(cfg),
		RoleRoleSuite:             NewRoleRoleSuiteClient(cfg),
		RoleSuite:                 NewRoleSuiteClient(cfg),
		RoleSuiteUser:             NewRoleSuiteUserClient(cfg),
		RoleUser:                  NewRoleUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                       ctx,
		config:                    cfg,
		Action:                    NewActionClient(cfg),
		EffectiveGroupEntitlement: NewEffectiveGroupEntitlementClient(cfg),
		EffectiveUserEntitlement:  NewEffectiveUserEntitlementClient(cfg),
		Entitlement:               NewEntitlementClient(cfg),
		EntitlementAssignment:     NewEntitlementAssignmentClient(cfg),
		GrantRequest:              NewGrantRequestClient(cfg),
		PermissionHistory:         NewPermissionHistoryClient(cfg),
		Resource:                  NewResourceClient(cfg),
		RevokeRequest:             NewRevokeRequestClient(cfg),
		Role:                      NewRoleClient(cfg),
		RoleRoleSuite:             NewRoleRoleSuiteClient(cfg),
		RoleSuite:                 NewRoleSuiteClient(cfg),
		RoleSuiteUser:             NewRoleSuiteUserClient(cfg),
		RoleUser:                  NewRoleUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Action.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Action, c.Entitlement, c.EntitlementAssignment, c.GrantRequest,
		c.PermissionHistory, c.Resource, c.RevokeRequest, c.Role, c.RoleRoleSuite,
		c.RoleSuite, c.RoleSuiteUser, c.RoleUser,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Action, c.EffectiveGroupEntitlement, c.EffectiveUserEntitlement,
		c.Entitlement, c.EntitlementAssignment, c.GrantRequest, c.PermissionHistory,
		c.Resource, c.RevokeRequest, c.Role, c.RoleRoleSuite, c.RoleSuite,
		c.RoleSuiteUser, c.RoleUser,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ActionMutation:
		return c.Action.mutate(ctx, m)
	case *EntitlementMutation:
		return c.Entitlement.mutate(ctx, m)
	case *EntitlementAssignmentMutation:
		return c.EntitlementAssignment.mutate(ctx, m)
	case *GrantRequestMutation:
		return c.GrantRequest.mutate(ctx, m)
	case *PermissionHistoryMutation:
		return c.PermissionHistory.mutate(ctx, m)
	case *ResourceMutation:
		return c.Resource.mutate(ctx, m)
	case *RevokeRequestMutation:
		return c.RevokeRequest.mutate(ctx, m)
	case *RoleMutation:
		return c.Role.mutate(ctx, m)
	case *RoleRoleSuiteMutation:
		return c.RoleRoleSuite.mutate(ctx, m)
	case *RoleSuiteMutation:
		return c.RoleSuite.mutate(ctx, m)
	case *RoleSuiteUserMutation:
		return c.RoleSuiteUser.mutate(ctx, m)
	case *RoleUserMutation:
		return c.RoleUser.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// ActionClient is a client for the Action schema.
type ActionClient struct {
	config
}

// NewActionClient returns a client for the Action from the given config.
func NewActionClient(c config) *ActionClient {
	return &ActionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `action.Hooks(f(g(h())))`.
func (c *ActionClient) Use(hooks ...Hook) {
	c.hooks.Action = append(c.hooks.Action, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `action.Intercept(f(g(h())))`.
func (c *ActionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Action = append(c.inters.Action, interceptors...)
}

// Create returns a builder for creating a Action entity.
func (c *ActionClient) Create() *ActionCreate {
	mutation := newActionMutation(c.config, OpCreate)
	return &ActionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Action entities.
func (c *ActionClient) CreateBulk(builders ...*ActionCreate) *ActionCreateBulk {
	return &ActionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ActionClient) MapCreateBulk(slice any, setFunc func(*ActionCreate, int)) *ActionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ActionCreateBulk{err: fmt.Errorf("calling to ActionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ActionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ActionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Action.
func (c *ActionClient) Update() *ActionUpdate {
	mutation := newActionMutation(c.config, OpUpdate)
	return &ActionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ActionClient) UpdateOne(a *Action) *ActionUpdateOne {
	mutation := newActionMutation(c.config, OpUpdateOne, withAction(a))
	return &ActionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ActionClient) UpdateOneID(id string) *ActionUpdateOne {
	mutation := newActionMutation(c.config, OpUpdateOne, withActionID(id))
	return &ActionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Action.
func (c *ActionClient) Delete() *ActionDelete {
	mutation := newActionMutation(c.config, OpDelete)
	return &ActionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ActionClient) DeleteOne(a *Action) *ActionDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ActionClient) DeleteOneID(id string) *ActionDeleteOne {
	builder := c.Delete().Where(action.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ActionDeleteOne{builder}
}

// Query returns a query builder for Action.
func (c *ActionClient) Query() *ActionQuery {
	return &ActionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAction},
		inters: c.Interceptors(),
	}
}

// Get returns a Action entity by its id.
func (c *ActionClient) Get(ctx context.Context, id string) (*Action, error) {
	return c.Query().Where(action.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ActionClient) GetX(ctx context.Context, id string) *Action {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEntitlements queries the entitlements edge of a Action.
func (c *ActionClient) QueryEntitlements(a *Action) *EntitlementQuery {
	query := (&EntitlementClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(action.Table, action.FieldID, id),
			sqlgraph.To(entitlement.Table, entitlement.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, action.EntitlementsTable, action.EntitlementsColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryResource queries the resource edge of a Action.
func (c *ActionClient) QueryResource(a *Action) *ResourceQuery {
	query := (&ResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(action.Table, action.FieldID, id),
			sqlgraph.To(resource.Table, resource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, action.ResourceTable, action.ResourceColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ActionClient) Hooks() []Hook {
	return c.hooks.Action
}

// Interceptors returns the client interceptors.
func (c *ActionClient) Interceptors() []Interceptor {
	return c.inters.Action
}

func (c *ActionClient) mutate(ctx context.Context, m *ActionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ActionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ActionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ActionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ActionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Action mutation op: %q", m.Op())
	}
}

// EffectiveGroupEntitlementClient is a client for the EffectiveGroupEntitlement schema.
type EffectiveGroupEntitlementClient struct {
	config
}

// NewEffectiveGroupEntitlementClient returns a client for the EffectiveGroupEntitlement from the given config.
func NewEffectiveGroupEntitlementClient(c config) *EffectiveGroupEntitlementClient {
	return &EffectiveGroupEntitlementClient{config: c}
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `effectivegroupentitlement.Intercept(f(g(h())))`.
func (c *EffectiveGroupEntitlementClient) Intercept(interceptors ...Interceptor) {
	c.inters.EffectiveGroupEntitlement = append(c.inters.EffectiveGroupEntitlement, interceptors...)
}

// Query returns a query builder for EffectiveGroupEntitlement.
func (c *EffectiveGroupEntitlementClient) Query() *EffectiveGroupEntitlementQuery {
	return &EffectiveGroupEntitlementQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEffectiveGroupEntitlement},
		inters: c.Interceptors(),
	}
}

// Interceptors returns the client interceptors.
func (c *EffectiveGroupEntitlementClient) Interceptors() []Interceptor {
	return c.inters.EffectiveGroupEntitlement
}

// EffectiveUserEntitlementClient is a client for the EffectiveUserEntitlement schema.
type EffectiveUserEntitlementClient struct {
	config
}

// NewEffectiveUserEntitlementClient returns a client for the EffectiveUserEntitlement from the given config.
func NewEffectiveUserEntitlementClient(c config) *EffectiveUserEntitlementClient {
	return &EffectiveUserEntitlementClient{config: c}
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `effectiveuserentitlement.Intercept(f(g(h())))`.
func (c *EffectiveUserEntitlementClient) Intercept(interceptors ...Interceptor) {
	c.inters.EffectiveUserEntitlement = append(c.inters.EffectiveUserEntitlement, interceptors...)
}

// Query returns a query builder for EffectiveUserEntitlement.
func (c *EffectiveUserEntitlementClient) Query() *EffectiveUserEntitlementQuery {
	return &EffectiveUserEntitlementQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEffectiveUserEntitlement},
		inters: c.Interceptors(),
	}
}

// Interceptors returns the client interceptors.
func (c *EffectiveUserEntitlementClient) Interceptors() []Interceptor {
	return c.inters.EffectiveUserEntitlement
}

// EntitlementClient is a client for the Entitlement schema.
type EntitlementClient struct {
	config
}

// NewEntitlementClient returns a client for the Entitlement from the given config.
func NewEntitlementClient(c config) *EntitlementClient {
	return &EntitlementClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `entitlement.Hooks(f(g(h())))`.
func (c *EntitlementClient) Use(hooks ...Hook) {
	c.hooks.Entitlement = append(c.hooks.Entitlement, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `entitlement.Intercept(f(g(h())))`.
func (c *EntitlementClient) Intercept(interceptors ...Interceptor) {
	c.inters.Entitlement = append(c.inters.Entitlement, interceptors...)
}

// Create returns a builder for creating a Entitlement entity.
func (c *EntitlementClient) Create() *EntitlementCreate {
	mutation := newEntitlementMutation(c.config, OpCreate)
	return &EntitlementCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Entitlement entities.
func (c *EntitlementClient) CreateBulk(builders ...*EntitlementCreate) *EntitlementCreateBulk {
	return &EntitlementCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EntitlementClient) MapCreateBulk(slice any, setFunc func(*EntitlementCreate, int)) *EntitlementCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EntitlementCreateBulk{err: fmt.Errorf("calling to EntitlementClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EntitlementCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EntitlementCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Entitlement.
func (c *EntitlementClient) Update() *EntitlementUpdate {
	mutation := newEntitlementMutation(c.config, OpUpdate)
	return &EntitlementUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EntitlementClient) UpdateOne(e *Entitlement) *EntitlementUpdateOne {
	mutation := newEntitlementMutation(c.config, OpUpdateOne, withEntitlement(e))
	return &EntitlementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EntitlementClient) UpdateOneID(id string) *EntitlementUpdateOne {
	mutation := newEntitlementMutation(c.config, OpUpdateOne, withEntitlementID(id))
	return &EntitlementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Entitlement.
func (c *EntitlementClient) Delete() *EntitlementDelete {
	mutation := newEntitlementMutation(c.config, OpDelete)
	return &EntitlementDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EntitlementClient) DeleteOne(e *Entitlement) *EntitlementDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EntitlementClient) DeleteOneID(id string) *EntitlementDeleteOne {
	builder := c.Delete().Where(entitlement.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EntitlementDeleteOne{builder}
}

// Query returns a query builder for Entitlement.
func (c *EntitlementClient) Query() *EntitlementQuery {
	return &EntitlementQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEntitlement},
		inters: c.Interceptors(),
	}
}

// Get returns a Entitlement entity by its id.
func (c *EntitlementClient) Get(ctx context.Context, id string) (*Entitlement, error) {
	return c.Query().Where(entitlement.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EntitlementClient) GetX(ctx context.Context, id string) *Entitlement {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPermissionHistories queries the permission_histories edge of a Entitlement.
func (c *EntitlementClient) QueryPermissionHistories(e *Entitlement) *PermissionHistoryQuery {
	query := (&PermissionHistoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(entitlement.Table, entitlement.FieldID, id),
			sqlgraph.To(permissionhistory.Table, permissionhistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, entitlement.PermissionHistoriesTable, entitlement.PermissionHistoriesColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEntitlementAssignments queries the entitlement_assignments edge of a Entitlement.
func (c *EntitlementClient) QueryEntitlementAssignments(e *Entitlement) *EntitlementAssignmentQuery {
	query := (&EntitlementAssignmentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(entitlement.Table, entitlement.FieldID, id),
			sqlgraph.To(entitlementassignment.Table, entitlementassignment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, entitlement.EntitlementAssignmentsTable, entitlement.EntitlementAssignmentsColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAction queries the action edge of a Entitlement.
func (c *EntitlementClient) QueryAction(e *Entitlement) *ActionQuery {
	query := (&ActionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(entitlement.Table, entitlement.FieldID, id),
			sqlgraph.To(action.Table, action.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, entitlement.ActionTable, entitlement.ActionColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryResource queries the resource edge of a Entitlement.
func (c *EntitlementClient) QueryResource(e *Entitlement) *ResourceQuery {
	query := (&ResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(entitlement.Table, entitlement.FieldID, id),
			sqlgraph.To(resource.Table, resource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, entitlement.ResourceTable, entitlement.ResourceColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EntitlementClient) Hooks() []Hook {
	return c.hooks.Entitlement
}

// Interceptors returns the client interceptors.
func (c *EntitlementClient) Interceptors() []Interceptor {
	return c.inters.Entitlement
}

func (c *EntitlementClient) mutate(ctx context.Context, m *EntitlementMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EntitlementCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EntitlementUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EntitlementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EntitlementDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Entitlement mutation op: %q", m.Op())
	}
}

// EntitlementAssignmentClient is a client for the EntitlementAssignment schema.
type EntitlementAssignmentClient struct {
	config
}

// NewEntitlementAssignmentClient returns a client for the EntitlementAssignment from the given config.
func NewEntitlementAssignmentClient(c config) *EntitlementAssignmentClient {
	return &EntitlementAssignmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `entitlementassignment.Hooks(f(g(h())))`.
func (c *EntitlementAssignmentClient) Use(hooks ...Hook) {
	c.hooks.EntitlementAssignment = append(c.hooks.EntitlementAssignment, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `entitlementassignment.Intercept(f(g(h())))`.
func (c *EntitlementAssignmentClient) Intercept(interceptors ...Interceptor) {
	c.inters.EntitlementAssignment = append(c.inters.EntitlementAssignment, interceptors...)
}

// Create returns a builder for creating a EntitlementAssignment entity.
func (c *EntitlementAssignmentClient) Create() *EntitlementAssignmentCreate {
	mutation := newEntitlementAssignmentMutation(c.config, OpCreate)
	return &EntitlementAssignmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EntitlementAssignment entities.
func (c *EntitlementAssignmentClient) CreateBulk(builders ...*EntitlementAssignmentCreate) *EntitlementAssignmentCreateBulk {
	return &EntitlementAssignmentCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EntitlementAssignmentClient) MapCreateBulk(slice any, setFunc func(*EntitlementAssignmentCreate, int)) *EntitlementAssignmentCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EntitlementAssignmentCreateBulk{err: fmt.Errorf("calling to EntitlementAssignmentClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EntitlementAssignmentCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EntitlementAssignmentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EntitlementAssignment.
func (c *EntitlementAssignmentClient) Update() *EntitlementAssignmentUpdate {
	mutation := newEntitlementAssignmentMutation(c.config, OpUpdate)
	return &EntitlementAssignmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EntitlementAssignmentClient) UpdateOne(ea *EntitlementAssignment) *EntitlementAssignmentUpdateOne {
	mutation := newEntitlementAssignmentMutation(c.config, OpUpdateOne, withEntitlementAssignment(ea))
	return &EntitlementAssignmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EntitlementAssignmentClient) UpdateOneID(id string) *EntitlementAssignmentUpdateOne {
	mutation := newEntitlementAssignmentMutation(c.config, OpUpdateOne, withEntitlementAssignmentID(id))
	return &EntitlementAssignmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EntitlementAssignment.
func (c *EntitlementAssignmentClient) Delete() *EntitlementAssignmentDelete {
	mutation := newEntitlementAssignmentMutation(c.config, OpDelete)
	return &EntitlementAssignmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EntitlementAssignmentClient) DeleteOne(ea *EntitlementAssignment) *EntitlementAssignmentDeleteOne {
	return c.DeleteOneID(ea.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EntitlementAssignmentClient) DeleteOneID(id string) *EntitlementAssignmentDeleteOne {
	builder := c.Delete().Where(entitlementassignment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EntitlementAssignmentDeleteOne{builder}
}

// Query returns a query builder for EntitlementAssignment.
func (c *EntitlementAssignmentClient) Query() *EntitlementAssignmentQuery {
	return &EntitlementAssignmentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEntitlementAssignment},
		inters: c.Interceptors(),
	}
}

// Get returns a EntitlementAssignment entity by its id.
func (c *EntitlementAssignmentClient) Get(ctx context.Context, id string) (*EntitlementAssignment, error) {
	return c.Query().Where(entitlementassignment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EntitlementAssignmentClient) GetX(ctx context.Context, id string) *EntitlementAssignment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEntitlement queries the entitlement edge of a EntitlementAssignment.
func (c *EntitlementAssignmentClient) QueryEntitlement(ea *EntitlementAssignment) *EntitlementQuery {
	query := (&EntitlementClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ea.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(entitlementassignment.Table, entitlementassignment.FieldID, id),
			sqlgraph.To(entitlement.Table, entitlement.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, entitlementassignment.EntitlementTable, entitlementassignment.EntitlementColumn),
		)
		fromV = sqlgraph.Neighbors(ea.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EntitlementAssignmentClient) Hooks() []Hook {
	return c.hooks.EntitlementAssignment
}

// Interceptors returns the client interceptors.
func (c *EntitlementAssignmentClient) Interceptors() []Interceptor {
	return c.inters.EntitlementAssignment
}

func (c *EntitlementAssignmentClient) mutate(ctx context.Context, m *EntitlementAssignmentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EntitlementAssignmentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EntitlementAssignmentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EntitlementAssignmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EntitlementAssignmentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EntitlementAssignment mutation op: %q", m.Op())
	}
}

// GrantRequestClient is a client for the GrantRequest schema.
type GrantRequestClient struct {
	config
}

// NewGrantRequestClient returns a client for the GrantRequest from the given config.
func NewGrantRequestClient(c config) *GrantRequestClient {
	return &GrantRequestClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `grantrequest.Hooks(f(g(h())))`.
func (c *GrantRequestClient) Use(hooks ...Hook) {
	c.hooks.GrantRequest = append(c.hooks.GrantRequest, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `grantrequest.Intercept(f(g(h())))`.
func (c *GrantRequestClient) Intercept(interceptors ...Interceptor) {
	c.inters.GrantRequest = append(c.inters.GrantRequest, interceptors...)
}

// Create returns a builder for creating a GrantRequest entity.
func (c *GrantRequestClient) Create() *GrantRequestCreate {
	mutation := newGrantRequestMutation(c.config, OpCreate)
	return &GrantRequestCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GrantRequest entities.
func (c *GrantRequestClient) CreateBulk(builders ...*GrantRequestCreate) *GrantRequestCreateBulk {
	return &GrantRequestCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *GrantRequestClient) MapCreateBulk(slice any, setFunc func(*GrantRequestCreate, int)) *GrantRequestCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &GrantRequestCreateBulk{err: fmt.Errorf("calling to GrantRequestClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*GrantRequestCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &GrantRequestCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GrantRequest.
func (c *GrantRequestClient) Update() *GrantRequestUpdate {
	mutation := newGrantRequestMutation(c.config, OpUpdate)
	return &GrantRequestUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GrantRequestClient) UpdateOne(gr *GrantRequest) *GrantRequestUpdateOne {
	mutation := newGrantRequestMutation(c.config, OpUpdateOne, withGrantRequest(gr))
	return &GrantRequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GrantRequestClient) UpdateOneID(id string) *GrantRequestUpdateOne {
	mutation := newGrantRequestMutation(c.config, OpUpdateOne, withGrantRequestID(id))
	return &GrantRequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GrantRequest.
func (c *GrantRequestClient) Delete() *GrantRequestDelete {
	mutation := newGrantRequestMutation(c.config, OpDelete)
	return &GrantRequestDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GrantRequestClient) DeleteOne(gr *GrantRequest) *GrantRequestDeleteOne {
	return c.DeleteOneID(gr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GrantRequestClient) DeleteOneID(id string) *GrantRequestDeleteOne {
	builder := c.Delete().Where(grantrequest.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GrantRequestDeleteOne{builder}
}

// Query returns a query builder for GrantRequest.
func (c *GrantRequestClient) Query() *GrantRequestQuery {
	return &GrantRequestQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGrantRequest},
		inters: c.Interceptors(),
	}
}

// Get returns a GrantRequest entity by its id.
func (c *GrantRequestClient) Get(ctx context.Context, id string) (*GrantRequest, error) {
	return c.Query().Where(grantrequest.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GrantRequestClient) GetX(ctx context.Context, id string) *GrantRequest {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPermissionHistories queries the permission_histories edge of a GrantRequest.
func (c *GrantRequestClient) QueryPermissionHistories(gr *GrantRequest) *PermissionHistoryQuery {
	query := (&PermissionHistoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(grantrequest.Table, grantrequest.FieldID, id),
			sqlgraph.To(permissionhistory.Table, permissionhistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, grantrequest.PermissionHistoriesTable, grantrequest.PermissionHistoriesColumn),
		)
		fromV = sqlgraph.Neighbors(gr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRole queries the role edge of a GrantRequest.
func (c *GrantRequestClient) QueryRole(gr *GrantRequest) *RoleQuery {
	query := (&RoleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(grantrequest.Table, grantrequest.FieldID, id),
			sqlgraph.To(role.Table, role.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, grantrequest.RoleTable, grantrequest.RoleColumn),
		)
		fromV = sqlgraph.Neighbors(gr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoleSuite queries the role_suite edge of a GrantRequest.
func (c *GrantRequestClient) QueryRoleSuite(gr *GrantRequest) *RoleSuiteQuery {
	query := (&RoleSuiteClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(grantrequest.Table, grantrequest.FieldID, id),
			sqlgraph.To(rolesuite.Table, rolesuite.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, grantrequest.RoleSuiteTable, grantrequest.RoleSuiteColumn),
		)
		fromV = sqlgraph.Neighbors(gr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GrantRequestClient) Hooks() []Hook {
	return c.hooks.GrantRequest
}

// Interceptors returns the client interceptors.
func (c *GrantRequestClient) Interceptors() []Interceptor {
	return c.inters.GrantRequest
}

func (c *GrantRequestClient) mutate(ctx context.Context, m *GrantRequestMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GrantRequestCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GrantRequestUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GrantRequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GrantRequestDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown GrantRequest mutation op: %q", m.Op())
	}
}

// PermissionHistoryClient is a client for the PermissionHistory schema.
type PermissionHistoryClient struct {
	config
}

// NewPermissionHistoryClient returns a client for the PermissionHistory from the given config.
func NewPermissionHistoryClient(c config) *PermissionHistoryClient {
	return &PermissionHistoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `permissionhistory.Hooks(f(g(h())))`.
func (c *PermissionHistoryClient) Use(hooks ...Hook) {
	c.hooks.PermissionHistory = append(c.hooks.PermissionHistory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `permissionhistory.Intercept(f(g(h())))`.
func (c *PermissionHistoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.PermissionHistory = append(c.inters.PermissionHistory, interceptors...)
}

// Create returns a builder for creating a PermissionHistory entity.
func (c *PermissionHistoryClient) Create() *PermissionHistoryCreate {
	mutation := newPermissionHistoryMutation(c.config, OpCreate)
	return &PermissionHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PermissionHistory entities.
func (c *PermissionHistoryClient) CreateBulk(builders ...*PermissionHistoryCreate) *PermissionHistoryCreateBulk {
	return &PermissionHistoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PermissionHistoryClient) MapCreateBulk(slice any, setFunc func(*PermissionHistoryCreate, int)) *PermissionHistoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PermissionHistoryCreateBulk{err: fmt.Errorf("calling to PermissionHistoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PermissionHistoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PermissionHistoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PermissionHistory.
func (c *PermissionHistoryClient) Update() *PermissionHistoryUpdate {
	mutation := newPermissionHistoryMutation(c.config, OpUpdate)
	return &PermissionHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PermissionHistoryClient) UpdateOne(ph *PermissionHistory) *PermissionHistoryUpdateOne {
	mutation := newPermissionHistoryMutation(c.config, OpUpdateOne, withPermissionHistory(ph))
	return &PermissionHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PermissionHistoryClient) UpdateOneID(id string) *PermissionHistoryUpdateOne {
	mutation := newPermissionHistoryMutation(c.config, OpUpdateOne, withPermissionHistoryID(id))
	return &PermissionHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PermissionHistory.
func (c *PermissionHistoryClient) Delete() *PermissionHistoryDelete {
	mutation := newPermissionHistoryMutation(c.config, OpDelete)
	return &PermissionHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PermissionHistoryClient) DeleteOne(ph *PermissionHistory) *PermissionHistoryDeleteOne {
	return c.DeleteOneID(ph.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PermissionHistoryClient) DeleteOneID(id string) *PermissionHistoryDeleteOne {
	builder := c.Delete().Where(permissionhistory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PermissionHistoryDeleteOne{builder}
}

// Query returns a query builder for PermissionHistory.
func (c *PermissionHistoryClient) Query() *PermissionHistoryQuery {
	return &PermissionHistoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePermissionHistory},
		inters: c.Interceptors(),
	}
}

// Get returns a PermissionHistory entity by its id.
func (c *PermissionHistoryClient) Get(ctx context.Context, id string) (*PermissionHistory, error) {
	return c.Query().Where(permissionhistory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PermissionHistoryClient) GetX(ctx context.Context, id string) *PermissionHistory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEntitlement queries the entitlement edge of a PermissionHistory.
func (c *PermissionHistoryClient) QueryEntitlement(ph *PermissionHistory) *EntitlementQuery {
	query := (&EntitlementClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ph.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(permissionhistory.Table, permissionhistory.FieldID, id),
			sqlgraph.To(entitlement.Table, entitlement.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, permissionhistory.EntitlementTable, permissionhistory.EntitlementColumn),
		)
		fromV = sqlgraph.Neighbors(ph.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEntitlementAssignment queries the entitlement_assignment edge of a PermissionHistory.
func (c *PermissionHistoryClient) QueryEntitlementAssignment(ph *PermissionHistory) *EntitlementAssignmentQuery {
	query := (&EntitlementAssignmentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ph.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(permissionhistory.Table, permissionhistory.FieldID, id),
			sqlgraph.To(entitlementassignment.Table, entitlementassignment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, permissionhistory.EntitlementAssignmentTable, permissionhistory.EntitlementAssignmentColumn),
		)
		fromV = sqlgraph.Neighbors(ph.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRole queries the role edge of a PermissionHistory.
func (c *PermissionHistoryClient) QueryRole(ph *PermissionHistory) *RoleQuery {
	query := (&RoleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ph.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(permissionhistory.Table, permissionhistory.FieldID, id),
			sqlgraph.To(role.Table, role.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, permissionhistory.RoleTable, permissionhistory.RoleColumn),
		)
		fromV = sqlgraph.Neighbors(ph.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoleSuite queries the role_suite edge of a PermissionHistory.
func (c *PermissionHistoryClient) QueryRoleSuite(ph *PermissionHistory) *RoleSuiteQuery {
	query := (&RoleSuiteClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ph.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(permissionhistory.Table, permissionhistory.FieldID, id),
			sqlgraph.To(rolesuite.Table, rolesuite.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, permissionhistory.RoleSuiteTable, permissionhistory.RoleSuiteColumn),
		)
		fromV = sqlgraph.Neighbors(ph.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGrantRequest queries the grant_request edge of a PermissionHistory.
func (c *PermissionHistoryClient) QueryGrantRequest(ph *PermissionHistory) *GrantRequestQuery {
	query := (&GrantRequestClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ph.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(permissionhistory.Table, permissionhistory.FieldID, id),
			sqlgraph.To(grantrequest.Table, grantrequest.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, permissionhistory.GrantRequestTable, permissionhistory.GrantRequestColumn),
		)
		fromV = sqlgraph.Neighbors(ph.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRevokeRequest queries the revoke_request edge of a PermissionHistory.
func (c *PermissionHistoryClient) QueryRevokeRequest(ph *PermissionHistory) *RevokeRequestQuery {
	query := (&RevokeRequestClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ph.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(permissionhistory.Table, permissionhistory.FieldID, id),
			sqlgraph.To(revokerequest.Table, revokerequest.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, permissionhistory.RevokeRequestTable, permissionhistory.RevokeRequestColumn),
		)
		fromV = sqlgraph.Neighbors(ph.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PermissionHistoryClient) Hooks() []Hook {
	return c.hooks.PermissionHistory
}

// Interceptors returns the client interceptors.
func (c *PermissionHistoryClient) Interceptors() []Interceptor {
	return c.inters.PermissionHistory
}

func (c *PermissionHistoryClient) mutate(ctx context.Context, m *PermissionHistoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PermissionHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PermissionHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PermissionHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PermissionHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PermissionHistory mutation op: %q", m.Op())
	}
}

// ResourceClient is a client for the Resource schema.
type ResourceClient struct {
	config
}

// NewResourceClient returns a client for the Resource from the given config.
func NewResourceClient(c config) *ResourceClient {
	return &ResourceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `resource.Hooks(f(g(h())))`.
func (c *ResourceClient) Use(hooks ...Hook) {
	c.hooks.Resource = append(c.hooks.Resource, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `resource.Intercept(f(g(h())))`.
func (c *ResourceClient) Intercept(interceptors ...Interceptor) {
	c.inters.Resource = append(c.inters.Resource, interceptors...)
}

// Create returns a builder for creating a Resource entity.
func (c *ResourceClient) Create() *ResourceCreate {
	mutation := newResourceMutation(c.config, OpCreate)
	return &ResourceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Resource entities.
func (c *ResourceClient) CreateBulk(builders ...*ResourceCreate) *ResourceCreateBulk {
	return &ResourceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ResourceClient) MapCreateBulk(slice any, setFunc func(*ResourceCreate, int)) *ResourceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ResourceCreateBulk{err: fmt.Errorf("calling to ResourceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ResourceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ResourceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Resource.
func (c *ResourceClient) Update() *ResourceUpdate {
	mutation := newResourceMutation(c.config, OpUpdate)
	return &ResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ResourceClient) UpdateOne(r *Resource) *ResourceUpdateOne {
	mutation := newResourceMutation(c.config, OpUpdateOne, withResource(r))
	return &ResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ResourceClient) UpdateOneID(id string) *ResourceUpdateOne {
	mutation := newResourceMutation(c.config, OpUpdateOne, withResourceID(id))
	return &ResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Resource.
func (c *ResourceClient) Delete() *ResourceDelete {
	mutation := newResourceMutation(c.config, OpDelete)
	return &ResourceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ResourceClient) DeleteOne(r *Resource) *ResourceDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ResourceClient) DeleteOneID(id string) *ResourceDeleteOne {
	builder := c.Delete().Where(resource.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ResourceDeleteOne{builder}
}

// Query returns a query builder for Resource.
func (c *ResourceClient) Query() *ResourceQuery {
	return &ResourceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeResource},
		inters: c.Interceptors(),
	}
}

// Get returns a Resource entity by its id.
func (c *ResourceClient) Get(ctx context.Context, id string) (*Resource, error) {
	return c.Query().Where(resource.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ResourceClient) GetX(ctx context.Context, id string) *Resource {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryActions queries the actions edge of a Resource.
func (c *ResourceClient) QueryActions(r *Resource) *ActionQuery {
	query := (&ActionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(resource.Table, resource.FieldID, id),
			sqlgraph.To(action.Table, action.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, resource.ActionsTable, resource.ActionsColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEntitlements queries the entitlements edge of a Resource.
func (c *ResourceClient) QueryEntitlements(r *Resource) *EntitlementQuery {
	query := (&EntitlementClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(resource.Table, resource.FieldID, id),
			sqlgraph.To(entitlement.Table, entitlement.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, resource.EntitlementsTable, resource.EntitlementsColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ResourceClient) Hooks() []Hook {
	return c.hooks.Resource
}

// Interceptors returns the client interceptors.
func (c *ResourceClient) Interceptors() []Interceptor {
	return c.inters.Resource
}

func (c *ResourceClient) mutate(ctx context.Context, m *ResourceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ResourceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ResourceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Resource mutation op: %q", m.Op())
	}
}

// RevokeRequestClient is a client for the RevokeRequest schema.
type RevokeRequestClient struct {
	config
}

// NewRevokeRequestClient returns a client for the RevokeRequest from the given config.
func NewRevokeRequestClient(c config) *RevokeRequestClient {
	return &RevokeRequestClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `revokerequest.Hooks(f(g(h())))`.
func (c *RevokeRequestClient) Use(hooks ...Hook) {
	c.hooks.RevokeRequest = append(c.hooks.RevokeRequest, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `revokerequest.Intercept(f(g(h())))`.
func (c *RevokeRequestClient) Intercept(interceptors ...Interceptor) {
	c.inters.RevokeRequest = append(c.inters.RevokeRequest, interceptors...)
}

// Create returns a builder for creating a RevokeRequest entity.
func (c *RevokeRequestClient) Create() *RevokeRequestCreate {
	mutation := newRevokeRequestMutation(c.config, OpCreate)
	return &RevokeRequestCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RevokeRequest entities.
func (c *RevokeRequestClient) CreateBulk(builders ...*RevokeRequestCreate) *RevokeRequestCreateBulk {
	return &RevokeRequestCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RevokeRequestClient) MapCreateBulk(slice any, setFunc func(*RevokeRequestCreate, int)) *RevokeRequestCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RevokeRequestCreateBulk{err: fmt.Errorf("calling to RevokeRequestClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RevokeRequestCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RevokeRequestCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RevokeRequest.
func (c *RevokeRequestClient) Update() *RevokeRequestUpdate {
	mutation := newRevokeRequestMutation(c.config, OpUpdate)
	return &RevokeRequestUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RevokeRequestClient) UpdateOne(rr *RevokeRequest) *RevokeRequestUpdateOne {
	mutation := newRevokeRequestMutation(c.config, OpUpdateOne, withRevokeRequest(rr))
	return &RevokeRequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RevokeRequestClient) UpdateOneID(id string) *RevokeRequestUpdateOne {
	mutation := newRevokeRequestMutation(c.config, OpUpdateOne, withRevokeRequestID(id))
	return &RevokeRequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RevokeRequest.
func (c *RevokeRequestClient) Delete() *RevokeRequestDelete {
	mutation := newRevokeRequestMutation(c.config, OpDelete)
	return &RevokeRequestDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RevokeRequestClient) DeleteOne(rr *RevokeRequest) *RevokeRequestDeleteOne {
	return c.DeleteOneID(rr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RevokeRequestClient) DeleteOneID(id string) *RevokeRequestDeleteOne {
	builder := c.Delete().Where(revokerequest.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RevokeRequestDeleteOne{builder}
}

// Query returns a query builder for RevokeRequest.
func (c *RevokeRequestClient) Query() *RevokeRequestQuery {
	return &RevokeRequestQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRevokeRequest},
		inters: c.Interceptors(),
	}
}

// Get returns a RevokeRequest entity by its id.
func (c *RevokeRequestClient) Get(ctx context.Context, id string) (*RevokeRequest, error) {
	return c.Query().Where(revokerequest.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RevokeRequestClient) GetX(ctx context.Context, id string) *RevokeRequest {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRole queries the role edge of a RevokeRequest.
func (c *RevokeRequestClient) QueryRole(rr *RevokeRequest) *RoleQuery {
	query := (&RoleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(revokerequest.Table, revokerequest.FieldID, id),
			sqlgraph.To(role.Table, role.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, revokerequest.RoleTable, revokerequest.RoleColumn),
		)
		fromV = sqlgraph.Neighbors(rr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoleSuite queries the role_suite edge of a RevokeRequest.
func (c *RevokeRequestClient) QueryRoleSuite(rr *RevokeRequest) *RoleSuiteQuery {
	query := (&RoleSuiteClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(revokerequest.Table, revokerequest.FieldID, id),
			sqlgraph.To(rolesuite.Table, rolesuite.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, revokerequest.RoleSuiteTable, revokerequest.RoleSuiteColumn),
		)
		fromV = sqlgraph.Neighbors(rr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPermissionHistories queries the permission_histories edge of a RevokeRequest.
func (c *RevokeRequestClient) QueryPermissionHistories(rr *RevokeRequest) *PermissionHistoryQuery {
	query := (&PermissionHistoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(revokerequest.Table, revokerequest.FieldID, id),
			sqlgraph.To(permissionhistory.Table, permissionhistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, revokerequest.PermissionHistoriesTable, revokerequest.PermissionHistoriesColumn),
		)
		fromV = sqlgraph.Neighbors(rr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RevokeRequestClient) Hooks() []Hook {
	return c.hooks.RevokeRequest
}

// Interceptors returns the client interceptors.
func (c *RevokeRequestClient) Interceptors() []Interceptor {
	return c.inters.RevokeRequest
}

func (c *RevokeRequestClient) mutate(ctx context.Context, m *RevokeRequestMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RevokeRequestCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RevokeRequestUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RevokeRequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RevokeRequestDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown RevokeRequest mutation op: %q", m.Op())
	}
}

// RoleClient is a client for the Role schema.
type RoleClient struct {
	config
}

// NewRoleClient returns a client for the Role from the given config.
func NewRoleClient(c config) *RoleClient {
	return &RoleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `role.Hooks(f(g(h())))`.
func (c *RoleClient) Use(hooks ...Hook) {
	c.hooks.Role = append(c.hooks.Role, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `role.Intercept(f(g(h())))`.
func (c *RoleClient) Intercept(interceptors ...Interceptor) {
	c.inters.Role = append(c.inters.Role, interceptors...)
}

// Create returns a builder for creating a Role entity.
func (c *RoleClient) Create() *RoleCreate {
	mutation := newRoleMutation(c.config, OpCreate)
	return &RoleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Role entities.
func (c *RoleClient) CreateBulk(builders ...*RoleCreate) *RoleCreateBulk {
	return &RoleCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RoleClient) MapCreateBulk(slice any, setFunc func(*RoleCreate, int)) *RoleCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RoleCreateBulk{err: fmt.Errorf("calling to RoleClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RoleCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RoleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Role.
func (c *RoleClient) Update() *RoleUpdate {
	mutation := newRoleMutation(c.config, OpUpdate)
	return &RoleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoleClient) UpdateOne(r *Role) *RoleUpdateOne {
	mutation := newRoleMutation(c.config, OpUpdateOne, withRole(r))
	return &RoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoleClient) UpdateOneID(id string) *RoleUpdateOne {
	mutation := newRoleMutation(c.config, OpUpdateOne, withRoleID(id))
	return &RoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Role.
func (c *RoleClient) Delete() *RoleDelete {
	mutation := newRoleMutation(c.config, OpDelete)
	return &RoleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RoleClient) DeleteOne(r *Role) *RoleDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RoleClient) DeleteOneID(id string) *RoleDeleteOne {
	builder := c.Delete().Where(role.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoleDeleteOne{builder}
}

// Query returns a query builder for Role.
func (c *RoleClient) Query() *RoleQuery {
	return &RoleQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRole},
		inters: c.Interceptors(),
	}
}

// Get returns a Role entity by its id.
func (c *RoleClient) Get(ctx context.Context, id string) (*Role, error) {
	return c.Query().Where(role.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoleClient) GetX(ctx context.Context, id string) *Role {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRoleSuites queries the role_suites edge of a Role.
func (c *RoleClient) QueryRoleSuites(r *Role) *RoleSuiteQuery {
	query := (&RoleSuiteClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(role.Table, role.FieldID, id),
			sqlgraph.To(rolesuite.Table, rolesuite.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, role.RoleSuitesTable, role.RoleSuitesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoleUsers queries the role_users edge of a Role.
func (c *RoleClient) QueryRoleUsers(r *Role) *RoleUserQuery {
	query := (&RoleUserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(role.Table, role.FieldID, id),
			sqlgraph.To(roleuser.Table, roleuser.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, role.RoleUsersTable, role.RoleUsersColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGrantRequests queries the grant_requests edge of a Role.
func (c *RoleClient) QueryGrantRequests(r *Role) *GrantRequestQuery {
	query := (&GrantRequestClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(role.Table, role.FieldID, id),
			sqlgraph.To(grantrequest.Table, grantrequest.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, role.GrantRequestsTable, role.GrantRequestsColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRevokeRequests queries the revoke_requests edge of a Role.
func (c *RoleClient) QueryRevokeRequests(r *Role) *RevokeRequestQuery {
	query := (&RevokeRequestClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(role.Table, role.FieldID, id),
			sqlgraph.To(revokerequest.Table, revokerequest.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, role.RevokeRequestsTable, role.RevokeRequestsColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPermissionHistories queries the permission_histories edge of a Role.
func (c *RoleClient) QueryPermissionHistories(r *Role) *PermissionHistoryQuery {
	query := (&PermissionHistoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(role.Table, role.FieldID, id),
			sqlgraph.To(permissionhistory.Table, permissionhistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, role.PermissionHistoriesTable, role.PermissionHistoriesColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoleRolesuite queries the role_rolesuite edge of a Role.
func (c *RoleClient) QueryRoleRolesuite(r *Role) *RoleRoleSuiteQuery {
	query := (&RoleRoleSuiteClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(role.Table, role.FieldID, id),
			sqlgraph.To(rolerolesuite.Table, rolerolesuite.RoleColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, role.RoleRolesuiteTable, role.RoleRolesuiteColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RoleClient) Hooks() []Hook {
	return c.hooks.Role
}

// Interceptors returns the client interceptors.
func (c *RoleClient) Interceptors() []Interceptor {
	return c.inters.Role
}

func (c *RoleClient) mutate(ctx context.Context, m *RoleMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RoleCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RoleUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RoleDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Role mutation op: %q", m.Op())
	}
}

// RoleRoleSuiteClient is a client for the RoleRoleSuite schema.
type RoleRoleSuiteClient struct {
	config
}

// NewRoleRoleSuiteClient returns a client for the RoleRoleSuite from the given config.
func NewRoleRoleSuiteClient(c config) *RoleRoleSuiteClient {
	return &RoleRoleSuiteClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `rolerolesuite.Hooks(f(g(h())))`.
func (c *RoleRoleSuiteClient) Use(hooks ...Hook) {
	c.hooks.RoleRoleSuite = append(c.hooks.RoleRoleSuite, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `rolerolesuite.Intercept(f(g(h())))`.
func (c *RoleRoleSuiteClient) Intercept(interceptors ...Interceptor) {
	c.inters.RoleRoleSuite = append(c.inters.RoleRoleSuite, interceptors...)
}

// Create returns a builder for creating a RoleRoleSuite entity.
func (c *RoleRoleSuiteClient) Create() *RoleRoleSuiteCreate {
	mutation := newRoleRoleSuiteMutation(c.config, OpCreate)
	return &RoleRoleSuiteCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RoleRoleSuite entities.
func (c *RoleRoleSuiteClient) CreateBulk(builders ...*RoleRoleSuiteCreate) *RoleRoleSuiteCreateBulk {
	return &RoleRoleSuiteCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RoleRoleSuiteClient) MapCreateBulk(slice any, setFunc func(*RoleRoleSuiteCreate, int)) *RoleRoleSuiteCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RoleRoleSuiteCreateBulk{err: fmt.Errorf("calling to RoleRoleSuiteClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RoleRoleSuiteCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RoleRoleSuiteCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RoleRoleSuite.
func (c *RoleRoleSuiteClient) Update() *RoleRoleSuiteUpdate {
	mutation := newRoleRoleSuiteMutation(c.config, OpUpdate)
	return &RoleRoleSuiteUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoleRoleSuiteClient) UpdateOne(rrs *RoleRoleSuite) *RoleRoleSuiteUpdateOne {
	mutation := newRoleRoleSuiteMutation(c.config, OpUpdateOne)
	mutation.role_suite = &rrs.RoleSuiteID
	mutation.role = &rrs.RoleID
	return &RoleRoleSuiteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RoleRoleSuite.
func (c *RoleRoleSuiteClient) Delete() *RoleRoleSuiteDelete {
	mutation := newRoleRoleSuiteMutation(c.config, OpDelete)
	return &RoleRoleSuiteDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Query returns a query builder for RoleRoleSuite.
func (c *RoleRoleSuiteClient) Query() *RoleRoleSuiteQuery {
	return &RoleRoleSuiteQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRoleRoleSuite},
		inters: c.Interceptors(),
	}
}

// QueryRole queries the role edge of a RoleRoleSuite.
func (c *RoleRoleSuiteClient) QueryRole(rrs *RoleRoleSuite) *RoleQuery {
	return c.Query().
		Where(rolerolesuite.RoleSuiteID(rrs.RoleSuiteID), rolerolesuite.RoleID(rrs.RoleID)).
		QueryRole()
}

// QueryRoleSuite queries the role_suite edge of a RoleRoleSuite.
func (c *RoleRoleSuiteClient) QueryRoleSuite(rrs *RoleRoleSuite) *RoleSuiteQuery {
	return c.Query().
		Where(rolerolesuite.RoleSuiteID(rrs.RoleSuiteID), rolerolesuite.RoleID(rrs.RoleID)).
		QueryRoleSuite()
}

// Hooks returns the client hooks.
func (c *RoleRoleSuiteClient) Hooks() []Hook {
	return c.hooks.RoleRoleSuite
}

// Interceptors returns the client interceptors.
func (c *RoleRoleSuiteClient) Interceptors() []Interceptor {
	return c.inters.RoleRoleSuite
}

func (c *RoleRoleSuiteClient) mutate(ctx context.Context, m *RoleRoleSuiteMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RoleRoleSuiteCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RoleRoleSuiteUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RoleRoleSuiteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RoleRoleSuiteDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown RoleRoleSuite mutation op: %q", m.Op())
	}
}

// RoleSuiteClient is a client for the RoleSuite schema.
type RoleSuiteClient struct {
	config
}

// NewRoleSuiteClient returns a client for the RoleSuite from the given config.
func NewRoleSuiteClient(c config) *RoleSuiteClient {
	return &RoleSuiteClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `rolesuite.Hooks(f(g(h())))`.
func (c *RoleSuiteClient) Use(hooks ...Hook) {
	c.hooks.RoleSuite = append(c.hooks.RoleSuite, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `rolesuite.Intercept(f(g(h())))`.
func (c *RoleSuiteClient) Intercept(interceptors ...Interceptor) {
	c.inters.RoleSuite = append(c.inters.RoleSuite, interceptors...)
}

// Create returns a builder for creating a RoleSuite entity.
func (c *RoleSuiteClient) Create() *RoleSuiteCreate {
	mutation := newRoleSuiteMutation(c.config, OpCreate)
	return &RoleSuiteCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RoleSuite entities.
func (c *RoleSuiteClient) CreateBulk(builders ...*RoleSuiteCreate) *RoleSuiteCreateBulk {
	return &RoleSuiteCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RoleSuiteClient) MapCreateBulk(slice any, setFunc func(*RoleSuiteCreate, int)) *RoleSuiteCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RoleSuiteCreateBulk{err: fmt.Errorf("calling to RoleSuiteClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RoleSuiteCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RoleSuiteCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RoleSuite.
func (c *RoleSuiteClient) Update() *RoleSuiteUpdate {
	mutation := newRoleSuiteMutation(c.config, OpUpdate)
	return &RoleSuiteUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoleSuiteClient) UpdateOne(rs *RoleSuite) *RoleSuiteUpdateOne {
	mutation := newRoleSuiteMutation(c.config, OpUpdateOne, withRoleSuite(rs))
	return &RoleSuiteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoleSuiteClient) UpdateOneID(id string) *RoleSuiteUpdateOne {
	mutation := newRoleSuiteMutation(c.config, OpUpdateOne, withRoleSuiteID(id))
	return &RoleSuiteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RoleSuite.
func (c *RoleSuiteClient) Delete() *RoleSuiteDelete {
	mutation := newRoleSuiteMutation(c.config, OpDelete)
	return &RoleSuiteDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RoleSuiteClient) DeleteOne(rs *RoleSuite) *RoleSuiteDeleteOne {
	return c.DeleteOneID(rs.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RoleSuiteClient) DeleteOneID(id string) *RoleSuiteDeleteOne {
	builder := c.Delete().Where(rolesuite.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoleSuiteDeleteOne{builder}
}

// Query returns a query builder for RoleSuite.
func (c *RoleSuiteClient) Query() *RoleSuiteQuery {
	return &RoleSuiteQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRoleSuite},
		inters: c.Interceptors(),
	}
}

// Get returns a RoleSuite entity by its id.
func (c *RoleSuiteClient) Get(ctx context.Context, id string) (*RoleSuite, error) {
	return c.Query().Where(rolesuite.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoleSuiteClient) GetX(ctx context.Context, id string) *RoleSuite {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRolesuiteUsers queries the rolesuite_users edge of a RoleSuite.
func (c *RoleSuiteClient) QueryRolesuiteUsers(rs *RoleSuite) *RoleSuiteUserQuery {
	query := (&RoleSuiteUserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rolesuite.Table, rolesuite.FieldID, id),
			sqlgraph.To(rolesuiteuser.Table, rolesuiteuser.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, rolesuite.RolesuiteUsersTable, rolesuite.RolesuiteUsersColumn),
		)
		fromV = sqlgraph.Neighbors(rs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPermissionHistories queries the permission_histories edge of a RoleSuite.
func (c *RoleSuiteClient) QueryPermissionHistories(rs *RoleSuite) *PermissionHistoryQuery {
	query := (&PermissionHistoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rolesuite.Table, rolesuite.FieldID, id),
			sqlgraph.To(permissionhistory.Table, permissionhistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, rolesuite.PermissionHistoriesTable, rolesuite.PermissionHistoriesColumn),
		)
		fromV = sqlgraph.Neighbors(rs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGrantRequests queries the grant_requests edge of a RoleSuite.
func (c *RoleSuiteClient) QueryGrantRequests(rs *RoleSuite) *GrantRequestQuery {
	query := (&GrantRequestClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rolesuite.Table, rolesuite.FieldID, id),
			sqlgraph.To(grantrequest.Table, grantrequest.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, rolesuite.GrantRequestsTable, rolesuite.GrantRequestsColumn),
		)
		fromV = sqlgraph.Neighbors(rs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRevokeRequests queries the revoke_requests edge of a RoleSuite.
func (c *RoleSuiteClient) QueryRevokeRequests(rs *RoleSuite) *RevokeRequestQuery {
	query := (&RevokeRequestClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rolesuite.Table, rolesuite.FieldID, id),
			sqlgraph.To(revokerequest.Table, revokerequest.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, rolesuite.RevokeRequestsTable, rolesuite.RevokeRequestsColumn),
		)
		fromV = sqlgraph.Neighbors(rs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoles queries the roles edge of a RoleSuite.
func (c *RoleSuiteClient) QueryRoles(rs *RoleSuite) *RoleQuery {
	query := (&RoleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rolesuite.Table, rolesuite.FieldID, id),
			sqlgraph.To(role.Table, role.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, rolesuite.RolesTable, rolesuite.RolesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(rs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoleRolesuite queries the role_rolesuite edge of a RoleSuite.
func (c *RoleSuiteClient) QueryRoleRolesuite(rs *RoleSuite) *RoleRoleSuiteQuery {
	query := (&RoleRoleSuiteClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rolesuite.Table, rolesuite.FieldID, id),
			sqlgraph.To(rolerolesuite.Table, rolerolesuite.RoleSuiteColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, rolesuite.RoleRolesuiteTable, rolesuite.RoleRolesuiteColumn),
		)
		fromV = sqlgraph.Neighbors(rs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RoleSuiteClient) Hooks() []Hook {
	return c.hooks.RoleSuite
}

// Interceptors returns the client interceptors.
func (c *RoleSuiteClient) Interceptors() []Interceptor {
	return c.inters.RoleSuite
}

func (c *RoleSuiteClient) mutate(ctx context.Context, m *RoleSuiteMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RoleSuiteCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RoleSuiteUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RoleSuiteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RoleSuiteDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown RoleSuite mutation op: %q", m.Op())
	}
}

// RoleSuiteUserClient is a client for the RoleSuiteUser schema.
type RoleSuiteUserClient struct {
	config
}

// NewRoleSuiteUserClient returns a client for the RoleSuiteUser from the given config.
func NewRoleSuiteUserClient(c config) *RoleSuiteUserClient {
	return &RoleSuiteUserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `rolesuiteuser.Hooks(f(g(h())))`.
func (c *RoleSuiteUserClient) Use(hooks ...Hook) {
	c.hooks.RoleSuiteUser = append(c.hooks.RoleSuiteUser, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `rolesuiteuser.Intercept(f(g(h())))`.
func (c *RoleSuiteUserClient) Intercept(interceptors ...Interceptor) {
	c.inters.RoleSuiteUser = append(c.inters.RoleSuiteUser, interceptors...)
}

// Create returns a builder for creating a RoleSuiteUser entity.
func (c *RoleSuiteUserClient) Create() *RoleSuiteUserCreate {
	mutation := newRoleSuiteUserMutation(c.config, OpCreate)
	return &RoleSuiteUserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RoleSuiteUser entities.
func (c *RoleSuiteUserClient) CreateBulk(builders ...*RoleSuiteUserCreate) *RoleSuiteUserCreateBulk {
	return &RoleSuiteUserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RoleSuiteUserClient) MapCreateBulk(slice any, setFunc func(*RoleSuiteUserCreate, int)) *RoleSuiteUserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RoleSuiteUserCreateBulk{err: fmt.Errorf("calling to RoleSuiteUserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RoleSuiteUserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RoleSuiteUserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RoleSuiteUser.
func (c *RoleSuiteUserClient) Update() *RoleSuiteUserUpdate {
	mutation := newRoleSuiteUserMutation(c.config, OpUpdate)
	return &RoleSuiteUserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoleSuiteUserClient) UpdateOne(rsu *RoleSuiteUser) *RoleSuiteUserUpdateOne {
	mutation := newRoleSuiteUserMutation(c.config, OpUpdateOne, withRoleSuiteUser(rsu))
	return &RoleSuiteUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoleSuiteUserClient) UpdateOneID(id int) *RoleSuiteUserUpdateOne {
	mutation := newRoleSuiteUserMutation(c.config, OpUpdateOne, withRoleSuiteUserID(id))
	return &RoleSuiteUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RoleSuiteUser.
func (c *RoleSuiteUserClient) Delete() *RoleSuiteUserDelete {
	mutation := newRoleSuiteUserMutation(c.config, OpDelete)
	return &RoleSuiteUserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RoleSuiteUserClient) DeleteOne(rsu *RoleSuiteUser) *RoleSuiteUserDeleteOne {
	return c.DeleteOneID(rsu.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RoleSuiteUserClient) DeleteOneID(id int) *RoleSuiteUserDeleteOne {
	builder := c.Delete().Where(rolesuiteuser.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoleSuiteUserDeleteOne{builder}
}

// Query returns a query builder for RoleSuiteUser.
func (c *RoleSuiteUserClient) Query() *RoleSuiteUserQuery {
	return &RoleSuiteUserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRoleSuiteUser},
		inters: c.Interceptors(),
	}
}

// Get returns a RoleSuiteUser entity by its id.
func (c *RoleSuiteUserClient) Get(ctx context.Context, id int) (*RoleSuiteUser, error) {
	return c.Query().Where(rolesuiteuser.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoleSuiteUserClient) GetX(ctx context.Context, id int) *RoleSuiteUser {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRoleSuite queries the role_suite edge of a RoleSuiteUser.
func (c *RoleSuiteUserClient) QueryRoleSuite(rsu *RoleSuiteUser) *RoleSuiteQuery {
	query := (&RoleSuiteClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rsu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rolesuiteuser.Table, rolesuiteuser.FieldID, id),
			sqlgraph.To(rolesuite.Table, rolesuite.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, rolesuiteuser.RoleSuiteTable, rolesuiteuser.RoleSuiteColumn),
		)
		fromV = sqlgraph.Neighbors(rsu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RoleSuiteUserClient) Hooks() []Hook {
	return c.hooks.RoleSuiteUser
}

// Interceptors returns the client interceptors.
func (c *RoleSuiteUserClient) Interceptors() []Interceptor {
	return c.inters.RoleSuiteUser
}

func (c *RoleSuiteUserClient) mutate(ctx context.Context, m *RoleSuiteUserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RoleSuiteUserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RoleSuiteUserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RoleSuiteUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RoleSuiteUserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown RoleSuiteUser mutation op: %q", m.Op())
	}
}

// RoleUserClient is a client for the RoleUser schema.
type RoleUserClient struct {
	config
}

// NewRoleUserClient returns a client for the RoleUser from the given config.
func NewRoleUserClient(c config) *RoleUserClient {
	return &RoleUserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `roleuser.Hooks(f(g(h())))`.
func (c *RoleUserClient) Use(hooks ...Hook) {
	c.hooks.RoleUser = append(c.hooks.RoleUser, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `roleuser.Intercept(f(g(h())))`.
func (c *RoleUserClient) Intercept(interceptors ...Interceptor) {
	c.inters.RoleUser = append(c.inters.RoleUser, interceptors...)
}

// Create returns a builder for creating a RoleUser entity.
func (c *RoleUserClient) Create() *RoleUserCreate {
	mutation := newRoleUserMutation(c.config, OpCreate)
	return &RoleUserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RoleUser entities.
func (c *RoleUserClient) CreateBulk(builders ...*RoleUserCreate) *RoleUserCreateBulk {
	return &RoleUserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RoleUserClient) MapCreateBulk(slice any, setFunc func(*RoleUserCreate, int)) *RoleUserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RoleUserCreateBulk{err: fmt.Errorf("calling to RoleUserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RoleUserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RoleUserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RoleUser.
func (c *RoleUserClient) Update() *RoleUserUpdate {
	mutation := newRoleUserMutation(c.config, OpUpdate)
	return &RoleUserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoleUserClient) UpdateOne(ru *RoleUser) *RoleUserUpdateOne {
	mutation := newRoleUserMutation(c.config, OpUpdateOne, withRoleUser(ru))
	return &RoleUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoleUserClient) UpdateOneID(id int) *RoleUserUpdateOne {
	mutation := newRoleUserMutation(c.config, OpUpdateOne, withRoleUserID(id))
	return &RoleUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RoleUser.
func (c *RoleUserClient) Delete() *RoleUserDelete {
	mutation := newRoleUserMutation(c.config, OpDelete)
	return &RoleUserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RoleUserClient) DeleteOne(ru *RoleUser) *RoleUserDeleteOne {
	return c.DeleteOneID(ru.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RoleUserClient) DeleteOneID(id int) *RoleUserDeleteOne {
	builder := c.Delete().Where(roleuser.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoleUserDeleteOne{builder}
}

// Query returns a query builder for RoleUser.
func (c *RoleUserClient) Query() *RoleUserQuery {
	return &RoleUserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRoleUser},
		inters: c.Interceptors(),
	}
}

// Get returns a RoleUser entity by its id.
func (c *RoleUserClient) Get(ctx context.Context, id int) (*RoleUser, error) {
	return c.Query().Where(roleuser.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoleUserClient) GetX(ctx context.Context, id int) *RoleUser {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRole queries the role edge of a RoleUser.
func (c *RoleUserClient) QueryRole(ru *RoleUser) *RoleQuery {
	query := (&RoleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ru.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(roleuser.Table, roleuser.FieldID, id),
			sqlgraph.To(role.Table, role.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, roleuser.RoleTable, roleuser.RoleColumn),
		)
		fromV = sqlgraph.Neighbors(ru.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RoleUserClient) Hooks() []Hook {
	return c.hooks.RoleUser
}

// Interceptors returns the client interceptors.
func (c *RoleUserClient) Interceptors() []Interceptor {
	return c.inters.RoleUser
}

func (c *RoleUserClient) mutate(ctx context.Context, m *RoleUserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RoleUserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RoleUserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RoleUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RoleUserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown RoleUser mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Action, Entitlement, EntitlementAssignment, GrantRequest, PermissionHistory,
		Resource, RevokeRequest, Role, RoleRoleSuite, RoleSuite, RoleSuiteUser,
		RoleUser []ent.Hook
	}
	inters struct {
		Action, EffectiveGroupEntitlement, EffectiveUserEntitlement, Entitlement,
		EntitlementAssignment, GrantRequest, PermissionHistory, Resource,
		RevokeRequest, Role, RoleRoleSuite, RoleSuite, RoleSuiteUser,
		RoleUser []ent.Interceptor
	}
)
