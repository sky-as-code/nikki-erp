// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/effectiveuserentitlement"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/predicate"
)

// EffectiveUserEntitlementQuery is the builder for querying EffectiveUserEntitlement entities.
type EffectiveUserEntitlementQuery struct {
	config
	ctx        *QueryContext
	order      []effectiveuserentitlement.OrderOption
	inters     []Interceptor
	predicates []predicate.EffectiveUserEntitlement
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the EffectiveUserEntitlementQuery builder.
func (eueq *EffectiveUserEntitlementQuery) Where(ps ...predicate.EffectiveUserEntitlement) *EffectiveUserEntitlementQuery {
	eueq.predicates = append(eueq.predicates, ps...)
	return eueq
}

// Limit the number of records to be returned by this query.
func (eueq *EffectiveUserEntitlementQuery) Limit(limit int) *EffectiveUserEntitlementQuery {
	eueq.ctx.Limit = &limit
	return eueq
}

// Offset to start from.
func (eueq *EffectiveUserEntitlementQuery) Offset(offset int) *EffectiveUserEntitlementQuery {
	eueq.ctx.Offset = &offset
	return eueq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (eueq *EffectiveUserEntitlementQuery) Unique(unique bool) *EffectiveUserEntitlementQuery {
	eueq.ctx.Unique = &unique
	return eueq
}

// Order specifies how the records should be ordered.
func (eueq *EffectiveUserEntitlementQuery) Order(o ...effectiveuserentitlement.OrderOption) *EffectiveUserEntitlementQuery {
	eueq.order = append(eueq.order, o...)
	return eueq
}

// First returns the first EffectiveUserEntitlement entity from the query.
// Returns a *NotFoundError when no EffectiveUserEntitlement was found.
func (eueq *EffectiveUserEntitlementQuery) First(ctx context.Context) (*EffectiveUserEntitlement, error) {
	nodes, err := eueq.Limit(1).All(setContextOp(ctx, eueq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{effectiveuserentitlement.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (eueq *EffectiveUserEntitlementQuery) FirstX(ctx context.Context) *EffectiveUserEntitlement {
	node, err := eueq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// Only returns a single EffectiveUserEntitlement entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one EffectiveUserEntitlement entity is found.
// Returns a *NotFoundError when no EffectiveUserEntitlement entities are found.
func (eueq *EffectiveUserEntitlementQuery) Only(ctx context.Context) (*EffectiveUserEntitlement, error) {
	nodes, err := eueq.Limit(2).All(setContextOp(ctx, eueq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{effectiveuserentitlement.Label}
	default:
		return nil, &NotSingularError{effectiveuserentitlement.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (eueq *EffectiveUserEntitlementQuery) OnlyX(ctx context.Context) *EffectiveUserEntitlement {
	node, err := eueq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// All executes the query and returns a list of EffectiveUserEntitlements.
func (eueq *EffectiveUserEntitlementQuery) All(ctx context.Context) ([]*EffectiveUserEntitlement, error) {
	ctx = setContextOp(ctx, eueq.ctx, ent.OpQueryAll)
	if err := eueq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*EffectiveUserEntitlement, *EffectiveUserEntitlementQuery]()
	return withInterceptors[[]*EffectiveUserEntitlement](ctx, eueq, qr, eueq.inters)
}

// AllX is like All, but panics if an error occurs.
func (eueq *EffectiveUserEntitlementQuery) AllX(ctx context.Context) []*EffectiveUserEntitlement {
	nodes, err := eueq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// Count returns the count of the given query.
func (eueq *EffectiveUserEntitlementQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, eueq.ctx, ent.OpQueryCount)
	if err := eueq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, eueq, querierCount[*EffectiveUserEntitlementQuery](), eueq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (eueq *EffectiveUserEntitlementQuery) CountX(ctx context.Context) int {
	count, err := eueq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (eueq *EffectiveUserEntitlementQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, eueq.ctx, ent.OpQueryExist)
	switch _, err := eueq.First(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (eueq *EffectiveUserEntitlementQuery) ExistX(ctx context.Context) bool {
	exist, err := eueq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the EffectiveUserEntitlementQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (eueq *EffectiveUserEntitlementQuery) Clone() *EffectiveUserEntitlementQuery {
	if eueq == nil {
		return nil
	}
	return &EffectiveUserEntitlementQuery{
		config:     eueq.config,
		ctx:        eueq.ctx.Clone(),
		order:      append([]effectiveuserentitlement.OrderOption{}, eueq.order...),
		inters:     append([]Interceptor{}, eueq.inters...),
		predicates: append([]predicate.EffectiveUserEntitlement{}, eueq.predicates...),
		// clone intermediate query.
		sql:  eueq.sql.Clone(),
		path: eueq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		UserID string `json:"user_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.EffectiveUserEntitlement.Query().
//		GroupBy(effectiveuserentitlement.FieldUserID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (eueq *EffectiveUserEntitlementQuery) GroupBy(field string, fields ...string) *EffectiveUserEntitlementGroupBy {
	eueq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &EffectiveUserEntitlementGroupBy{build: eueq}
	grbuild.flds = &eueq.ctx.Fields
	grbuild.label = effectiveuserentitlement.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		UserID string `json:"user_id,omitempty"`
//	}
//
//	client.EffectiveUserEntitlement.Query().
//		Select(effectiveuserentitlement.FieldUserID).
//		Scan(ctx, &v)
func (eueq *EffectiveUserEntitlementQuery) Select(fields ...string) *EffectiveUserEntitlementSelect {
	eueq.ctx.Fields = append(eueq.ctx.Fields, fields...)
	sbuild := &EffectiveUserEntitlementSelect{EffectiveUserEntitlementQuery: eueq}
	sbuild.label = effectiveuserentitlement.Label
	sbuild.flds, sbuild.scan = &eueq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a EffectiveUserEntitlementSelect configured with the given aggregations.
func (eueq *EffectiveUserEntitlementQuery) Aggregate(fns ...AggregateFunc) *EffectiveUserEntitlementSelect {
	return eueq.Select().Aggregate(fns...)
}

func (eueq *EffectiveUserEntitlementQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range eueq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, eueq); err != nil {
				return err
			}
		}
	}
	for _, f := range eueq.ctx.Fields {
		if !effectiveuserentitlement.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if eueq.path != nil {
		prev, err := eueq.path(ctx)
		if err != nil {
			return err
		}
		eueq.sql = prev
	}
	return nil
}

func (eueq *EffectiveUserEntitlementQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*EffectiveUserEntitlement, error) {
	var (
		nodes = []*EffectiveUserEntitlement{}
		_spec = eueq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*EffectiveUserEntitlement).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &EffectiveUserEntitlement{config: eueq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, eueq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (eueq *EffectiveUserEntitlementQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := eueq.querySpec()
	_spec.Node.Columns = eueq.ctx.Fields
	if len(eueq.ctx.Fields) > 0 {
		_spec.Unique = eueq.ctx.Unique != nil && *eueq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, eueq.driver, _spec)
}

func (eueq *EffectiveUserEntitlementQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(effectiveuserentitlement.Table, effectiveuserentitlement.Columns, nil)
	_spec.From = eueq.sql
	if unique := eueq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if eueq.path != nil {
		_spec.Unique = true
	}
	if fields := eueq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		for i := range fields {
			_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
		}
	}
	if ps := eueq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := eueq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := eueq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := eueq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (eueq *EffectiveUserEntitlementQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(eueq.driver.Dialect())
	t1 := builder.Table(effectiveuserentitlement.Table)
	columns := eueq.ctx.Fields
	if len(columns) == 0 {
		columns = effectiveuserentitlement.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if eueq.sql != nil {
		selector = eueq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if eueq.ctx.Unique != nil && *eueq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range eueq.predicates {
		p(selector)
	}
	for _, p := range eueq.order {
		p(selector)
	}
	if offset := eueq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := eueq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// EffectiveUserEntitlementGroupBy is the group-by builder for EffectiveUserEntitlement entities.
type EffectiveUserEntitlementGroupBy struct {
	selector
	build *EffectiveUserEntitlementQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (euegb *EffectiveUserEntitlementGroupBy) Aggregate(fns ...AggregateFunc) *EffectiveUserEntitlementGroupBy {
	euegb.fns = append(euegb.fns, fns...)
	return euegb
}

// Scan applies the selector query and scans the result into the given value.
func (euegb *EffectiveUserEntitlementGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, euegb.build.ctx, ent.OpQueryGroupBy)
	if err := euegb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EffectiveUserEntitlementQuery, *EffectiveUserEntitlementGroupBy](ctx, euegb.build, euegb, euegb.build.inters, v)
}

func (euegb *EffectiveUserEntitlementGroupBy) sqlScan(ctx context.Context, root *EffectiveUserEntitlementQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(euegb.fns))
	for _, fn := range euegb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*euegb.flds)+len(euegb.fns))
		for _, f := range *euegb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*euegb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := euegb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// EffectiveUserEntitlementSelect is the builder for selecting fields of EffectiveUserEntitlement entities.
type EffectiveUserEntitlementSelect struct {
	*EffectiveUserEntitlementQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (eues *EffectiveUserEntitlementSelect) Aggregate(fns ...AggregateFunc) *EffectiveUserEntitlementSelect {
	eues.fns = append(eues.fns, fns...)
	return eues
}

// Scan applies the selector query and scans the result into the given value.
func (eues *EffectiveUserEntitlementSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, eues.ctx, ent.OpQuerySelect)
	if err := eues.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EffectiveUserEntitlementQuery, *EffectiveUserEntitlementSelect](ctx, eues.EffectiveUserEntitlementQuery, eues, eues.inters, v)
}

func (eues *EffectiveUserEntitlementSelect) sqlScan(ctx context.Context, root *EffectiveUserEntitlementQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(eues.fns))
	for _, fn := range eues.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*eues.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := eues.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
