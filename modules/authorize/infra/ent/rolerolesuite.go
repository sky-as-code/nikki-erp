// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/role"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/rolerolesuite"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/rolesuite"
)

// RoleRoleSuite is the model entity for the RoleRoleSuite schema.
type RoleRoleSuite struct {
	config `json:"-"`
	// RoleID holds the value of the "role_id" field.
	RoleID string `json:"role_id,omitempty"`
	// RoleSuiteID holds the value of the "role_suite_id" field.
	RoleSuiteID string `json:"role_suite_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RoleRoleSuiteQuery when eager-loading is set.
	Edges        RoleRoleSuiteEdges `json:"edges"`
	selectValues sql.SelectValues
}

// RoleRoleSuiteEdges holds the relations/edges for other nodes in the graph.
type RoleRoleSuiteEdges struct {
	// Role holds the value of the role edge.
	Role *Role `json:"role,omitempty"`
	// RoleSuite holds the value of the role_suite edge.
	RoleSuite *RoleSuite `json:"role_suite,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// RoleOrErr returns the Role value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RoleRoleSuiteEdges) RoleOrErr() (*Role, error) {
	if e.Role != nil {
		return e.Role, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: role.Label}
	}
	return nil, &NotLoadedError{edge: "role"}
}

// RoleSuiteOrErr returns the RoleSuite value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RoleRoleSuiteEdges) RoleSuiteOrErr() (*RoleSuite, error) {
	if e.RoleSuite != nil {
		return e.RoleSuite, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: rolesuite.Label}
	}
	return nil, &NotLoadedError{edge: "role_suite"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RoleRoleSuite) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case rolerolesuite.FieldRoleID, rolerolesuite.FieldRoleSuiteID:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RoleRoleSuite fields.
func (rrs *RoleRoleSuite) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case rolerolesuite.FieldRoleID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role_id", values[i])
			} else if value.Valid {
				rrs.RoleID = value.String
			}
		case rolerolesuite.FieldRoleSuiteID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role_suite_id", values[i])
			} else if value.Valid {
				rrs.RoleSuiteID = value.String
			}
		default:
			rrs.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the RoleRoleSuite.
// This includes values selected through modifiers, order, etc.
func (rrs *RoleRoleSuite) Value(name string) (ent.Value, error) {
	return rrs.selectValues.Get(name)
}

// QueryRole queries the "role" edge of the RoleRoleSuite entity.
func (rrs *RoleRoleSuite) QueryRole() *RoleQuery {
	return NewRoleRoleSuiteClient(rrs.config).QueryRole(rrs)
}

// QueryRoleSuite queries the "role_suite" edge of the RoleRoleSuite entity.
func (rrs *RoleRoleSuite) QueryRoleSuite() *RoleSuiteQuery {
	return NewRoleRoleSuiteClient(rrs.config).QueryRoleSuite(rrs)
}

// Update returns a builder for updating this RoleRoleSuite.
// Note that you need to call RoleRoleSuite.Unwrap() before calling this method if this RoleRoleSuite
// was returned from a transaction, and the transaction was committed or rolled back.
func (rrs *RoleRoleSuite) Update() *RoleRoleSuiteUpdateOne {
	return NewRoleRoleSuiteClient(rrs.config).UpdateOne(rrs)
}

// Unwrap unwraps the RoleRoleSuite entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rrs *RoleRoleSuite) Unwrap() *RoleRoleSuite {
	_tx, ok := rrs.config.driver.(*txDriver)
	if !ok {
		panic("ent: RoleRoleSuite is not a transactional entity")
	}
	rrs.config.driver = _tx.drv
	return rrs
}

// String implements the fmt.Stringer.
func (rrs *RoleRoleSuite) String() string {
	var builder strings.Builder
	builder.WriteString("RoleRoleSuite(")
	builder.WriteString("role_id=")
	builder.WriteString(rrs.RoleID)
	builder.WriteString(", ")
	builder.WriteString("role_suite_id=")
	builder.WriteString(rrs.RoleSuiteID)
	builder.WriteByte(')')
	return builder.String()
}

// RoleRoleSuites is a parsable slice of RoleRoleSuite.
type RoleRoleSuites []*RoleRoleSuite
