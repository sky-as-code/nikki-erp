// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/rolesuite"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/rolesuiteuser"
)

// RoleSuiteUser is the model entity for the RoleSuiteUser schema.
type RoleSuiteUser struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ApproverID holds the value of the "approver_id" field.
	ApproverID string `json:"approver_id,omitempty"`
	// ReceiverRef holds the value of the "receiver_ref" field.
	ReceiverRef string `json:"receiver_ref,omitempty"`
	// ReceiverType holds the value of the "receiver_type" field.
	ReceiverType rolesuiteuser.ReceiverType `json:"receiver_type,omitempty"`
	// RoleSuiteID holds the value of the "role_suite_id" field.
	RoleSuiteID string `json:"role_suite_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RoleSuiteUserQuery when eager-loading is set.
	Edges        RoleSuiteUserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// RoleSuiteUserEdges holds the relations/edges for other nodes in the graph.
type RoleSuiteUserEdges struct {
	// RoleSuite holds the value of the role_suite edge.
	RoleSuite *RoleSuite `json:"role_suite,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RoleSuiteOrErr returns the RoleSuite value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RoleSuiteUserEdges) RoleSuiteOrErr() (*RoleSuite, error) {
	if e.RoleSuite != nil {
		return e.RoleSuite, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: rolesuite.Label}
	}
	return nil, &NotLoadedError{edge: "role_suite"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RoleSuiteUser) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case rolesuiteuser.FieldID:
			values[i] = new(sql.NullInt64)
		case rolesuiteuser.FieldApproverID, rolesuiteuser.FieldReceiverRef, rolesuiteuser.FieldReceiverType, rolesuiteuser.FieldRoleSuiteID:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RoleSuiteUser fields.
func (rsu *RoleSuiteUser) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case rolesuiteuser.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rsu.ID = int(value.Int64)
		case rolesuiteuser.FieldApproverID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field approver_id", values[i])
			} else if value.Valid {
				rsu.ApproverID = value.String
			}
		case rolesuiteuser.FieldReceiverRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field receiver_ref", values[i])
			} else if value.Valid {
				rsu.ReceiverRef = value.String
			}
		case rolesuiteuser.FieldReceiverType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field receiver_type", values[i])
			} else if value.Valid {
				rsu.ReceiverType = rolesuiteuser.ReceiverType(value.String)
			}
		case rolesuiteuser.FieldRoleSuiteID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role_suite_id", values[i])
			} else if value.Valid {
				rsu.RoleSuiteID = value.String
			}
		default:
			rsu.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the RoleSuiteUser.
// This includes values selected through modifiers, order, etc.
func (rsu *RoleSuiteUser) Value(name string) (ent.Value, error) {
	return rsu.selectValues.Get(name)
}

// QueryRoleSuite queries the "role_suite" edge of the RoleSuiteUser entity.
func (rsu *RoleSuiteUser) QueryRoleSuite() *RoleSuiteQuery {
	return NewRoleSuiteUserClient(rsu.config).QueryRoleSuite(rsu)
}

// Update returns a builder for updating this RoleSuiteUser.
// Note that you need to call RoleSuiteUser.Unwrap() before calling this method if this RoleSuiteUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (rsu *RoleSuiteUser) Update() *RoleSuiteUserUpdateOne {
	return NewRoleSuiteUserClient(rsu.config).UpdateOne(rsu)
}

// Unwrap unwraps the RoleSuiteUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rsu *RoleSuiteUser) Unwrap() *RoleSuiteUser {
	_tx, ok := rsu.config.driver.(*txDriver)
	if !ok {
		panic("ent: RoleSuiteUser is not a transactional entity")
	}
	rsu.config.driver = _tx.drv
	return rsu
}

// String implements the fmt.Stringer.
func (rsu *RoleSuiteUser) String() string {
	var builder strings.Builder
	builder.WriteString("RoleSuiteUser(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rsu.ID))
	builder.WriteString("approver_id=")
	builder.WriteString(rsu.ApproverID)
	builder.WriteString(", ")
	builder.WriteString("receiver_ref=")
	builder.WriteString(rsu.ReceiverRef)
	builder.WriteString(", ")
	builder.WriteString("receiver_type=")
	builder.WriteString(fmt.Sprintf("%v", rsu.ReceiverType))
	builder.WriteString(", ")
	builder.WriteString("role_suite_id=")
	builder.WriteString(rsu.RoleSuiteID)
	builder.WriteByte(')')
	return builder.String()
}

// RoleSuiteUsers is a parsable slice of RoleSuiteUser.
type RoleSuiteUsers []*RoleSuiteUser
