// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/action"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/entitlement"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/entitlementassignment"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/permissionhistory"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/predicate"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/resource"
)

// EntitlementQuery is the builder for querying Entitlement entities.
type EntitlementQuery struct {
	config
	ctx                        *QueryContext
	order                      []entitlement.OrderOption
	inters                     []Interceptor
	predicates                 []predicate.Entitlement
	withPermissionHistories    *PermissionHistoryQuery
	withEntitlementAssignments *EntitlementAssignmentQuery
	withAction                 *ActionQuery
	withResource               *ResourceQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the EntitlementQuery builder.
func (eq *EntitlementQuery) Where(ps ...predicate.Entitlement) *EntitlementQuery {
	eq.predicates = append(eq.predicates, ps...)
	return eq
}

// Limit the number of records to be returned by this query.
func (eq *EntitlementQuery) Limit(limit int) *EntitlementQuery {
	eq.ctx.Limit = &limit
	return eq
}

// Offset to start from.
func (eq *EntitlementQuery) Offset(offset int) *EntitlementQuery {
	eq.ctx.Offset = &offset
	return eq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (eq *EntitlementQuery) Unique(unique bool) *EntitlementQuery {
	eq.ctx.Unique = &unique
	return eq
}

// Order specifies how the records should be ordered.
func (eq *EntitlementQuery) Order(o ...entitlement.OrderOption) *EntitlementQuery {
	eq.order = append(eq.order, o...)
	return eq
}

// QueryPermissionHistories chains the current query on the "permission_histories" edge.
func (eq *EntitlementQuery) QueryPermissionHistories() *PermissionHistoryQuery {
	query := (&PermissionHistoryClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(entitlement.Table, entitlement.FieldID, selector),
			sqlgraph.To(permissionhistory.Table, permissionhistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, entitlement.PermissionHistoriesTable, entitlement.PermissionHistoriesColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEntitlementAssignments chains the current query on the "entitlement_assignments" edge.
func (eq *EntitlementQuery) QueryEntitlementAssignments() *EntitlementAssignmentQuery {
	query := (&EntitlementAssignmentClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(entitlement.Table, entitlement.FieldID, selector),
			sqlgraph.To(entitlementassignment.Table, entitlementassignment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, entitlement.EntitlementAssignmentsTable, entitlement.EntitlementAssignmentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAction chains the current query on the "action" edge.
func (eq *EntitlementQuery) QueryAction() *ActionQuery {
	query := (&ActionClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(entitlement.Table, entitlement.FieldID, selector),
			sqlgraph.To(action.Table, action.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, entitlement.ActionTable, entitlement.ActionColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryResource chains the current query on the "resource" edge.
func (eq *EntitlementQuery) QueryResource() *ResourceQuery {
	query := (&ResourceClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(entitlement.Table, entitlement.FieldID, selector),
			sqlgraph.To(resource.Table, resource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, entitlement.ResourceTable, entitlement.ResourceColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Entitlement entity from the query.
// Returns a *NotFoundError when no Entitlement was found.
func (eq *EntitlementQuery) First(ctx context.Context) (*Entitlement, error) {
	nodes, err := eq.Limit(1).All(setContextOp(ctx, eq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{entitlement.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (eq *EntitlementQuery) FirstX(ctx context.Context) *Entitlement {
	node, err := eq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Entitlement ID from the query.
// Returns a *NotFoundError when no Entitlement ID was found.
func (eq *EntitlementQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = eq.Limit(1).IDs(setContextOp(ctx, eq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{entitlement.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (eq *EntitlementQuery) FirstIDX(ctx context.Context) string {
	id, err := eq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Entitlement entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Entitlement entity is found.
// Returns a *NotFoundError when no Entitlement entities are found.
func (eq *EntitlementQuery) Only(ctx context.Context) (*Entitlement, error) {
	nodes, err := eq.Limit(2).All(setContextOp(ctx, eq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{entitlement.Label}
	default:
		return nil, &NotSingularError{entitlement.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (eq *EntitlementQuery) OnlyX(ctx context.Context) *Entitlement {
	node, err := eq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Entitlement ID in the query.
// Returns a *NotSingularError when more than one Entitlement ID is found.
// Returns a *NotFoundError when no entities are found.
func (eq *EntitlementQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = eq.Limit(2).IDs(setContextOp(ctx, eq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{entitlement.Label}
	default:
		err = &NotSingularError{entitlement.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (eq *EntitlementQuery) OnlyIDX(ctx context.Context) string {
	id, err := eq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Entitlements.
func (eq *EntitlementQuery) All(ctx context.Context) ([]*Entitlement, error) {
	ctx = setContextOp(ctx, eq.ctx, ent.OpQueryAll)
	if err := eq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Entitlement, *EntitlementQuery]()
	return withInterceptors[[]*Entitlement](ctx, eq, qr, eq.inters)
}

// AllX is like All, but panics if an error occurs.
func (eq *EntitlementQuery) AllX(ctx context.Context) []*Entitlement {
	nodes, err := eq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Entitlement IDs.
func (eq *EntitlementQuery) IDs(ctx context.Context) (ids []string, err error) {
	if eq.ctx.Unique == nil && eq.path != nil {
		eq.Unique(true)
	}
	ctx = setContextOp(ctx, eq.ctx, ent.OpQueryIDs)
	if err = eq.Select(entitlement.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (eq *EntitlementQuery) IDsX(ctx context.Context) []string {
	ids, err := eq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (eq *EntitlementQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, eq.ctx, ent.OpQueryCount)
	if err := eq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, eq, querierCount[*EntitlementQuery](), eq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (eq *EntitlementQuery) CountX(ctx context.Context) int {
	count, err := eq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (eq *EntitlementQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, eq.ctx, ent.OpQueryExist)
	switch _, err := eq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (eq *EntitlementQuery) ExistX(ctx context.Context) bool {
	exist, err := eq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the EntitlementQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (eq *EntitlementQuery) Clone() *EntitlementQuery {
	if eq == nil {
		return nil
	}
	return &EntitlementQuery{
		config:                     eq.config,
		ctx:                        eq.ctx.Clone(),
		order:                      append([]entitlement.OrderOption{}, eq.order...),
		inters:                     append([]Interceptor{}, eq.inters...),
		predicates:                 append([]predicate.Entitlement{}, eq.predicates...),
		withPermissionHistories:    eq.withPermissionHistories.Clone(),
		withEntitlementAssignments: eq.withEntitlementAssignments.Clone(),
		withAction:                 eq.withAction.Clone(),
		withResource:               eq.withResource.Clone(),
		// clone intermediate query.
		sql:  eq.sql.Clone(),
		path: eq.path,
	}
}

// WithPermissionHistories tells the query-builder to eager-load the nodes that are connected to
// the "permission_histories" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EntitlementQuery) WithPermissionHistories(opts ...func(*PermissionHistoryQuery)) *EntitlementQuery {
	query := (&PermissionHistoryClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withPermissionHistories = query
	return eq
}

// WithEntitlementAssignments tells the query-builder to eager-load the nodes that are connected to
// the "entitlement_assignments" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EntitlementQuery) WithEntitlementAssignments(opts ...func(*EntitlementAssignmentQuery)) *EntitlementQuery {
	query := (&EntitlementAssignmentClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withEntitlementAssignments = query
	return eq
}

// WithAction tells the query-builder to eager-load the nodes that are connected to
// the "action" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EntitlementQuery) WithAction(opts ...func(*ActionQuery)) *EntitlementQuery {
	query := (&ActionClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withAction = query
	return eq
}

// WithResource tells the query-builder to eager-load the nodes that are connected to
// the "resource" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EntitlementQuery) WithResource(opts ...func(*ResourceQuery)) *EntitlementQuery {
	query := (&ResourceClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withResource = query
	return eq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ActionID string `json:"action_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Entitlement.Query().
//		GroupBy(entitlement.FieldActionID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (eq *EntitlementQuery) GroupBy(field string, fields ...string) *EntitlementGroupBy {
	eq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &EntitlementGroupBy{build: eq}
	grbuild.flds = &eq.ctx.Fields
	grbuild.label = entitlement.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ActionID string `json:"action_id,omitempty"`
//	}
//
//	client.Entitlement.Query().
//		Select(entitlement.FieldActionID).
//		Scan(ctx, &v)
func (eq *EntitlementQuery) Select(fields ...string) *EntitlementSelect {
	eq.ctx.Fields = append(eq.ctx.Fields, fields...)
	sbuild := &EntitlementSelect{EntitlementQuery: eq}
	sbuild.label = entitlement.Label
	sbuild.flds, sbuild.scan = &eq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a EntitlementSelect configured with the given aggregations.
func (eq *EntitlementQuery) Aggregate(fns ...AggregateFunc) *EntitlementSelect {
	return eq.Select().Aggregate(fns...)
}

func (eq *EntitlementQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range eq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, eq); err != nil {
				return err
			}
		}
	}
	for _, f := range eq.ctx.Fields {
		if !entitlement.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if eq.path != nil {
		prev, err := eq.path(ctx)
		if err != nil {
			return err
		}
		eq.sql = prev
	}
	return nil
}

func (eq *EntitlementQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Entitlement, error) {
	var (
		nodes       = []*Entitlement{}
		_spec       = eq.querySpec()
		loadedTypes = [4]bool{
			eq.withPermissionHistories != nil,
			eq.withEntitlementAssignments != nil,
			eq.withAction != nil,
			eq.withResource != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Entitlement).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Entitlement{config: eq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, eq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := eq.withPermissionHistories; query != nil {
		if err := eq.loadPermissionHistories(ctx, query, nodes,
			func(n *Entitlement) { n.Edges.PermissionHistories = []*PermissionHistory{} },
			func(n *Entitlement, e *PermissionHistory) {
				n.Edges.PermissionHistories = append(n.Edges.PermissionHistories, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := eq.withEntitlementAssignments; query != nil {
		if err := eq.loadEntitlementAssignments(ctx, query, nodes,
			func(n *Entitlement) { n.Edges.EntitlementAssignments = []*EntitlementAssignment{} },
			func(n *Entitlement, e *EntitlementAssignment) {
				n.Edges.EntitlementAssignments = append(n.Edges.EntitlementAssignments, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := eq.withAction; query != nil {
		if err := eq.loadAction(ctx, query, nodes, nil,
			func(n *Entitlement, e *Action) { n.Edges.Action = e }); err != nil {
			return nil, err
		}
	}
	if query := eq.withResource; query != nil {
		if err := eq.loadResource(ctx, query, nodes, nil,
			func(n *Entitlement, e *Resource) { n.Edges.Resource = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (eq *EntitlementQuery) loadPermissionHistories(ctx context.Context, query *PermissionHistoryQuery, nodes []*Entitlement, init func(*Entitlement), assign func(*Entitlement, *PermissionHistory)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Entitlement)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(permissionhistory.FieldEntitlementID)
	}
	query.Where(predicate.PermissionHistory(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(entitlement.PermissionHistoriesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.EntitlementID
		if fk == nil {
			return fmt.Errorf(`foreign-key "entitlement_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "entitlement_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *EntitlementQuery) loadEntitlementAssignments(ctx context.Context, query *EntitlementAssignmentQuery, nodes []*Entitlement, init func(*Entitlement), assign func(*Entitlement, *EntitlementAssignment)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Entitlement)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(entitlementassignment.FieldEntitlementID)
	}
	query.Where(predicate.EntitlementAssignment(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(entitlement.EntitlementAssignmentsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.EntitlementID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "entitlement_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *EntitlementQuery) loadAction(ctx context.Context, query *ActionQuery, nodes []*Entitlement, init func(*Entitlement), assign func(*Entitlement, *Action)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Entitlement)
	for i := range nodes {
		if nodes[i].ActionID == nil {
			continue
		}
		fk := *nodes[i].ActionID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(action.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "action_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (eq *EntitlementQuery) loadResource(ctx context.Context, query *ResourceQuery, nodes []*Entitlement, init func(*Entitlement), assign func(*Entitlement, *Resource)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Entitlement)
	for i := range nodes {
		if nodes[i].ResourceID == nil {
			continue
		}
		fk := *nodes[i].ResourceID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(resource.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "resource_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (eq *EntitlementQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := eq.querySpec()
	_spec.Node.Columns = eq.ctx.Fields
	if len(eq.ctx.Fields) > 0 {
		_spec.Unique = eq.ctx.Unique != nil && *eq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, eq.driver, _spec)
}

func (eq *EntitlementQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(entitlement.Table, entitlement.Columns, sqlgraph.NewFieldSpec(entitlement.FieldID, field.TypeString))
	_spec.From = eq.sql
	if unique := eq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if eq.path != nil {
		_spec.Unique = true
	}
	if fields := eq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, entitlement.FieldID)
		for i := range fields {
			if fields[i] != entitlement.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if eq.withAction != nil {
			_spec.Node.AddColumnOnce(entitlement.FieldActionID)
		}
		if eq.withResource != nil {
			_spec.Node.AddColumnOnce(entitlement.FieldResourceID)
		}
	}
	if ps := eq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := eq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := eq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := eq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (eq *EntitlementQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(eq.driver.Dialect())
	t1 := builder.Table(entitlement.Table)
	columns := eq.ctx.Fields
	if len(columns) == 0 {
		columns = entitlement.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if eq.sql != nil {
		selector = eq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if eq.ctx.Unique != nil && *eq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range eq.predicates {
		p(selector)
	}
	for _, p := range eq.order {
		p(selector)
	}
	if offset := eq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := eq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// EntitlementGroupBy is the group-by builder for Entitlement entities.
type EntitlementGroupBy struct {
	selector
	build *EntitlementQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (egb *EntitlementGroupBy) Aggregate(fns ...AggregateFunc) *EntitlementGroupBy {
	egb.fns = append(egb.fns, fns...)
	return egb
}

// Scan applies the selector query and scans the result into the given value.
func (egb *EntitlementGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, egb.build.ctx, ent.OpQueryGroupBy)
	if err := egb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EntitlementQuery, *EntitlementGroupBy](ctx, egb.build, egb, egb.build.inters, v)
}

func (egb *EntitlementGroupBy) sqlScan(ctx context.Context, root *EntitlementQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(egb.fns))
	for _, fn := range egb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*egb.flds)+len(egb.fns))
		for _, f := range *egb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*egb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := egb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// EntitlementSelect is the builder for selecting fields of Entitlement entities.
type EntitlementSelect struct {
	*EntitlementQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (es *EntitlementSelect) Aggregate(fns ...AggregateFunc) *EntitlementSelect {
	es.fns = append(es.fns, fns...)
	return es
}

// Scan applies the selector query and scans the result into the given value.
func (es *EntitlementSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, es.ctx, ent.OpQuerySelect)
	if err := es.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EntitlementQuery, *EntitlementSelect](ctx, es.EntitlementQuery, es, es.inters, v)
}

func (es *EntitlementSelect) sqlScan(ctx context.Context, root *EntitlementQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(es.fns))
	for _, fn := range es.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*es.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := es.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
