// Code generated by ent, DO NOT EDIT.

package roleuser

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.RoleUser {
	return predicate.RoleUser(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.RoleUser {
	return predicate.RoleUser(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.RoleUser {
	return predicate.RoleUser(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.RoleUser {
	return predicate.RoleUser(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.RoleUser {
	return predicate.RoleUser(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.RoleUser {
	return predicate.RoleUser(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.RoleUser {
	return predicate.RoleUser(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.RoleUser {
	return predicate.RoleUser(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.RoleUser {
	return predicate.RoleUser(sql.FieldLTE(FieldID, id))
}

// ApproverID applies equality check predicate on the "approver_id" field. It's identical to ApproverIDEQ.
func ApproverID(v string) predicate.RoleUser {
	return predicate.RoleUser(sql.FieldEQ(FieldApproverID, v))
}

// ReceiverRef applies equality check predicate on the "receiver_ref" field. It's identical to ReceiverRefEQ.
func ReceiverRef(v string) predicate.RoleUser {
	return predicate.RoleUser(sql.FieldEQ(FieldReceiverRef, v))
}

// RoleID applies equality check predicate on the "role_id" field. It's identical to RoleIDEQ.
func RoleID(v string) predicate.RoleUser {
	return predicate.RoleUser(sql.FieldEQ(FieldRoleID, v))
}

// ApproverIDEQ applies the EQ predicate on the "approver_id" field.
func ApproverIDEQ(v string) predicate.RoleUser {
	return predicate.RoleUser(sql.FieldEQ(FieldApproverID, v))
}

// ApproverIDNEQ applies the NEQ predicate on the "approver_id" field.
func ApproverIDNEQ(v string) predicate.RoleUser {
	return predicate.RoleUser(sql.FieldNEQ(FieldApproverID, v))
}

// ApproverIDIn applies the In predicate on the "approver_id" field.
func ApproverIDIn(vs ...string) predicate.RoleUser {
	return predicate.RoleUser(sql.FieldIn(FieldApproverID, vs...))
}

// ApproverIDNotIn applies the NotIn predicate on the "approver_id" field.
func ApproverIDNotIn(vs ...string) predicate.RoleUser {
	return predicate.RoleUser(sql.FieldNotIn(FieldApproverID, vs...))
}

// ApproverIDGT applies the GT predicate on the "approver_id" field.
func ApproverIDGT(v string) predicate.RoleUser {
	return predicate.RoleUser(sql.FieldGT(FieldApproverID, v))
}

// ApproverIDGTE applies the GTE predicate on the "approver_id" field.
func ApproverIDGTE(v string) predicate.RoleUser {
	return predicate.RoleUser(sql.FieldGTE(FieldApproverID, v))
}

// ApproverIDLT applies the LT predicate on the "approver_id" field.
func ApproverIDLT(v string) predicate.RoleUser {
	return predicate.RoleUser(sql.FieldLT(FieldApproverID, v))
}

// ApproverIDLTE applies the LTE predicate on the "approver_id" field.
func ApproverIDLTE(v string) predicate.RoleUser {
	return predicate.RoleUser(sql.FieldLTE(FieldApproverID, v))
}

// ApproverIDContains applies the Contains predicate on the "approver_id" field.
func ApproverIDContains(v string) predicate.RoleUser {
	return predicate.RoleUser(sql.FieldContains(FieldApproverID, v))
}

// ApproverIDHasPrefix applies the HasPrefix predicate on the "approver_id" field.
func ApproverIDHasPrefix(v string) predicate.RoleUser {
	return predicate.RoleUser(sql.FieldHasPrefix(FieldApproverID, v))
}

// ApproverIDHasSuffix applies the HasSuffix predicate on the "approver_id" field.
func ApproverIDHasSuffix(v string) predicate.RoleUser {
	return predicate.RoleUser(sql.FieldHasSuffix(FieldApproverID, v))
}

// ApproverIDEqualFold applies the EqualFold predicate on the "approver_id" field.
func ApproverIDEqualFold(v string) predicate.RoleUser {
	return predicate.RoleUser(sql.FieldEqualFold(FieldApproverID, v))
}

// ApproverIDContainsFold applies the ContainsFold predicate on the "approver_id" field.
func ApproverIDContainsFold(v string) predicate.RoleUser {
	return predicate.RoleUser(sql.FieldContainsFold(FieldApproverID, v))
}

// ReceiverRefEQ applies the EQ predicate on the "receiver_ref" field.
func ReceiverRefEQ(v string) predicate.RoleUser {
	return predicate.RoleUser(sql.FieldEQ(FieldReceiverRef, v))
}

// ReceiverRefNEQ applies the NEQ predicate on the "receiver_ref" field.
func ReceiverRefNEQ(v string) predicate.RoleUser {
	return predicate.RoleUser(sql.FieldNEQ(FieldReceiverRef, v))
}

// ReceiverRefIn applies the In predicate on the "receiver_ref" field.
func ReceiverRefIn(vs ...string) predicate.RoleUser {
	return predicate.RoleUser(sql.FieldIn(FieldReceiverRef, vs...))
}

// ReceiverRefNotIn applies the NotIn predicate on the "receiver_ref" field.
func ReceiverRefNotIn(vs ...string) predicate.RoleUser {
	return predicate.RoleUser(sql.FieldNotIn(FieldReceiverRef, vs...))
}

// ReceiverRefGT applies the GT predicate on the "receiver_ref" field.
func ReceiverRefGT(v string) predicate.RoleUser {
	return predicate.RoleUser(sql.FieldGT(FieldReceiverRef, v))
}

// ReceiverRefGTE applies the GTE predicate on the "receiver_ref" field.
func ReceiverRefGTE(v string) predicate.RoleUser {
	return predicate.RoleUser(sql.FieldGTE(FieldReceiverRef, v))
}

// ReceiverRefLT applies the LT predicate on the "receiver_ref" field.
func ReceiverRefLT(v string) predicate.RoleUser {
	return predicate.RoleUser(sql.FieldLT(FieldReceiverRef, v))
}

// ReceiverRefLTE applies the LTE predicate on the "receiver_ref" field.
func ReceiverRefLTE(v string) predicate.RoleUser {
	return predicate.RoleUser(sql.FieldLTE(FieldReceiverRef, v))
}

// ReceiverRefContains applies the Contains predicate on the "receiver_ref" field.
func ReceiverRefContains(v string) predicate.RoleUser {
	return predicate.RoleUser(sql.FieldContains(FieldReceiverRef, v))
}

// ReceiverRefHasPrefix applies the HasPrefix predicate on the "receiver_ref" field.
func ReceiverRefHasPrefix(v string) predicate.RoleUser {
	return predicate.RoleUser(sql.FieldHasPrefix(FieldReceiverRef, v))
}

// ReceiverRefHasSuffix applies the HasSuffix predicate on the "receiver_ref" field.
func ReceiverRefHasSuffix(v string) predicate.RoleUser {
	return predicate.RoleUser(sql.FieldHasSuffix(FieldReceiverRef, v))
}

// ReceiverRefEqualFold applies the EqualFold predicate on the "receiver_ref" field.
func ReceiverRefEqualFold(v string) predicate.RoleUser {
	return predicate.RoleUser(sql.FieldEqualFold(FieldReceiverRef, v))
}

// ReceiverRefContainsFold applies the ContainsFold predicate on the "receiver_ref" field.
func ReceiverRefContainsFold(v string) predicate.RoleUser {
	return predicate.RoleUser(sql.FieldContainsFold(FieldReceiverRef, v))
}

// ReceiverTypeEQ applies the EQ predicate on the "receiver_type" field.
func ReceiverTypeEQ(v ReceiverType) predicate.RoleUser {
	return predicate.RoleUser(sql.FieldEQ(FieldReceiverType, v))
}

// ReceiverTypeNEQ applies the NEQ predicate on the "receiver_type" field.
func ReceiverTypeNEQ(v ReceiverType) predicate.RoleUser {
	return predicate.RoleUser(sql.FieldNEQ(FieldReceiverType, v))
}

// ReceiverTypeIn applies the In predicate on the "receiver_type" field.
func ReceiverTypeIn(vs ...ReceiverType) predicate.RoleUser {
	return predicate.RoleUser(sql.FieldIn(FieldReceiverType, vs...))
}

// ReceiverTypeNotIn applies the NotIn predicate on the "receiver_type" field.
func ReceiverTypeNotIn(vs ...ReceiverType) predicate.RoleUser {
	return predicate.RoleUser(sql.FieldNotIn(FieldReceiverType, vs...))
}

// RoleIDEQ applies the EQ predicate on the "role_id" field.
func RoleIDEQ(v string) predicate.RoleUser {
	return predicate.RoleUser(sql.FieldEQ(FieldRoleID, v))
}

// RoleIDNEQ applies the NEQ predicate on the "role_id" field.
func RoleIDNEQ(v string) predicate.RoleUser {
	return predicate.RoleUser(sql.FieldNEQ(FieldRoleID, v))
}

// RoleIDIn applies the In predicate on the "role_id" field.
func RoleIDIn(vs ...string) predicate.RoleUser {
	return predicate.RoleUser(sql.FieldIn(FieldRoleID, vs...))
}

// RoleIDNotIn applies the NotIn predicate on the "role_id" field.
func RoleIDNotIn(vs ...string) predicate.RoleUser {
	return predicate.RoleUser(sql.FieldNotIn(FieldRoleID, vs...))
}

// RoleIDGT applies the GT predicate on the "role_id" field.
func RoleIDGT(v string) predicate.RoleUser {
	return predicate.RoleUser(sql.FieldGT(FieldRoleID, v))
}

// RoleIDGTE applies the GTE predicate on the "role_id" field.
func RoleIDGTE(v string) predicate.RoleUser {
	return predicate.RoleUser(sql.FieldGTE(FieldRoleID, v))
}

// RoleIDLT applies the LT predicate on the "role_id" field.
func RoleIDLT(v string) predicate.RoleUser {
	return predicate.RoleUser(sql.FieldLT(FieldRoleID, v))
}

// RoleIDLTE applies the LTE predicate on the "role_id" field.
func RoleIDLTE(v string) predicate.RoleUser {
	return predicate.RoleUser(sql.FieldLTE(FieldRoleID, v))
}

// RoleIDContains applies the Contains predicate on the "role_id" field.
func RoleIDContains(v string) predicate.RoleUser {
	return predicate.RoleUser(sql.FieldContains(FieldRoleID, v))
}

// RoleIDHasPrefix applies the HasPrefix predicate on the "role_id" field.
func RoleIDHasPrefix(v string) predicate.RoleUser {
	return predicate.RoleUser(sql.FieldHasPrefix(FieldRoleID, v))
}

// RoleIDHasSuffix applies the HasSuffix predicate on the "role_id" field.
func RoleIDHasSuffix(v string) predicate.RoleUser {
	return predicate.RoleUser(sql.FieldHasSuffix(FieldRoleID, v))
}

// RoleIDEqualFold applies the EqualFold predicate on the "role_id" field.
func RoleIDEqualFold(v string) predicate.RoleUser {
	return predicate.RoleUser(sql.FieldEqualFold(FieldRoleID, v))
}

// RoleIDContainsFold applies the ContainsFold predicate on the "role_id" field.
func RoleIDContainsFold(v string) predicate.RoleUser {
	return predicate.RoleUser(sql.FieldContainsFold(FieldRoleID, v))
}

// HasRole applies the HasEdge predicate on the "role" edge.
func HasRole() predicate.RoleUser {
	return predicate.RoleUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, RoleTable, RoleColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRoleWith applies the HasEdge predicate on the "role" edge with a given conditions (other predicates).
func HasRoleWith(preds ...predicate.Role) predicate.RoleUser {
	return predicate.RoleUser(func(s *sql.Selector) {
		step := newRoleStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.RoleUser) predicate.RoleUser {
	return predicate.RoleUser(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.RoleUser) predicate.RoleUser {
	return predicate.RoleUser(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.RoleUser) predicate.RoleUser {
	return predicate.RoleUser(sql.NotPredicates(p))
}
