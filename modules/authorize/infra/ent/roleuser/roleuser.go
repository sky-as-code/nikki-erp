// Code generated by ent, DO NOT EDIT.

package roleuser

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the roleuser type in the database.
	Label = "role_user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldApproverID holds the string denoting the approver_id field in the database.
	FieldApproverID = "approver_id"
	// FieldReceiverRef holds the string denoting the receiver_ref field in the database.
	FieldReceiverRef = "receiver_ref"
	// FieldReceiverType holds the string denoting the receiver_type field in the database.
	FieldReceiverType = "receiver_type"
	// FieldRoleID holds the string denoting the role_id field in the database.
	FieldRoleID = "role_id"
	// EdgeRole holds the string denoting the role edge name in mutations.
	EdgeRole = "role"
	// Table holds the table name of the roleuser in the database.
	Table = "authz_role_user"
	// RoleTable is the table that holds the role relation/edge.
	RoleTable = "authz_role_user"
	// RoleInverseTable is the table name for the Role entity.
	// It exists in this package in order to avoid circular dependency with the "role" package.
	RoleInverseTable = "authz_roles"
	// RoleColumn is the table column denoting the role relation/edge.
	RoleColumn = "role_id"
)

// Columns holds all SQL columns for roleuser fields.
var Columns = []string{
	FieldID,
	FieldApproverID,
	FieldReceiverRef,
	FieldReceiverType,
	FieldRoleID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// ReceiverType defines the type for the "receiver_type" enum field.
type ReceiverType string

// ReceiverType values.
const (
	ReceiverTypeUser  ReceiverType = "user"
	ReceiverTypeGroup ReceiverType = "group"
)

func (rt ReceiverType) String() string {
	return string(rt)
}

// ReceiverTypeValidator is a validator for the "receiver_type" field enum values. It is called by the builders before save.
func ReceiverTypeValidator(rt ReceiverType) error {
	switch rt {
	case ReceiverTypeUser, ReceiverTypeGroup:
		return nil
	default:
		return fmt.Errorf("roleuser: invalid enum value for receiver_type field: %q", rt)
	}
}

// OrderOption defines the ordering options for the RoleUser queries.
type OrderOption = func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByApproverID orders the results by the approver_id field.
func ByApproverID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApproverID, opts...).ToFunc()
}

// ByReceiverRef orders the results by the receiver_ref field.
func ByReceiverRef(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReceiverRef, opts...).ToFunc()
}

// ByReceiverType orders the results by the receiver_type field.
func ByReceiverType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReceiverType, opts...).ToFunc()
}

// ByRoleID orders the results by the role_id field.
func ByRoleID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRoleID, opts...).ToFunc()
}

// ByRoleField orders the results by role field.
func ByRoleField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRoleStep(), sql.OrderByField(field, opts...))
	}
}

// Added by NikkieERP scripts/ent_templates/dialect/sql/meta.tmpl
func NewRoleStepNikki() *sqlgraph.Step {
	return newRoleStep()
}

func newRoleStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RoleInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, RoleTable, RoleColumn),
	)
}
