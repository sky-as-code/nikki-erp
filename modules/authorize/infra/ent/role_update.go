// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/grantrequest"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/permissionhistory"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/predicate"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/revokerequest"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/role"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/rolesuite"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/roleuser"
)

// RoleUpdate is the builder for updating Role entities.
type RoleUpdate struct {
	config
	hooks    []Hook
	mutation *RoleMutation
}

// Where appends a list predicates to the RoleUpdate builder.
func (ru *RoleUpdate) Where(ps ...predicate.Role) *RoleUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetName sets the "name" field.
func (ru *RoleUpdate) SetName(s string) *RoleUpdate {
	ru.mutation.SetName(s)
	return ru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ru *RoleUpdate) SetNillableName(s *string) *RoleUpdate {
	if s != nil {
		ru.SetName(*s)
	}
	return ru
}

// SetDescription sets the "description" field.
func (ru *RoleUpdate) SetDescription(s string) *RoleUpdate {
	ru.mutation.SetDescription(s)
	return ru
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ru *RoleUpdate) SetNillableDescription(s *string) *RoleUpdate {
	if s != nil {
		ru.SetDescription(*s)
	}
	return ru
}

// ClearDescription clears the value of the "description" field.
func (ru *RoleUpdate) ClearDescription() *RoleUpdate {
	ru.mutation.ClearDescription()
	return ru
}

// SetEtag sets the "etag" field.
func (ru *RoleUpdate) SetEtag(s string) *RoleUpdate {
	ru.mutation.SetEtag(s)
	return ru
}

// SetNillableEtag sets the "etag" field if the given value is not nil.
func (ru *RoleUpdate) SetNillableEtag(s *string) *RoleUpdate {
	if s != nil {
		ru.SetEtag(*s)
	}
	return ru
}

// SetOwnerType sets the "owner_type" field.
func (ru *RoleUpdate) SetOwnerType(rt role.OwnerType) *RoleUpdate {
	ru.mutation.SetOwnerType(rt)
	return ru
}

// SetNillableOwnerType sets the "owner_type" field if the given value is not nil.
func (ru *RoleUpdate) SetNillableOwnerType(rt *role.OwnerType) *RoleUpdate {
	if rt != nil {
		ru.SetOwnerType(*rt)
	}
	return ru
}

// SetOwnerRef sets the "owner_ref" field.
func (ru *RoleUpdate) SetOwnerRef(s string) *RoleUpdate {
	ru.mutation.SetOwnerRef(s)
	return ru
}

// SetNillableOwnerRef sets the "owner_ref" field if the given value is not nil.
func (ru *RoleUpdate) SetNillableOwnerRef(s *string) *RoleUpdate {
	if s != nil {
		ru.SetOwnerRef(*s)
	}
	return ru
}

// SetIsRequestable sets the "is_requestable" field.
func (ru *RoleUpdate) SetIsRequestable(b bool) *RoleUpdate {
	ru.mutation.SetIsRequestable(b)
	return ru
}

// SetNillableIsRequestable sets the "is_requestable" field if the given value is not nil.
func (ru *RoleUpdate) SetNillableIsRequestable(b *bool) *RoleUpdate {
	if b != nil {
		ru.SetIsRequestable(*b)
	}
	return ru
}

// SetIsRequiredAttachment sets the "is_required_attachment" field.
func (ru *RoleUpdate) SetIsRequiredAttachment(b bool) *RoleUpdate {
	ru.mutation.SetIsRequiredAttachment(b)
	return ru
}

// SetNillableIsRequiredAttachment sets the "is_required_attachment" field if the given value is not nil.
func (ru *RoleUpdate) SetNillableIsRequiredAttachment(b *bool) *RoleUpdate {
	if b != nil {
		ru.SetIsRequiredAttachment(*b)
	}
	return ru
}

// SetIsRequiredComment sets the "is_required_comment" field.
func (ru *RoleUpdate) SetIsRequiredComment(b bool) *RoleUpdate {
	ru.mutation.SetIsRequiredComment(b)
	return ru
}

// SetNillableIsRequiredComment sets the "is_required_comment" field if the given value is not nil.
func (ru *RoleUpdate) SetNillableIsRequiredComment(b *bool) *RoleUpdate {
	if b != nil {
		ru.SetIsRequiredComment(*b)
	}
	return ru
}

// AddRoleSuiteIDs adds the "role_suites" edge to the RoleSuite entity by IDs.
func (ru *RoleUpdate) AddRoleSuiteIDs(ids ...string) *RoleUpdate {
	ru.mutation.AddRoleSuiteIDs(ids...)
	return ru
}

// AddRoleSuites adds the "role_suites" edges to the RoleSuite entity.
func (ru *RoleUpdate) AddRoleSuites(r ...*RoleSuite) *RoleUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.AddRoleSuiteIDs(ids...)
}

// AddRoleUserIDs adds the "role_users" edge to the RoleUser entity by IDs.
func (ru *RoleUpdate) AddRoleUserIDs(ids ...int) *RoleUpdate {
	ru.mutation.AddRoleUserIDs(ids...)
	return ru
}

// AddRoleUsers adds the "role_users" edges to the RoleUser entity.
func (ru *RoleUpdate) AddRoleUsers(r ...*RoleUser) *RoleUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.AddRoleUserIDs(ids...)
}

// AddGrantRequestIDs adds the "grant_requests" edge to the GrantRequest entity by IDs.
func (ru *RoleUpdate) AddGrantRequestIDs(ids ...string) *RoleUpdate {
	ru.mutation.AddGrantRequestIDs(ids...)
	return ru
}

// AddGrantRequests adds the "grant_requests" edges to the GrantRequest entity.
func (ru *RoleUpdate) AddGrantRequests(g ...*GrantRequest) *RoleUpdate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ru.AddGrantRequestIDs(ids...)
}

// AddRevokeRequestIDs adds the "revoke_requests" edge to the RevokeRequest entity by IDs.
func (ru *RoleUpdate) AddRevokeRequestIDs(ids ...string) *RoleUpdate {
	ru.mutation.AddRevokeRequestIDs(ids...)
	return ru
}

// AddRevokeRequests adds the "revoke_requests" edges to the RevokeRequest entity.
func (ru *RoleUpdate) AddRevokeRequests(r ...*RevokeRequest) *RoleUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.AddRevokeRequestIDs(ids...)
}

// AddPermissionHistoryIDs adds the "permission_histories" edge to the PermissionHistory entity by IDs.
func (ru *RoleUpdate) AddPermissionHistoryIDs(ids ...string) *RoleUpdate {
	ru.mutation.AddPermissionHistoryIDs(ids...)
	return ru
}

// AddPermissionHistories adds the "permission_histories" edges to the PermissionHistory entity.
func (ru *RoleUpdate) AddPermissionHistories(p ...*PermissionHistory) *RoleUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ru.AddPermissionHistoryIDs(ids...)
}

// Mutation returns the RoleMutation object of the builder.
func (ru *RoleUpdate) Mutation() *RoleMutation {
	return ru.mutation
}

// ClearRoleSuites clears all "role_suites" edges to the RoleSuite entity.
func (ru *RoleUpdate) ClearRoleSuites() *RoleUpdate {
	ru.mutation.ClearRoleSuites()
	return ru
}

// RemoveRoleSuiteIDs removes the "role_suites" edge to RoleSuite entities by IDs.
func (ru *RoleUpdate) RemoveRoleSuiteIDs(ids ...string) *RoleUpdate {
	ru.mutation.RemoveRoleSuiteIDs(ids...)
	return ru
}

// RemoveRoleSuites removes "role_suites" edges to RoleSuite entities.
func (ru *RoleUpdate) RemoveRoleSuites(r ...*RoleSuite) *RoleUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.RemoveRoleSuiteIDs(ids...)
}

// ClearRoleUsers clears all "role_users" edges to the RoleUser entity.
func (ru *RoleUpdate) ClearRoleUsers() *RoleUpdate {
	ru.mutation.ClearRoleUsers()
	return ru
}

// RemoveRoleUserIDs removes the "role_users" edge to RoleUser entities by IDs.
func (ru *RoleUpdate) RemoveRoleUserIDs(ids ...int) *RoleUpdate {
	ru.mutation.RemoveRoleUserIDs(ids...)
	return ru
}

// RemoveRoleUsers removes "role_users" edges to RoleUser entities.
func (ru *RoleUpdate) RemoveRoleUsers(r ...*RoleUser) *RoleUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.RemoveRoleUserIDs(ids...)
}

// ClearGrantRequests clears all "grant_requests" edges to the GrantRequest entity.
func (ru *RoleUpdate) ClearGrantRequests() *RoleUpdate {
	ru.mutation.ClearGrantRequests()
	return ru
}

// RemoveGrantRequestIDs removes the "grant_requests" edge to GrantRequest entities by IDs.
func (ru *RoleUpdate) RemoveGrantRequestIDs(ids ...string) *RoleUpdate {
	ru.mutation.RemoveGrantRequestIDs(ids...)
	return ru
}

// RemoveGrantRequests removes "grant_requests" edges to GrantRequest entities.
func (ru *RoleUpdate) RemoveGrantRequests(g ...*GrantRequest) *RoleUpdate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ru.RemoveGrantRequestIDs(ids...)
}

// ClearRevokeRequests clears all "revoke_requests" edges to the RevokeRequest entity.
func (ru *RoleUpdate) ClearRevokeRequests() *RoleUpdate {
	ru.mutation.ClearRevokeRequests()
	return ru
}

// RemoveRevokeRequestIDs removes the "revoke_requests" edge to RevokeRequest entities by IDs.
func (ru *RoleUpdate) RemoveRevokeRequestIDs(ids ...string) *RoleUpdate {
	ru.mutation.RemoveRevokeRequestIDs(ids...)
	return ru
}

// RemoveRevokeRequests removes "revoke_requests" edges to RevokeRequest entities.
func (ru *RoleUpdate) RemoveRevokeRequests(r ...*RevokeRequest) *RoleUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.RemoveRevokeRequestIDs(ids...)
}

// ClearPermissionHistories clears all "permission_histories" edges to the PermissionHistory entity.
func (ru *RoleUpdate) ClearPermissionHistories() *RoleUpdate {
	ru.mutation.ClearPermissionHistories()
	return ru
}

// RemovePermissionHistoryIDs removes the "permission_histories" edge to PermissionHistory entities by IDs.
func (ru *RoleUpdate) RemovePermissionHistoryIDs(ids ...string) *RoleUpdate {
	ru.mutation.RemovePermissionHistoryIDs(ids...)
	return ru
}

// RemovePermissionHistories removes "permission_histories" edges to PermissionHistory entities.
func (ru *RoleUpdate) RemovePermissionHistories(p ...*PermissionHistory) *RoleUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ru.RemovePermissionHistoryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RoleUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RoleUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RoleUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RoleUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *RoleUpdate) check() error {
	if v, ok := ru.mutation.OwnerType(); ok {
		if err := role.OwnerTypeValidator(v); err != nil {
			return &ValidationError{Name: "owner_type", err: fmt.Errorf(`ent: validator failed for field "Role.owner_type": %w`, err)}
		}
	}
	return nil
}

func (ru *RoleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(role.Table, role.Columns, sqlgraph.NewFieldSpec(role.FieldID, field.TypeString))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Name(); ok {
		_spec.SetField(role.FieldName, field.TypeString, value)
	}
	if value, ok := ru.mutation.Description(); ok {
		_spec.SetField(role.FieldDescription, field.TypeString, value)
	}
	if ru.mutation.DescriptionCleared() {
		_spec.ClearField(role.FieldDescription, field.TypeString)
	}
	if value, ok := ru.mutation.Etag(); ok {
		_spec.SetField(role.FieldEtag, field.TypeString, value)
	}
	if value, ok := ru.mutation.OwnerType(); ok {
		_spec.SetField(role.FieldOwnerType, field.TypeEnum, value)
	}
	if value, ok := ru.mutation.OwnerRef(); ok {
		_spec.SetField(role.FieldOwnerRef, field.TypeString, value)
	}
	if value, ok := ru.mutation.IsRequestable(); ok {
		_spec.SetField(role.FieldIsRequestable, field.TypeBool, value)
	}
	if value, ok := ru.mutation.IsRequiredAttachment(); ok {
		_spec.SetField(role.FieldIsRequiredAttachment, field.TypeBool, value)
	}
	if value, ok := ru.mutation.IsRequiredComment(); ok {
		_spec.SetField(role.FieldIsRequiredComment, field.TypeBool, value)
	}
	if ru.mutation.RoleSuitesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   role.RoleSuitesTable,
			Columns: role.RoleSuitesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolesuite.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedRoleSuitesIDs(); len(nodes) > 0 && !ru.mutation.RoleSuitesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   role.RoleSuitesTable,
			Columns: role.RoleSuitesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolesuite.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RoleSuitesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   role.RoleSuitesTable,
			Columns: role.RoleSuitesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolesuite.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.RoleUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   role.RoleUsersTable,
			Columns: []string{role.RoleUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(roleuser.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedRoleUsersIDs(); len(nodes) > 0 && !ru.mutation.RoleUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   role.RoleUsersTable,
			Columns: []string{role.RoleUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(roleuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RoleUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   role.RoleUsersTable,
			Columns: []string{role.RoleUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(roleuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.GrantRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   role.GrantRequestsTable,
			Columns: []string{role.GrantRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grantrequest.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedGrantRequestsIDs(); len(nodes) > 0 && !ru.mutation.GrantRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   role.GrantRequestsTable,
			Columns: []string{role.GrantRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grantrequest.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.GrantRequestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   role.GrantRequestsTable,
			Columns: []string{role.GrantRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grantrequest.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.RevokeRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   role.RevokeRequestsTable,
			Columns: []string{role.RevokeRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(revokerequest.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedRevokeRequestsIDs(); len(nodes) > 0 && !ru.mutation.RevokeRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   role.RevokeRequestsTable,
			Columns: []string{role.RevokeRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(revokerequest.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RevokeRequestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   role.RevokeRequestsTable,
			Columns: []string{role.RevokeRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(revokerequest.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.PermissionHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   role.PermissionHistoriesTable,
			Columns: []string{role.PermissionHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permissionhistory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedPermissionHistoriesIDs(); len(nodes) > 0 && !ru.mutation.PermissionHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   role.PermissionHistoriesTable,
			Columns: []string{role.PermissionHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permissionhistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.PermissionHistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   role.PermissionHistoriesTable,
			Columns: []string{role.PermissionHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permissionhistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{role.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RoleUpdateOne is the builder for updating a single Role entity.
type RoleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RoleMutation
}

// SetName sets the "name" field.
func (ruo *RoleUpdateOne) SetName(s string) *RoleUpdateOne {
	ruo.mutation.SetName(s)
	return ruo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableName(s *string) *RoleUpdateOne {
	if s != nil {
		ruo.SetName(*s)
	}
	return ruo
}

// SetDescription sets the "description" field.
func (ruo *RoleUpdateOne) SetDescription(s string) *RoleUpdateOne {
	ruo.mutation.SetDescription(s)
	return ruo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableDescription(s *string) *RoleUpdateOne {
	if s != nil {
		ruo.SetDescription(*s)
	}
	return ruo
}

// ClearDescription clears the value of the "description" field.
func (ruo *RoleUpdateOne) ClearDescription() *RoleUpdateOne {
	ruo.mutation.ClearDescription()
	return ruo
}

// SetEtag sets the "etag" field.
func (ruo *RoleUpdateOne) SetEtag(s string) *RoleUpdateOne {
	ruo.mutation.SetEtag(s)
	return ruo
}

// SetNillableEtag sets the "etag" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableEtag(s *string) *RoleUpdateOne {
	if s != nil {
		ruo.SetEtag(*s)
	}
	return ruo
}

// SetOwnerType sets the "owner_type" field.
func (ruo *RoleUpdateOne) SetOwnerType(rt role.OwnerType) *RoleUpdateOne {
	ruo.mutation.SetOwnerType(rt)
	return ruo
}

// SetNillableOwnerType sets the "owner_type" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableOwnerType(rt *role.OwnerType) *RoleUpdateOne {
	if rt != nil {
		ruo.SetOwnerType(*rt)
	}
	return ruo
}

// SetOwnerRef sets the "owner_ref" field.
func (ruo *RoleUpdateOne) SetOwnerRef(s string) *RoleUpdateOne {
	ruo.mutation.SetOwnerRef(s)
	return ruo
}

// SetNillableOwnerRef sets the "owner_ref" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableOwnerRef(s *string) *RoleUpdateOne {
	if s != nil {
		ruo.SetOwnerRef(*s)
	}
	return ruo
}

// SetIsRequestable sets the "is_requestable" field.
func (ruo *RoleUpdateOne) SetIsRequestable(b bool) *RoleUpdateOne {
	ruo.mutation.SetIsRequestable(b)
	return ruo
}

// SetNillableIsRequestable sets the "is_requestable" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableIsRequestable(b *bool) *RoleUpdateOne {
	if b != nil {
		ruo.SetIsRequestable(*b)
	}
	return ruo
}

// SetIsRequiredAttachment sets the "is_required_attachment" field.
func (ruo *RoleUpdateOne) SetIsRequiredAttachment(b bool) *RoleUpdateOne {
	ruo.mutation.SetIsRequiredAttachment(b)
	return ruo
}

// SetNillableIsRequiredAttachment sets the "is_required_attachment" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableIsRequiredAttachment(b *bool) *RoleUpdateOne {
	if b != nil {
		ruo.SetIsRequiredAttachment(*b)
	}
	return ruo
}

// SetIsRequiredComment sets the "is_required_comment" field.
func (ruo *RoleUpdateOne) SetIsRequiredComment(b bool) *RoleUpdateOne {
	ruo.mutation.SetIsRequiredComment(b)
	return ruo
}

// SetNillableIsRequiredComment sets the "is_required_comment" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableIsRequiredComment(b *bool) *RoleUpdateOne {
	if b != nil {
		ruo.SetIsRequiredComment(*b)
	}
	return ruo
}

// AddRoleSuiteIDs adds the "role_suites" edge to the RoleSuite entity by IDs.
func (ruo *RoleUpdateOne) AddRoleSuiteIDs(ids ...string) *RoleUpdateOne {
	ruo.mutation.AddRoleSuiteIDs(ids...)
	return ruo
}

// AddRoleSuites adds the "role_suites" edges to the RoleSuite entity.
func (ruo *RoleUpdateOne) AddRoleSuites(r ...*RoleSuite) *RoleUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.AddRoleSuiteIDs(ids...)
}

// AddRoleUserIDs adds the "role_users" edge to the RoleUser entity by IDs.
func (ruo *RoleUpdateOne) AddRoleUserIDs(ids ...int) *RoleUpdateOne {
	ruo.mutation.AddRoleUserIDs(ids...)
	return ruo
}

// AddRoleUsers adds the "role_users" edges to the RoleUser entity.
func (ruo *RoleUpdateOne) AddRoleUsers(r ...*RoleUser) *RoleUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.AddRoleUserIDs(ids...)
}

// AddGrantRequestIDs adds the "grant_requests" edge to the GrantRequest entity by IDs.
func (ruo *RoleUpdateOne) AddGrantRequestIDs(ids ...string) *RoleUpdateOne {
	ruo.mutation.AddGrantRequestIDs(ids...)
	return ruo
}

// AddGrantRequests adds the "grant_requests" edges to the GrantRequest entity.
func (ruo *RoleUpdateOne) AddGrantRequests(g ...*GrantRequest) *RoleUpdateOne {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ruo.AddGrantRequestIDs(ids...)
}

// AddRevokeRequestIDs adds the "revoke_requests" edge to the RevokeRequest entity by IDs.
func (ruo *RoleUpdateOne) AddRevokeRequestIDs(ids ...string) *RoleUpdateOne {
	ruo.mutation.AddRevokeRequestIDs(ids...)
	return ruo
}

// AddRevokeRequests adds the "revoke_requests" edges to the RevokeRequest entity.
func (ruo *RoleUpdateOne) AddRevokeRequests(r ...*RevokeRequest) *RoleUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.AddRevokeRequestIDs(ids...)
}

// AddPermissionHistoryIDs adds the "permission_histories" edge to the PermissionHistory entity by IDs.
func (ruo *RoleUpdateOne) AddPermissionHistoryIDs(ids ...string) *RoleUpdateOne {
	ruo.mutation.AddPermissionHistoryIDs(ids...)
	return ruo
}

// AddPermissionHistories adds the "permission_histories" edges to the PermissionHistory entity.
func (ruo *RoleUpdateOne) AddPermissionHistories(p ...*PermissionHistory) *RoleUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ruo.AddPermissionHistoryIDs(ids...)
}

// Mutation returns the RoleMutation object of the builder.
func (ruo *RoleUpdateOne) Mutation() *RoleMutation {
	return ruo.mutation
}

// ClearRoleSuites clears all "role_suites" edges to the RoleSuite entity.
func (ruo *RoleUpdateOne) ClearRoleSuites() *RoleUpdateOne {
	ruo.mutation.ClearRoleSuites()
	return ruo
}

// RemoveRoleSuiteIDs removes the "role_suites" edge to RoleSuite entities by IDs.
func (ruo *RoleUpdateOne) RemoveRoleSuiteIDs(ids ...string) *RoleUpdateOne {
	ruo.mutation.RemoveRoleSuiteIDs(ids...)
	return ruo
}

// RemoveRoleSuites removes "role_suites" edges to RoleSuite entities.
func (ruo *RoleUpdateOne) RemoveRoleSuites(r ...*RoleSuite) *RoleUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.RemoveRoleSuiteIDs(ids...)
}

// ClearRoleUsers clears all "role_users" edges to the RoleUser entity.
func (ruo *RoleUpdateOne) ClearRoleUsers() *RoleUpdateOne {
	ruo.mutation.ClearRoleUsers()
	return ruo
}

// RemoveRoleUserIDs removes the "role_users" edge to RoleUser entities by IDs.
func (ruo *RoleUpdateOne) RemoveRoleUserIDs(ids ...int) *RoleUpdateOne {
	ruo.mutation.RemoveRoleUserIDs(ids...)
	return ruo
}

// RemoveRoleUsers removes "role_users" edges to RoleUser entities.
func (ruo *RoleUpdateOne) RemoveRoleUsers(r ...*RoleUser) *RoleUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.RemoveRoleUserIDs(ids...)
}

// ClearGrantRequests clears all "grant_requests" edges to the GrantRequest entity.
func (ruo *RoleUpdateOne) ClearGrantRequests() *RoleUpdateOne {
	ruo.mutation.ClearGrantRequests()
	return ruo
}

// RemoveGrantRequestIDs removes the "grant_requests" edge to GrantRequest entities by IDs.
func (ruo *RoleUpdateOne) RemoveGrantRequestIDs(ids ...string) *RoleUpdateOne {
	ruo.mutation.RemoveGrantRequestIDs(ids...)
	return ruo
}

// RemoveGrantRequests removes "grant_requests" edges to GrantRequest entities.
func (ruo *RoleUpdateOne) RemoveGrantRequests(g ...*GrantRequest) *RoleUpdateOne {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ruo.RemoveGrantRequestIDs(ids...)
}

// ClearRevokeRequests clears all "revoke_requests" edges to the RevokeRequest entity.
func (ruo *RoleUpdateOne) ClearRevokeRequests() *RoleUpdateOne {
	ruo.mutation.ClearRevokeRequests()
	return ruo
}

// RemoveRevokeRequestIDs removes the "revoke_requests" edge to RevokeRequest entities by IDs.
func (ruo *RoleUpdateOne) RemoveRevokeRequestIDs(ids ...string) *RoleUpdateOne {
	ruo.mutation.RemoveRevokeRequestIDs(ids...)
	return ruo
}

// RemoveRevokeRequests removes "revoke_requests" edges to RevokeRequest entities.
func (ruo *RoleUpdateOne) RemoveRevokeRequests(r ...*RevokeRequest) *RoleUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.RemoveRevokeRequestIDs(ids...)
}

// ClearPermissionHistories clears all "permission_histories" edges to the PermissionHistory entity.
func (ruo *RoleUpdateOne) ClearPermissionHistories() *RoleUpdateOne {
	ruo.mutation.ClearPermissionHistories()
	return ruo
}

// RemovePermissionHistoryIDs removes the "permission_histories" edge to PermissionHistory entities by IDs.
func (ruo *RoleUpdateOne) RemovePermissionHistoryIDs(ids ...string) *RoleUpdateOne {
	ruo.mutation.RemovePermissionHistoryIDs(ids...)
	return ruo
}

// RemovePermissionHistories removes "permission_histories" edges to PermissionHistory entities.
func (ruo *RoleUpdateOne) RemovePermissionHistories(p ...*PermissionHistory) *RoleUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ruo.RemovePermissionHistoryIDs(ids...)
}

// Where appends a list predicates to the RoleUpdate builder.
func (ruo *RoleUpdateOne) Where(ps ...predicate.Role) *RoleUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RoleUpdateOne) Select(field string, fields ...string) *RoleUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Role entity.
func (ruo *RoleUpdateOne) Save(ctx context.Context) (*Role, error) {
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RoleUpdateOne) SaveX(ctx context.Context) *Role {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RoleUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RoleUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RoleUpdateOne) check() error {
	if v, ok := ruo.mutation.OwnerType(); ok {
		if err := role.OwnerTypeValidator(v); err != nil {
			return &ValidationError{Name: "owner_type", err: fmt.Errorf(`ent: validator failed for field "Role.owner_type": %w`, err)}
		}
	}
	return nil
}

func (ruo *RoleUpdateOne) sqlSave(ctx context.Context) (_node *Role, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(role.Table, role.Columns, sqlgraph.NewFieldSpec(role.FieldID, field.TypeString))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Role.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, role.FieldID)
		for _, f := range fields {
			if !role.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != role.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Name(); ok {
		_spec.SetField(role.FieldName, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Description(); ok {
		_spec.SetField(role.FieldDescription, field.TypeString, value)
	}
	if ruo.mutation.DescriptionCleared() {
		_spec.ClearField(role.FieldDescription, field.TypeString)
	}
	if value, ok := ruo.mutation.Etag(); ok {
		_spec.SetField(role.FieldEtag, field.TypeString, value)
	}
	if value, ok := ruo.mutation.OwnerType(); ok {
		_spec.SetField(role.FieldOwnerType, field.TypeEnum, value)
	}
	if value, ok := ruo.mutation.OwnerRef(); ok {
		_spec.SetField(role.FieldOwnerRef, field.TypeString, value)
	}
	if value, ok := ruo.mutation.IsRequestable(); ok {
		_spec.SetField(role.FieldIsRequestable, field.TypeBool, value)
	}
	if value, ok := ruo.mutation.IsRequiredAttachment(); ok {
		_spec.SetField(role.FieldIsRequiredAttachment, field.TypeBool, value)
	}
	if value, ok := ruo.mutation.IsRequiredComment(); ok {
		_spec.SetField(role.FieldIsRequiredComment, field.TypeBool, value)
	}
	if ruo.mutation.RoleSuitesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   role.RoleSuitesTable,
			Columns: role.RoleSuitesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolesuite.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedRoleSuitesIDs(); len(nodes) > 0 && !ruo.mutation.RoleSuitesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   role.RoleSuitesTable,
			Columns: role.RoleSuitesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolesuite.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RoleSuitesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   role.RoleSuitesTable,
			Columns: role.RoleSuitesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolesuite.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.RoleUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   role.RoleUsersTable,
			Columns: []string{role.RoleUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(roleuser.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedRoleUsersIDs(); len(nodes) > 0 && !ruo.mutation.RoleUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   role.RoleUsersTable,
			Columns: []string{role.RoleUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(roleuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RoleUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   role.RoleUsersTable,
			Columns: []string{role.RoleUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(roleuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.GrantRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   role.GrantRequestsTable,
			Columns: []string{role.GrantRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grantrequest.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedGrantRequestsIDs(); len(nodes) > 0 && !ruo.mutation.GrantRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   role.GrantRequestsTable,
			Columns: []string{role.GrantRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grantrequest.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.GrantRequestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   role.GrantRequestsTable,
			Columns: []string{role.GrantRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grantrequest.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.RevokeRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   role.RevokeRequestsTable,
			Columns: []string{role.RevokeRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(revokerequest.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedRevokeRequestsIDs(); len(nodes) > 0 && !ruo.mutation.RevokeRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   role.RevokeRequestsTable,
			Columns: []string{role.RevokeRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(revokerequest.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RevokeRequestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   role.RevokeRequestsTable,
			Columns: []string{role.RevokeRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(revokerequest.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.PermissionHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   role.PermissionHistoriesTable,
			Columns: []string{role.PermissionHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permissionhistory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedPermissionHistoriesIDs(); len(nodes) > 0 && !ruo.mutation.PermissionHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   role.PermissionHistoriesTable,
			Columns: []string{role.PermissionHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permissionhistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.PermissionHistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   role.PermissionHistoriesTable,
			Columns: []string{role.PermissionHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permissionhistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Role{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{role.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
