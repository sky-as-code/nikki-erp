// Code generated by ent, DO NOT EDIT.

package entitlementassignment

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the entitlementassignment type in the database.
	Label = "entitlement_assignment"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEntitlementID holds the string denoting the entitlement_id field in the database.
	FieldEntitlementID = "entitlement_id"
	// FieldSubjectType holds the string denoting the subject_type field in the database.
	FieldSubjectType = "subject_type"
	// FieldSubjectRef holds the string denoting the subject_ref field in the database.
	FieldSubjectRef = "subject_ref"
	// FieldResolvedExpr holds the string denoting the resolved_expr field in the database.
	FieldResolvedExpr = "resolved_expr"
	// FieldActionName holds the string denoting the action_name field in the database.
	FieldActionName = "action_name"
	// FieldResourceName holds the string denoting the resource_name field in the database.
	FieldResourceName = "resource_name"
	// EdgeEntitlement holds the string denoting the entitlement edge name in mutations.
	EdgeEntitlement = "entitlement"
	// Table holds the table name of the entitlementassignment in the database.
	Table = "authz_entitlement_assignments"
	// EntitlementTable is the table that holds the entitlement relation/edge.
	EntitlementTable = "authz_entitlement_assignments"
	// EntitlementInverseTable is the table name for the Entitlement entity.
	// It exists in this package in order to avoid circular dependency with the "entitlement" package.
	EntitlementInverseTable = "authz_entitlements"
	// EntitlementColumn is the table column denoting the entitlement relation/edge.
	EntitlementColumn = "entitlement_id"
)

// Columns holds all SQL columns for entitlementassignment fields.
var Columns = []string{
	FieldID,
	FieldEntitlementID,
	FieldSubjectType,
	FieldSubjectRef,
	FieldResolvedExpr,
	FieldActionName,
	FieldResourceName,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// SubjectType defines the type for the "subject_type" enum field.
type SubjectType string

// SubjectType values.
const (
	SubjectTypeNikkiUser  SubjectType = "nikki_user"
	SubjectTypeNikkiGroup SubjectType = "nikki_group"
	SubjectTypeNikkiRole  SubjectType = "nikki_role"
	SubjectTypeCustom     SubjectType = "custom"
)

func (st SubjectType) String() string {
	return string(st)
}

// SubjectTypeValidator is a validator for the "subject_type" field enum values. It is called by the builders before save.
func SubjectTypeValidator(st SubjectType) error {
	switch st {
	case SubjectTypeNikkiUser, SubjectTypeNikkiGroup, SubjectTypeNikkiRole, SubjectTypeCustom:
		return nil
	default:
		return fmt.Errorf("entitlementassignment: invalid enum value for subject_type field: %q", st)
	}
}

// OrderOption defines the ordering options for the EntitlementAssignment queries.
type OrderOption = func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEntitlementID orders the results by the entitlement_id field.
func ByEntitlementID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntitlementID, opts...).ToFunc()
}

// BySubjectType orders the results by the subject_type field.
func BySubjectType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubjectType, opts...).ToFunc()
}

// BySubjectRef orders the results by the subject_ref field.
func BySubjectRef(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubjectRef, opts...).ToFunc()
}

// ByResolvedExpr orders the results by the resolved_expr field.
func ByResolvedExpr(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResolvedExpr, opts...).ToFunc()
}

// ByActionName orders the results by the action_name field.
func ByActionName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActionName, opts...).ToFunc()
}

// ByResourceName orders the results by the resource_name field.
func ByResourceName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResourceName, opts...).ToFunc()
}

// ByEntitlementField orders the results by entitlement field.
func ByEntitlementField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEntitlementStep(), sql.OrderByField(field, opts...))
	}
}

// Added by NikkieERP scripts/ent_templates/dialect/sql/meta.tmpl
func NewEntitlementStepNikki() *sqlgraph.Step {
	return newEntitlementStep()
}

func newEntitlementStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EntitlementInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, EntitlementTable, EntitlementColumn),
	)
}
