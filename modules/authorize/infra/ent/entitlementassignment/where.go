// Code generated by ent, DO NOT EDIT.

package entitlementassignment

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldContainsFold(FieldID, id))
}

// EntitlementID applies equality check predicate on the "entitlement_id" field. It's identical to EntitlementIDEQ.
func EntitlementID(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldEQ(FieldEntitlementID, v))
}

// SubjectRef applies equality check predicate on the "subject_ref" field. It's identical to SubjectRefEQ.
func SubjectRef(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldEQ(FieldSubjectRef, v))
}

// ResolvedExpr applies equality check predicate on the "resolved_expr" field. It's identical to ResolvedExprEQ.
func ResolvedExpr(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldEQ(FieldResolvedExpr, v))
}

// ActionName applies equality check predicate on the "action_name" field. It's identical to ActionNameEQ.
func ActionName(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldEQ(FieldActionName, v))
}

// ResourceName applies equality check predicate on the "resource_name" field. It's identical to ResourceNameEQ.
func ResourceName(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldEQ(FieldResourceName, v))
}

// OrgID applies equality check predicate on the "org_id" field. It's identical to OrgIDEQ.
func OrgID(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldEQ(FieldOrgID, v))
}

// EntitlementIDEQ applies the EQ predicate on the "entitlement_id" field.
func EntitlementIDEQ(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldEQ(FieldEntitlementID, v))
}

// EntitlementIDNEQ applies the NEQ predicate on the "entitlement_id" field.
func EntitlementIDNEQ(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldNEQ(FieldEntitlementID, v))
}

// EntitlementIDIn applies the In predicate on the "entitlement_id" field.
func EntitlementIDIn(vs ...string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldIn(FieldEntitlementID, vs...))
}

// EntitlementIDNotIn applies the NotIn predicate on the "entitlement_id" field.
func EntitlementIDNotIn(vs ...string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldNotIn(FieldEntitlementID, vs...))
}

// EntitlementIDGT applies the GT predicate on the "entitlement_id" field.
func EntitlementIDGT(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldGT(FieldEntitlementID, v))
}

// EntitlementIDGTE applies the GTE predicate on the "entitlement_id" field.
func EntitlementIDGTE(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldGTE(FieldEntitlementID, v))
}

// EntitlementIDLT applies the LT predicate on the "entitlement_id" field.
func EntitlementIDLT(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldLT(FieldEntitlementID, v))
}

// EntitlementIDLTE applies the LTE predicate on the "entitlement_id" field.
func EntitlementIDLTE(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldLTE(FieldEntitlementID, v))
}

// EntitlementIDContains applies the Contains predicate on the "entitlement_id" field.
func EntitlementIDContains(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldContains(FieldEntitlementID, v))
}

// EntitlementIDHasPrefix applies the HasPrefix predicate on the "entitlement_id" field.
func EntitlementIDHasPrefix(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldHasPrefix(FieldEntitlementID, v))
}

// EntitlementIDHasSuffix applies the HasSuffix predicate on the "entitlement_id" field.
func EntitlementIDHasSuffix(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldHasSuffix(FieldEntitlementID, v))
}

// EntitlementIDEqualFold applies the EqualFold predicate on the "entitlement_id" field.
func EntitlementIDEqualFold(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldEqualFold(FieldEntitlementID, v))
}

// EntitlementIDContainsFold applies the ContainsFold predicate on the "entitlement_id" field.
func EntitlementIDContainsFold(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldContainsFold(FieldEntitlementID, v))
}

// SubjectTypeEQ applies the EQ predicate on the "subject_type" field.
func SubjectTypeEQ(v SubjectType) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldEQ(FieldSubjectType, v))
}

// SubjectTypeNEQ applies the NEQ predicate on the "subject_type" field.
func SubjectTypeNEQ(v SubjectType) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldNEQ(FieldSubjectType, v))
}

// SubjectTypeIn applies the In predicate on the "subject_type" field.
func SubjectTypeIn(vs ...SubjectType) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldIn(FieldSubjectType, vs...))
}

// SubjectTypeNotIn applies the NotIn predicate on the "subject_type" field.
func SubjectTypeNotIn(vs ...SubjectType) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldNotIn(FieldSubjectType, vs...))
}

// SubjectRefEQ applies the EQ predicate on the "subject_ref" field.
func SubjectRefEQ(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldEQ(FieldSubjectRef, v))
}

// SubjectRefNEQ applies the NEQ predicate on the "subject_ref" field.
func SubjectRefNEQ(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldNEQ(FieldSubjectRef, v))
}

// SubjectRefIn applies the In predicate on the "subject_ref" field.
func SubjectRefIn(vs ...string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldIn(FieldSubjectRef, vs...))
}

// SubjectRefNotIn applies the NotIn predicate on the "subject_ref" field.
func SubjectRefNotIn(vs ...string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldNotIn(FieldSubjectRef, vs...))
}

// SubjectRefGT applies the GT predicate on the "subject_ref" field.
func SubjectRefGT(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldGT(FieldSubjectRef, v))
}

// SubjectRefGTE applies the GTE predicate on the "subject_ref" field.
func SubjectRefGTE(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldGTE(FieldSubjectRef, v))
}

// SubjectRefLT applies the LT predicate on the "subject_ref" field.
func SubjectRefLT(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldLT(FieldSubjectRef, v))
}

// SubjectRefLTE applies the LTE predicate on the "subject_ref" field.
func SubjectRefLTE(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldLTE(FieldSubjectRef, v))
}

// SubjectRefContains applies the Contains predicate on the "subject_ref" field.
func SubjectRefContains(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldContains(FieldSubjectRef, v))
}

// SubjectRefHasPrefix applies the HasPrefix predicate on the "subject_ref" field.
func SubjectRefHasPrefix(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldHasPrefix(FieldSubjectRef, v))
}

// SubjectRefHasSuffix applies the HasSuffix predicate on the "subject_ref" field.
func SubjectRefHasSuffix(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldHasSuffix(FieldSubjectRef, v))
}

// SubjectRefEqualFold applies the EqualFold predicate on the "subject_ref" field.
func SubjectRefEqualFold(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldEqualFold(FieldSubjectRef, v))
}

// SubjectRefContainsFold applies the ContainsFold predicate on the "subject_ref" field.
func SubjectRefContainsFold(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldContainsFold(FieldSubjectRef, v))
}

// ResolvedExprEQ applies the EQ predicate on the "resolved_expr" field.
func ResolvedExprEQ(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldEQ(FieldResolvedExpr, v))
}

// ResolvedExprNEQ applies the NEQ predicate on the "resolved_expr" field.
func ResolvedExprNEQ(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldNEQ(FieldResolvedExpr, v))
}

// ResolvedExprIn applies the In predicate on the "resolved_expr" field.
func ResolvedExprIn(vs ...string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldIn(FieldResolvedExpr, vs...))
}

// ResolvedExprNotIn applies the NotIn predicate on the "resolved_expr" field.
func ResolvedExprNotIn(vs ...string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldNotIn(FieldResolvedExpr, vs...))
}

// ResolvedExprGT applies the GT predicate on the "resolved_expr" field.
func ResolvedExprGT(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldGT(FieldResolvedExpr, v))
}

// ResolvedExprGTE applies the GTE predicate on the "resolved_expr" field.
func ResolvedExprGTE(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldGTE(FieldResolvedExpr, v))
}

// ResolvedExprLT applies the LT predicate on the "resolved_expr" field.
func ResolvedExprLT(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldLT(FieldResolvedExpr, v))
}

// ResolvedExprLTE applies the LTE predicate on the "resolved_expr" field.
func ResolvedExprLTE(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldLTE(FieldResolvedExpr, v))
}

// ResolvedExprContains applies the Contains predicate on the "resolved_expr" field.
func ResolvedExprContains(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldContains(FieldResolvedExpr, v))
}

// ResolvedExprHasPrefix applies the HasPrefix predicate on the "resolved_expr" field.
func ResolvedExprHasPrefix(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldHasPrefix(FieldResolvedExpr, v))
}

// ResolvedExprHasSuffix applies the HasSuffix predicate on the "resolved_expr" field.
func ResolvedExprHasSuffix(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldHasSuffix(FieldResolvedExpr, v))
}

// ResolvedExprEqualFold applies the EqualFold predicate on the "resolved_expr" field.
func ResolvedExprEqualFold(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldEqualFold(FieldResolvedExpr, v))
}

// ResolvedExprContainsFold applies the ContainsFold predicate on the "resolved_expr" field.
func ResolvedExprContainsFold(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldContainsFold(FieldResolvedExpr, v))
}

// ActionNameEQ applies the EQ predicate on the "action_name" field.
func ActionNameEQ(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldEQ(FieldActionName, v))
}

// ActionNameNEQ applies the NEQ predicate on the "action_name" field.
func ActionNameNEQ(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldNEQ(FieldActionName, v))
}

// ActionNameIn applies the In predicate on the "action_name" field.
func ActionNameIn(vs ...string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldIn(FieldActionName, vs...))
}

// ActionNameNotIn applies the NotIn predicate on the "action_name" field.
func ActionNameNotIn(vs ...string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldNotIn(FieldActionName, vs...))
}

// ActionNameGT applies the GT predicate on the "action_name" field.
func ActionNameGT(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldGT(FieldActionName, v))
}

// ActionNameGTE applies the GTE predicate on the "action_name" field.
func ActionNameGTE(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldGTE(FieldActionName, v))
}

// ActionNameLT applies the LT predicate on the "action_name" field.
func ActionNameLT(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldLT(FieldActionName, v))
}

// ActionNameLTE applies the LTE predicate on the "action_name" field.
func ActionNameLTE(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldLTE(FieldActionName, v))
}

// ActionNameContains applies the Contains predicate on the "action_name" field.
func ActionNameContains(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldContains(FieldActionName, v))
}

// ActionNameHasPrefix applies the HasPrefix predicate on the "action_name" field.
func ActionNameHasPrefix(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldHasPrefix(FieldActionName, v))
}

// ActionNameHasSuffix applies the HasSuffix predicate on the "action_name" field.
func ActionNameHasSuffix(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldHasSuffix(FieldActionName, v))
}

// ActionNameIsNil applies the IsNil predicate on the "action_name" field.
func ActionNameIsNil() predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldIsNull(FieldActionName))
}

// ActionNameNotNil applies the NotNil predicate on the "action_name" field.
func ActionNameNotNil() predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldNotNull(FieldActionName))
}

// ActionNameEqualFold applies the EqualFold predicate on the "action_name" field.
func ActionNameEqualFold(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldEqualFold(FieldActionName, v))
}

// ActionNameContainsFold applies the ContainsFold predicate on the "action_name" field.
func ActionNameContainsFold(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldContainsFold(FieldActionName, v))
}

// ResourceNameEQ applies the EQ predicate on the "resource_name" field.
func ResourceNameEQ(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldEQ(FieldResourceName, v))
}

// ResourceNameNEQ applies the NEQ predicate on the "resource_name" field.
func ResourceNameNEQ(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldNEQ(FieldResourceName, v))
}

// ResourceNameIn applies the In predicate on the "resource_name" field.
func ResourceNameIn(vs ...string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldIn(FieldResourceName, vs...))
}

// ResourceNameNotIn applies the NotIn predicate on the "resource_name" field.
func ResourceNameNotIn(vs ...string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldNotIn(FieldResourceName, vs...))
}

// ResourceNameGT applies the GT predicate on the "resource_name" field.
func ResourceNameGT(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldGT(FieldResourceName, v))
}

// ResourceNameGTE applies the GTE predicate on the "resource_name" field.
func ResourceNameGTE(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldGTE(FieldResourceName, v))
}

// ResourceNameLT applies the LT predicate on the "resource_name" field.
func ResourceNameLT(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldLT(FieldResourceName, v))
}

// ResourceNameLTE applies the LTE predicate on the "resource_name" field.
func ResourceNameLTE(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldLTE(FieldResourceName, v))
}

// ResourceNameContains applies the Contains predicate on the "resource_name" field.
func ResourceNameContains(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldContains(FieldResourceName, v))
}

// ResourceNameHasPrefix applies the HasPrefix predicate on the "resource_name" field.
func ResourceNameHasPrefix(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldHasPrefix(FieldResourceName, v))
}

// ResourceNameHasSuffix applies the HasSuffix predicate on the "resource_name" field.
func ResourceNameHasSuffix(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldHasSuffix(FieldResourceName, v))
}

// ResourceNameIsNil applies the IsNil predicate on the "resource_name" field.
func ResourceNameIsNil() predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldIsNull(FieldResourceName))
}

// ResourceNameNotNil applies the NotNil predicate on the "resource_name" field.
func ResourceNameNotNil() predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldNotNull(FieldResourceName))
}

// ResourceNameEqualFold applies the EqualFold predicate on the "resource_name" field.
func ResourceNameEqualFold(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldEqualFold(FieldResourceName, v))
}

// ResourceNameContainsFold applies the ContainsFold predicate on the "resource_name" field.
func ResourceNameContainsFold(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldContainsFold(FieldResourceName, v))
}

// OrgIDEQ applies the EQ predicate on the "org_id" field.
func OrgIDEQ(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldEQ(FieldOrgID, v))
}

// OrgIDNEQ applies the NEQ predicate on the "org_id" field.
func OrgIDNEQ(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldNEQ(FieldOrgID, v))
}

// OrgIDIn applies the In predicate on the "org_id" field.
func OrgIDIn(vs ...string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldIn(FieldOrgID, vs...))
}

// OrgIDNotIn applies the NotIn predicate on the "org_id" field.
func OrgIDNotIn(vs ...string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldNotIn(FieldOrgID, vs...))
}

// OrgIDGT applies the GT predicate on the "org_id" field.
func OrgIDGT(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldGT(FieldOrgID, v))
}

// OrgIDGTE applies the GTE predicate on the "org_id" field.
func OrgIDGTE(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldGTE(FieldOrgID, v))
}

// OrgIDLT applies the LT predicate on the "org_id" field.
func OrgIDLT(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldLT(FieldOrgID, v))
}

// OrgIDLTE applies the LTE predicate on the "org_id" field.
func OrgIDLTE(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldLTE(FieldOrgID, v))
}

// OrgIDContains applies the Contains predicate on the "org_id" field.
func OrgIDContains(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldContains(FieldOrgID, v))
}

// OrgIDHasPrefix applies the HasPrefix predicate on the "org_id" field.
func OrgIDHasPrefix(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldHasPrefix(FieldOrgID, v))
}

// OrgIDHasSuffix applies the HasSuffix predicate on the "org_id" field.
func OrgIDHasSuffix(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldHasSuffix(FieldOrgID, v))
}

// OrgIDIsNil applies the IsNil predicate on the "org_id" field.
func OrgIDIsNil() predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldIsNull(FieldOrgID))
}

// OrgIDNotNil applies the NotNil predicate on the "org_id" field.
func OrgIDNotNil() predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldNotNull(FieldOrgID))
}

// OrgIDEqualFold applies the EqualFold predicate on the "org_id" field.
func OrgIDEqualFold(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldEqualFold(FieldOrgID, v))
}

// OrgIDContainsFold applies the ContainsFold predicate on the "org_id" field.
func OrgIDContainsFold(v string) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.FieldContainsFold(FieldOrgID, v))
}

// HasEntitlement applies the HasEdge predicate on the "entitlement" edge.
func HasEntitlement() predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, EntitlementTable, EntitlementColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEntitlementWith applies the HasEdge predicate on the "entitlement" edge with a given conditions (other predicates).
func HasEntitlementWith(preds ...predicate.Entitlement) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(func(s *sql.Selector) {
		step := newEntitlementStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPermissionHistories applies the HasEdge predicate on the "permission_histories" edge.
func HasPermissionHistories() predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, PermissionHistoriesTable, PermissionHistoriesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPermissionHistoriesWith applies the HasEdge predicate on the "permission_histories" edge with a given conditions (other predicates).
func HasPermissionHistoriesWith(preds ...predicate.PermissionHistory) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(func(s *sql.Selector) {
		step := newPermissionHistoriesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.EntitlementAssignment) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.EntitlementAssignment) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.EntitlementAssignment) predicate.EntitlementAssignment {
	return predicate.EntitlementAssignment(sql.NotPredicates(p))
}
