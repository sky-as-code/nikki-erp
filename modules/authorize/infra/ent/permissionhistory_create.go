// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/entitlement"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/entitlementassignment"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/grantrequest"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/permissionhistory"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/revokerequest"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/role"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/rolesuite"
)

// PermissionHistoryCreate is the builder for creating a PermissionHistory entity.
type PermissionHistoryCreate struct {
	config
	mutation *PermissionHistoryMutation
	hooks    []Hook
}

// SetApproverID sets the "approver_id" field.
func (phc *PermissionHistoryCreate) SetApproverID(s string) *PermissionHistoryCreate {
	phc.mutation.SetApproverID(s)
	return phc
}

// SetNillableApproverID sets the "approver_id" field if the given value is not nil.
func (phc *PermissionHistoryCreate) SetNillableApproverID(s *string) *PermissionHistoryCreate {
	if s != nil {
		phc.SetApproverID(*s)
	}
	return phc
}

// SetApproverEmail sets the "approver_email" field.
func (phc *PermissionHistoryCreate) SetApproverEmail(s string) *PermissionHistoryCreate {
	phc.mutation.SetApproverEmail(s)
	return phc
}

// SetCreatedAt sets the "created_at" field.
func (phc *PermissionHistoryCreate) SetCreatedAt(t time.Time) *PermissionHistoryCreate {
	phc.mutation.SetCreatedAt(t)
	return phc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (phc *PermissionHistoryCreate) SetNillableCreatedAt(t *time.Time) *PermissionHistoryCreate {
	if t != nil {
		phc.SetCreatedAt(*t)
	}
	return phc
}

// SetEffect sets the "effect" field.
func (phc *PermissionHistoryCreate) SetEffect(pe permissionhistory.Effect) *PermissionHistoryCreate {
	phc.mutation.SetEffect(pe)
	return phc
}

// SetReason sets the "reason" field.
func (phc *PermissionHistoryCreate) SetReason(pe permissionhistory.Reason) *PermissionHistoryCreate {
	phc.mutation.SetReason(pe)
	return phc
}

// SetEntitlementID sets the "entitlement_id" field.
func (phc *PermissionHistoryCreate) SetEntitlementID(s string) *PermissionHistoryCreate {
	phc.mutation.SetEntitlementID(s)
	return phc
}

// SetNillableEntitlementID sets the "entitlement_id" field if the given value is not nil.
func (phc *PermissionHistoryCreate) SetNillableEntitlementID(s *string) *PermissionHistoryCreate {
	if s != nil {
		phc.SetEntitlementID(*s)
	}
	return phc
}

// SetEntitlementExpr sets the "entitlement_expr" field.
func (phc *PermissionHistoryCreate) SetEntitlementExpr(s string) *PermissionHistoryCreate {
	phc.mutation.SetEntitlementExpr(s)
	return phc
}

// SetEntitlementAssignmentID sets the "entitlement_assignment_id" field.
func (phc *PermissionHistoryCreate) SetEntitlementAssignmentID(s string) *PermissionHistoryCreate {
	phc.mutation.SetEntitlementAssignmentID(s)
	return phc
}

// SetNillableEntitlementAssignmentID sets the "entitlement_assignment_id" field if the given value is not nil.
func (phc *PermissionHistoryCreate) SetNillableEntitlementAssignmentID(s *string) *PermissionHistoryCreate {
	if s != nil {
		phc.SetEntitlementAssignmentID(*s)
	}
	return phc
}

// SetResolvedExpr sets the "resolved_expr" field.
func (phc *PermissionHistoryCreate) SetResolvedExpr(s string) *PermissionHistoryCreate {
	phc.mutation.SetResolvedExpr(s)
	return phc
}

// SetReceiverID sets the "receiver_id" field.
func (phc *PermissionHistoryCreate) SetReceiverID(s string) *PermissionHistoryCreate {
	phc.mutation.SetReceiverID(s)
	return phc
}

// SetNillableReceiverID sets the "receiver_id" field if the given value is not nil.
func (phc *PermissionHistoryCreate) SetNillableReceiverID(s *string) *PermissionHistoryCreate {
	if s != nil {
		phc.SetReceiverID(*s)
	}
	return phc
}

// SetReceiverEmail sets the "receiver_email" field.
func (phc *PermissionHistoryCreate) SetReceiverEmail(s string) *PermissionHistoryCreate {
	phc.mutation.SetReceiverEmail(s)
	return phc
}

// SetGrantRequestID sets the "grant_request_id" field.
func (phc *PermissionHistoryCreate) SetGrantRequestID(s string) *PermissionHistoryCreate {
	phc.mutation.SetGrantRequestID(s)
	return phc
}

// SetNillableGrantRequestID sets the "grant_request_id" field if the given value is not nil.
func (phc *PermissionHistoryCreate) SetNillableGrantRequestID(s *string) *PermissionHistoryCreate {
	if s != nil {
		phc.SetGrantRequestID(*s)
	}
	return phc
}

// SetRevokeRequestID sets the "revoke_request_id" field.
func (phc *PermissionHistoryCreate) SetRevokeRequestID(s string) *PermissionHistoryCreate {
	phc.mutation.SetRevokeRequestID(s)
	return phc
}

// SetNillableRevokeRequestID sets the "revoke_request_id" field if the given value is not nil.
func (phc *PermissionHistoryCreate) SetNillableRevokeRequestID(s *string) *PermissionHistoryCreate {
	if s != nil {
		phc.SetRevokeRequestID(*s)
	}
	return phc
}

// SetRoleID sets the "role_id" field.
func (phc *PermissionHistoryCreate) SetRoleID(s string) *PermissionHistoryCreate {
	phc.mutation.SetRoleID(s)
	return phc
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (phc *PermissionHistoryCreate) SetNillableRoleID(s *string) *PermissionHistoryCreate {
	if s != nil {
		phc.SetRoleID(*s)
	}
	return phc
}

// SetRoleName sets the "role_name" field.
func (phc *PermissionHistoryCreate) SetRoleName(s string) *PermissionHistoryCreate {
	phc.mutation.SetRoleName(s)
	return phc
}

// SetRoleSuiteID sets the "role_suite_id" field.
func (phc *PermissionHistoryCreate) SetRoleSuiteID(s string) *PermissionHistoryCreate {
	phc.mutation.SetRoleSuiteID(s)
	return phc
}

// SetNillableRoleSuiteID sets the "role_suite_id" field if the given value is not nil.
func (phc *PermissionHistoryCreate) SetNillableRoleSuiteID(s *string) *PermissionHistoryCreate {
	if s != nil {
		phc.SetRoleSuiteID(*s)
	}
	return phc
}

// SetRoleSuiteName sets the "role_suite_name" field.
func (phc *PermissionHistoryCreate) SetRoleSuiteName(s string) *PermissionHistoryCreate {
	phc.mutation.SetRoleSuiteName(s)
	return phc
}

// SetID sets the "id" field.
func (phc *PermissionHistoryCreate) SetID(s string) *PermissionHistoryCreate {
	phc.mutation.SetID(s)
	return phc
}

// SetEntitlement sets the "entitlement" edge to the Entitlement entity.
func (phc *PermissionHistoryCreate) SetEntitlement(e *Entitlement) *PermissionHistoryCreate {
	return phc.SetEntitlementID(e.ID)
}

// SetEntitlementAssignment sets the "entitlement_assignment" edge to the EntitlementAssignment entity.
func (phc *PermissionHistoryCreate) SetEntitlementAssignment(e *EntitlementAssignment) *PermissionHistoryCreate {
	return phc.SetEntitlementAssignmentID(e.ID)
}

// SetRole sets the "role" edge to the Role entity.
func (phc *PermissionHistoryCreate) SetRole(r *Role) *PermissionHistoryCreate {
	return phc.SetRoleID(r.ID)
}

// SetRoleSuite sets the "role_suite" edge to the RoleSuite entity.
func (phc *PermissionHistoryCreate) SetRoleSuite(r *RoleSuite) *PermissionHistoryCreate {
	return phc.SetRoleSuiteID(r.ID)
}

// SetGrantRequest sets the "grant_request" edge to the GrantRequest entity.
func (phc *PermissionHistoryCreate) SetGrantRequest(g *GrantRequest) *PermissionHistoryCreate {
	return phc.SetGrantRequestID(g.ID)
}

// SetRevokeRequest sets the "revoke_request" edge to the RevokeRequest entity.
func (phc *PermissionHistoryCreate) SetRevokeRequest(r *RevokeRequest) *PermissionHistoryCreate {
	return phc.SetRevokeRequestID(r.ID)
}

// Mutation returns the PermissionHistoryMutation object of the builder.
func (phc *PermissionHistoryCreate) Mutation() *PermissionHistoryMutation {
	return phc.mutation
}

// Save creates the PermissionHistory in the database.
func (phc *PermissionHistoryCreate) Save(ctx context.Context) (*PermissionHistory, error) {
	phc.defaults()
	return withHooks(ctx, phc.sqlSave, phc.mutation, phc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (phc *PermissionHistoryCreate) SaveX(ctx context.Context) *PermissionHistory {
	v, err := phc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (phc *PermissionHistoryCreate) Exec(ctx context.Context) error {
	_, err := phc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (phc *PermissionHistoryCreate) ExecX(ctx context.Context) {
	if err := phc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (phc *PermissionHistoryCreate) defaults() {
	if _, ok := phc.mutation.CreatedAt(); !ok {
		v := permissionhistory.DefaultCreatedAt()
		phc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (phc *PermissionHistoryCreate) check() error {
	if _, ok := phc.mutation.ApproverEmail(); !ok {
		return &ValidationError{Name: "approver_email", err: errors.New(`ent: missing required field "PermissionHistory.approver_email"`)}
	}
	if _, ok := phc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PermissionHistory.created_at"`)}
	}
	if _, ok := phc.mutation.Effect(); !ok {
		return &ValidationError{Name: "effect", err: errors.New(`ent: missing required field "PermissionHistory.effect"`)}
	}
	if v, ok := phc.mutation.Effect(); ok {
		if err := permissionhistory.EffectValidator(v); err != nil {
			return &ValidationError{Name: "effect", err: fmt.Errorf(`ent: validator failed for field "PermissionHistory.effect": %w`, err)}
		}
	}
	if _, ok := phc.mutation.Reason(); !ok {
		return &ValidationError{Name: "reason", err: errors.New(`ent: missing required field "PermissionHistory.reason"`)}
	}
	if v, ok := phc.mutation.Reason(); ok {
		if err := permissionhistory.ReasonValidator(v); err != nil {
			return &ValidationError{Name: "reason", err: fmt.Errorf(`ent: validator failed for field "PermissionHistory.reason": %w`, err)}
		}
	}
	if _, ok := phc.mutation.EntitlementExpr(); !ok {
		return &ValidationError{Name: "entitlement_expr", err: errors.New(`ent: missing required field "PermissionHistory.entitlement_expr"`)}
	}
	if _, ok := phc.mutation.ResolvedExpr(); !ok {
		return &ValidationError{Name: "resolved_expr", err: errors.New(`ent: missing required field "PermissionHistory.resolved_expr"`)}
	}
	if _, ok := phc.mutation.ReceiverEmail(); !ok {
		return &ValidationError{Name: "receiver_email", err: errors.New(`ent: missing required field "PermissionHistory.receiver_email"`)}
	}
	if _, ok := phc.mutation.RoleName(); !ok {
		return &ValidationError{Name: "role_name", err: errors.New(`ent: missing required field "PermissionHistory.role_name"`)}
	}
	if _, ok := phc.mutation.RoleSuiteName(); !ok {
		return &ValidationError{Name: "role_suite_name", err: errors.New(`ent: missing required field "PermissionHistory.role_suite_name"`)}
	}
	return nil
}

func (phc *PermissionHistoryCreate) sqlSave(ctx context.Context) (*PermissionHistory, error) {
	if err := phc.check(); err != nil {
		return nil, err
	}
	_node, _spec := phc.createSpec()
	if err := sqlgraph.CreateNode(ctx, phc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected PermissionHistory.ID type: %T", _spec.ID.Value)
		}
	}
	phc.mutation.id = &_node.ID
	phc.mutation.done = true
	return _node, nil
}

func (phc *PermissionHistoryCreate) createSpec() (*PermissionHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &PermissionHistory{config: phc.config}
		_spec = sqlgraph.NewCreateSpec(permissionhistory.Table, sqlgraph.NewFieldSpec(permissionhistory.FieldID, field.TypeString))
	)
	if id, ok := phc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := phc.mutation.ApproverID(); ok {
		_spec.SetField(permissionhistory.FieldApproverID, field.TypeString, value)
		_node.ApproverID = &value
	}
	if value, ok := phc.mutation.ApproverEmail(); ok {
		_spec.SetField(permissionhistory.FieldApproverEmail, field.TypeString, value)
		_node.ApproverEmail = value
	}
	if value, ok := phc.mutation.CreatedAt(); ok {
		_spec.SetField(permissionhistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := phc.mutation.Effect(); ok {
		_spec.SetField(permissionhistory.FieldEffect, field.TypeEnum, value)
		_node.Effect = value
	}
	if value, ok := phc.mutation.Reason(); ok {
		_spec.SetField(permissionhistory.FieldReason, field.TypeEnum, value)
		_node.Reason = value
	}
	if value, ok := phc.mutation.EntitlementExpr(); ok {
		_spec.SetField(permissionhistory.FieldEntitlementExpr, field.TypeString, value)
		_node.EntitlementExpr = value
	}
	if value, ok := phc.mutation.ResolvedExpr(); ok {
		_spec.SetField(permissionhistory.FieldResolvedExpr, field.TypeString, value)
		_node.ResolvedExpr = value
	}
	if value, ok := phc.mutation.ReceiverID(); ok {
		_spec.SetField(permissionhistory.FieldReceiverID, field.TypeString, value)
		_node.ReceiverID = &value
	}
	if value, ok := phc.mutation.ReceiverEmail(); ok {
		_spec.SetField(permissionhistory.FieldReceiverEmail, field.TypeString, value)
		_node.ReceiverEmail = value
	}
	if value, ok := phc.mutation.RoleName(); ok {
		_spec.SetField(permissionhistory.FieldRoleName, field.TypeString, value)
		_node.RoleName = value
	}
	if value, ok := phc.mutation.RoleSuiteName(); ok {
		_spec.SetField(permissionhistory.FieldRoleSuiteName, field.TypeString, value)
		_node.RoleSuiteName = value
	}
	if nodes := phc.mutation.EntitlementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   permissionhistory.EntitlementTable,
			Columns: []string{permissionhistory.EntitlementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlement.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EntitlementID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := phc.mutation.EntitlementAssignmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   permissionhistory.EntitlementAssignmentTable,
			Columns: []string{permissionhistory.EntitlementAssignmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlementassignment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EntitlementAssignmentID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := phc.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   permissionhistory.RoleTable,
			Columns: []string{permissionhistory.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RoleID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := phc.mutation.RoleSuiteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   permissionhistory.RoleSuiteTable,
			Columns: []string{permissionhistory.RoleSuiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolesuite.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RoleSuiteID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := phc.mutation.GrantRequestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   permissionhistory.GrantRequestTable,
			Columns: []string{permissionhistory.GrantRequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grantrequest.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.GrantRequestID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := phc.mutation.RevokeRequestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   permissionhistory.RevokeRequestTable,
			Columns: []string{permissionhistory.RevokeRequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(revokerequest.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RevokeRequestID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PermissionHistoryCreateBulk is the builder for creating many PermissionHistory entities in bulk.
type PermissionHistoryCreateBulk struct {
	config
	err      error
	builders []*PermissionHistoryCreate
}

// Save creates the PermissionHistory entities in the database.
func (phcb *PermissionHistoryCreateBulk) Save(ctx context.Context) ([]*PermissionHistory, error) {
	if phcb.err != nil {
		return nil, phcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(phcb.builders))
	nodes := make([]*PermissionHistory, len(phcb.builders))
	mutators := make([]Mutator, len(phcb.builders))
	for i := range phcb.builders {
		func(i int, root context.Context) {
			builder := phcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PermissionHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, phcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, phcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, phcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (phcb *PermissionHistoryCreateBulk) SaveX(ctx context.Context) []*PermissionHistory {
	v, err := phcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (phcb *PermissionHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := phcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (phcb *PermissionHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := phcb.Exec(ctx); err != nil {
		panic(err)
	}
}
