// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/action"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/entitlement"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/predicate"
)

// ActionUpdate is the builder for updating Action entities.
type ActionUpdate struct {
	config
	hooks    []Hook
	mutation *ActionMutation
}

// Where appends a list predicates to the ActionUpdate builder.
func (au *ActionUpdate) Where(ps ...predicate.Action) *ActionUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetEtag sets the "etag" field.
func (au *ActionUpdate) SetEtag(s string) *ActionUpdate {
	au.mutation.SetEtag(s)
	return au
}

// SetNillableEtag sets the "etag" field if the given value is not nil.
func (au *ActionUpdate) SetNillableEtag(s *string) *ActionUpdate {
	if s != nil {
		au.SetEtag(*s)
	}
	return au
}

// SetDescription sets the "description" field.
func (au *ActionUpdate) SetDescription(s string) *ActionUpdate {
	au.mutation.SetDescription(s)
	return au
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (au *ActionUpdate) SetNillableDescription(s *string) *ActionUpdate {
	if s != nil {
		au.SetDescription(*s)
	}
	return au
}

// ClearDescription clears the value of the "description" field.
func (au *ActionUpdate) ClearDescription() *ActionUpdate {
	au.mutation.ClearDescription()
	return au
}

// AddEntitlementIDs adds the "entitlements" edge to the Entitlement entity by IDs.
func (au *ActionUpdate) AddEntitlementIDs(ids ...string) *ActionUpdate {
	au.mutation.AddEntitlementIDs(ids...)
	return au
}

// AddEntitlements adds the "entitlements" edges to the Entitlement entity.
func (au *ActionUpdate) AddEntitlements(e ...*Entitlement) *ActionUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return au.AddEntitlementIDs(ids...)
}

// Mutation returns the ActionMutation object of the builder.
func (au *ActionUpdate) Mutation() *ActionMutation {
	return au.mutation
}

// ClearEntitlements clears all "entitlements" edges to the Entitlement entity.
func (au *ActionUpdate) ClearEntitlements() *ActionUpdate {
	au.mutation.ClearEntitlements()
	return au
}

// RemoveEntitlementIDs removes the "entitlements" edge to Entitlement entities by IDs.
func (au *ActionUpdate) RemoveEntitlementIDs(ids ...string) *ActionUpdate {
	au.mutation.RemoveEntitlementIDs(ids...)
	return au
}

// RemoveEntitlements removes "entitlements" edges to Entitlement entities.
func (au *ActionUpdate) RemoveEntitlements(e ...*Entitlement) *ActionUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return au.RemoveEntitlementIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *ActionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *ActionUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *ActionUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *ActionUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *ActionUpdate) check() error {
	if au.mutation.ResourceCleared() && len(au.mutation.ResourceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Action.resource"`)
	}
	return nil
}

func (au *ActionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(action.Table, action.Columns, sqlgraph.NewFieldSpec(action.FieldID, field.TypeString))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Etag(); ok {
		_spec.SetField(action.FieldEtag, field.TypeString, value)
	}
	if value, ok := au.mutation.Description(); ok {
		_spec.SetField(action.FieldDescription, field.TypeString, value)
	}
	if au.mutation.DescriptionCleared() {
		_spec.ClearField(action.FieldDescription, field.TypeString)
	}
	if au.mutation.EntitlementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   action.EntitlementsTable,
			Columns: []string{action.EntitlementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlement.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedEntitlementsIDs(); len(nodes) > 0 && !au.mutation.EntitlementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   action.EntitlementsTable,
			Columns: []string{action.EntitlementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlement.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.EntitlementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   action.EntitlementsTable,
			Columns: []string{action.EntitlementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlement.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{action.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// ActionUpdateOne is the builder for updating a single Action entity.
type ActionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ActionMutation
}

// SetEtag sets the "etag" field.
func (auo *ActionUpdateOne) SetEtag(s string) *ActionUpdateOne {
	auo.mutation.SetEtag(s)
	return auo
}

// SetNillableEtag sets the "etag" field if the given value is not nil.
func (auo *ActionUpdateOne) SetNillableEtag(s *string) *ActionUpdateOne {
	if s != nil {
		auo.SetEtag(*s)
	}
	return auo
}

// SetDescription sets the "description" field.
func (auo *ActionUpdateOne) SetDescription(s string) *ActionUpdateOne {
	auo.mutation.SetDescription(s)
	return auo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (auo *ActionUpdateOne) SetNillableDescription(s *string) *ActionUpdateOne {
	if s != nil {
		auo.SetDescription(*s)
	}
	return auo
}

// ClearDescription clears the value of the "description" field.
func (auo *ActionUpdateOne) ClearDescription() *ActionUpdateOne {
	auo.mutation.ClearDescription()
	return auo
}

// AddEntitlementIDs adds the "entitlements" edge to the Entitlement entity by IDs.
func (auo *ActionUpdateOne) AddEntitlementIDs(ids ...string) *ActionUpdateOne {
	auo.mutation.AddEntitlementIDs(ids...)
	return auo
}

// AddEntitlements adds the "entitlements" edges to the Entitlement entity.
func (auo *ActionUpdateOne) AddEntitlements(e ...*Entitlement) *ActionUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auo.AddEntitlementIDs(ids...)
}

// Mutation returns the ActionMutation object of the builder.
func (auo *ActionUpdateOne) Mutation() *ActionMutation {
	return auo.mutation
}

// ClearEntitlements clears all "entitlements" edges to the Entitlement entity.
func (auo *ActionUpdateOne) ClearEntitlements() *ActionUpdateOne {
	auo.mutation.ClearEntitlements()
	return auo
}

// RemoveEntitlementIDs removes the "entitlements" edge to Entitlement entities by IDs.
func (auo *ActionUpdateOne) RemoveEntitlementIDs(ids ...string) *ActionUpdateOne {
	auo.mutation.RemoveEntitlementIDs(ids...)
	return auo
}

// RemoveEntitlements removes "entitlements" edges to Entitlement entities.
func (auo *ActionUpdateOne) RemoveEntitlements(e ...*Entitlement) *ActionUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auo.RemoveEntitlementIDs(ids...)
}

// Where appends a list predicates to the ActionUpdate builder.
func (auo *ActionUpdateOne) Where(ps ...predicate.Action) *ActionUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *ActionUpdateOne) Select(field string, fields ...string) *ActionUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Action entity.
func (auo *ActionUpdateOne) Save(ctx context.Context) (*Action, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *ActionUpdateOne) SaveX(ctx context.Context) *Action {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *ActionUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *ActionUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *ActionUpdateOne) check() error {
	if auo.mutation.ResourceCleared() && len(auo.mutation.ResourceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Action.resource"`)
	}
	return nil
}

func (auo *ActionUpdateOne) sqlSave(ctx context.Context) (_node *Action, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(action.Table, action.Columns, sqlgraph.NewFieldSpec(action.FieldID, field.TypeString))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Action.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, action.FieldID)
		for _, f := range fields {
			if !action.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != action.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Etag(); ok {
		_spec.SetField(action.FieldEtag, field.TypeString, value)
	}
	if value, ok := auo.mutation.Description(); ok {
		_spec.SetField(action.FieldDescription, field.TypeString, value)
	}
	if auo.mutation.DescriptionCleared() {
		_spec.ClearField(action.FieldDescription, field.TypeString)
	}
	if auo.mutation.EntitlementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   action.EntitlementsTable,
			Columns: []string{action.EntitlementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlement.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedEntitlementsIDs(); len(nodes) > 0 && !auo.mutation.EntitlementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   action.EntitlementsTable,
			Columns: []string{action.EntitlementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlement.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.EntitlementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   action.EntitlementsTable,
			Columns: []string{action.EntitlementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlement.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Action{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{action.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
