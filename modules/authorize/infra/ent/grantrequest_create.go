// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/grantrequest"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/permissionhistory"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/role"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/rolesuite"
)

// GrantRequestCreate is the builder for creating a GrantRequest entity.
type GrantRequestCreate struct {
	config
	mutation *GrantRequestMutation
	hooks    []Hook
}

// SetAttachmentURL sets the "attachment_url" field.
func (grc *GrantRequestCreate) SetAttachmentURL(s string) *GrantRequestCreate {
	grc.mutation.SetAttachmentURL(s)
	return grc
}

// SetNillableAttachmentURL sets the "attachment_url" field if the given value is not nil.
func (grc *GrantRequestCreate) SetNillableAttachmentURL(s *string) *GrantRequestCreate {
	if s != nil {
		grc.SetAttachmentURL(*s)
	}
	return grc
}

// SetComment sets the "comment" field.
func (grc *GrantRequestCreate) SetComment(s string) *GrantRequestCreate {
	grc.mutation.SetComment(s)
	return grc
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (grc *GrantRequestCreate) SetNillableComment(s *string) *GrantRequestCreate {
	if s != nil {
		grc.SetComment(*s)
	}
	return grc
}

// SetCreatedAt sets the "created_at" field.
func (grc *GrantRequestCreate) SetCreatedAt(t time.Time) *GrantRequestCreate {
	grc.mutation.SetCreatedAt(t)
	return grc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (grc *GrantRequestCreate) SetNillableCreatedAt(t *time.Time) *GrantRequestCreate {
	if t != nil {
		grc.SetCreatedAt(*t)
	}
	return grc
}

// SetCreatedBy sets the "created_by" field.
func (grc *GrantRequestCreate) SetCreatedBy(s string) *GrantRequestCreate {
	grc.mutation.SetCreatedBy(s)
	return grc
}

// SetEtag sets the "etag" field.
func (grc *GrantRequestCreate) SetEtag(s string) *GrantRequestCreate {
	grc.mutation.SetEtag(s)
	return grc
}

// SetReceiverID sets the "receiver_id" field.
func (grc *GrantRequestCreate) SetReceiverID(s string) *GrantRequestCreate {
	grc.mutation.SetReceiverID(s)
	return grc
}

// SetTargetType sets the "target_type" field.
func (grc *GrantRequestCreate) SetTargetType(gt grantrequest.TargetType) *GrantRequestCreate {
	grc.mutation.SetTargetType(gt)
	return grc
}

// SetTargetRoleID sets the "target_role_id" field.
func (grc *GrantRequestCreate) SetTargetRoleID(s string) *GrantRequestCreate {
	grc.mutation.SetTargetRoleID(s)
	return grc
}

// SetNillableTargetRoleID sets the "target_role_id" field if the given value is not nil.
func (grc *GrantRequestCreate) SetNillableTargetRoleID(s *string) *GrantRequestCreate {
	if s != nil {
		grc.SetTargetRoleID(*s)
	}
	return grc
}

// SetTargetRoleName sets the "target_role_name" field.
func (grc *GrantRequestCreate) SetTargetRoleName(s string) *GrantRequestCreate {
	grc.mutation.SetTargetRoleName(s)
	return grc
}

// SetTargetSuiteID sets the "target_suite_id" field.
func (grc *GrantRequestCreate) SetTargetSuiteID(s string) *GrantRequestCreate {
	grc.mutation.SetTargetSuiteID(s)
	return grc
}

// SetNillableTargetSuiteID sets the "target_suite_id" field if the given value is not nil.
func (grc *GrantRequestCreate) SetNillableTargetSuiteID(s *string) *GrantRequestCreate {
	if s != nil {
		grc.SetTargetSuiteID(*s)
	}
	return grc
}

// SetTargetSuiteName sets the "target_suite_name" field.
func (grc *GrantRequestCreate) SetTargetSuiteName(s string) *GrantRequestCreate {
	grc.mutation.SetTargetSuiteName(s)
	return grc
}

// SetStatus sets the "status" field.
func (grc *GrantRequestCreate) SetStatus(gr grantrequest.Status) *GrantRequestCreate {
	grc.mutation.SetStatus(gr)
	return grc
}

// SetID sets the "id" field.
func (grc *GrantRequestCreate) SetID(s string) *GrantRequestCreate {
	grc.mutation.SetID(s)
	return grc
}

// AddPermissionHistoryIDs adds the "permission_histories" edge to the PermissionHistory entity by IDs.
func (grc *GrantRequestCreate) AddPermissionHistoryIDs(ids ...string) *GrantRequestCreate {
	grc.mutation.AddPermissionHistoryIDs(ids...)
	return grc
}

// AddPermissionHistories adds the "permission_histories" edges to the PermissionHistory entity.
func (grc *GrantRequestCreate) AddPermissionHistories(p ...*PermissionHistory) *GrantRequestCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return grc.AddPermissionHistoryIDs(ids...)
}

// SetRoleID sets the "role" edge to the Role entity by ID.
func (grc *GrantRequestCreate) SetRoleID(id string) *GrantRequestCreate {
	grc.mutation.SetRoleID(id)
	return grc
}

// SetNillableRoleID sets the "role" edge to the Role entity by ID if the given value is not nil.
func (grc *GrantRequestCreate) SetNillableRoleID(id *string) *GrantRequestCreate {
	if id != nil {
		grc = grc.SetRoleID(*id)
	}
	return grc
}

// SetRole sets the "role" edge to the Role entity.
func (grc *GrantRequestCreate) SetRole(r *Role) *GrantRequestCreate {
	return grc.SetRoleID(r.ID)
}

// SetRoleSuiteID sets the "role_suite" edge to the RoleSuite entity by ID.
func (grc *GrantRequestCreate) SetRoleSuiteID(id string) *GrantRequestCreate {
	grc.mutation.SetRoleSuiteID(id)
	return grc
}

// SetNillableRoleSuiteID sets the "role_suite" edge to the RoleSuite entity by ID if the given value is not nil.
func (grc *GrantRequestCreate) SetNillableRoleSuiteID(id *string) *GrantRequestCreate {
	if id != nil {
		grc = grc.SetRoleSuiteID(*id)
	}
	return grc
}

// SetRoleSuite sets the "role_suite" edge to the RoleSuite entity.
func (grc *GrantRequestCreate) SetRoleSuite(r *RoleSuite) *GrantRequestCreate {
	return grc.SetRoleSuiteID(r.ID)
}

// Mutation returns the GrantRequestMutation object of the builder.
func (grc *GrantRequestCreate) Mutation() *GrantRequestMutation {
	return grc.mutation
}

// Save creates the GrantRequest in the database.
func (grc *GrantRequestCreate) Save(ctx context.Context) (*GrantRequest, error) {
	grc.defaults()
	return withHooks(ctx, grc.sqlSave, grc.mutation, grc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (grc *GrantRequestCreate) SaveX(ctx context.Context) *GrantRequest {
	v, err := grc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (grc *GrantRequestCreate) Exec(ctx context.Context) error {
	_, err := grc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (grc *GrantRequestCreate) ExecX(ctx context.Context) {
	if err := grc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (grc *GrantRequestCreate) defaults() {
	if _, ok := grc.mutation.CreatedAt(); !ok {
		v := grantrequest.DefaultCreatedAt()
		grc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (grc *GrantRequestCreate) check() error {
	if _, ok := grc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "GrantRequest.created_at"`)}
	}
	if _, ok := grc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "GrantRequest.created_by"`)}
	}
	if _, ok := grc.mutation.Etag(); !ok {
		return &ValidationError{Name: "etag", err: errors.New(`ent: missing required field "GrantRequest.etag"`)}
	}
	if _, ok := grc.mutation.ReceiverID(); !ok {
		return &ValidationError{Name: "receiver_id", err: errors.New(`ent: missing required field "GrantRequest.receiver_id"`)}
	}
	if _, ok := grc.mutation.TargetType(); !ok {
		return &ValidationError{Name: "target_type", err: errors.New(`ent: missing required field "GrantRequest.target_type"`)}
	}
	if v, ok := grc.mutation.TargetType(); ok {
		if err := grantrequest.TargetTypeValidator(v); err != nil {
			return &ValidationError{Name: "target_type", err: fmt.Errorf(`ent: validator failed for field "GrantRequest.target_type": %w`, err)}
		}
	}
	if _, ok := grc.mutation.TargetRoleName(); !ok {
		return &ValidationError{Name: "target_role_name", err: errors.New(`ent: missing required field "GrantRequest.target_role_name"`)}
	}
	if _, ok := grc.mutation.TargetSuiteName(); !ok {
		return &ValidationError{Name: "target_suite_name", err: errors.New(`ent: missing required field "GrantRequest.target_suite_name"`)}
	}
	if _, ok := grc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "GrantRequest.status"`)}
	}
	if v, ok := grc.mutation.Status(); ok {
		if err := grantrequest.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "GrantRequest.status": %w`, err)}
		}
	}
	return nil
}

func (grc *GrantRequestCreate) sqlSave(ctx context.Context) (*GrantRequest, error) {
	if err := grc.check(); err != nil {
		return nil, err
	}
	_node, _spec := grc.createSpec()
	if err := sqlgraph.CreateNode(ctx, grc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected GrantRequest.ID type: %T", _spec.ID.Value)
		}
	}
	grc.mutation.id = &_node.ID
	grc.mutation.done = true
	return _node, nil
}

func (grc *GrantRequestCreate) createSpec() (*GrantRequest, *sqlgraph.CreateSpec) {
	var (
		_node = &GrantRequest{config: grc.config}
		_spec = sqlgraph.NewCreateSpec(grantrequest.Table, sqlgraph.NewFieldSpec(grantrequest.FieldID, field.TypeString))
	)
	if id, ok := grc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := grc.mutation.AttachmentURL(); ok {
		_spec.SetField(grantrequest.FieldAttachmentURL, field.TypeString, value)
		_node.AttachmentURL = &value
	}
	if value, ok := grc.mutation.Comment(); ok {
		_spec.SetField(grantrequest.FieldComment, field.TypeString, value)
		_node.Comment = &value
	}
	if value, ok := grc.mutation.CreatedAt(); ok {
		_spec.SetField(grantrequest.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := grc.mutation.CreatedBy(); ok {
		_spec.SetField(grantrequest.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := grc.mutation.Etag(); ok {
		_spec.SetField(grantrequest.FieldEtag, field.TypeString, value)
		_node.Etag = value
	}
	if value, ok := grc.mutation.ReceiverID(); ok {
		_spec.SetField(grantrequest.FieldReceiverID, field.TypeString, value)
		_node.ReceiverID = value
	}
	if value, ok := grc.mutation.TargetType(); ok {
		_spec.SetField(grantrequest.FieldTargetType, field.TypeEnum, value)
		_node.TargetType = value
	}
	if value, ok := grc.mutation.TargetRoleName(); ok {
		_spec.SetField(grantrequest.FieldTargetRoleName, field.TypeString, value)
		_node.TargetRoleName = value
	}
	if value, ok := grc.mutation.TargetSuiteName(); ok {
		_spec.SetField(grantrequest.FieldTargetSuiteName, field.TypeString, value)
		_node.TargetSuiteName = value
	}
	if value, ok := grc.mutation.Status(); ok {
		_spec.SetField(grantrequest.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if nodes := grc.mutation.PermissionHistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   grantrequest.PermissionHistoriesTable,
			Columns: []string{grantrequest.PermissionHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permissionhistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := grc.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   grantrequest.RoleTable,
			Columns: []string{grantrequest.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TargetRoleID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := grc.mutation.RoleSuiteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   grantrequest.RoleSuiteTable,
			Columns: []string{grantrequest.RoleSuiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolesuite.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TargetSuiteID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// GrantRequestCreateBulk is the builder for creating many GrantRequest entities in bulk.
type GrantRequestCreateBulk struct {
	config
	err      error
	builders []*GrantRequestCreate
}

// Save creates the GrantRequest entities in the database.
func (grcb *GrantRequestCreateBulk) Save(ctx context.Context) ([]*GrantRequest, error) {
	if grcb.err != nil {
		return nil, grcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(grcb.builders))
	nodes := make([]*GrantRequest, len(grcb.builders))
	mutators := make([]Mutator, len(grcb.builders))
	for i := range grcb.builders {
		func(i int, root context.Context) {
			builder := grcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GrantRequestMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, grcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, grcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, grcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (grcb *GrantRequestCreateBulk) SaveX(ctx context.Context) []*GrantRequest {
	v, err := grcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (grcb *GrantRequestCreateBulk) Exec(ctx context.Context) error {
	_, err := grcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (grcb *GrantRequestCreateBulk) ExecX(ctx context.Context) {
	if err := grcb.Exec(ctx); err != nil {
		panic(err)
	}
}
