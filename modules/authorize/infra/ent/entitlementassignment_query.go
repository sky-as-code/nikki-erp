// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/entitlement"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/entitlementassignment"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/permissionhistory"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/predicate"
)

// EntitlementAssignmentQuery is the builder for querying EntitlementAssignment entities.
type EntitlementAssignmentQuery struct {
	config
	ctx                     *QueryContext
	order                   []entitlementassignment.OrderOption
	inters                  []Interceptor
	predicates              []predicate.EntitlementAssignment
	withEntitlement         *EntitlementQuery
	withPermissionHistories *PermissionHistoryQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the EntitlementAssignmentQuery builder.
func (eaq *EntitlementAssignmentQuery) Where(ps ...predicate.EntitlementAssignment) *EntitlementAssignmentQuery {
	eaq.predicates = append(eaq.predicates, ps...)
	return eaq
}

// Limit the number of records to be returned by this query.
func (eaq *EntitlementAssignmentQuery) Limit(limit int) *EntitlementAssignmentQuery {
	eaq.ctx.Limit = &limit
	return eaq
}

// Offset to start from.
func (eaq *EntitlementAssignmentQuery) Offset(offset int) *EntitlementAssignmentQuery {
	eaq.ctx.Offset = &offset
	return eaq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (eaq *EntitlementAssignmentQuery) Unique(unique bool) *EntitlementAssignmentQuery {
	eaq.ctx.Unique = &unique
	return eaq
}

// Order specifies how the records should be ordered.
func (eaq *EntitlementAssignmentQuery) Order(o ...entitlementassignment.OrderOption) *EntitlementAssignmentQuery {
	eaq.order = append(eaq.order, o...)
	return eaq
}

// QueryEntitlement chains the current query on the "entitlement" edge.
func (eaq *EntitlementAssignmentQuery) QueryEntitlement() *EntitlementQuery {
	query := (&EntitlementClient{config: eaq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(entitlementassignment.Table, entitlementassignment.FieldID, selector),
			sqlgraph.To(entitlement.Table, entitlement.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, entitlementassignment.EntitlementTable, entitlementassignment.EntitlementColumn),
		)
		fromU = sqlgraph.SetNeighbors(eaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPermissionHistories chains the current query on the "permission_histories" edge.
func (eaq *EntitlementAssignmentQuery) QueryPermissionHistories() *PermissionHistoryQuery {
	query := (&PermissionHistoryClient{config: eaq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(entitlementassignment.Table, entitlementassignment.FieldID, selector),
			sqlgraph.To(permissionhistory.Table, permissionhistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, entitlementassignment.PermissionHistoriesTable, entitlementassignment.PermissionHistoriesColumn),
		)
		fromU = sqlgraph.SetNeighbors(eaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first EntitlementAssignment entity from the query.
// Returns a *NotFoundError when no EntitlementAssignment was found.
func (eaq *EntitlementAssignmentQuery) First(ctx context.Context) (*EntitlementAssignment, error) {
	nodes, err := eaq.Limit(1).All(setContextOp(ctx, eaq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{entitlementassignment.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (eaq *EntitlementAssignmentQuery) FirstX(ctx context.Context) *EntitlementAssignment {
	node, err := eaq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first EntitlementAssignment ID from the query.
// Returns a *NotFoundError when no EntitlementAssignment ID was found.
func (eaq *EntitlementAssignmentQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = eaq.Limit(1).IDs(setContextOp(ctx, eaq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{entitlementassignment.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (eaq *EntitlementAssignmentQuery) FirstIDX(ctx context.Context) string {
	id, err := eaq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single EntitlementAssignment entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one EntitlementAssignment entity is found.
// Returns a *NotFoundError when no EntitlementAssignment entities are found.
func (eaq *EntitlementAssignmentQuery) Only(ctx context.Context) (*EntitlementAssignment, error) {
	nodes, err := eaq.Limit(2).All(setContextOp(ctx, eaq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{entitlementassignment.Label}
	default:
		return nil, &NotSingularError{entitlementassignment.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (eaq *EntitlementAssignmentQuery) OnlyX(ctx context.Context) *EntitlementAssignment {
	node, err := eaq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only EntitlementAssignment ID in the query.
// Returns a *NotSingularError when more than one EntitlementAssignment ID is found.
// Returns a *NotFoundError when no entities are found.
func (eaq *EntitlementAssignmentQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = eaq.Limit(2).IDs(setContextOp(ctx, eaq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{entitlementassignment.Label}
	default:
		err = &NotSingularError{entitlementassignment.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (eaq *EntitlementAssignmentQuery) OnlyIDX(ctx context.Context) string {
	id, err := eaq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of EntitlementAssignments.
func (eaq *EntitlementAssignmentQuery) All(ctx context.Context) ([]*EntitlementAssignment, error) {
	ctx = setContextOp(ctx, eaq.ctx, ent.OpQueryAll)
	if err := eaq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*EntitlementAssignment, *EntitlementAssignmentQuery]()
	return withInterceptors[[]*EntitlementAssignment](ctx, eaq, qr, eaq.inters)
}

// AllX is like All, but panics if an error occurs.
func (eaq *EntitlementAssignmentQuery) AllX(ctx context.Context) []*EntitlementAssignment {
	nodes, err := eaq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of EntitlementAssignment IDs.
func (eaq *EntitlementAssignmentQuery) IDs(ctx context.Context) (ids []string, err error) {
	if eaq.ctx.Unique == nil && eaq.path != nil {
		eaq.Unique(true)
	}
	ctx = setContextOp(ctx, eaq.ctx, ent.OpQueryIDs)
	if err = eaq.Select(entitlementassignment.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (eaq *EntitlementAssignmentQuery) IDsX(ctx context.Context) []string {
	ids, err := eaq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (eaq *EntitlementAssignmentQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, eaq.ctx, ent.OpQueryCount)
	if err := eaq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, eaq, querierCount[*EntitlementAssignmentQuery](), eaq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (eaq *EntitlementAssignmentQuery) CountX(ctx context.Context) int {
	count, err := eaq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (eaq *EntitlementAssignmentQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, eaq.ctx, ent.OpQueryExist)
	switch _, err := eaq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (eaq *EntitlementAssignmentQuery) ExistX(ctx context.Context) bool {
	exist, err := eaq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the EntitlementAssignmentQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (eaq *EntitlementAssignmentQuery) Clone() *EntitlementAssignmentQuery {
	if eaq == nil {
		return nil
	}
	return &EntitlementAssignmentQuery{
		config:                  eaq.config,
		ctx:                     eaq.ctx.Clone(),
		order:                   append([]entitlementassignment.OrderOption{}, eaq.order...),
		inters:                  append([]Interceptor{}, eaq.inters...),
		predicates:              append([]predicate.EntitlementAssignment{}, eaq.predicates...),
		withEntitlement:         eaq.withEntitlement.Clone(),
		withPermissionHistories: eaq.withPermissionHistories.Clone(),
		// clone intermediate query.
		sql:  eaq.sql.Clone(),
		path: eaq.path,
	}
}

// WithEntitlement tells the query-builder to eager-load the nodes that are connected to
// the "entitlement" edge. The optional arguments are used to configure the query builder of the edge.
func (eaq *EntitlementAssignmentQuery) WithEntitlement(opts ...func(*EntitlementQuery)) *EntitlementAssignmentQuery {
	query := (&EntitlementClient{config: eaq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eaq.withEntitlement = query
	return eaq
}

// WithPermissionHistories tells the query-builder to eager-load the nodes that are connected to
// the "permission_histories" edge. The optional arguments are used to configure the query builder of the edge.
func (eaq *EntitlementAssignmentQuery) WithPermissionHistories(opts ...func(*PermissionHistoryQuery)) *EntitlementAssignmentQuery {
	query := (&PermissionHistoryClient{config: eaq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eaq.withPermissionHistories = query
	return eaq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		EntitlementID string `json:"entitlement_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.EntitlementAssignment.Query().
//		GroupBy(entitlementassignment.FieldEntitlementID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (eaq *EntitlementAssignmentQuery) GroupBy(field string, fields ...string) *EntitlementAssignmentGroupBy {
	eaq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &EntitlementAssignmentGroupBy{build: eaq}
	grbuild.flds = &eaq.ctx.Fields
	grbuild.label = entitlementassignment.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		EntitlementID string `json:"entitlement_id,omitempty"`
//	}
//
//	client.EntitlementAssignment.Query().
//		Select(entitlementassignment.FieldEntitlementID).
//		Scan(ctx, &v)
func (eaq *EntitlementAssignmentQuery) Select(fields ...string) *EntitlementAssignmentSelect {
	eaq.ctx.Fields = append(eaq.ctx.Fields, fields...)
	sbuild := &EntitlementAssignmentSelect{EntitlementAssignmentQuery: eaq}
	sbuild.label = entitlementassignment.Label
	sbuild.flds, sbuild.scan = &eaq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a EntitlementAssignmentSelect configured with the given aggregations.
func (eaq *EntitlementAssignmentQuery) Aggregate(fns ...AggregateFunc) *EntitlementAssignmentSelect {
	return eaq.Select().Aggregate(fns...)
}

func (eaq *EntitlementAssignmentQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range eaq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, eaq); err != nil {
				return err
			}
		}
	}
	for _, f := range eaq.ctx.Fields {
		if !entitlementassignment.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if eaq.path != nil {
		prev, err := eaq.path(ctx)
		if err != nil {
			return err
		}
		eaq.sql = prev
	}
	return nil
}

func (eaq *EntitlementAssignmentQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*EntitlementAssignment, error) {
	var (
		nodes       = []*EntitlementAssignment{}
		_spec       = eaq.querySpec()
		loadedTypes = [2]bool{
			eaq.withEntitlement != nil,
			eaq.withPermissionHistories != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*EntitlementAssignment).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &EntitlementAssignment{config: eaq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, eaq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := eaq.withEntitlement; query != nil {
		if err := eaq.loadEntitlement(ctx, query, nodes, nil,
			func(n *EntitlementAssignment, e *Entitlement) { n.Edges.Entitlement = e }); err != nil {
			return nil, err
		}
	}
	if query := eaq.withPermissionHistories; query != nil {
		if err := eaq.loadPermissionHistories(ctx, query, nodes,
			func(n *EntitlementAssignment) { n.Edges.PermissionHistories = []*PermissionHistory{} },
			func(n *EntitlementAssignment, e *PermissionHistory) {
				n.Edges.PermissionHistories = append(n.Edges.PermissionHistories, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (eaq *EntitlementAssignmentQuery) loadEntitlement(ctx context.Context, query *EntitlementQuery, nodes []*EntitlementAssignment, init func(*EntitlementAssignment), assign func(*EntitlementAssignment, *Entitlement)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*EntitlementAssignment)
	for i := range nodes {
		fk := nodes[i].EntitlementID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(entitlement.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "entitlement_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (eaq *EntitlementAssignmentQuery) loadPermissionHistories(ctx context.Context, query *PermissionHistoryQuery, nodes []*EntitlementAssignment, init func(*EntitlementAssignment), assign func(*EntitlementAssignment, *PermissionHistory)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*EntitlementAssignment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(permissionhistory.FieldEntitlementAssignmentID)
	}
	query.Where(predicate.PermissionHistory(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(entitlementassignment.PermissionHistoriesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.EntitlementAssignmentID
		if fk == nil {
			return fmt.Errorf(`foreign-key "entitlement_assignment_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "entitlement_assignment_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (eaq *EntitlementAssignmentQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := eaq.querySpec()
	_spec.Node.Columns = eaq.ctx.Fields
	if len(eaq.ctx.Fields) > 0 {
		_spec.Unique = eaq.ctx.Unique != nil && *eaq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, eaq.driver, _spec)
}

func (eaq *EntitlementAssignmentQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(entitlementassignment.Table, entitlementassignment.Columns, sqlgraph.NewFieldSpec(entitlementassignment.FieldID, field.TypeString))
	_spec.From = eaq.sql
	if unique := eaq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if eaq.path != nil {
		_spec.Unique = true
	}
	if fields := eaq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, entitlementassignment.FieldID)
		for i := range fields {
			if fields[i] != entitlementassignment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if eaq.withEntitlement != nil {
			_spec.Node.AddColumnOnce(entitlementassignment.FieldEntitlementID)
		}
	}
	if ps := eaq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := eaq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := eaq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := eaq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (eaq *EntitlementAssignmentQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(eaq.driver.Dialect())
	t1 := builder.Table(entitlementassignment.Table)
	columns := eaq.ctx.Fields
	if len(columns) == 0 {
		columns = entitlementassignment.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if eaq.sql != nil {
		selector = eaq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if eaq.ctx.Unique != nil && *eaq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range eaq.predicates {
		p(selector)
	}
	for _, p := range eaq.order {
		p(selector)
	}
	if offset := eaq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := eaq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// EntitlementAssignmentGroupBy is the group-by builder for EntitlementAssignment entities.
type EntitlementAssignmentGroupBy struct {
	selector
	build *EntitlementAssignmentQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (eagb *EntitlementAssignmentGroupBy) Aggregate(fns ...AggregateFunc) *EntitlementAssignmentGroupBy {
	eagb.fns = append(eagb.fns, fns...)
	return eagb
}

// Scan applies the selector query and scans the result into the given value.
func (eagb *EntitlementAssignmentGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, eagb.build.ctx, ent.OpQueryGroupBy)
	if err := eagb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EntitlementAssignmentQuery, *EntitlementAssignmentGroupBy](ctx, eagb.build, eagb, eagb.build.inters, v)
}

func (eagb *EntitlementAssignmentGroupBy) sqlScan(ctx context.Context, root *EntitlementAssignmentQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(eagb.fns))
	for _, fn := range eagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*eagb.flds)+len(eagb.fns))
		for _, f := range *eagb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*eagb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := eagb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// EntitlementAssignmentSelect is the builder for selecting fields of EntitlementAssignment entities.
type EntitlementAssignmentSelect struct {
	*EntitlementAssignmentQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (eas *EntitlementAssignmentSelect) Aggregate(fns ...AggregateFunc) *EntitlementAssignmentSelect {
	eas.fns = append(eas.fns, fns...)
	return eas
}

// Scan applies the selector query and scans the result into the given value.
func (eas *EntitlementAssignmentSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, eas.ctx, ent.OpQuerySelect)
	if err := eas.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EntitlementAssignmentQuery, *EntitlementAssignmentSelect](ctx, eas.EntitlementAssignmentQuery, eas, eas.inters, v)
}

func (eas *EntitlementAssignmentSelect) sqlScan(ctx context.Context, root *EntitlementAssignmentQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(eas.fns))
	for _, fn := range eas.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*eas.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := eas.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
