// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/role"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/rolerolesuite"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/rolesuite"
)

// RoleRoleSuiteCreate is the builder for creating a RoleRoleSuite entity.
type RoleRoleSuiteCreate struct {
	config
	mutation *RoleRoleSuiteMutation
	hooks    []Hook
}

// SetRoleID sets the "role_id" field.
func (rrsc *RoleRoleSuiteCreate) SetRoleID(s string) *RoleRoleSuiteCreate {
	rrsc.mutation.SetRoleID(s)
	return rrsc
}

// SetRoleSuiteID sets the "role_suite_id" field.
func (rrsc *RoleRoleSuiteCreate) SetRoleSuiteID(s string) *RoleRoleSuiteCreate {
	rrsc.mutation.SetRoleSuiteID(s)
	return rrsc
}

// SetRole sets the "role" edge to the Role entity.
func (rrsc *RoleRoleSuiteCreate) SetRole(r *Role) *RoleRoleSuiteCreate {
	return rrsc.SetRoleID(r.ID)
}

// SetRoleSuite sets the "role_suite" edge to the RoleSuite entity.
func (rrsc *RoleRoleSuiteCreate) SetRoleSuite(r *RoleSuite) *RoleRoleSuiteCreate {
	return rrsc.SetRoleSuiteID(r.ID)
}

// Mutation returns the RoleRoleSuiteMutation object of the builder.
func (rrsc *RoleRoleSuiteCreate) Mutation() *RoleRoleSuiteMutation {
	return rrsc.mutation
}

// Save creates the RoleRoleSuite in the database.
func (rrsc *RoleRoleSuiteCreate) Save(ctx context.Context) (*RoleRoleSuite, error) {
	return withHooks(ctx, rrsc.sqlSave, rrsc.mutation, rrsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rrsc *RoleRoleSuiteCreate) SaveX(ctx context.Context) *RoleRoleSuite {
	v, err := rrsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rrsc *RoleRoleSuiteCreate) Exec(ctx context.Context) error {
	_, err := rrsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rrsc *RoleRoleSuiteCreate) ExecX(ctx context.Context) {
	if err := rrsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rrsc *RoleRoleSuiteCreate) check() error {
	if _, ok := rrsc.mutation.RoleID(); !ok {
		return &ValidationError{Name: "role_id", err: errors.New(`ent: missing required field "RoleRoleSuite.role_id"`)}
	}
	if _, ok := rrsc.mutation.RoleSuiteID(); !ok {
		return &ValidationError{Name: "role_suite_id", err: errors.New(`ent: missing required field "RoleRoleSuite.role_suite_id"`)}
	}
	if len(rrsc.mutation.RoleIDs()) == 0 {
		return &ValidationError{Name: "role", err: errors.New(`ent: missing required edge "RoleRoleSuite.role"`)}
	}
	if len(rrsc.mutation.RoleSuiteIDs()) == 0 {
		return &ValidationError{Name: "role_suite", err: errors.New(`ent: missing required edge "RoleRoleSuite.role_suite"`)}
	}
	return nil
}

func (rrsc *RoleRoleSuiteCreate) sqlSave(ctx context.Context) (*RoleRoleSuite, error) {
	if err := rrsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rrsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rrsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

func (rrsc *RoleRoleSuiteCreate) createSpec() (*RoleRoleSuite, *sqlgraph.CreateSpec) {
	var (
		_node = &RoleRoleSuite{config: rrsc.config}
		_spec = sqlgraph.NewCreateSpec(rolerolesuite.Table, nil)
	)
	if nodes := rrsc.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rolerolesuite.RoleTable,
			Columns: []string{rolerolesuite.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RoleID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rrsc.mutation.RoleSuiteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rolerolesuite.RoleSuiteTable,
			Columns: []string{rolerolesuite.RoleSuiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolesuite.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RoleSuiteID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RoleRoleSuiteCreateBulk is the builder for creating many RoleRoleSuite entities in bulk.
type RoleRoleSuiteCreateBulk struct {
	config
	err      error
	builders []*RoleRoleSuiteCreate
}

// Save creates the RoleRoleSuite entities in the database.
func (rrscb *RoleRoleSuiteCreateBulk) Save(ctx context.Context) ([]*RoleRoleSuite, error) {
	if rrscb.err != nil {
		return nil, rrscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rrscb.builders))
	nodes := make([]*RoleRoleSuite, len(rrscb.builders))
	mutators := make([]Mutator, len(rrscb.builders))
	for i := range rrscb.builders {
		func(i int, root context.Context) {
			builder := rrscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RoleRoleSuiteMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rrscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rrscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rrscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rrscb *RoleRoleSuiteCreateBulk) SaveX(ctx context.Context) []*RoleRoleSuite {
	v, err := rrscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rrscb *RoleRoleSuiteCreateBulk) Exec(ctx context.Context) error {
	_, err := rrscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rrscb *RoleRoleSuiteCreateBulk) ExecX(ctx context.Context) {
	if err := rrscb.Exec(ctx); err != nil {
		panic(err)
	}
}
