// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/predicate"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/rolesuiteuser"
)

// RoleSuiteUserDelete is the builder for deleting a RoleSuiteUser entity.
type RoleSuiteUserDelete struct {
	config
	hooks    []Hook
	mutation *RoleSuiteUserMutation
}

// Where appends a list predicates to the RoleSuiteUserDelete builder.
func (rsud *RoleSuiteUserDelete) Where(ps ...predicate.RoleSuiteUser) *RoleSuiteUserDelete {
	rsud.mutation.Where(ps...)
	return rsud
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (rsud *RoleSuiteUserDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, rsud.sqlExec, rsud.mutation, rsud.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (rsud *RoleSuiteUserDelete) ExecX(ctx context.Context) int {
	n, err := rsud.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (rsud *RoleSuiteUserDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(rolesuiteuser.Table, sqlgraph.NewFieldSpec(rolesuiteuser.FieldID, field.TypeInt))
	if ps := rsud.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, rsud.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	rsud.mutation.done = true
	return affected, err
}

// RoleSuiteUserDeleteOne is the builder for deleting a single RoleSuiteUser entity.
type RoleSuiteUserDeleteOne struct {
	rsud *RoleSuiteUserDelete
}

// Where appends a list predicates to the RoleSuiteUserDelete builder.
func (rsudo *RoleSuiteUserDeleteOne) Where(ps ...predicate.RoleSuiteUser) *RoleSuiteUserDeleteOne {
	rsudo.rsud.mutation.Where(ps...)
	return rsudo
}

// Exec executes the deletion query.
func (rsudo *RoleSuiteUserDeleteOne) Exec(ctx context.Context) error {
	n, err := rsudo.rsud.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{rolesuiteuser.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (rsudo *RoleSuiteUserDeleteOne) ExecX(ctx context.Context) {
	if err := rsudo.Exec(ctx); err != nil {
		panic(err)
	}
}
