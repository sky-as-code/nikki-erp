// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/action"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/entitlement"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/entitlementassignment"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/permissionhistory"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/resource"
)

// EntitlementCreate is the builder for creating a Entitlement entity.
type EntitlementCreate struct {
	config
	mutation *EntitlementMutation
	hooks    []Hook
}

// SetActionID sets the "action_id" field.
func (ec *EntitlementCreate) SetActionID(s string) *EntitlementCreate {
	ec.mutation.SetActionID(s)
	return ec
}

// SetNillableActionID sets the "action_id" field if the given value is not nil.
func (ec *EntitlementCreate) SetNillableActionID(s *string) *EntitlementCreate {
	if s != nil {
		ec.SetActionID(*s)
	}
	return ec
}

// SetActionExpr sets the "action_expr" field.
func (ec *EntitlementCreate) SetActionExpr(s string) *EntitlementCreate {
	ec.mutation.SetActionExpr(s)
	return ec
}

// SetCreatedAt sets the "created_at" field.
func (ec *EntitlementCreate) SetCreatedAt(t time.Time) *EntitlementCreate {
	ec.mutation.SetCreatedAt(t)
	return ec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ec *EntitlementCreate) SetNillableCreatedAt(t *time.Time) *EntitlementCreate {
	if t != nil {
		ec.SetCreatedAt(*t)
	}
	return ec
}

// SetCreatedBy sets the "created_by" field.
func (ec *EntitlementCreate) SetCreatedBy(s string) *EntitlementCreate {
	ec.mutation.SetCreatedBy(s)
	return ec
}

// SetName sets the "name" field.
func (ec *EntitlementCreate) SetName(s string) *EntitlementCreate {
	ec.mutation.SetName(s)
	return ec
}

// SetDescription sets the "description" field.
func (ec *EntitlementCreate) SetDescription(s string) *EntitlementCreate {
	ec.mutation.SetDescription(s)
	return ec
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ec *EntitlementCreate) SetNillableDescription(s *string) *EntitlementCreate {
	if s != nil {
		ec.SetDescription(*s)
	}
	return ec
}

// SetEtag sets the "etag" field.
func (ec *EntitlementCreate) SetEtag(s string) *EntitlementCreate {
	ec.mutation.SetEtag(s)
	return ec
}

// SetResourceID sets the "resource_id" field.
func (ec *EntitlementCreate) SetResourceID(s string) *EntitlementCreate {
	ec.mutation.SetResourceID(s)
	return ec
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (ec *EntitlementCreate) SetNillableResourceID(s *string) *EntitlementCreate {
	if s != nil {
		ec.SetResourceID(*s)
	}
	return ec
}

// SetOrgID sets the "org_id" field.
func (ec *EntitlementCreate) SetOrgID(s string) *EntitlementCreate {
	ec.mutation.SetOrgID(s)
	return ec
}

// SetNillableOrgID sets the "org_id" field if the given value is not nil.
func (ec *EntitlementCreate) SetNillableOrgID(s *string) *EntitlementCreate {
	if s != nil {
		ec.SetOrgID(*s)
	}
	return ec
}

// SetID sets the "id" field.
func (ec *EntitlementCreate) SetID(s string) *EntitlementCreate {
	ec.mutation.SetID(s)
	return ec
}

// AddPermissionHistoryIDs adds the "permission_histories" edge to the PermissionHistory entity by IDs.
func (ec *EntitlementCreate) AddPermissionHistoryIDs(ids ...string) *EntitlementCreate {
	ec.mutation.AddPermissionHistoryIDs(ids...)
	return ec
}

// AddPermissionHistories adds the "permission_histories" edges to the PermissionHistory entity.
func (ec *EntitlementCreate) AddPermissionHistories(p ...*PermissionHistory) *EntitlementCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ec.AddPermissionHistoryIDs(ids...)
}

// AddEntitlementAssignmentIDs adds the "entitlement_assignments" edge to the EntitlementAssignment entity by IDs.
func (ec *EntitlementCreate) AddEntitlementAssignmentIDs(ids ...string) *EntitlementCreate {
	ec.mutation.AddEntitlementAssignmentIDs(ids...)
	return ec
}

// AddEntitlementAssignments adds the "entitlement_assignments" edges to the EntitlementAssignment entity.
func (ec *EntitlementCreate) AddEntitlementAssignments(e ...*EntitlementAssignment) *EntitlementCreate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ec.AddEntitlementAssignmentIDs(ids...)
}

// SetAction sets the "action" edge to the Action entity.
func (ec *EntitlementCreate) SetAction(a *Action) *EntitlementCreate {
	return ec.SetActionID(a.ID)
}

// SetResource sets the "resource" edge to the Resource entity.
func (ec *EntitlementCreate) SetResource(r *Resource) *EntitlementCreate {
	return ec.SetResourceID(r.ID)
}

// Mutation returns the EntitlementMutation object of the builder.
func (ec *EntitlementCreate) Mutation() *EntitlementMutation {
	return ec.mutation
}

// Save creates the Entitlement in the database.
func (ec *EntitlementCreate) Save(ctx context.Context) (*Entitlement, error) {
	ec.defaults()
	return withHooks(ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EntitlementCreate) SaveX(ctx context.Context) *Entitlement {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *EntitlementCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *EntitlementCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ec *EntitlementCreate) defaults() {
	if _, ok := ec.mutation.CreatedAt(); !ok {
		v := entitlement.DefaultCreatedAt()
		ec.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *EntitlementCreate) check() error {
	if _, ok := ec.mutation.ActionExpr(); !ok {
		return &ValidationError{Name: "action_expr", err: errors.New(`ent: missing required field "Entitlement.action_expr"`)}
	}
	if _, ok := ec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Entitlement.created_at"`)}
	}
	if _, ok := ec.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "Entitlement.created_by"`)}
	}
	if _, ok := ec.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Entitlement.name"`)}
	}
	if _, ok := ec.mutation.Etag(); !ok {
		return &ValidationError{Name: "etag", err: errors.New(`ent: missing required field "Entitlement.etag"`)}
	}
	return nil
}

func (ec *EntitlementCreate) sqlSave(ctx context.Context) (*Entitlement, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Entitlement.ID type: %T", _spec.ID.Value)
		}
	}
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *EntitlementCreate) createSpec() (*Entitlement, *sqlgraph.CreateSpec) {
	var (
		_node = &Entitlement{config: ec.config}
		_spec = sqlgraph.NewCreateSpec(entitlement.Table, sqlgraph.NewFieldSpec(entitlement.FieldID, field.TypeString))
	)
	if id, ok := ec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ec.mutation.ActionExpr(); ok {
		_spec.SetField(entitlement.FieldActionExpr, field.TypeString, value)
		_node.ActionExpr = value
	}
	if value, ok := ec.mutation.CreatedAt(); ok {
		_spec.SetField(entitlement.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ec.mutation.CreatedBy(); ok {
		_spec.SetField(entitlement.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := ec.mutation.Name(); ok {
		_spec.SetField(entitlement.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ec.mutation.Description(); ok {
		_spec.SetField(entitlement.FieldDescription, field.TypeString, value)
		_node.Description = &value
	}
	if value, ok := ec.mutation.Etag(); ok {
		_spec.SetField(entitlement.FieldEtag, field.TypeString, value)
		_node.Etag = value
	}
	if value, ok := ec.mutation.OrgID(); ok {
		_spec.SetField(entitlement.FieldOrgID, field.TypeString, value)
		_node.OrgID = &value
	}
	if nodes := ec.mutation.PermissionHistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   entitlement.PermissionHistoriesTable,
			Columns: []string{entitlement.PermissionHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permissionhistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.EntitlementAssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   entitlement.EntitlementAssignmentsTable,
			Columns: []string{entitlement.EntitlementAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlementassignment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.ActionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   entitlement.ActionTable,
			Columns: []string{entitlement.ActionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(action.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ActionID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.ResourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   entitlement.ResourceTable,
			Columns: []string{entitlement.ResourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ResourceID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EntitlementCreateBulk is the builder for creating many Entitlement entities in bulk.
type EntitlementCreateBulk struct {
	config
	err      error
	builders []*EntitlementCreate
}

// Save creates the Entitlement entities in the database.
func (ecb *EntitlementCreateBulk) Save(ctx context.Context) ([]*Entitlement, error) {
	if ecb.err != nil {
		return nil, ecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Entitlement, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EntitlementMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EntitlementCreateBulk) SaveX(ctx context.Context) []*Entitlement {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *EntitlementCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *EntitlementCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}
