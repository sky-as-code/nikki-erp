// Code generated by ent, DO NOT EDIT.

package grantrequest

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldContainsFold(FieldID, id))
}

// AttachmentURL applies equality check predicate on the "attachment_url" field. It's identical to AttachmentURLEQ.
func AttachmentURL(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldEQ(FieldAttachmentURL, v))
}

// Comment applies equality check predicate on the "comment" field. It's identical to CommentEQ.
func Comment(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldEQ(FieldComment, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldEQ(FieldCreatedBy, v))
}

// Etag applies equality check predicate on the "etag" field. It's identical to EtagEQ.
func Etag(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldEQ(FieldEtag, v))
}

// ReceiverID applies equality check predicate on the "receiver_id" field. It's identical to ReceiverIDEQ.
func ReceiverID(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldEQ(FieldReceiverID, v))
}

// TargetRoleID applies equality check predicate on the "target_role_id" field. It's identical to TargetRoleIDEQ.
func TargetRoleID(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldEQ(FieldTargetRoleID, v))
}

// TargetSuiteID applies equality check predicate on the "target_suite_id" field. It's identical to TargetSuiteIDEQ.
func TargetSuiteID(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldEQ(FieldTargetSuiteID, v))
}

// AttachmentURLEQ applies the EQ predicate on the "attachment_url" field.
func AttachmentURLEQ(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldEQ(FieldAttachmentURL, v))
}

// AttachmentURLNEQ applies the NEQ predicate on the "attachment_url" field.
func AttachmentURLNEQ(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldNEQ(FieldAttachmentURL, v))
}

// AttachmentURLIn applies the In predicate on the "attachment_url" field.
func AttachmentURLIn(vs ...string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldIn(FieldAttachmentURL, vs...))
}

// AttachmentURLNotIn applies the NotIn predicate on the "attachment_url" field.
func AttachmentURLNotIn(vs ...string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldNotIn(FieldAttachmentURL, vs...))
}

// AttachmentURLGT applies the GT predicate on the "attachment_url" field.
func AttachmentURLGT(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldGT(FieldAttachmentURL, v))
}

// AttachmentURLGTE applies the GTE predicate on the "attachment_url" field.
func AttachmentURLGTE(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldGTE(FieldAttachmentURL, v))
}

// AttachmentURLLT applies the LT predicate on the "attachment_url" field.
func AttachmentURLLT(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldLT(FieldAttachmentURL, v))
}

// AttachmentURLLTE applies the LTE predicate on the "attachment_url" field.
func AttachmentURLLTE(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldLTE(FieldAttachmentURL, v))
}

// AttachmentURLContains applies the Contains predicate on the "attachment_url" field.
func AttachmentURLContains(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldContains(FieldAttachmentURL, v))
}

// AttachmentURLHasPrefix applies the HasPrefix predicate on the "attachment_url" field.
func AttachmentURLHasPrefix(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldHasPrefix(FieldAttachmentURL, v))
}

// AttachmentURLHasSuffix applies the HasSuffix predicate on the "attachment_url" field.
func AttachmentURLHasSuffix(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldHasSuffix(FieldAttachmentURL, v))
}

// AttachmentURLIsNil applies the IsNil predicate on the "attachment_url" field.
func AttachmentURLIsNil() predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldIsNull(FieldAttachmentURL))
}

// AttachmentURLNotNil applies the NotNil predicate on the "attachment_url" field.
func AttachmentURLNotNil() predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldNotNull(FieldAttachmentURL))
}

// AttachmentURLEqualFold applies the EqualFold predicate on the "attachment_url" field.
func AttachmentURLEqualFold(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldEqualFold(FieldAttachmentURL, v))
}

// AttachmentURLContainsFold applies the ContainsFold predicate on the "attachment_url" field.
func AttachmentURLContainsFold(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldContainsFold(FieldAttachmentURL, v))
}

// CommentEQ applies the EQ predicate on the "comment" field.
func CommentEQ(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldEQ(FieldComment, v))
}

// CommentNEQ applies the NEQ predicate on the "comment" field.
func CommentNEQ(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldNEQ(FieldComment, v))
}

// CommentIn applies the In predicate on the "comment" field.
func CommentIn(vs ...string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldIn(FieldComment, vs...))
}

// CommentNotIn applies the NotIn predicate on the "comment" field.
func CommentNotIn(vs ...string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldNotIn(FieldComment, vs...))
}

// CommentGT applies the GT predicate on the "comment" field.
func CommentGT(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldGT(FieldComment, v))
}

// CommentGTE applies the GTE predicate on the "comment" field.
func CommentGTE(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldGTE(FieldComment, v))
}

// CommentLT applies the LT predicate on the "comment" field.
func CommentLT(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldLT(FieldComment, v))
}

// CommentLTE applies the LTE predicate on the "comment" field.
func CommentLTE(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldLTE(FieldComment, v))
}

// CommentContains applies the Contains predicate on the "comment" field.
func CommentContains(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldContains(FieldComment, v))
}

// CommentHasPrefix applies the HasPrefix predicate on the "comment" field.
func CommentHasPrefix(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldHasPrefix(FieldComment, v))
}

// CommentHasSuffix applies the HasSuffix predicate on the "comment" field.
func CommentHasSuffix(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldHasSuffix(FieldComment, v))
}

// CommentIsNil applies the IsNil predicate on the "comment" field.
func CommentIsNil() predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldIsNull(FieldComment))
}

// CommentNotNil applies the NotNil predicate on the "comment" field.
func CommentNotNil() predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldNotNull(FieldComment))
}

// CommentEqualFold applies the EqualFold predicate on the "comment" field.
func CommentEqualFold(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldEqualFold(FieldComment, v))
}

// CommentContainsFold applies the ContainsFold predicate on the "comment" field.
func CommentContainsFold(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldContainsFold(FieldComment, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldContainsFold(FieldCreatedBy, v))
}

// EtagEQ applies the EQ predicate on the "etag" field.
func EtagEQ(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldEQ(FieldEtag, v))
}

// EtagNEQ applies the NEQ predicate on the "etag" field.
func EtagNEQ(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldNEQ(FieldEtag, v))
}

// EtagIn applies the In predicate on the "etag" field.
func EtagIn(vs ...string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldIn(FieldEtag, vs...))
}

// EtagNotIn applies the NotIn predicate on the "etag" field.
func EtagNotIn(vs ...string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldNotIn(FieldEtag, vs...))
}

// EtagGT applies the GT predicate on the "etag" field.
func EtagGT(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldGT(FieldEtag, v))
}

// EtagGTE applies the GTE predicate on the "etag" field.
func EtagGTE(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldGTE(FieldEtag, v))
}

// EtagLT applies the LT predicate on the "etag" field.
func EtagLT(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldLT(FieldEtag, v))
}

// EtagLTE applies the LTE predicate on the "etag" field.
func EtagLTE(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldLTE(FieldEtag, v))
}

// EtagContains applies the Contains predicate on the "etag" field.
func EtagContains(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldContains(FieldEtag, v))
}

// EtagHasPrefix applies the HasPrefix predicate on the "etag" field.
func EtagHasPrefix(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldHasPrefix(FieldEtag, v))
}

// EtagHasSuffix applies the HasSuffix predicate on the "etag" field.
func EtagHasSuffix(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldHasSuffix(FieldEtag, v))
}

// EtagEqualFold applies the EqualFold predicate on the "etag" field.
func EtagEqualFold(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldEqualFold(FieldEtag, v))
}

// EtagContainsFold applies the ContainsFold predicate on the "etag" field.
func EtagContainsFold(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldContainsFold(FieldEtag, v))
}

// ReceiverIDEQ applies the EQ predicate on the "receiver_id" field.
func ReceiverIDEQ(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldEQ(FieldReceiverID, v))
}

// ReceiverIDNEQ applies the NEQ predicate on the "receiver_id" field.
func ReceiverIDNEQ(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldNEQ(FieldReceiverID, v))
}

// ReceiverIDIn applies the In predicate on the "receiver_id" field.
func ReceiverIDIn(vs ...string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldIn(FieldReceiverID, vs...))
}

// ReceiverIDNotIn applies the NotIn predicate on the "receiver_id" field.
func ReceiverIDNotIn(vs ...string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldNotIn(FieldReceiverID, vs...))
}

// ReceiverIDGT applies the GT predicate on the "receiver_id" field.
func ReceiverIDGT(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldGT(FieldReceiverID, v))
}

// ReceiverIDGTE applies the GTE predicate on the "receiver_id" field.
func ReceiverIDGTE(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldGTE(FieldReceiverID, v))
}

// ReceiverIDLT applies the LT predicate on the "receiver_id" field.
func ReceiverIDLT(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldLT(FieldReceiverID, v))
}

// ReceiverIDLTE applies the LTE predicate on the "receiver_id" field.
func ReceiverIDLTE(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldLTE(FieldReceiverID, v))
}

// ReceiverIDContains applies the Contains predicate on the "receiver_id" field.
func ReceiverIDContains(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldContains(FieldReceiverID, v))
}

// ReceiverIDHasPrefix applies the HasPrefix predicate on the "receiver_id" field.
func ReceiverIDHasPrefix(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldHasPrefix(FieldReceiverID, v))
}

// ReceiverIDHasSuffix applies the HasSuffix predicate on the "receiver_id" field.
func ReceiverIDHasSuffix(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldHasSuffix(FieldReceiverID, v))
}

// ReceiverIDEqualFold applies the EqualFold predicate on the "receiver_id" field.
func ReceiverIDEqualFold(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldEqualFold(FieldReceiverID, v))
}

// ReceiverIDContainsFold applies the ContainsFold predicate on the "receiver_id" field.
func ReceiverIDContainsFold(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldContainsFold(FieldReceiverID, v))
}

// TargetTypeEQ applies the EQ predicate on the "target_type" field.
func TargetTypeEQ(v TargetType) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldEQ(FieldTargetType, v))
}

// TargetTypeNEQ applies the NEQ predicate on the "target_type" field.
func TargetTypeNEQ(v TargetType) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldNEQ(FieldTargetType, v))
}

// TargetTypeIn applies the In predicate on the "target_type" field.
func TargetTypeIn(vs ...TargetType) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldIn(FieldTargetType, vs...))
}

// TargetTypeNotIn applies the NotIn predicate on the "target_type" field.
func TargetTypeNotIn(vs ...TargetType) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldNotIn(FieldTargetType, vs...))
}

// TargetRoleIDEQ applies the EQ predicate on the "target_role_id" field.
func TargetRoleIDEQ(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldEQ(FieldTargetRoleID, v))
}

// TargetRoleIDNEQ applies the NEQ predicate on the "target_role_id" field.
func TargetRoleIDNEQ(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldNEQ(FieldTargetRoleID, v))
}

// TargetRoleIDIn applies the In predicate on the "target_role_id" field.
func TargetRoleIDIn(vs ...string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldIn(FieldTargetRoleID, vs...))
}

// TargetRoleIDNotIn applies the NotIn predicate on the "target_role_id" field.
func TargetRoleIDNotIn(vs ...string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldNotIn(FieldTargetRoleID, vs...))
}

// TargetRoleIDGT applies the GT predicate on the "target_role_id" field.
func TargetRoleIDGT(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldGT(FieldTargetRoleID, v))
}

// TargetRoleIDGTE applies the GTE predicate on the "target_role_id" field.
func TargetRoleIDGTE(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldGTE(FieldTargetRoleID, v))
}

// TargetRoleIDLT applies the LT predicate on the "target_role_id" field.
func TargetRoleIDLT(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldLT(FieldTargetRoleID, v))
}

// TargetRoleIDLTE applies the LTE predicate on the "target_role_id" field.
func TargetRoleIDLTE(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldLTE(FieldTargetRoleID, v))
}

// TargetRoleIDContains applies the Contains predicate on the "target_role_id" field.
func TargetRoleIDContains(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldContains(FieldTargetRoleID, v))
}

// TargetRoleIDHasPrefix applies the HasPrefix predicate on the "target_role_id" field.
func TargetRoleIDHasPrefix(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldHasPrefix(FieldTargetRoleID, v))
}

// TargetRoleIDHasSuffix applies the HasSuffix predicate on the "target_role_id" field.
func TargetRoleIDHasSuffix(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldHasSuffix(FieldTargetRoleID, v))
}

// TargetRoleIDIsNil applies the IsNil predicate on the "target_role_id" field.
func TargetRoleIDIsNil() predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldIsNull(FieldTargetRoleID))
}

// TargetRoleIDNotNil applies the NotNil predicate on the "target_role_id" field.
func TargetRoleIDNotNil() predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldNotNull(FieldTargetRoleID))
}

// TargetRoleIDEqualFold applies the EqualFold predicate on the "target_role_id" field.
func TargetRoleIDEqualFold(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldEqualFold(FieldTargetRoleID, v))
}

// TargetRoleIDContainsFold applies the ContainsFold predicate on the "target_role_id" field.
func TargetRoleIDContainsFold(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldContainsFold(FieldTargetRoleID, v))
}

// TargetSuiteIDEQ applies the EQ predicate on the "target_suite_id" field.
func TargetSuiteIDEQ(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldEQ(FieldTargetSuiteID, v))
}

// TargetSuiteIDNEQ applies the NEQ predicate on the "target_suite_id" field.
func TargetSuiteIDNEQ(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldNEQ(FieldTargetSuiteID, v))
}

// TargetSuiteIDIn applies the In predicate on the "target_suite_id" field.
func TargetSuiteIDIn(vs ...string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldIn(FieldTargetSuiteID, vs...))
}

// TargetSuiteIDNotIn applies the NotIn predicate on the "target_suite_id" field.
func TargetSuiteIDNotIn(vs ...string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldNotIn(FieldTargetSuiteID, vs...))
}

// TargetSuiteIDGT applies the GT predicate on the "target_suite_id" field.
func TargetSuiteIDGT(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldGT(FieldTargetSuiteID, v))
}

// TargetSuiteIDGTE applies the GTE predicate on the "target_suite_id" field.
func TargetSuiteIDGTE(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldGTE(FieldTargetSuiteID, v))
}

// TargetSuiteIDLT applies the LT predicate on the "target_suite_id" field.
func TargetSuiteIDLT(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldLT(FieldTargetSuiteID, v))
}

// TargetSuiteIDLTE applies the LTE predicate on the "target_suite_id" field.
func TargetSuiteIDLTE(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldLTE(FieldTargetSuiteID, v))
}

// TargetSuiteIDContains applies the Contains predicate on the "target_suite_id" field.
func TargetSuiteIDContains(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldContains(FieldTargetSuiteID, v))
}

// TargetSuiteIDHasPrefix applies the HasPrefix predicate on the "target_suite_id" field.
func TargetSuiteIDHasPrefix(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldHasPrefix(FieldTargetSuiteID, v))
}

// TargetSuiteIDHasSuffix applies the HasSuffix predicate on the "target_suite_id" field.
func TargetSuiteIDHasSuffix(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldHasSuffix(FieldTargetSuiteID, v))
}

// TargetSuiteIDIsNil applies the IsNil predicate on the "target_suite_id" field.
func TargetSuiteIDIsNil() predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldIsNull(FieldTargetSuiteID))
}

// TargetSuiteIDNotNil applies the NotNil predicate on the "target_suite_id" field.
func TargetSuiteIDNotNil() predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldNotNull(FieldTargetSuiteID))
}

// TargetSuiteIDEqualFold applies the EqualFold predicate on the "target_suite_id" field.
func TargetSuiteIDEqualFold(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldEqualFold(FieldTargetSuiteID, v))
}

// TargetSuiteIDContainsFold applies the ContainsFold predicate on the "target_suite_id" field.
func TargetSuiteIDContainsFold(v string) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldContainsFold(FieldTargetSuiteID, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.GrantRequest {
	return predicate.GrantRequest(sql.FieldNotIn(FieldStatus, vs...))
}

// HasPermissionHistories applies the HasEdge predicate on the "permission_histories" edge.
func HasPermissionHistories() predicate.GrantRequest {
	return predicate.GrantRequest(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, PermissionHistoriesTable, PermissionHistoriesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPermissionHistoriesWith applies the HasEdge predicate on the "permission_histories" edge with a given conditions (other predicates).
func HasPermissionHistoriesWith(preds ...predicate.PermissionHistory) predicate.GrantRequest {
	return predicate.GrantRequest(func(s *sql.Selector) {
		step := newPermissionHistoriesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRole applies the HasEdge predicate on the "role" edge.
func HasRole() predicate.GrantRequest {
	return predicate.GrantRequest(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, RoleTable, RoleColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRoleWith applies the HasEdge predicate on the "role" edge with a given conditions (other predicates).
func HasRoleWith(preds ...predicate.Role) predicate.GrantRequest {
	return predicate.GrantRequest(func(s *sql.Selector) {
		step := newRoleStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRoleSuite applies the HasEdge predicate on the "role_suite" edge.
func HasRoleSuite() predicate.GrantRequest {
	return predicate.GrantRequest(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, RoleSuiteTable, RoleSuiteColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRoleSuiteWith applies the HasEdge predicate on the "role_suite" edge with a given conditions (other predicates).
func HasRoleSuiteWith(preds ...predicate.RoleSuite) predicate.GrantRequest {
	return predicate.GrantRequest(func(s *sql.Selector) {
		step := newRoleSuiteStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GrantRequest) predicate.GrantRequest {
	return predicate.GrantRequest(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GrantRequest) predicate.GrantRequest {
	return predicate.GrantRequest(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GrantRequest) predicate.GrantRequest {
	return predicate.GrantRequest(sql.NotPredicates(p))
}
