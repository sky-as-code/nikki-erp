// Code generated by ent, DO NOT EDIT.

package grantrequest

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the grantrequest type in the database.
	Label = "grant_request"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAttachmentURL holds the string denoting the attachment_url field in the database.
	FieldAttachmentURL = "attachment_url"
	// FieldComment holds the string denoting the comment field in the database.
	FieldComment = "comment"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldEtag holds the string denoting the etag field in the database.
	FieldEtag = "etag"
	// FieldReceiverID holds the string denoting the receiver_id field in the database.
	FieldReceiverID = "receiver_id"
	// FieldTargetType holds the string denoting the target_type field in the database.
	FieldTargetType = "target_type"
	// FieldTargetRoleID holds the string denoting the target_role_id field in the database.
	FieldTargetRoleID = "target_role_id"
	// FieldTargetRoleName holds the string denoting the target_role_name field in the database.
	FieldTargetRoleName = "target_role_name"
	// FieldTargetSuiteID holds the string denoting the target_suite_id field in the database.
	FieldTargetSuiteID = "target_suite_id"
	// FieldTargetSuiteName holds the string denoting the target_suite_name field in the database.
	FieldTargetSuiteName = "target_suite_name"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// EdgePermissionHistories holds the string denoting the permission_histories edge name in mutations.
	EdgePermissionHistories = "permission_histories"
	// EdgeRole holds the string denoting the role edge name in mutations.
	EdgeRole = "role"
	// EdgeRoleSuite holds the string denoting the role_suite edge name in mutations.
	EdgeRoleSuite = "role_suite"
	// Table holds the table name of the grantrequest in the database.
	Table = "authz_grant_requests"
	// PermissionHistoriesTable is the table that holds the permission_histories relation/edge.
	PermissionHistoriesTable = "authz_permission_histories"
	// PermissionHistoriesInverseTable is the table name for the PermissionHistory entity.
	// It exists in this package in order to avoid circular dependency with the "permissionhistory" package.
	PermissionHistoriesInverseTable = "authz_permission_histories"
	// PermissionHistoriesColumn is the table column denoting the permission_histories relation/edge.
	PermissionHistoriesColumn = "grant_request_id"
	// RoleTable is the table that holds the role relation/edge.
	RoleTable = "authz_grant_requests"
	// RoleInverseTable is the table name for the Role entity.
	// It exists in this package in order to avoid circular dependency with the "role" package.
	RoleInverseTable = "authz_roles"
	// RoleColumn is the table column denoting the role relation/edge.
	RoleColumn = "target_role_id"
	// RoleSuiteTable is the table that holds the role_suite relation/edge.
	RoleSuiteTable = "authz_grant_requests"
	// RoleSuiteInverseTable is the table name for the RoleSuite entity.
	// It exists in this package in order to avoid circular dependency with the "rolesuite" package.
	RoleSuiteInverseTable = "authz_role_suites"
	// RoleSuiteColumn is the table column denoting the role_suite relation/edge.
	RoleSuiteColumn = "target_suite_id"
)

// Columns holds all SQL columns for grantrequest fields.
var Columns = []string{
	FieldID,
	FieldAttachmentURL,
	FieldComment,
	FieldCreatedAt,
	FieldCreatedBy,
	FieldEtag,
	FieldReceiverID,
	FieldTargetType,
	FieldTargetRoleID,
	FieldTargetRoleName,
	FieldTargetSuiteID,
	FieldTargetSuiteName,
	FieldStatus,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// TargetType defines the type for the "target_type" enum field.
type TargetType string

// TargetType values.
const (
	TargetTypeRole  TargetType = "role"
	TargetTypeSuite TargetType = "suite"
)

func (tt TargetType) String() string {
	return string(tt)
}

// TargetTypeValidator is a validator for the "target_type" field enum values. It is called by the builders before save.
func TargetTypeValidator(tt TargetType) error {
	switch tt {
	case TargetTypeRole, TargetTypeSuite:
		return nil
	default:
		return fmt.Errorf("grantrequest: invalid enum value for target_type field: %q", tt)
	}
}

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusPending  Status = "pending"
	StatusApproved Status = "approved"
	StatusRejected Status = "rejected"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPending, StatusApproved, StatusRejected:
		return nil
	default:
		return fmt.Errorf("grantrequest: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the GrantRequest queries.
type OrderOption = func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAttachmentURL orders the results by the attachment_url field.
func ByAttachmentURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAttachmentURL, opts...).ToFunc()
}

// ByComment orders the results by the comment field.
func ByComment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldComment, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByEtag orders the results by the etag field.
func ByEtag(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEtag, opts...).ToFunc()
}

// ByReceiverID orders the results by the receiver_id field.
func ByReceiverID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReceiverID, opts...).ToFunc()
}

// ByTargetType orders the results by the target_type field.
func ByTargetType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTargetType, opts...).ToFunc()
}

// ByTargetRoleID orders the results by the target_role_id field.
func ByTargetRoleID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTargetRoleID, opts...).ToFunc()
}

// ByTargetRoleName orders the results by the target_role_name field.
func ByTargetRoleName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTargetRoleName, opts...).ToFunc()
}

// ByTargetSuiteID orders the results by the target_suite_id field.
func ByTargetSuiteID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTargetSuiteID, opts...).ToFunc()
}

// ByTargetSuiteName orders the results by the target_suite_name field.
func ByTargetSuiteName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTargetSuiteName, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByPermissionHistoriesCount orders the results by permission_histories count.
func ByPermissionHistoriesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPermissionHistoriesStep(), opts...)
	}
}

// ByPermissionHistories orders the results by permission_histories terms.
func ByPermissionHistories(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPermissionHistoriesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRoleField orders the results by role field.
func ByRoleField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRoleStep(), sql.OrderByField(field, opts...))
	}
}

// ByRoleSuiteField orders the results by role_suite field.
func ByRoleSuiteField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRoleSuiteStep(), sql.OrderByField(field, opts...))
	}
}

// Added by NikkieERP scripts/ent_templates/dialect/sql/meta.tmpl
func NewPermissionHistoriesStepNikki() *sqlgraph.Step {
	return newPermissionHistoriesStep()
}

func newPermissionHistoriesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PermissionHistoriesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, PermissionHistoriesTable, PermissionHistoriesColumn),
	)
}

// Added by NikkieERP scripts/ent_templates/dialect/sql/meta.tmpl
func NewRoleStepNikki() *sqlgraph.Step {
	return newRoleStep()
}

func newRoleStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RoleInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, RoleTable, RoleColumn),
	)
}

// Added by NikkieERP scripts/ent_templates/dialect/sql/meta.tmpl
func NewRoleSuiteStepNikki() *sqlgraph.Step {
	return newRoleSuiteStep()
}

func newRoleSuiteStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RoleSuiteInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, RoleSuiteTable, RoleSuiteColumn),
	)
}
