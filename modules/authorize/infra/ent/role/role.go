// Code generated by ent, DO NOT EDIT.

package role

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the role type in the database.
	Label = "role"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldEtag holds the string denoting the etag field in the database.
	FieldEtag = "etag"
	// FieldOwnerType holds the string denoting the owner_type field in the database.
	FieldOwnerType = "owner_type"
	// FieldOwnerRef holds the string denoting the owner_ref field in the database.
	FieldOwnerRef = "owner_ref"
	// FieldIsRequestable holds the string denoting the is_requestable field in the database.
	FieldIsRequestable = "is_requestable"
	// FieldIsRequiredAttachment holds the string denoting the is_required_attachment field in the database.
	FieldIsRequiredAttachment = "is_required_attachment"
	// FieldIsRequiredComment holds the string denoting the is_required_comment field in the database.
	FieldIsRequiredComment = "is_required_comment"
	// EdgeRoleSuites holds the string denoting the role_suites edge name in mutations.
	EdgeRoleSuites = "role_suites"
	// EdgeRoleUsers holds the string denoting the role_users edge name in mutations.
	EdgeRoleUsers = "role_users"
	// EdgeGrantRequests holds the string denoting the grant_requests edge name in mutations.
	EdgeGrantRequests = "grant_requests"
	// EdgeRevokeRequests holds the string denoting the revoke_requests edge name in mutations.
	EdgeRevokeRequests = "revoke_requests"
	// EdgePermissionHistories holds the string denoting the permission_histories edge name in mutations.
	EdgePermissionHistories = "permission_histories"
	// EdgeRoleRolesuite holds the string denoting the role_rolesuite edge name in mutations.
	EdgeRoleRolesuite = "role_rolesuite"
	// Table holds the table name of the role in the database.
	Table = "authz_roles"
	// RoleSuitesTable is the table that holds the role_suites relation/edge. The primary key declared below.
	RoleSuitesTable = "authz_role_rolesuite"
	// RoleSuitesInverseTable is the table name for the RoleSuite entity.
	// It exists in this package in order to avoid circular dependency with the "rolesuite" package.
	RoleSuitesInverseTable = "authz_role_suites"
	// RoleUsersTable is the table that holds the role_users relation/edge.
	RoleUsersTable = "authz_role_user"
	// RoleUsersInverseTable is the table name for the RoleUser entity.
	// It exists in this package in order to avoid circular dependency with the "roleuser" package.
	RoleUsersInverseTable = "authz_role_user"
	// RoleUsersColumn is the table column denoting the role_users relation/edge.
	RoleUsersColumn = "role_id"
	// GrantRequestsTable is the table that holds the grant_requests relation/edge.
	GrantRequestsTable = "authz_grant_requests"
	// GrantRequestsInverseTable is the table name for the GrantRequest entity.
	// It exists in this package in order to avoid circular dependency with the "grantrequest" package.
	GrantRequestsInverseTable = "authz_grant_requests"
	// GrantRequestsColumn is the table column denoting the grant_requests relation/edge.
	GrantRequestsColumn = "target_role_id"
	// RevokeRequestsTable is the table that holds the revoke_requests relation/edge.
	RevokeRequestsTable = "authz_revoke_requests"
	// RevokeRequestsInverseTable is the table name for the RevokeRequest entity.
	// It exists in this package in order to avoid circular dependency with the "revokerequest" package.
	RevokeRequestsInverseTable = "authz_revoke_requests"
	// RevokeRequestsColumn is the table column denoting the revoke_requests relation/edge.
	RevokeRequestsColumn = "target_role_id"
	// PermissionHistoriesTable is the table that holds the permission_histories relation/edge.
	PermissionHistoriesTable = "authz_permission_histories"
	// PermissionHistoriesInverseTable is the table name for the PermissionHistory entity.
	// It exists in this package in order to avoid circular dependency with the "permissionhistory" package.
	PermissionHistoriesInverseTable = "authz_permission_histories"
	// PermissionHistoriesColumn is the table column denoting the permission_histories relation/edge.
	PermissionHistoriesColumn = "role_id"
	// RoleRolesuiteTable is the table that holds the role_rolesuite relation/edge.
	RoleRolesuiteTable = "authz_role_rolesuite"
	// RoleRolesuiteInverseTable is the table name for the RoleRoleSuite entity.
	// It exists in this package in order to avoid circular dependency with the "rolerolesuite" package.
	RoleRolesuiteInverseTable = "authz_role_rolesuite"
	// RoleRolesuiteColumn is the table column denoting the role_rolesuite relation/edge.
	RoleRolesuiteColumn = "role_id"
)

// Columns holds all SQL columns for role fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldCreatedBy,
	FieldName,
	FieldDescription,
	FieldEtag,
	FieldOwnerType,
	FieldOwnerRef,
	FieldIsRequestable,
	FieldIsRequiredAttachment,
	FieldIsRequiredComment,
}

var (
	// RoleSuitesPrimaryKey and RoleSuitesColumn2 are the table columns denoting the
	// primary key for the role_suites relation (M2M).
	RoleSuitesPrimaryKey = []string{"role_suite_id", "role_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OwnerType defines the type for the "owner_type" enum field.
type OwnerType string

// OwnerType values.
const (
	OwnerTypeUser  OwnerType = "user"
	OwnerTypeGroup OwnerType = "group"
)

func (ot OwnerType) String() string {
	return string(ot)
}

// OwnerTypeValidator is a validator for the "owner_type" field enum values. It is called by the builders before save.
func OwnerTypeValidator(ot OwnerType) error {
	switch ot {
	case OwnerTypeUser, OwnerTypeGroup:
		return nil
	default:
		return fmt.Errorf("role: invalid enum value for owner_type field: %q", ot)
	}
}

// OrderOption defines the ordering options for the Role queries.
type OrderOption = func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByEtag orders the results by the etag field.
func ByEtag(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEtag, opts...).ToFunc()
}

// ByOwnerType orders the results by the owner_type field.
func ByOwnerType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwnerType, opts...).ToFunc()
}

// ByOwnerRef orders the results by the owner_ref field.
func ByOwnerRef(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwnerRef, opts...).ToFunc()
}

// ByIsRequestable orders the results by the is_requestable field.
func ByIsRequestable(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsRequestable, opts...).ToFunc()
}

// ByIsRequiredAttachment orders the results by the is_required_attachment field.
func ByIsRequiredAttachment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsRequiredAttachment, opts...).ToFunc()
}

// ByIsRequiredComment orders the results by the is_required_comment field.
func ByIsRequiredComment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsRequiredComment, opts...).ToFunc()
}

// ByRoleSuitesCount orders the results by role_suites count.
func ByRoleSuitesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRoleSuitesStep(), opts...)
	}
}

// ByRoleSuites orders the results by role_suites terms.
func ByRoleSuites(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRoleSuitesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRoleUsersCount orders the results by role_users count.
func ByRoleUsersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRoleUsersStep(), opts...)
	}
}

// ByRoleUsers orders the results by role_users terms.
func ByRoleUsers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRoleUsersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByGrantRequestsCount orders the results by grant_requests count.
func ByGrantRequestsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGrantRequestsStep(), opts...)
	}
}

// ByGrantRequests orders the results by grant_requests terms.
func ByGrantRequests(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGrantRequestsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRevokeRequestsCount orders the results by revoke_requests count.
func ByRevokeRequestsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRevokeRequestsStep(), opts...)
	}
}

// ByRevokeRequests orders the results by revoke_requests terms.
func ByRevokeRequests(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRevokeRequestsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPermissionHistoriesCount orders the results by permission_histories count.
func ByPermissionHistoriesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPermissionHistoriesStep(), opts...)
	}
}

// ByPermissionHistories orders the results by permission_histories terms.
func ByPermissionHistories(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPermissionHistoriesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRoleRolesuiteCount orders the results by role_rolesuite count.
func ByRoleRolesuiteCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRoleRolesuiteStep(), opts...)
	}
}

// ByRoleRolesuite orders the results by role_rolesuite terms.
func ByRoleRolesuite(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRoleRolesuiteStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newRoleSuitesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RoleSuitesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, RoleSuitesTable, RoleSuitesPrimaryKey...),
	)
}
func newRoleUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RoleUsersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, RoleUsersTable, RoleUsersColumn),
	)
}
func newGrantRequestsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GrantRequestsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, GrantRequestsTable, GrantRequestsColumn),
	)
}
func newRevokeRequestsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RevokeRequestsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, RevokeRequestsTable, RevokeRequestsColumn),
	)
}
func newPermissionHistoriesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PermissionHistoriesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, PermissionHistoriesTable, PermissionHistoriesColumn),
	)
}
func newRoleRolesuiteStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RoleRolesuiteInverseTable, RoleRolesuiteColumn),
		sqlgraph.Edge(sqlgraph.O2M, true, RoleRolesuiteTable, RoleRolesuiteColumn),
	)
}
