// Code generated by ent, DO NOT EDIT.

package role

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Role {
	return predicate.Role(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Role {
	return predicate.Role(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Role {
	return predicate.Role(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Role {
	return predicate.Role(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Role {
	return predicate.Role(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Role {
	return predicate.Role(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Role {
	return predicate.Role(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Role {
	return predicate.Role(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Role {
	return predicate.Role(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Role {
	return predicate.Role(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Role {
	return predicate.Role(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Role {
	return predicate.Role(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.Role {
	return predicate.Role(sql.FieldEQ(FieldCreatedBy, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Role {
	return predicate.Role(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Role {
	return predicate.Role(sql.FieldEQ(FieldDescription, v))
}

// Etag applies equality check predicate on the "etag" field. It's identical to EtagEQ.
func Etag(v string) predicate.Role {
	return predicate.Role(sql.FieldEQ(FieldEtag, v))
}

// OwnerRef applies equality check predicate on the "owner_ref" field. It's identical to OwnerRefEQ.
func OwnerRef(v string) predicate.Role {
	return predicate.Role(sql.FieldEQ(FieldOwnerRef, v))
}

// IsRequestable applies equality check predicate on the "is_requestable" field. It's identical to IsRequestableEQ.
func IsRequestable(v bool) predicate.Role {
	return predicate.Role(sql.FieldEQ(FieldIsRequestable, v))
}

// IsRequiredAttachment applies equality check predicate on the "is_required_attachment" field. It's identical to IsRequiredAttachmentEQ.
func IsRequiredAttachment(v bool) predicate.Role {
	return predicate.Role(sql.FieldEQ(FieldIsRequiredAttachment, v))
}

// IsRequiredComment applies equality check predicate on the "is_required_comment" field. It's identical to IsRequiredCommentEQ.
func IsRequiredComment(v bool) predicate.Role {
	return predicate.Role(sql.FieldEQ(FieldIsRequiredComment, v))
}

// OrgID applies equality check predicate on the "org_id" field. It's identical to OrgIDEQ.
func OrgID(v string) predicate.Role {
	return predicate.Role(sql.FieldEQ(FieldOrgID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Role {
	return predicate.Role(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Role {
	return predicate.Role(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Role {
	return predicate.Role(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Role {
	return predicate.Role(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Role {
	return predicate.Role(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Role {
	return predicate.Role(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Role {
	return predicate.Role(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Role {
	return predicate.Role(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.Role {
	return predicate.Role(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.Role {
	return predicate.Role(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.Role {
	return predicate.Role(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.Role {
	return predicate.Role(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.Role {
	return predicate.Role(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.Role {
	return predicate.Role(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.Role {
	return predicate.Role(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.Role {
	return predicate.Role(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.Role {
	return predicate.Role(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.Role {
	return predicate.Role(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.Role {
	return predicate.Role(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.Role {
	return predicate.Role(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.Role {
	return predicate.Role(sql.FieldContainsFold(FieldCreatedBy, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Role {
	return predicate.Role(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Role {
	return predicate.Role(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Role {
	return predicate.Role(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Role {
	return predicate.Role(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Role {
	return predicate.Role(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Role {
	return predicate.Role(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Role {
	return predicate.Role(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Role {
	return predicate.Role(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Role {
	return predicate.Role(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Role {
	return predicate.Role(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Role {
	return predicate.Role(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Role {
	return predicate.Role(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Role {
	return predicate.Role(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Role {
	return predicate.Role(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Role {
	return predicate.Role(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Role {
	return predicate.Role(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Role {
	return predicate.Role(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Role {
	return predicate.Role(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Role {
	return predicate.Role(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Role {
	return predicate.Role(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Role {
	return predicate.Role(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Role {
	return predicate.Role(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Role {
	return predicate.Role(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Role {
	return predicate.Role(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Role {
	return predicate.Role(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Role {
	return predicate.Role(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Role {
	return predicate.Role(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Role {
	return predicate.Role(sql.FieldContainsFold(FieldDescription, v))
}

// EtagEQ applies the EQ predicate on the "etag" field.
func EtagEQ(v string) predicate.Role {
	return predicate.Role(sql.FieldEQ(FieldEtag, v))
}

// EtagNEQ applies the NEQ predicate on the "etag" field.
func EtagNEQ(v string) predicate.Role {
	return predicate.Role(sql.FieldNEQ(FieldEtag, v))
}

// EtagIn applies the In predicate on the "etag" field.
func EtagIn(vs ...string) predicate.Role {
	return predicate.Role(sql.FieldIn(FieldEtag, vs...))
}

// EtagNotIn applies the NotIn predicate on the "etag" field.
func EtagNotIn(vs ...string) predicate.Role {
	return predicate.Role(sql.FieldNotIn(FieldEtag, vs...))
}

// EtagGT applies the GT predicate on the "etag" field.
func EtagGT(v string) predicate.Role {
	return predicate.Role(sql.FieldGT(FieldEtag, v))
}

// EtagGTE applies the GTE predicate on the "etag" field.
func EtagGTE(v string) predicate.Role {
	return predicate.Role(sql.FieldGTE(FieldEtag, v))
}

// EtagLT applies the LT predicate on the "etag" field.
func EtagLT(v string) predicate.Role {
	return predicate.Role(sql.FieldLT(FieldEtag, v))
}

// EtagLTE applies the LTE predicate on the "etag" field.
func EtagLTE(v string) predicate.Role {
	return predicate.Role(sql.FieldLTE(FieldEtag, v))
}

// EtagContains applies the Contains predicate on the "etag" field.
func EtagContains(v string) predicate.Role {
	return predicate.Role(sql.FieldContains(FieldEtag, v))
}

// EtagHasPrefix applies the HasPrefix predicate on the "etag" field.
func EtagHasPrefix(v string) predicate.Role {
	return predicate.Role(sql.FieldHasPrefix(FieldEtag, v))
}

// EtagHasSuffix applies the HasSuffix predicate on the "etag" field.
func EtagHasSuffix(v string) predicate.Role {
	return predicate.Role(sql.FieldHasSuffix(FieldEtag, v))
}

// EtagEqualFold applies the EqualFold predicate on the "etag" field.
func EtagEqualFold(v string) predicate.Role {
	return predicate.Role(sql.FieldEqualFold(FieldEtag, v))
}

// EtagContainsFold applies the ContainsFold predicate on the "etag" field.
func EtagContainsFold(v string) predicate.Role {
	return predicate.Role(sql.FieldContainsFold(FieldEtag, v))
}

// OwnerTypeEQ applies the EQ predicate on the "owner_type" field.
func OwnerTypeEQ(v OwnerType) predicate.Role {
	return predicate.Role(sql.FieldEQ(FieldOwnerType, v))
}

// OwnerTypeNEQ applies the NEQ predicate on the "owner_type" field.
func OwnerTypeNEQ(v OwnerType) predicate.Role {
	return predicate.Role(sql.FieldNEQ(FieldOwnerType, v))
}

// OwnerTypeIn applies the In predicate on the "owner_type" field.
func OwnerTypeIn(vs ...OwnerType) predicate.Role {
	return predicate.Role(sql.FieldIn(FieldOwnerType, vs...))
}

// OwnerTypeNotIn applies the NotIn predicate on the "owner_type" field.
func OwnerTypeNotIn(vs ...OwnerType) predicate.Role {
	return predicate.Role(sql.FieldNotIn(FieldOwnerType, vs...))
}

// OwnerRefEQ applies the EQ predicate on the "owner_ref" field.
func OwnerRefEQ(v string) predicate.Role {
	return predicate.Role(sql.FieldEQ(FieldOwnerRef, v))
}

// OwnerRefNEQ applies the NEQ predicate on the "owner_ref" field.
func OwnerRefNEQ(v string) predicate.Role {
	return predicate.Role(sql.FieldNEQ(FieldOwnerRef, v))
}

// OwnerRefIn applies the In predicate on the "owner_ref" field.
func OwnerRefIn(vs ...string) predicate.Role {
	return predicate.Role(sql.FieldIn(FieldOwnerRef, vs...))
}

// OwnerRefNotIn applies the NotIn predicate on the "owner_ref" field.
func OwnerRefNotIn(vs ...string) predicate.Role {
	return predicate.Role(sql.FieldNotIn(FieldOwnerRef, vs...))
}

// OwnerRefGT applies the GT predicate on the "owner_ref" field.
func OwnerRefGT(v string) predicate.Role {
	return predicate.Role(sql.FieldGT(FieldOwnerRef, v))
}

// OwnerRefGTE applies the GTE predicate on the "owner_ref" field.
func OwnerRefGTE(v string) predicate.Role {
	return predicate.Role(sql.FieldGTE(FieldOwnerRef, v))
}

// OwnerRefLT applies the LT predicate on the "owner_ref" field.
func OwnerRefLT(v string) predicate.Role {
	return predicate.Role(sql.FieldLT(FieldOwnerRef, v))
}

// OwnerRefLTE applies the LTE predicate on the "owner_ref" field.
func OwnerRefLTE(v string) predicate.Role {
	return predicate.Role(sql.FieldLTE(FieldOwnerRef, v))
}

// OwnerRefContains applies the Contains predicate on the "owner_ref" field.
func OwnerRefContains(v string) predicate.Role {
	return predicate.Role(sql.FieldContains(FieldOwnerRef, v))
}

// OwnerRefHasPrefix applies the HasPrefix predicate on the "owner_ref" field.
func OwnerRefHasPrefix(v string) predicate.Role {
	return predicate.Role(sql.FieldHasPrefix(FieldOwnerRef, v))
}

// OwnerRefHasSuffix applies the HasSuffix predicate on the "owner_ref" field.
func OwnerRefHasSuffix(v string) predicate.Role {
	return predicate.Role(sql.FieldHasSuffix(FieldOwnerRef, v))
}

// OwnerRefEqualFold applies the EqualFold predicate on the "owner_ref" field.
func OwnerRefEqualFold(v string) predicate.Role {
	return predicate.Role(sql.FieldEqualFold(FieldOwnerRef, v))
}

// OwnerRefContainsFold applies the ContainsFold predicate on the "owner_ref" field.
func OwnerRefContainsFold(v string) predicate.Role {
	return predicate.Role(sql.FieldContainsFold(FieldOwnerRef, v))
}

// IsRequestableEQ applies the EQ predicate on the "is_requestable" field.
func IsRequestableEQ(v bool) predicate.Role {
	return predicate.Role(sql.FieldEQ(FieldIsRequestable, v))
}

// IsRequestableNEQ applies the NEQ predicate on the "is_requestable" field.
func IsRequestableNEQ(v bool) predicate.Role {
	return predicate.Role(sql.FieldNEQ(FieldIsRequestable, v))
}

// IsRequiredAttachmentEQ applies the EQ predicate on the "is_required_attachment" field.
func IsRequiredAttachmentEQ(v bool) predicate.Role {
	return predicate.Role(sql.FieldEQ(FieldIsRequiredAttachment, v))
}

// IsRequiredAttachmentNEQ applies the NEQ predicate on the "is_required_attachment" field.
func IsRequiredAttachmentNEQ(v bool) predicate.Role {
	return predicate.Role(sql.FieldNEQ(FieldIsRequiredAttachment, v))
}

// IsRequiredCommentEQ applies the EQ predicate on the "is_required_comment" field.
func IsRequiredCommentEQ(v bool) predicate.Role {
	return predicate.Role(sql.FieldEQ(FieldIsRequiredComment, v))
}

// IsRequiredCommentNEQ applies the NEQ predicate on the "is_required_comment" field.
func IsRequiredCommentNEQ(v bool) predicate.Role {
	return predicate.Role(sql.FieldNEQ(FieldIsRequiredComment, v))
}

// OrgIDEQ applies the EQ predicate on the "org_id" field.
func OrgIDEQ(v string) predicate.Role {
	return predicate.Role(sql.FieldEQ(FieldOrgID, v))
}

// OrgIDNEQ applies the NEQ predicate on the "org_id" field.
func OrgIDNEQ(v string) predicate.Role {
	return predicate.Role(sql.FieldNEQ(FieldOrgID, v))
}

// OrgIDIn applies the In predicate on the "org_id" field.
func OrgIDIn(vs ...string) predicate.Role {
	return predicate.Role(sql.FieldIn(FieldOrgID, vs...))
}

// OrgIDNotIn applies the NotIn predicate on the "org_id" field.
func OrgIDNotIn(vs ...string) predicate.Role {
	return predicate.Role(sql.FieldNotIn(FieldOrgID, vs...))
}

// OrgIDGT applies the GT predicate on the "org_id" field.
func OrgIDGT(v string) predicate.Role {
	return predicate.Role(sql.FieldGT(FieldOrgID, v))
}

// OrgIDGTE applies the GTE predicate on the "org_id" field.
func OrgIDGTE(v string) predicate.Role {
	return predicate.Role(sql.FieldGTE(FieldOrgID, v))
}

// OrgIDLT applies the LT predicate on the "org_id" field.
func OrgIDLT(v string) predicate.Role {
	return predicate.Role(sql.FieldLT(FieldOrgID, v))
}

// OrgIDLTE applies the LTE predicate on the "org_id" field.
func OrgIDLTE(v string) predicate.Role {
	return predicate.Role(sql.FieldLTE(FieldOrgID, v))
}

// OrgIDContains applies the Contains predicate on the "org_id" field.
func OrgIDContains(v string) predicate.Role {
	return predicate.Role(sql.FieldContains(FieldOrgID, v))
}

// OrgIDHasPrefix applies the HasPrefix predicate on the "org_id" field.
func OrgIDHasPrefix(v string) predicate.Role {
	return predicate.Role(sql.FieldHasPrefix(FieldOrgID, v))
}

// OrgIDHasSuffix applies the HasSuffix predicate on the "org_id" field.
func OrgIDHasSuffix(v string) predicate.Role {
	return predicate.Role(sql.FieldHasSuffix(FieldOrgID, v))
}

// OrgIDIsNil applies the IsNil predicate on the "org_id" field.
func OrgIDIsNil() predicate.Role {
	return predicate.Role(sql.FieldIsNull(FieldOrgID))
}

// OrgIDNotNil applies the NotNil predicate on the "org_id" field.
func OrgIDNotNil() predicate.Role {
	return predicate.Role(sql.FieldNotNull(FieldOrgID))
}

// OrgIDEqualFold applies the EqualFold predicate on the "org_id" field.
func OrgIDEqualFold(v string) predicate.Role {
	return predicate.Role(sql.FieldEqualFold(FieldOrgID, v))
}

// OrgIDContainsFold applies the ContainsFold predicate on the "org_id" field.
func OrgIDContainsFold(v string) predicate.Role {
	return predicate.Role(sql.FieldContainsFold(FieldOrgID, v))
}

// HasRoleSuites applies the HasEdge predicate on the "role_suites" edge.
func HasRoleSuites() predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, RoleSuitesTable, RoleSuitesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRoleSuitesWith applies the HasEdge predicate on the "role_suites" edge with a given conditions (other predicates).
func HasRoleSuitesWith(preds ...predicate.RoleSuite) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		step := newRoleSuitesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRoleUsers applies the HasEdge predicate on the "role_users" edge.
func HasRoleUsers() predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, RoleUsersTable, RoleUsersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRoleUsersWith applies the HasEdge predicate on the "role_users" edge with a given conditions (other predicates).
func HasRoleUsersWith(preds ...predicate.RoleUser) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		step := newRoleUsersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGrantRequests applies the HasEdge predicate on the "grant_requests" edge.
func HasGrantRequests() predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, GrantRequestsTable, GrantRequestsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGrantRequestsWith applies the HasEdge predicate on the "grant_requests" edge with a given conditions (other predicates).
func HasGrantRequestsWith(preds ...predicate.GrantRequest) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		step := newGrantRequestsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRevokeRequests applies the HasEdge predicate on the "revoke_requests" edge.
func HasRevokeRequests() predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, RevokeRequestsTable, RevokeRequestsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRevokeRequestsWith applies the HasEdge predicate on the "revoke_requests" edge with a given conditions (other predicates).
func HasRevokeRequestsWith(preds ...predicate.RevokeRequest) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		step := newRevokeRequestsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPermissionHistories applies the HasEdge predicate on the "permission_histories" edge.
func HasPermissionHistories() predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, PermissionHistoriesTable, PermissionHistoriesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPermissionHistoriesWith applies the HasEdge predicate on the "permission_histories" edge with a given conditions (other predicates).
func HasPermissionHistoriesWith(preds ...predicate.PermissionHistory) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		step := newPermissionHistoriesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRoleRolesuite applies the HasEdge predicate on the "role_rolesuite" edge.
func HasRoleRolesuite() predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, RoleRolesuiteTable, RoleRolesuiteColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRoleRolesuiteWith applies the HasEdge predicate on the "role_rolesuite" edge with a given conditions (other predicates).
func HasRoleRolesuiteWith(preds ...predicate.RoleRoleSuite) predicate.Role {
	return predicate.Role(func(s *sql.Selector) {
		step := newRoleRolesuiteStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Role) predicate.Role {
	return predicate.Role(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Role) predicate.Role {
	return predicate.Role(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Role) predicate.Role {
	return predicate.Role(sql.NotPredicates(p))
}
