// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/role"
)

// Role is the model entity for the Role schema.
type Role struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description *string `json:"description,omitempty"`
	// Etag holds the value of the "etag" field.
	Etag string `json:"etag,omitempty"`
	// OwnerType holds the value of the "owner_type" field.
	OwnerType role.OwnerType `json:"owner_type,omitempty"`
	// OwnerRef holds the value of the "owner_ref" field.
	OwnerRef string `json:"owner_ref,omitempty"`
	// IsRequestable holds the value of the "is_requestable" field.
	IsRequestable bool `json:"is_requestable,omitempty"`
	// IsRequiredAttachment holds the value of the "is_required_attachment" field.
	IsRequiredAttachment bool `json:"is_required_attachment,omitempty"`
	// IsRequiredComment holds the value of the "is_required_comment" field.
	IsRequiredComment bool `json:"is_required_comment,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RoleQuery when eager-loading is set.
	Edges        RoleEdges `json:"edges"`
	selectValues sql.SelectValues
}

// RoleEdges holds the relations/edges for other nodes in the graph.
type RoleEdges struct {
	// RoleSuites holds the value of the role_suites edge.
	RoleSuites []*RoleSuite `json:"role_suites,omitempty"`
	// RoleUsers holds the value of the role_users edge.
	RoleUsers []*RoleUser `json:"role_users,omitempty"`
	// GrantRequests holds the value of the grant_requests edge.
	GrantRequests []*GrantRequest `json:"grant_requests,omitempty"`
	// RevokeRequests holds the value of the revoke_requests edge.
	RevokeRequests []*RevokeRequest `json:"revoke_requests,omitempty"`
	// PermissionHistories holds the value of the permission_histories edge.
	PermissionHistories []*PermissionHistory `json:"permission_histories,omitempty"`
	// RoleRolesuite holds the value of the role_rolesuite edge.
	RoleRolesuite []*RoleRoleSuite `json:"role_rolesuite,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// RoleSuitesOrErr returns the RoleSuites value or an error if the edge
// was not loaded in eager-loading.
func (e RoleEdges) RoleSuitesOrErr() ([]*RoleSuite, error) {
	if e.loadedTypes[0] {
		return e.RoleSuites, nil
	}
	return nil, &NotLoadedError{edge: "role_suites"}
}

// RoleUsersOrErr returns the RoleUsers value or an error if the edge
// was not loaded in eager-loading.
func (e RoleEdges) RoleUsersOrErr() ([]*RoleUser, error) {
	if e.loadedTypes[1] {
		return e.RoleUsers, nil
	}
	return nil, &NotLoadedError{edge: "role_users"}
}

// GrantRequestsOrErr returns the GrantRequests value or an error if the edge
// was not loaded in eager-loading.
func (e RoleEdges) GrantRequestsOrErr() ([]*GrantRequest, error) {
	if e.loadedTypes[2] {
		return e.GrantRequests, nil
	}
	return nil, &NotLoadedError{edge: "grant_requests"}
}

// RevokeRequestsOrErr returns the RevokeRequests value or an error if the edge
// was not loaded in eager-loading.
func (e RoleEdges) RevokeRequestsOrErr() ([]*RevokeRequest, error) {
	if e.loadedTypes[3] {
		return e.RevokeRequests, nil
	}
	return nil, &NotLoadedError{edge: "revoke_requests"}
}

// PermissionHistoriesOrErr returns the PermissionHistories value or an error if the edge
// was not loaded in eager-loading.
func (e RoleEdges) PermissionHistoriesOrErr() ([]*PermissionHistory, error) {
	if e.loadedTypes[4] {
		return e.PermissionHistories, nil
	}
	return nil, &NotLoadedError{edge: "permission_histories"}
}

// RoleRolesuiteOrErr returns the RoleRolesuite value or an error if the edge
// was not loaded in eager-loading.
func (e RoleEdges) RoleRolesuiteOrErr() ([]*RoleRoleSuite, error) {
	if e.loadedTypes[5] {
		return e.RoleRolesuite, nil
	}
	return nil, &NotLoadedError{edge: "role_rolesuite"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Role) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case role.FieldIsRequestable, role.FieldIsRequiredAttachment, role.FieldIsRequiredComment:
			values[i] = new(sql.NullBool)
		case role.FieldID, role.FieldCreatedBy, role.FieldName, role.FieldDescription, role.FieldEtag, role.FieldOwnerType, role.FieldOwnerRef:
			values[i] = new(sql.NullString)
		case role.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Role fields.
func (r *Role) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case role.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				r.ID = value.String
			}
		case role.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				r.CreatedAt = value.Time
			}
		case role.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				r.CreatedBy = value.String
			}
		case role.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				r.Name = value.String
			}
		case role.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				r.Description = new(string)
				*r.Description = value.String
			}
		case role.FieldEtag:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field etag", values[i])
			} else if value.Valid {
				r.Etag = value.String
			}
		case role.FieldOwnerType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_type", values[i])
			} else if value.Valid {
				r.OwnerType = role.OwnerType(value.String)
			}
		case role.FieldOwnerRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_ref", values[i])
			} else if value.Valid {
				r.OwnerRef = value.String
			}
		case role.FieldIsRequestable:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_requestable", values[i])
			} else if value.Valid {
				r.IsRequestable = value.Bool
			}
		case role.FieldIsRequiredAttachment:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_required_attachment", values[i])
			} else if value.Valid {
				r.IsRequiredAttachment = value.Bool
			}
		case role.FieldIsRequiredComment:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_required_comment", values[i])
			} else if value.Valid {
				r.IsRequiredComment = value.Bool
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Role.
// This includes values selected through modifiers, order, etc.
func (r *Role) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryRoleSuites queries the "role_suites" edge of the Role entity.
func (r *Role) QueryRoleSuites() *RoleSuiteQuery {
	return NewRoleClient(r.config).QueryRoleSuites(r)
}

// QueryRoleUsers queries the "role_users" edge of the Role entity.
func (r *Role) QueryRoleUsers() *RoleUserQuery {
	return NewRoleClient(r.config).QueryRoleUsers(r)
}

// QueryGrantRequests queries the "grant_requests" edge of the Role entity.
func (r *Role) QueryGrantRequests() *GrantRequestQuery {
	return NewRoleClient(r.config).QueryGrantRequests(r)
}

// QueryRevokeRequests queries the "revoke_requests" edge of the Role entity.
func (r *Role) QueryRevokeRequests() *RevokeRequestQuery {
	return NewRoleClient(r.config).QueryRevokeRequests(r)
}

// QueryPermissionHistories queries the "permission_histories" edge of the Role entity.
func (r *Role) QueryPermissionHistories() *PermissionHistoryQuery {
	return NewRoleClient(r.config).QueryPermissionHistories(r)
}

// QueryRoleRolesuite queries the "role_rolesuite" edge of the Role entity.
func (r *Role) QueryRoleRolesuite() *RoleRoleSuiteQuery {
	return NewRoleClient(r.config).QueryRoleRolesuite(r)
}

// Update returns a builder for updating this Role.
// Note that you need to call Role.Unwrap() before calling this method if this Role
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Role) Update() *RoleUpdateOne {
	return NewRoleClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Role entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Role) Unwrap() *Role {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Role is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Role) String() string {
	var builder strings.Builder
	builder.WriteString("Role(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("created_at=")
	builder.WriteString(r.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(r.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(r.Name)
	builder.WriteString(", ")
	if v := r.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("etag=")
	builder.WriteString(r.Etag)
	builder.WriteString(", ")
	builder.WriteString("owner_type=")
	builder.WriteString(fmt.Sprintf("%v", r.OwnerType))
	builder.WriteString(", ")
	builder.WriteString("owner_ref=")
	builder.WriteString(r.OwnerRef)
	builder.WriteString(", ")
	builder.WriteString("is_requestable=")
	builder.WriteString(fmt.Sprintf("%v", r.IsRequestable))
	builder.WriteString(", ")
	builder.WriteString("is_required_attachment=")
	builder.WriteString(fmt.Sprintf("%v", r.IsRequiredAttachment))
	builder.WriteString(", ")
	builder.WriteString("is_required_comment=")
	builder.WriteString(fmt.Sprintf("%v", r.IsRequiredComment))
	builder.WriteByte(')')
	return builder.String()
}

// Roles is a parsable slice of Role.
type Roles []*Role
