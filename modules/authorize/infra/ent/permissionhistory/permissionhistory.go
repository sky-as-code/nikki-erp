// Code generated by ent, DO NOT EDIT.

package permissionhistory

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the permissionhistory type in the database.
	Label = "permission_history"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldApproverID holds the string denoting the approver_id field in the database.
	FieldApproverID = "approver_id"
	// FieldApproverEmail holds the string denoting the approver_email field in the database.
	FieldApproverEmail = "approver_email"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldEffect holds the string denoting the effect field in the database.
	FieldEffect = "effect"
	// FieldEntitlementID holds the string denoting the entitlement_id field in the database.
	FieldEntitlementID = "entitlement_id"
	// FieldEntitlementExpr holds the string denoting the entitlement_expr field in the database.
	FieldEntitlementExpr = "entitlement_expr"
	// FieldReceiverID holds the string denoting the receiver_id field in the database.
	FieldReceiverID = "receiver_id"
	// FieldGrantRequestID holds the string denoting the grant_request_id field in the database.
	FieldGrantRequestID = "grant_request_id"
	// FieldRevokeRequestID holds the string denoting the revoke_request_id field in the database.
	FieldRevokeRequestID = "revoke_request_id"
	// FieldRoleID holds the string denoting the role_id field in the database.
	FieldRoleID = "role_id"
	// FieldRoleName holds the string denoting the role_name field in the database.
	FieldRoleName = "role_name"
	// FieldRoleSuiteID holds the string denoting the role_suite_id field in the database.
	FieldRoleSuiteID = "role_suite_id"
	// FieldRoleSuiteName holds the string denoting the role_suite_name field in the database.
	FieldRoleSuiteName = "role_suite_name"
	// EdgeEntitlement holds the string denoting the entitlement edge name in mutations.
	EdgeEntitlement = "entitlement"
	// EdgeRole holds the string denoting the role edge name in mutations.
	EdgeRole = "role"
	// EdgeRoleSuite holds the string denoting the role_suite edge name in mutations.
	EdgeRoleSuite = "role_suite"
	// EdgeGrantRequest holds the string denoting the grant_request edge name in mutations.
	EdgeGrantRequest = "grant_request"
	// EdgeRevokeRequest holds the string denoting the revoke_request edge name in mutations.
	EdgeRevokeRequest = "revoke_request"
	// Table holds the table name of the permissionhistory in the database.
	Table = "authz_permission_histories"
	// EntitlementTable is the table that holds the entitlement relation/edge.
	EntitlementTable = "authz_permission_histories"
	// EntitlementInverseTable is the table name for the Entitlement entity.
	// It exists in this package in order to avoid circular dependency with the "entitlement" package.
	EntitlementInverseTable = "authz_entitlements"
	// EntitlementColumn is the table column denoting the entitlement relation/edge.
	EntitlementColumn = "entitlement_id"
	// RoleTable is the table that holds the role relation/edge.
	RoleTable = "authz_permission_histories"
	// RoleInverseTable is the table name for the Role entity.
	// It exists in this package in order to avoid circular dependency with the "role" package.
	RoleInverseTable = "authz_roles"
	// RoleColumn is the table column denoting the role relation/edge.
	RoleColumn = "role_id"
	// RoleSuiteTable is the table that holds the role_suite relation/edge.
	RoleSuiteTable = "authz_permission_histories"
	// RoleSuiteInverseTable is the table name for the RoleSuite entity.
	// It exists in this package in order to avoid circular dependency with the "rolesuite" package.
	RoleSuiteInverseTable = "authz_role_suites"
	// RoleSuiteColumn is the table column denoting the role_suite relation/edge.
	RoleSuiteColumn = "role_suite_id"
	// GrantRequestTable is the table that holds the grant_request relation/edge.
	GrantRequestTable = "authz_permission_histories"
	// GrantRequestInverseTable is the table name for the GrantRequest entity.
	// It exists in this package in order to avoid circular dependency with the "grantrequest" package.
	GrantRequestInverseTable = "authz_grant_requests"
	// GrantRequestColumn is the table column denoting the grant_request relation/edge.
	GrantRequestColumn = "grant_request_id"
	// RevokeRequestTable is the table that holds the revoke_request relation/edge.
	RevokeRequestTable = "authz_permission_histories"
	// RevokeRequestInverseTable is the table name for the RevokeRequest entity.
	// It exists in this package in order to avoid circular dependency with the "revokerequest" package.
	RevokeRequestInverseTable = "authz_revoke_requests"
	// RevokeRequestColumn is the table column denoting the revoke_request relation/edge.
	RevokeRequestColumn = "revoke_request_id"
)

// Columns holds all SQL columns for permissionhistory fields.
var Columns = []string{
	FieldID,
	FieldApproverID,
	FieldApproverEmail,
	FieldCreatedAt,
	FieldEffect,
	FieldEntitlementID,
	FieldEntitlementExpr,
	FieldReceiverID,
	FieldGrantRequestID,
	FieldRevokeRequestID,
	FieldRoleID,
	FieldRoleName,
	FieldRoleSuiteID,
	FieldRoleSuiteName,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// Effect defines the type for the "effect" enum field.
type Effect string

// Effect values.
const (
	EffectGRANT         Effect = "GRANT"
	EffectREVOKE        Effect = "REVOKE"
	EffectENT_DELETED   Effect = "ENT_DELETED"
	EffectROLE_DELETED  Effect = "ROLE_DELETED"
	EffectSUITE_DELETED Effect = "SUITE_DELETED"
)

func (e Effect) String() string {
	return string(e)
}

// EffectValidator is a validator for the "effect" field enum values. It is called by the builders before save.
func EffectValidator(e Effect) error {
	switch e {
	case EffectGRANT, EffectREVOKE, EffectENT_DELETED, EffectROLE_DELETED, EffectSUITE_DELETED:
		return nil
	default:
		return fmt.Errorf("permissionhistory: invalid enum value for effect field: %q", e)
	}
}

// OrderOption defines the ordering options for the PermissionHistory queries.
type OrderOption = func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByApproverID orders the results by the approver_id field.
func ByApproverID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApproverID, opts...).ToFunc()
}

// ByApproverEmail orders the results by the approver_email field.
func ByApproverEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApproverEmail, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByEffect orders the results by the effect field.
func ByEffect(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEffect, opts...).ToFunc()
}

// ByEntitlementID orders the results by the entitlement_id field.
func ByEntitlementID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntitlementID, opts...).ToFunc()
}

// ByEntitlementExpr orders the results by the entitlement_expr field.
func ByEntitlementExpr(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntitlementExpr, opts...).ToFunc()
}

// ByReceiverID orders the results by the receiver_id field.
func ByReceiverID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReceiverID, opts...).ToFunc()
}

// ByGrantRequestID orders the results by the grant_request_id field.
func ByGrantRequestID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGrantRequestID, opts...).ToFunc()
}

// ByRevokeRequestID orders the results by the revoke_request_id field.
func ByRevokeRequestID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRevokeRequestID, opts...).ToFunc()
}

// ByRoleID orders the results by the role_id field.
func ByRoleID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRoleID, opts...).ToFunc()
}

// ByRoleName orders the results by the role_name field.
func ByRoleName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRoleName, opts...).ToFunc()
}

// ByRoleSuiteID orders the results by the role_suite_id field.
func ByRoleSuiteID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRoleSuiteID, opts...).ToFunc()
}

// ByRoleSuiteName orders the results by the role_suite_name field.
func ByRoleSuiteName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRoleSuiteName, opts...).ToFunc()
}

// ByEntitlementField orders the results by entitlement field.
func ByEntitlementField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEntitlementStep(), sql.OrderByField(field, opts...))
	}
}

// ByRoleField orders the results by role field.
func ByRoleField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRoleStep(), sql.OrderByField(field, opts...))
	}
}

// ByRoleSuiteField orders the results by role_suite field.
func ByRoleSuiteField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRoleSuiteStep(), sql.OrderByField(field, opts...))
	}
}

// ByGrantRequestField orders the results by grant_request field.
func ByGrantRequestField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGrantRequestStep(), sql.OrderByField(field, opts...))
	}
}

// ByRevokeRequestField orders the results by revoke_request field.
func ByRevokeRequestField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRevokeRequestStep(), sql.OrderByField(field, opts...))
	}
}
func newEntitlementStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EntitlementInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, EntitlementTable, EntitlementColumn),
	)
}
func newRoleStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RoleInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, RoleTable, RoleColumn),
	)
}
func newRoleSuiteStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RoleSuiteInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, RoleSuiteTable, RoleSuiteColumn),
	)
}
func newGrantRequestStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GrantRequestInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, GrantRequestTable, GrantRequestColumn),
	)
}
func newRevokeRequestStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RevokeRequestInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, RevokeRequestTable, RevokeRequestColumn),
	)
}
