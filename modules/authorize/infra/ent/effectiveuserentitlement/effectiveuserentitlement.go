// Code generated by ent, DO NOT EDIT.

package effectiveuserentitlement

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the effectiveuserentitlement type in the database.
	Label = "effective_user_entitlement"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldActionExpr holds the string denoting the action_expr field in the database.
	FieldActionExpr = "action_expr"
	// FieldResourceID holds the string denoting the resource_id field in the database.
	FieldResourceID = "resource_id"
	// FieldResourceName holds the string denoting the resource_name field in the database.
	FieldResourceName = "resource_name"
	// FieldScopeRef holds the string denoting the scope_ref field in the database.
	FieldScopeRef = "scope_ref"
	// FieldScopeType holds the string denoting the scope_type field in the database.
	FieldScopeType = "scope_type"
	// FieldActionID holds the string denoting the action_id field in the database.
	FieldActionID = "action_id"
	// FieldActionName holds the string denoting the action_name field in the database.
	FieldActionName = "action_name"
	// FieldSource holds the string denoting the source field in the database.
	FieldSource = "source"
	// Table holds the table name of the effectiveuserentitlement in the database.
	Table = "authz_effective_user_entitlements"
)

// Columns holds all SQL columns for effectiveuserentitlement fields.
var Columns = []string{
	FieldUserID,
	FieldActionExpr,
	FieldResourceID,
	FieldResourceName,
	FieldScopeRef,
	FieldScopeType,
	FieldActionID,
	FieldActionName,
	FieldSource,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the EffectiveUserEntitlement queries.
type OrderOption = func(*sql.Selector)

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByActionExpr orders the results by the action_expr field.
func ByActionExpr(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActionExpr, opts...).ToFunc()
}

// ByResourceID orders the results by the resource_id field.
func ByResourceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResourceID, opts...).ToFunc()
}

// ByResourceName orders the results by the resource_name field.
func ByResourceName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResourceName, opts...).ToFunc()
}

// ByScopeRef orders the results by the scope_ref field.
func ByScopeRef(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScopeRef, opts...).ToFunc()
}

// ByScopeType orders the results by the scope_type field.
func ByScopeType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScopeType, opts...).ToFunc()
}

// ByActionID orders the results by the action_id field.
func ByActionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActionID, opts...).ToFunc()
}

// ByActionName orders the results by the action_name field.
func ByActionName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActionName, opts...).ToFunc()
}

// BySource orders the results by the source field.
func BySource(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSource, opts...).ToFunc()
}
