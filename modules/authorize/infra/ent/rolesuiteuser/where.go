// Code generated by ent, DO NOT EDIT.

package rolesuiteuser

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.RoleSuiteUser {
	return predicate.RoleSuiteUser(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.RoleSuiteUser {
	return predicate.RoleSuiteUser(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.RoleSuiteUser {
	return predicate.RoleSuiteUser(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.RoleSuiteUser {
	return predicate.RoleSuiteUser(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.RoleSuiteUser {
	return predicate.RoleSuiteUser(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.RoleSuiteUser {
	return predicate.RoleSuiteUser(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.RoleSuiteUser {
	return predicate.RoleSuiteUser(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.RoleSuiteUser {
	return predicate.RoleSuiteUser(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.RoleSuiteUser {
	return predicate.RoleSuiteUser(sql.FieldLTE(FieldID, id))
}

// ApproverID applies equality check predicate on the "approver_id" field. It's identical to ApproverIDEQ.
func ApproverID(v string) predicate.RoleSuiteUser {
	return predicate.RoleSuiteUser(sql.FieldEQ(FieldApproverID, v))
}

// ReceiverRef applies equality check predicate on the "receiver_ref" field. It's identical to ReceiverRefEQ.
func ReceiverRef(v string) predicate.RoleSuiteUser {
	return predicate.RoleSuiteUser(sql.FieldEQ(FieldReceiverRef, v))
}

// RoleSuiteID applies equality check predicate on the "role_suite_id" field. It's identical to RoleSuiteIDEQ.
func RoleSuiteID(v string) predicate.RoleSuiteUser {
	return predicate.RoleSuiteUser(sql.FieldEQ(FieldRoleSuiteID, v))
}

// ApproverIDEQ applies the EQ predicate on the "approver_id" field.
func ApproverIDEQ(v string) predicate.RoleSuiteUser {
	return predicate.RoleSuiteUser(sql.FieldEQ(FieldApproverID, v))
}

// ApproverIDNEQ applies the NEQ predicate on the "approver_id" field.
func ApproverIDNEQ(v string) predicate.RoleSuiteUser {
	return predicate.RoleSuiteUser(sql.FieldNEQ(FieldApproverID, v))
}

// ApproverIDIn applies the In predicate on the "approver_id" field.
func ApproverIDIn(vs ...string) predicate.RoleSuiteUser {
	return predicate.RoleSuiteUser(sql.FieldIn(FieldApproverID, vs...))
}

// ApproverIDNotIn applies the NotIn predicate on the "approver_id" field.
func ApproverIDNotIn(vs ...string) predicate.RoleSuiteUser {
	return predicate.RoleSuiteUser(sql.FieldNotIn(FieldApproverID, vs...))
}

// ApproverIDGT applies the GT predicate on the "approver_id" field.
func ApproverIDGT(v string) predicate.RoleSuiteUser {
	return predicate.RoleSuiteUser(sql.FieldGT(FieldApproverID, v))
}

// ApproverIDGTE applies the GTE predicate on the "approver_id" field.
func ApproverIDGTE(v string) predicate.RoleSuiteUser {
	return predicate.RoleSuiteUser(sql.FieldGTE(FieldApproverID, v))
}

// ApproverIDLT applies the LT predicate on the "approver_id" field.
func ApproverIDLT(v string) predicate.RoleSuiteUser {
	return predicate.RoleSuiteUser(sql.FieldLT(FieldApproverID, v))
}

// ApproverIDLTE applies the LTE predicate on the "approver_id" field.
func ApproverIDLTE(v string) predicate.RoleSuiteUser {
	return predicate.RoleSuiteUser(sql.FieldLTE(FieldApproverID, v))
}

// ApproverIDContains applies the Contains predicate on the "approver_id" field.
func ApproverIDContains(v string) predicate.RoleSuiteUser {
	return predicate.RoleSuiteUser(sql.FieldContains(FieldApproverID, v))
}

// ApproverIDHasPrefix applies the HasPrefix predicate on the "approver_id" field.
func ApproverIDHasPrefix(v string) predicate.RoleSuiteUser {
	return predicate.RoleSuiteUser(sql.FieldHasPrefix(FieldApproverID, v))
}

// ApproverIDHasSuffix applies the HasSuffix predicate on the "approver_id" field.
func ApproverIDHasSuffix(v string) predicate.RoleSuiteUser {
	return predicate.RoleSuiteUser(sql.FieldHasSuffix(FieldApproverID, v))
}

// ApproverIDEqualFold applies the EqualFold predicate on the "approver_id" field.
func ApproverIDEqualFold(v string) predicate.RoleSuiteUser {
	return predicate.RoleSuiteUser(sql.FieldEqualFold(FieldApproverID, v))
}

// ApproverIDContainsFold applies the ContainsFold predicate on the "approver_id" field.
func ApproverIDContainsFold(v string) predicate.RoleSuiteUser {
	return predicate.RoleSuiteUser(sql.FieldContainsFold(FieldApproverID, v))
}

// ReceiverRefEQ applies the EQ predicate on the "receiver_ref" field.
func ReceiverRefEQ(v string) predicate.RoleSuiteUser {
	return predicate.RoleSuiteUser(sql.FieldEQ(FieldReceiverRef, v))
}

// ReceiverRefNEQ applies the NEQ predicate on the "receiver_ref" field.
func ReceiverRefNEQ(v string) predicate.RoleSuiteUser {
	return predicate.RoleSuiteUser(sql.FieldNEQ(FieldReceiverRef, v))
}

// ReceiverRefIn applies the In predicate on the "receiver_ref" field.
func ReceiverRefIn(vs ...string) predicate.RoleSuiteUser {
	return predicate.RoleSuiteUser(sql.FieldIn(FieldReceiverRef, vs...))
}

// ReceiverRefNotIn applies the NotIn predicate on the "receiver_ref" field.
func ReceiverRefNotIn(vs ...string) predicate.RoleSuiteUser {
	return predicate.RoleSuiteUser(sql.FieldNotIn(FieldReceiverRef, vs...))
}

// ReceiverRefGT applies the GT predicate on the "receiver_ref" field.
func ReceiverRefGT(v string) predicate.RoleSuiteUser {
	return predicate.RoleSuiteUser(sql.FieldGT(FieldReceiverRef, v))
}

// ReceiverRefGTE applies the GTE predicate on the "receiver_ref" field.
func ReceiverRefGTE(v string) predicate.RoleSuiteUser {
	return predicate.RoleSuiteUser(sql.FieldGTE(FieldReceiverRef, v))
}

// ReceiverRefLT applies the LT predicate on the "receiver_ref" field.
func ReceiverRefLT(v string) predicate.RoleSuiteUser {
	return predicate.RoleSuiteUser(sql.FieldLT(FieldReceiverRef, v))
}

// ReceiverRefLTE applies the LTE predicate on the "receiver_ref" field.
func ReceiverRefLTE(v string) predicate.RoleSuiteUser {
	return predicate.RoleSuiteUser(sql.FieldLTE(FieldReceiverRef, v))
}

// ReceiverRefContains applies the Contains predicate on the "receiver_ref" field.
func ReceiverRefContains(v string) predicate.RoleSuiteUser {
	return predicate.RoleSuiteUser(sql.FieldContains(FieldReceiverRef, v))
}

// ReceiverRefHasPrefix applies the HasPrefix predicate on the "receiver_ref" field.
func ReceiverRefHasPrefix(v string) predicate.RoleSuiteUser {
	return predicate.RoleSuiteUser(sql.FieldHasPrefix(FieldReceiverRef, v))
}

// ReceiverRefHasSuffix applies the HasSuffix predicate on the "receiver_ref" field.
func ReceiverRefHasSuffix(v string) predicate.RoleSuiteUser {
	return predicate.RoleSuiteUser(sql.FieldHasSuffix(FieldReceiverRef, v))
}

// ReceiverRefEqualFold applies the EqualFold predicate on the "receiver_ref" field.
func ReceiverRefEqualFold(v string) predicate.RoleSuiteUser {
	return predicate.RoleSuiteUser(sql.FieldEqualFold(FieldReceiverRef, v))
}

// ReceiverRefContainsFold applies the ContainsFold predicate on the "receiver_ref" field.
func ReceiverRefContainsFold(v string) predicate.RoleSuiteUser {
	return predicate.RoleSuiteUser(sql.FieldContainsFold(FieldReceiverRef, v))
}

// ReceiverTypeEQ applies the EQ predicate on the "receiver_type" field.
func ReceiverTypeEQ(v ReceiverType) predicate.RoleSuiteUser {
	return predicate.RoleSuiteUser(sql.FieldEQ(FieldReceiverType, v))
}

// ReceiverTypeNEQ applies the NEQ predicate on the "receiver_type" field.
func ReceiverTypeNEQ(v ReceiverType) predicate.RoleSuiteUser {
	return predicate.RoleSuiteUser(sql.FieldNEQ(FieldReceiverType, v))
}

// ReceiverTypeIn applies the In predicate on the "receiver_type" field.
func ReceiverTypeIn(vs ...ReceiverType) predicate.RoleSuiteUser {
	return predicate.RoleSuiteUser(sql.FieldIn(FieldReceiverType, vs...))
}

// ReceiverTypeNotIn applies the NotIn predicate on the "receiver_type" field.
func ReceiverTypeNotIn(vs ...ReceiverType) predicate.RoleSuiteUser {
	return predicate.RoleSuiteUser(sql.FieldNotIn(FieldReceiverType, vs...))
}

// RoleSuiteIDEQ applies the EQ predicate on the "role_suite_id" field.
func RoleSuiteIDEQ(v string) predicate.RoleSuiteUser {
	return predicate.RoleSuiteUser(sql.FieldEQ(FieldRoleSuiteID, v))
}

// RoleSuiteIDNEQ applies the NEQ predicate on the "role_suite_id" field.
func RoleSuiteIDNEQ(v string) predicate.RoleSuiteUser {
	return predicate.RoleSuiteUser(sql.FieldNEQ(FieldRoleSuiteID, v))
}

// RoleSuiteIDIn applies the In predicate on the "role_suite_id" field.
func RoleSuiteIDIn(vs ...string) predicate.RoleSuiteUser {
	return predicate.RoleSuiteUser(sql.FieldIn(FieldRoleSuiteID, vs...))
}

// RoleSuiteIDNotIn applies the NotIn predicate on the "role_suite_id" field.
func RoleSuiteIDNotIn(vs ...string) predicate.RoleSuiteUser {
	return predicate.RoleSuiteUser(sql.FieldNotIn(FieldRoleSuiteID, vs...))
}

// RoleSuiteIDGT applies the GT predicate on the "role_suite_id" field.
func RoleSuiteIDGT(v string) predicate.RoleSuiteUser {
	return predicate.RoleSuiteUser(sql.FieldGT(FieldRoleSuiteID, v))
}

// RoleSuiteIDGTE applies the GTE predicate on the "role_suite_id" field.
func RoleSuiteIDGTE(v string) predicate.RoleSuiteUser {
	return predicate.RoleSuiteUser(sql.FieldGTE(FieldRoleSuiteID, v))
}

// RoleSuiteIDLT applies the LT predicate on the "role_suite_id" field.
func RoleSuiteIDLT(v string) predicate.RoleSuiteUser {
	return predicate.RoleSuiteUser(sql.FieldLT(FieldRoleSuiteID, v))
}

// RoleSuiteIDLTE applies the LTE predicate on the "role_suite_id" field.
func RoleSuiteIDLTE(v string) predicate.RoleSuiteUser {
	return predicate.RoleSuiteUser(sql.FieldLTE(FieldRoleSuiteID, v))
}

// RoleSuiteIDContains applies the Contains predicate on the "role_suite_id" field.
func RoleSuiteIDContains(v string) predicate.RoleSuiteUser {
	return predicate.RoleSuiteUser(sql.FieldContains(FieldRoleSuiteID, v))
}

// RoleSuiteIDHasPrefix applies the HasPrefix predicate on the "role_suite_id" field.
func RoleSuiteIDHasPrefix(v string) predicate.RoleSuiteUser {
	return predicate.RoleSuiteUser(sql.FieldHasPrefix(FieldRoleSuiteID, v))
}

// RoleSuiteIDHasSuffix applies the HasSuffix predicate on the "role_suite_id" field.
func RoleSuiteIDHasSuffix(v string) predicate.RoleSuiteUser {
	return predicate.RoleSuiteUser(sql.FieldHasSuffix(FieldRoleSuiteID, v))
}

// RoleSuiteIDEqualFold applies the EqualFold predicate on the "role_suite_id" field.
func RoleSuiteIDEqualFold(v string) predicate.RoleSuiteUser {
	return predicate.RoleSuiteUser(sql.FieldEqualFold(FieldRoleSuiteID, v))
}

// RoleSuiteIDContainsFold applies the ContainsFold predicate on the "role_suite_id" field.
func RoleSuiteIDContainsFold(v string) predicate.RoleSuiteUser {
	return predicate.RoleSuiteUser(sql.FieldContainsFold(FieldRoleSuiteID, v))
}

// HasRoleSuite applies the HasEdge predicate on the "role_suite" edge.
func HasRoleSuite() predicate.RoleSuiteUser {
	return predicate.RoleSuiteUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, RoleSuiteTable, RoleSuiteColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRoleSuiteWith applies the HasEdge predicate on the "role_suite" edge with a given conditions (other predicates).
func HasRoleSuiteWith(preds ...predicate.RoleSuite) predicate.RoleSuiteUser {
	return predicate.RoleSuiteUser(func(s *sql.Selector) {
		step := newRoleSuiteStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.RoleSuiteUser) predicate.RoleSuiteUser {
	return predicate.RoleSuiteUser(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.RoleSuiteUser) predicate.RoleSuiteUser {
	return predicate.RoleSuiteUser(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.RoleSuiteUser) predicate.RoleSuiteUser {
	return predicate.RoleSuiteUser(sql.NotPredicates(p))
}
