// Code generated by ent, DO NOT EDIT.

package action

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Action {
	return predicate.Action(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Action {
	return predicate.Action(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Action {
	return predicate.Action(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Action {
	return predicate.Action(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Action {
	return predicate.Action(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Action {
	return predicate.Action(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Action {
	return predicate.Action(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Action {
	return predicate.Action(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Action {
	return predicate.Action(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Action {
	return predicate.Action(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Action {
	return predicate.Action(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Action {
	return predicate.Action(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.Action {
	return predicate.Action(sql.FieldEQ(FieldCreatedBy, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Action {
	return predicate.Action(sql.FieldEQ(FieldName, v))
}

// Etag applies equality check predicate on the "etag" field. It's identical to EtagEQ.
func Etag(v string) predicate.Action {
	return predicate.Action(sql.FieldEQ(FieldEtag, v))
}

// ResourceID applies equality check predicate on the "resource_id" field. It's identical to ResourceIDEQ.
func ResourceID(v string) predicate.Action {
	return predicate.Action(sql.FieldEQ(FieldResourceID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Action {
	return predicate.Action(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Action {
	return predicate.Action(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Action {
	return predicate.Action(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Action {
	return predicate.Action(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Action {
	return predicate.Action(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Action {
	return predicate.Action(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Action {
	return predicate.Action(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Action {
	return predicate.Action(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.Action {
	return predicate.Action(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.Action {
	return predicate.Action(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.Action {
	return predicate.Action(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.Action {
	return predicate.Action(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.Action {
	return predicate.Action(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.Action {
	return predicate.Action(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.Action {
	return predicate.Action(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.Action {
	return predicate.Action(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.Action {
	return predicate.Action(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.Action {
	return predicate.Action(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.Action {
	return predicate.Action(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.Action {
	return predicate.Action(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.Action {
	return predicate.Action(sql.FieldContainsFold(FieldCreatedBy, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Action {
	return predicate.Action(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Action {
	return predicate.Action(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Action {
	return predicate.Action(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Action {
	return predicate.Action(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Action {
	return predicate.Action(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Action {
	return predicate.Action(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Action {
	return predicate.Action(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Action {
	return predicate.Action(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Action {
	return predicate.Action(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Action {
	return predicate.Action(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Action {
	return predicate.Action(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Action {
	return predicate.Action(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Action {
	return predicate.Action(sql.FieldContainsFold(FieldName, v))
}

// EtagEQ applies the EQ predicate on the "etag" field.
func EtagEQ(v string) predicate.Action {
	return predicate.Action(sql.FieldEQ(FieldEtag, v))
}

// EtagNEQ applies the NEQ predicate on the "etag" field.
func EtagNEQ(v string) predicate.Action {
	return predicate.Action(sql.FieldNEQ(FieldEtag, v))
}

// EtagIn applies the In predicate on the "etag" field.
func EtagIn(vs ...string) predicate.Action {
	return predicate.Action(sql.FieldIn(FieldEtag, vs...))
}

// EtagNotIn applies the NotIn predicate on the "etag" field.
func EtagNotIn(vs ...string) predicate.Action {
	return predicate.Action(sql.FieldNotIn(FieldEtag, vs...))
}

// EtagGT applies the GT predicate on the "etag" field.
func EtagGT(v string) predicate.Action {
	return predicate.Action(sql.FieldGT(FieldEtag, v))
}

// EtagGTE applies the GTE predicate on the "etag" field.
func EtagGTE(v string) predicate.Action {
	return predicate.Action(sql.FieldGTE(FieldEtag, v))
}

// EtagLT applies the LT predicate on the "etag" field.
func EtagLT(v string) predicate.Action {
	return predicate.Action(sql.FieldLT(FieldEtag, v))
}

// EtagLTE applies the LTE predicate on the "etag" field.
func EtagLTE(v string) predicate.Action {
	return predicate.Action(sql.FieldLTE(FieldEtag, v))
}

// EtagContains applies the Contains predicate on the "etag" field.
func EtagContains(v string) predicate.Action {
	return predicate.Action(sql.FieldContains(FieldEtag, v))
}

// EtagHasPrefix applies the HasPrefix predicate on the "etag" field.
func EtagHasPrefix(v string) predicate.Action {
	return predicate.Action(sql.FieldHasPrefix(FieldEtag, v))
}

// EtagHasSuffix applies the HasSuffix predicate on the "etag" field.
func EtagHasSuffix(v string) predicate.Action {
	return predicate.Action(sql.FieldHasSuffix(FieldEtag, v))
}

// EtagEqualFold applies the EqualFold predicate on the "etag" field.
func EtagEqualFold(v string) predicate.Action {
	return predicate.Action(sql.FieldEqualFold(FieldEtag, v))
}

// EtagContainsFold applies the ContainsFold predicate on the "etag" field.
func EtagContainsFold(v string) predicate.Action {
	return predicate.Action(sql.FieldContainsFold(FieldEtag, v))
}

// ResourceIDEQ applies the EQ predicate on the "resource_id" field.
func ResourceIDEQ(v string) predicate.Action {
	return predicate.Action(sql.FieldEQ(FieldResourceID, v))
}

// ResourceIDNEQ applies the NEQ predicate on the "resource_id" field.
func ResourceIDNEQ(v string) predicate.Action {
	return predicate.Action(sql.FieldNEQ(FieldResourceID, v))
}

// ResourceIDIn applies the In predicate on the "resource_id" field.
func ResourceIDIn(vs ...string) predicate.Action {
	return predicate.Action(sql.FieldIn(FieldResourceID, vs...))
}

// ResourceIDNotIn applies the NotIn predicate on the "resource_id" field.
func ResourceIDNotIn(vs ...string) predicate.Action {
	return predicate.Action(sql.FieldNotIn(FieldResourceID, vs...))
}

// ResourceIDGT applies the GT predicate on the "resource_id" field.
func ResourceIDGT(v string) predicate.Action {
	return predicate.Action(sql.FieldGT(FieldResourceID, v))
}

// ResourceIDGTE applies the GTE predicate on the "resource_id" field.
func ResourceIDGTE(v string) predicate.Action {
	return predicate.Action(sql.FieldGTE(FieldResourceID, v))
}

// ResourceIDLT applies the LT predicate on the "resource_id" field.
func ResourceIDLT(v string) predicate.Action {
	return predicate.Action(sql.FieldLT(FieldResourceID, v))
}

// ResourceIDLTE applies the LTE predicate on the "resource_id" field.
func ResourceIDLTE(v string) predicate.Action {
	return predicate.Action(sql.FieldLTE(FieldResourceID, v))
}

// ResourceIDContains applies the Contains predicate on the "resource_id" field.
func ResourceIDContains(v string) predicate.Action {
	return predicate.Action(sql.FieldContains(FieldResourceID, v))
}

// ResourceIDHasPrefix applies the HasPrefix predicate on the "resource_id" field.
func ResourceIDHasPrefix(v string) predicate.Action {
	return predicate.Action(sql.FieldHasPrefix(FieldResourceID, v))
}

// ResourceIDHasSuffix applies the HasSuffix predicate on the "resource_id" field.
func ResourceIDHasSuffix(v string) predicate.Action {
	return predicate.Action(sql.FieldHasSuffix(FieldResourceID, v))
}

// ResourceIDEqualFold applies the EqualFold predicate on the "resource_id" field.
func ResourceIDEqualFold(v string) predicate.Action {
	return predicate.Action(sql.FieldEqualFold(FieldResourceID, v))
}

// ResourceIDContainsFold applies the ContainsFold predicate on the "resource_id" field.
func ResourceIDContainsFold(v string) predicate.Action {
	return predicate.Action(sql.FieldContainsFold(FieldResourceID, v))
}

// HasEntitlements applies the HasEdge predicate on the "entitlements" edge.
func HasEntitlements() predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, EntitlementsTable, EntitlementsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEntitlementsWith applies the HasEdge predicate on the "entitlements" edge with a given conditions (other predicates).
func HasEntitlementsWith(preds ...predicate.Entitlement) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		step := newEntitlementsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasResource applies the HasEdge predicate on the "resource" edge.
func HasResource() predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ResourceTable, ResourceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasResourceWith applies the HasEdge predicate on the "resource" edge with a given conditions (other predicates).
func HasResourceWith(preds ...predicate.Resource) predicate.Action {
	return predicate.Action(func(s *sql.Selector) {
		step := newResourceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Action) predicate.Action {
	return predicate.Action(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Action) predicate.Action {
	return predicate.Action(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Action) predicate.Action {
	return predicate.Action(sql.NotPredicates(p))
}
