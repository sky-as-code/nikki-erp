// Code generated by ent, DO NOT EDIT.

package rolerolesuite

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/predicate"
)

// RoleID applies equality check predicate on the "role_id" field. It's identical to RoleIDEQ.
func RoleID(v string) predicate.RoleRoleSuite {
	return predicate.RoleRoleSuite(sql.FieldEQ(FieldRoleID, v))
}

// RoleSuiteID applies equality check predicate on the "role_suite_id" field. It's identical to RoleSuiteIDEQ.
func RoleSuiteID(v string) predicate.RoleRoleSuite {
	return predicate.RoleRoleSuite(sql.FieldEQ(FieldRoleSuiteID, v))
}

// RoleIDEQ applies the EQ predicate on the "role_id" field.
func RoleIDEQ(v string) predicate.RoleRoleSuite {
	return predicate.RoleRoleSuite(sql.FieldEQ(FieldRoleID, v))
}

// RoleIDNEQ applies the NEQ predicate on the "role_id" field.
func RoleIDNEQ(v string) predicate.RoleRoleSuite {
	return predicate.RoleRoleSuite(sql.FieldNEQ(FieldRoleID, v))
}

// RoleIDIn applies the In predicate on the "role_id" field.
func RoleIDIn(vs ...string) predicate.RoleRoleSuite {
	return predicate.RoleRoleSuite(sql.FieldIn(FieldRoleID, vs...))
}

// RoleIDNotIn applies the NotIn predicate on the "role_id" field.
func RoleIDNotIn(vs ...string) predicate.RoleRoleSuite {
	return predicate.RoleRoleSuite(sql.FieldNotIn(FieldRoleID, vs...))
}

// RoleIDGT applies the GT predicate on the "role_id" field.
func RoleIDGT(v string) predicate.RoleRoleSuite {
	return predicate.RoleRoleSuite(sql.FieldGT(FieldRoleID, v))
}

// RoleIDGTE applies the GTE predicate on the "role_id" field.
func RoleIDGTE(v string) predicate.RoleRoleSuite {
	return predicate.RoleRoleSuite(sql.FieldGTE(FieldRoleID, v))
}

// RoleIDLT applies the LT predicate on the "role_id" field.
func RoleIDLT(v string) predicate.RoleRoleSuite {
	return predicate.RoleRoleSuite(sql.FieldLT(FieldRoleID, v))
}

// RoleIDLTE applies the LTE predicate on the "role_id" field.
func RoleIDLTE(v string) predicate.RoleRoleSuite {
	return predicate.RoleRoleSuite(sql.FieldLTE(FieldRoleID, v))
}

// RoleIDContains applies the Contains predicate on the "role_id" field.
func RoleIDContains(v string) predicate.RoleRoleSuite {
	return predicate.RoleRoleSuite(sql.FieldContains(FieldRoleID, v))
}

// RoleIDHasPrefix applies the HasPrefix predicate on the "role_id" field.
func RoleIDHasPrefix(v string) predicate.RoleRoleSuite {
	return predicate.RoleRoleSuite(sql.FieldHasPrefix(FieldRoleID, v))
}

// RoleIDHasSuffix applies the HasSuffix predicate on the "role_id" field.
func RoleIDHasSuffix(v string) predicate.RoleRoleSuite {
	return predicate.RoleRoleSuite(sql.FieldHasSuffix(FieldRoleID, v))
}

// RoleIDEqualFold applies the EqualFold predicate on the "role_id" field.
func RoleIDEqualFold(v string) predicate.RoleRoleSuite {
	return predicate.RoleRoleSuite(sql.FieldEqualFold(FieldRoleID, v))
}

// RoleIDContainsFold applies the ContainsFold predicate on the "role_id" field.
func RoleIDContainsFold(v string) predicate.RoleRoleSuite {
	return predicate.RoleRoleSuite(sql.FieldContainsFold(FieldRoleID, v))
}

// RoleSuiteIDEQ applies the EQ predicate on the "role_suite_id" field.
func RoleSuiteIDEQ(v string) predicate.RoleRoleSuite {
	return predicate.RoleRoleSuite(sql.FieldEQ(FieldRoleSuiteID, v))
}

// RoleSuiteIDNEQ applies the NEQ predicate on the "role_suite_id" field.
func RoleSuiteIDNEQ(v string) predicate.RoleRoleSuite {
	return predicate.RoleRoleSuite(sql.FieldNEQ(FieldRoleSuiteID, v))
}

// RoleSuiteIDIn applies the In predicate on the "role_suite_id" field.
func RoleSuiteIDIn(vs ...string) predicate.RoleRoleSuite {
	return predicate.RoleRoleSuite(sql.FieldIn(FieldRoleSuiteID, vs...))
}

// RoleSuiteIDNotIn applies the NotIn predicate on the "role_suite_id" field.
func RoleSuiteIDNotIn(vs ...string) predicate.RoleRoleSuite {
	return predicate.RoleRoleSuite(sql.FieldNotIn(FieldRoleSuiteID, vs...))
}

// RoleSuiteIDGT applies the GT predicate on the "role_suite_id" field.
func RoleSuiteIDGT(v string) predicate.RoleRoleSuite {
	return predicate.RoleRoleSuite(sql.FieldGT(FieldRoleSuiteID, v))
}

// RoleSuiteIDGTE applies the GTE predicate on the "role_suite_id" field.
func RoleSuiteIDGTE(v string) predicate.RoleRoleSuite {
	return predicate.RoleRoleSuite(sql.FieldGTE(FieldRoleSuiteID, v))
}

// RoleSuiteIDLT applies the LT predicate on the "role_suite_id" field.
func RoleSuiteIDLT(v string) predicate.RoleRoleSuite {
	return predicate.RoleRoleSuite(sql.FieldLT(FieldRoleSuiteID, v))
}

// RoleSuiteIDLTE applies the LTE predicate on the "role_suite_id" field.
func RoleSuiteIDLTE(v string) predicate.RoleRoleSuite {
	return predicate.RoleRoleSuite(sql.FieldLTE(FieldRoleSuiteID, v))
}

// RoleSuiteIDContains applies the Contains predicate on the "role_suite_id" field.
func RoleSuiteIDContains(v string) predicate.RoleRoleSuite {
	return predicate.RoleRoleSuite(sql.FieldContains(FieldRoleSuiteID, v))
}

// RoleSuiteIDHasPrefix applies the HasPrefix predicate on the "role_suite_id" field.
func RoleSuiteIDHasPrefix(v string) predicate.RoleRoleSuite {
	return predicate.RoleRoleSuite(sql.FieldHasPrefix(FieldRoleSuiteID, v))
}

// RoleSuiteIDHasSuffix applies the HasSuffix predicate on the "role_suite_id" field.
func RoleSuiteIDHasSuffix(v string) predicate.RoleRoleSuite {
	return predicate.RoleRoleSuite(sql.FieldHasSuffix(FieldRoleSuiteID, v))
}

// RoleSuiteIDEqualFold applies the EqualFold predicate on the "role_suite_id" field.
func RoleSuiteIDEqualFold(v string) predicate.RoleRoleSuite {
	return predicate.RoleRoleSuite(sql.FieldEqualFold(FieldRoleSuiteID, v))
}

// RoleSuiteIDContainsFold applies the ContainsFold predicate on the "role_suite_id" field.
func RoleSuiteIDContainsFold(v string) predicate.RoleRoleSuite {
	return predicate.RoleRoleSuite(sql.FieldContainsFold(FieldRoleSuiteID, v))
}

// HasRole applies the HasEdge predicate on the "role" edge.
func HasRole() predicate.RoleRoleSuite {
	return predicate.RoleRoleSuite(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, RoleColumn),
			sqlgraph.Edge(sqlgraph.M2O, false, RoleTable, RoleColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRoleWith applies the HasEdge predicate on the "role" edge with a given conditions (other predicates).
func HasRoleWith(preds ...predicate.Role) predicate.RoleRoleSuite {
	return predicate.RoleRoleSuite(func(s *sql.Selector) {
		step := newRoleStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRoleSuite applies the HasEdge predicate on the "role_suite" edge.
func HasRoleSuite() predicate.RoleRoleSuite {
	return predicate.RoleRoleSuite(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, RoleSuiteColumn),
			sqlgraph.Edge(sqlgraph.M2O, false, RoleSuiteTable, RoleSuiteColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRoleSuiteWith applies the HasEdge predicate on the "role_suite" edge with a given conditions (other predicates).
func HasRoleSuiteWith(preds ...predicate.RoleSuite) predicate.RoleRoleSuite {
	return predicate.RoleRoleSuite(func(s *sql.Selector) {
		step := newRoleSuiteStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.RoleRoleSuite) predicate.RoleRoleSuite {
	return predicate.RoleRoleSuite(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.RoleRoleSuite) predicate.RoleRoleSuite {
	return predicate.RoleRoleSuite(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.RoleRoleSuite) predicate.RoleRoleSuite {
	return predicate.RoleRoleSuite(sql.NotPredicates(p))
}
