// Code generated by ent, DO NOT EDIT.

package rolerolesuite

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the rolerolesuite type in the database.
	Label = "role_role_suite"
	// FieldRoleID holds the string denoting the role_id field in the database.
	FieldRoleID = "role_id"
	// FieldRoleSuiteID holds the string denoting the role_suite_id field in the database.
	FieldRoleSuiteID = "role_suite_id"
	// EdgeRole holds the string denoting the role edge name in mutations.
	EdgeRole = "role"
	// EdgeRoleSuite holds the string denoting the role_suite edge name in mutations.
	EdgeRoleSuite = "role_suite"
	// RoleFieldID holds the string denoting the ID field of the Role.
	RoleFieldID = "id"
	// RoleSuiteFieldID holds the string denoting the ID field of the RoleSuite.
	RoleSuiteFieldID = "id"
	// Table holds the table name of the rolerolesuite in the database.
	Table = "authz_role_rolesuite"
	// RoleTable is the table that holds the role relation/edge.
	RoleTable = "authz_role_rolesuite"
	// RoleInverseTable is the table name for the Role entity.
	// It exists in this package in order to avoid circular dependency with the "role" package.
	RoleInverseTable = "authz_roles"
	// RoleColumn is the table column denoting the role relation/edge.
	RoleColumn = "role_id"
	// RoleSuiteTable is the table that holds the role_suite relation/edge.
	RoleSuiteTable = "authz_role_rolesuite"
	// RoleSuiteInverseTable is the table name for the RoleSuite entity.
	// It exists in this package in order to avoid circular dependency with the "rolesuite" package.
	RoleSuiteInverseTable = "authz_role_suites"
	// RoleSuiteColumn is the table column denoting the role_suite relation/edge.
	RoleSuiteColumn = "role_suite_id"
)

// Columns holds all SQL columns for rolerolesuite fields.
var Columns = []string{
	FieldRoleID,
	FieldRoleSuiteID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the RoleRoleSuite queries.
type OrderOption = func(*sql.Selector)

// ByRoleID orders the results by the role_id field.
func ByRoleID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRoleID, opts...).ToFunc()
}

// ByRoleSuiteID orders the results by the role_suite_id field.
func ByRoleSuiteID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRoleSuiteID, opts...).ToFunc()
}

// ByRoleField orders the results by role field.
func ByRoleField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRoleStep(), sql.OrderByField(field, opts...))
	}
}

// ByRoleSuiteField orders the results by role_suite field.
func ByRoleSuiteField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRoleSuiteStep(), sql.OrderByField(field, opts...))
	}
}
func newRoleStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, RoleColumn),
		sqlgraph.To(RoleInverseTable, RoleFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, RoleTable, RoleColumn),
	)
}
func newRoleSuiteStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, RoleSuiteColumn),
		sqlgraph.To(RoleSuiteInverseTable, RoleSuiteFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, RoleSuiteTable, RoleSuiteColumn),
	)
}
