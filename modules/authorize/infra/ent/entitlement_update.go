// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/entitlement"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/entitlementassignment"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/permissionhistory"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/predicate"
)

// EntitlementUpdate is the builder for updating Entitlement entities.
type EntitlementUpdate struct {
	config
	hooks    []Hook
	mutation *EntitlementMutation
}

// Where appends a list predicates to the EntitlementUpdate builder.
func (eu *EntitlementUpdate) Where(ps ...predicate.Entitlement) *EntitlementUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetName sets the "name" field.
func (eu *EntitlementUpdate) SetName(s string) *EntitlementUpdate {
	eu.mutation.SetName(s)
	return eu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (eu *EntitlementUpdate) SetNillableName(s *string) *EntitlementUpdate {
	if s != nil {
		eu.SetName(*s)
	}
	return eu
}

// ClearName clears the value of the "name" field.
func (eu *EntitlementUpdate) ClearName() *EntitlementUpdate {
	eu.mutation.ClearName()
	return eu
}

// SetDescription sets the "description" field.
func (eu *EntitlementUpdate) SetDescription(s string) *EntitlementUpdate {
	eu.mutation.SetDescription(s)
	return eu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (eu *EntitlementUpdate) SetNillableDescription(s *string) *EntitlementUpdate {
	if s != nil {
		eu.SetDescription(*s)
	}
	return eu
}

// ClearDescription clears the value of the "description" field.
func (eu *EntitlementUpdate) ClearDescription() *EntitlementUpdate {
	eu.mutation.ClearDescription()
	return eu
}

// SetEtag sets the "etag" field.
func (eu *EntitlementUpdate) SetEtag(s string) *EntitlementUpdate {
	eu.mutation.SetEtag(s)
	return eu
}

// SetNillableEtag sets the "etag" field if the given value is not nil.
func (eu *EntitlementUpdate) SetNillableEtag(s *string) *EntitlementUpdate {
	if s != nil {
		eu.SetEtag(*s)
	}
	return eu
}

// AddPermissionHistoryIDs adds the "permission_histories" edge to the PermissionHistory entity by IDs.
func (eu *EntitlementUpdate) AddPermissionHistoryIDs(ids ...string) *EntitlementUpdate {
	eu.mutation.AddPermissionHistoryIDs(ids...)
	return eu
}

// AddPermissionHistories adds the "permission_histories" edges to the PermissionHistory entity.
func (eu *EntitlementUpdate) AddPermissionHistories(p ...*PermissionHistory) *EntitlementUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eu.AddPermissionHistoryIDs(ids...)
}

// AddEntitlementAssignmentIDs adds the "entitlement_assignments" edge to the EntitlementAssignment entity by IDs.
func (eu *EntitlementUpdate) AddEntitlementAssignmentIDs(ids ...string) *EntitlementUpdate {
	eu.mutation.AddEntitlementAssignmentIDs(ids...)
	return eu
}

// AddEntitlementAssignments adds the "entitlement_assignments" edges to the EntitlementAssignment entity.
func (eu *EntitlementUpdate) AddEntitlementAssignments(e ...*EntitlementAssignment) *EntitlementUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.AddEntitlementAssignmentIDs(ids...)
}

// Mutation returns the EntitlementMutation object of the builder.
func (eu *EntitlementUpdate) Mutation() *EntitlementMutation {
	return eu.mutation
}

// ClearPermissionHistories clears all "permission_histories" edges to the PermissionHistory entity.
func (eu *EntitlementUpdate) ClearPermissionHistories() *EntitlementUpdate {
	eu.mutation.ClearPermissionHistories()
	return eu
}

// RemovePermissionHistoryIDs removes the "permission_histories" edge to PermissionHistory entities by IDs.
func (eu *EntitlementUpdate) RemovePermissionHistoryIDs(ids ...string) *EntitlementUpdate {
	eu.mutation.RemovePermissionHistoryIDs(ids...)
	return eu
}

// RemovePermissionHistories removes "permission_histories" edges to PermissionHistory entities.
func (eu *EntitlementUpdate) RemovePermissionHistories(p ...*PermissionHistory) *EntitlementUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eu.RemovePermissionHistoryIDs(ids...)
}

// ClearEntitlementAssignments clears all "entitlement_assignments" edges to the EntitlementAssignment entity.
func (eu *EntitlementUpdate) ClearEntitlementAssignments() *EntitlementUpdate {
	eu.mutation.ClearEntitlementAssignments()
	return eu
}

// RemoveEntitlementAssignmentIDs removes the "entitlement_assignments" edge to EntitlementAssignment entities by IDs.
func (eu *EntitlementUpdate) RemoveEntitlementAssignmentIDs(ids ...string) *EntitlementUpdate {
	eu.mutation.RemoveEntitlementAssignmentIDs(ids...)
	return eu
}

// RemoveEntitlementAssignments removes "entitlement_assignments" edges to EntitlementAssignment entities.
func (eu *EntitlementUpdate) RemoveEntitlementAssignments(e ...*EntitlementAssignment) *EntitlementUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.RemoveEntitlementAssignmentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EntitlementUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EntitlementUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EntitlementUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EntitlementUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eu *EntitlementUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(entitlement.Table, entitlement.Columns, sqlgraph.NewFieldSpec(entitlement.FieldID, field.TypeString))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.Name(); ok {
		_spec.SetField(entitlement.FieldName, field.TypeString, value)
	}
	if eu.mutation.NameCleared() {
		_spec.ClearField(entitlement.FieldName, field.TypeString)
	}
	if value, ok := eu.mutation.Description(); ok {
		_spec.SetField(entitlement.FieldDescription, field.TypeString, value)
	}
	if eu.mutation.DescriptionCleared() {
		_spec.ClearField(entitlement.FieldDescription, field.TypeString)
	}
	if value, ok := eu.mutation.Etag(); ok {
		_spec.SetField(entitlement.FieldEtag, field.TypeString, value)
	}
	if eu.mutation.ScopeRefCleared() {
		_spec.ClearField(entitlement.FieldScopeRef, field.TypeString)
	}
	if eu.mutation.PermissionHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   entitlement.PermissionHistoriesTable,
			Columns: []string{entitlement.PermissionHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permissionhistory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedPermissionHistoriesIDs(); len(nodes) > 0 && !eu.mutation.PermissionHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   entitlement.PermissionHistoriesTable,
			Columns: []string{entitlement.PermissionHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permissionhistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.PermissionHistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   entitlement.PermissionHistoriesTable,
			Columns: []string{entitlement.PermissionHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permissionhistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.EntitlementAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   entitlement.EntitlementAssignmentsTable,
			Columns: []string{entitlement.EntitlementAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlementassignment.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedEntitlementAssignmentsIDs(); len(nodes) > 0 && !eu.mutation.EntitlementAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   entitlement.EntitlementAssignmentsTable,
			Columns: []string{entitlement.EntitlementAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlementassignment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EntitlementAssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   entitlement.EntitlementAssignmentsTable,
			Columns: []string{entitlement.EntitlementAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlementassignment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entitlement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// EntitlementUpdateOne is the builder for updating a single Entitlement entity.
type EntitlementUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EntitlementMutation
}

// SetName sets the "name" field.
func (euo *EntitlementUpdateOne) SetName(s string) *EntitlementUpdateOne {
	euo.mutation.SetName(s)
	return euo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (euo *EntitlementUpdateOne) SetNillableName(s *string) *EntitlementUpdateOne {
	if s != nil {
		euo.SetName(*s)
	}
	return euo
}

// ClearName clears the value of the "name" field.
func (euo *EntitlementUpdateOne) ClearName() *EntitlementUpdateOne {
	euo.mutation.ClearName()
	return euo
}

// SetDescription sets the "description" field.
func (euo *EntitlementUpdateOne) SetDescription(s string) *EntitlementUpdateOne {
	euo.mutation.SetDescription(s)
	return euo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (euo *EntitlementUpdateOne) SetNillableDescription(s *string) *EntitlementUpdateOne {
	if s != nil {
		euo.SetDescription(*s)
	}
	return euo
}

// ClearDescription clears the value of the "description" field.
func (euo *EntitlementUpdateOne) ClearDescription() *EntitlementUpdateOne {
	euo.mutation.ClearDescription()
	return euo
}

// SetEtag sets the "etag" field.
func (euo *EntitlementUpdateOne) SetEtag(s string) *EntitlementUpdateOne {
	euo.mutation.SetEtag(s)
	return euo
}

// SetNillableEtag sets the "etag" field if the given value is not nil.
func (euo *EntitlementUpdateOne) SetNillableEtag(s *string) *EntitlementUpdateOne {
	if s != nil {
		euo.SetEtag(*s)
	}
	return euo
}

// AddPermissionHistoryIDs adds the "permission_histories" edge to the PermissionHistory entity by IDs.
func (euo *EntitlementUpdateOne) AddPermissionHistoryIDs(ids ...string) *EntitlementUpdateOne {
	euo.mutation.AddPermissionHistoryIDs(ids...)
	return euo
}

// AddPermissionHistories adds the "permission_histories" edges to the PermissionHistory entity.
func (euo *EntitlementUpdateOne) AddPermissionHistories(p ...*PermissionHistory) *EntitlementUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return euo.AddPermissionHistoryIDs(ids...)
}

// AddEntitlementAssignmentIDs adds the "entitlement_assignments" edge to the EntitlementAssignment entity by IDs.
func (euo *EntitlementUpdateOne) AddEntitlementAssignmentIDs(ids ...string) *EntitlementUpdateOne {
	euo.mutation.AddEntitlementAssignmentIDs(ids...)
	return euo
}

// AddEntitlementAssignments adds the "entitlement_assignments" edges to the EntitlementAssignment entity.
func (euo *EntitlementUpdateOne) AddEntitlementAssignments(e ...*EntitlementAssignment) *EntitlementUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.AddEntitlementAssignmentIDs(ids...)
}

// Mutation returns the EntitlementMutation object of the builder.
func (euo *EntitlementUpdateOne) Mutation() *EntitlementMutation {
	return euo.mutation
}

// ClearPermissionHistories clears all "permission_histories" edges to the PermissionHistory entity.
func (euo *EntitlementUpdateOne) ClearPermissionHistories() *EntitlementUpdateOne {
	euo.mutation.ClearPermissionHistories()
	return euo
}

// RemovePermissionHistoryIDs removes the "permission_histories" edge to PermissionHistory entities by IDs.
func (euo *EntitlementUpdateOne) RemovePermissionHistoryIDs(ids ...string) *EntitlementUpdateOne {
	euo.mutation.RemovePermissionHistoryIDs(ids...)
	return euo
}

// RemovePermissionHistories removes "permission_histories" edges to PermissionHistory entities.
func (euo *EntitlementUpdateOne) RemovePermissionHistories(p ...*PermissionHistory) *EntitlementUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return euo.RemovePermissionHistoryIDs(ids...)
}

// ClearEntitlementAssignments clears all "entitlement_assignments" edges to the EntitlementAssignment entity.
func (euo *EntitlementUpdateOne) ClearEntitlementAssignments() *EntitlementUpdateOne {
	euo.mutation.ClearEntitlementAssignments()
	return euo
}

// RemoveEntitlementAssignmentIDs removes the "entitlement_assignments" edge to EntitlementAssignment entities by IDs.
func (euo *EntitlementUpdateOne) RemoveEntitlementAssignmentIDs(ids ...string) *EntitlementUpdateOne {
	euo.mutation.RemoveEntitlementAssignmentIDs(ids...)
	return euo
}

// RemoveEntitlementAssignments removes "entitlement_assignments" edges to EntitlementAssignment entities.
func (euo *EntitlementUpdateOne) RemoveEntitlementAssignments(e ...*EntitlementAssignment) *EntitlementUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.RemoveEntitlementAssignmentIDs(ids...)
}

// Where appends a list predicates to the EntitlementUpdate builder.
func (euo *EntitlementUpdateOne) Where(ps ...predicate.Entitlement) *EntitlementUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EntitlementUpdateOne) Select(field string, fields ...string) *EntitlementUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Entitlement entity.
func (euo *EntitlementUpdateOne) Save(ctx context.Context) (*Entitlement, error) {
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EntitlementUpdateOne) SaveX(ctx context.Context) *Entitlement {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EntitlementUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EntitlementUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (euo *EntitlementUpdateOne) sqlSave(ctx context.Context) (_node *Entitlement, err error) {
	_spec := sqlgraph.NewUpdateSpec(entitlement.Table, entitlement.Columns, sqlgraph.NewFieldSpec(entitlement.FieldID, field.TypeString))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Entitlement.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, entitlement.FieldID)
		for _, f := range fields {
			if !entitlement.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != entitlement.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.Name(); ok {
		_spec.SetField(entitlement.FieldName, field.TypeString, value)
	}
	if euo.mutation.NameCleared() {
		_spec.ClearField(entitlement.FieldName, field.TypeString)
	}
	if value, ok := euo.mutation.Description(); ok {
		_spec.SetField(entitlement.FieldDescription, field.TypeString, value)
	}
	if euo.mutation.DescriptionCleared() {
		_spec.ClearField(entitlement.FieldDescription, field.TypeString)
	}
	if value, ok := euo.mutation.Etag(); ok {
		_spec.SetField(entitlement.FieldEtag, field.TypeString, value)
	}
	if euo.mutation.ScopeRefCleared() {
		_spec.ClearField(entitlement.FieldScopeRef, field.TypeString)
	}
	if euo.mutation.PermissionHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   entitlement.PermissionHistoriesTable,
			Columns: []string{entitlement.PermissionHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permissionhistory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedPermissionHistoriesIDs(); len(nodes) > 0 && !euo.mutation.PermissionHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   entitlement.PermissionHistoriesTable,
			Columns: []string{entitlement.PermissionHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permissionhistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.PermissionHistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   entitlement.PermissionHistoriesTable,
			Columns: []string{entitlement.PermissionHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permissionhistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.EntitlementAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   entitlement.EntitlementAssignmentsTable,
			Columns: []string{entitlement.EntitlementAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlementassignment.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedEntitlementAssignmentsIDs(); len(nodes) > 0 && !euo.mutation.EntitlementAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   entitlement.EntitlementAssignmentsTable,
			Columns: []string{entitlement.EntitlementAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlementassignment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EntitlementAssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   entitlement.EntitlementAssignmentsTable,
			Columns: []string{entitlement.EntitlementAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlementassignment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Entitlement{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entitlement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
