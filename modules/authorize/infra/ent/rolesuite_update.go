// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/grantrequest"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/permissionhistory"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/predicate"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/revokerequest"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/role"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/rolesuite"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/rolesuiteuser"
)

// RoleSuiteUpdate is the builder for updating RoleSuite entities.
type RoleSuiteUpdate struct {
	config
	hooks    []Hook
	mutation *RoleSuiteMutation
}

// Where appends a list predicates to the RoleSuiteUpdate builder.
func (rsu *RoleSuiteUpdate) Where(ps ...predicate.RoleSuite) *RoleSuiteUpdate {
	rsu.mutation.Where(ps...)
	return rsu
}

// SetName sets the "name" field.
func (rsu *RoleSuiteUpdate) SetName(s string) *RoleSuiteUpdate {
	rsu.mutation.SetName(s)
	return rsu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rsu *RoleSuiteUpdate) SetNillableName(s *string) *RoleSuiteUpdate {
	if s != nil {
		rsu.SetName(*s)
	}
	return rsu
}

// SetDescription sets the "description" field.
func (rsu *RoleSuiteUpdate) SetDescription(s string) *RoleSuiteUpdate {
	rsu.mutation.SetDescription(s)
	return rsu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (rsu *RoleSuiteUpdate) SetNillableDescription(s *string) *RoleSuiteUpdate {
	if s != nil {
		rsu.SetDescription(*s)
	}
	return rsu
}

// ClearDescription clears the value of the "description" field.
func (rsu *RoleSuiteUpdate) ClearDescription() *RoleSuiteUpdate {
	rsu.mutation.ClearDescription()
	return rsu
}

// SetEtag sets the "etag" field.
func (rsu *RoleSuiteUpdate) SetEtag(s string) *RoleSuiteUpdate {
	rsu.mutation.SetEtag(s)
	return rsu
}

// SetNillableEtag sets the "etag" field if the given value is not nil.
func (rsu *RoleSuiteUpdate) SetNillableEtag(s *string) *RoleSuiteUpdate {
	if s != nil {
		rsu.SetEtag(*s)
	}
	return rsu
}

// SetOwnerType sets the "owner_type" field.
func (rsu *RoleSuiteUpdate) SetOwnerType(rt rolesuite.OwnerType) *RoleSuiteUpdate {
	rsu.mutation.SetOwnerType(rt)
	return rsu
}

// SetNillableOwnerType sets the "owner_type" field if the given value is not nil.
func (rsu *RoleSuiteUpdate) SetNillableOwnerType(rt *rolesuite.OwnerType) *RoleSuiteUpdate {
	if rt != nil {
		rsu.SetOwnerType(*rt)
	}
	return rsu
}

// SetOwnerRef sets the "owner_ref" field.
func (rsu *RoleSuiteUpdate) SetOwnerRef(s string) *RoleSuiteUpdate {
	rsu.mutation.SetOwnerRef(s)
	return rsu
}

// SetNillableOwnerRef sets the "owner_ref" field if the given value is not nil.
func (rsu *RoleSuiteUpdate) SetNillableOwnerRef(s *string) *RoleSuiteUpdate {
	if s != nil {
		rsu.SetOwnerRef(*s)
	}
	return rsu
}

// SetIsRequestable sets the "is_requestable" field.
func (rsu *RoleSuiteUpdate) SetIsRequestable(b bool) *RoleSuiteUpdate {
	rsu.mutation.SetIsRequestable(b)
	return rsu
}

// SetNillableIsRequestable sets the "is_requestable" field if the given value is not nil.
func (rsu *RoleSuiteUpdate) SetNillableIsRequestable(b *bool) *RoleSuiteUpdate {
	if b != nil {
		rsu.SetIsRequestable(*b)
	}
	return rsu
}

// SetIsRequiredAttachment sets the "is_required_attachment" field.
func (rsu *RoleSuiteUpdate) SetIsRequiredAttachment(b bool) *RoleSuiteUpdate {
	rsu.mutation.SetIsRequiredAttachment(b)
	return rsu
}

// SetNillableIsRequiredAttachment sets the "is_required_attachment" field if the given value is not nil.
func (rsu *RoleSuiteUpdate) SetNillableIsRequiredAttachment(b *bool) *RoleSuiteUpdate {
	if b != nil {
		rsu.SetIsRequiredAttachment(*b)
	}
	return rsu
}

// SetIsRequiredComment sets the "is_required_comment" field.
func (rsu *RoleSuiteUpdate) SetIsRequiredComment(b bool) *RoleSuiteUpdate {
	rsu.mutation.SetIsRequiredComment(b)
	return rsu
}

// SetNillableIsRequiredComment sets the "is_required_comment" field if the given value is not nil.
func (rsu *RoleSuiteUpdate) SetNillableIsRequiredComment(b *bool) *RoleSuiteUpdate {
	if b != nil {
		rsu.SetIsRequiredComment(*b)
	}
	return rsu
}

// AddRolesuiteUserIDs adds the "rolesuite_users" edge to the RoleSuiteUser entity by IDs.
func (rsu *RoleSuiteUpdate) AddRolesuiteUserIDs(ids ...int) *RoleSuiteUpdate {
	rsu.mutation.AddRolesuiteUserIDs(ids...)
	return rsu
}

// AddRolesuiteUsers adds the "rolesuite_users" edges to the RoleSuiteUser entity.
func (rsu *RoleSuiteUpdate) AddRolesuiteUsers(r ...*RoleSuiteUser) *RoleSuiteUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rsu.AddRolesuiteUserIDs(ids...)
}

// AddPermissionHistoryIDs adds the "permission_histories" edge to the PermissionHistory entity by IDs.
func (rsu *RoleSuiteUpdate) AddPermissionHistoryIDs(ids ...string) *RoleSuiteUpdate {
	rsu.mutation.AddPermissionHistoryIDs(ids...)
	return rsu
}

// AddPermissionHistories adds the "permission_histories" edges to the PermissionHistory entity.
func (rsu *RoleSuiteUpdate) AddPermissionHistories(p ...*PermissionHistory) *RoleSuiteUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rsu.AddPermissionHistoryIDs(ids...)
}

// AddGrantRequestIDs adds the "grant_requests" edge to the GrantRequest entity by IDs.
func (rsu *RoleSuiteUpdate) AddGrantRequestIDs(ids ...string) *RoleSuiteUpdate {
	rsu.mutation.AddGrantRequestIDs(ids...)
	return rsu
}

// AddGrantRequests adds the "grant_requests" edges to the GrantRequest entity.
func (rsu *RoleSuiteUpdate) AddGrantRequests(g ...*GrantRequest) *RoleSuiteUpdate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return rsu.AddGrantRequestIDs(ids...)
}

// AddRevokeRequestIDs adds the "revoke_requests" edge to the RevokeRequest entity by IDs.
func (rsu *RoleSuiteUpdate) AddRevokeRequestIDs(ids ...string) *RoleSuiteUpdate {
	rsu.mutation.AddRevokeRequestIDs(ids...)
	return rsu
}

// AddRevokeRequests adds the "revoke_requests" edges to the RevokeRequest entity.
func (rsu *RoleSuiteUpdate) AddRevokeRequests(r ...*RevokeRequest) *RoleSuiteUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rsu.AddRevokeRequestIDs(ids...)
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (rsu *RoleSuiteUpdate) AddRoleIDs(ids ...string) *RoleSuiteUpdate {
	rsu.mutation.AddRoleIDs(ids...)
	return rsu
}

// AddRoles adds the "roles" edges to the Role entity.
func (rsu *RoleSuiteUpdate) AddRoles(r ...*Role) *RoleSuiteUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rsu.AddRoleIDs(ids...)
}

// Mutation returns the RoleSuiteMutation object of the builder.
func (rsu *RoleSuiteUpdate) Mutation() *RoleSuiteMutation {
	return rsu.mutation
}

// ClearRolesuiteUsers clears all "rolesuite_users" edges to the RoleSuiteUser entity.
func (rsu *RoleSuiteUpdate) ClearRolesuiteUsers() *RoleSuiteUpdate {
	rsu.mutation.ClearRolesuiteUsers()
	return rsu
}

// RemoveRolesuiteUserIDs removes the "rolesuite_users" edge to RoleSuiteUser entities by IDs.
func (rsu *RoleSuiteUpdate) RemoveRolesuiteUserIDs(ids ...int) *RoleSuiteUpdate {
	rsu.mutation.RemoveRolesuiteUserIDs(ids...)
	return rsu
}

// RemoveRolesuiteUsers removes "rolesuite_users" edges to RoleSuiteUser entities.
func (rsu *RoleSuiteUpdate) RemoveRolesuiteUsers(r ...*RoleSuiteUser) *RoleSuiteUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rsu.RemoveRolesuiteUserIDs(ids...)
}

// ClearPermissionHistories clears all "permission_histories" edges to the PermissionHistory entity.
func (rsu *RoleSuiteUpdate) ClearPermissionHistories() *RoleSuiteUpdate {
	rsu.mutation.ClearPermissionHistories()
	return rsu
}

// RemovePermissionHistoryIDs removes the "permission_histories" edge to PermissionHistory entities by IDs.
func (rsu *RoleSuiteUpdate) RemovePermissionHistoryIDs(ids ...string) *RoleSuiteUpdate {
	rsu.mutation.RemovePermissionHistoryIDs(ids...)
	return rsu
}

// RemovePermissionHistories removes "permission_histories" edges to PermissionHistory entities.
func (rsu *RoleSuiteUpdate) RemovePermissionHistories(p ...*PermissionHistory) *RoleSuiteUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rsu.RemovePermissionHistoryIDs(ids...)
}

// ClearGrantRequests clears all "grant_requests" edges to the GrantRequest entity.
func (rsu *RoleSuiteUpdate) ClearGrantRequests() *RoleSuiteUpdate {
	rsu.mutation.ClearGrantRequests()
	return rsu
}

// RemoveGrantRequestIDs removes the "grant_requests" edge to GrantRequest entities by IDs.
func (rsu *RoleSuiteUpdate) RemoveGrantRequestIDs(ids ...string) *RoleSuiteUpdate {
	rsu.mutation.RemoveGrantRequestIDs(ids...)
	return rsu
}

// RemoveGrantRequests removes "grant_requests" edges to GrantRequest entities.
func (rsu *RoleSuiteUpdate) RemoveGrantRequests(g ...*GrantRequest) *RoleSuiteUpdate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return rsu.RemoveGrantRequestIDs(ids...)
}

// ClearRevokeRequests clears all "revoke_requests" edges to the RevokeRequest entity.
func (rsu *RoleSuiteUpdate) ClearRevokeRequests() *RoleSuiteUpdate {
	rsu.mutation.ClearRevokeRequests()
	return rsu
}

// RemoveRevokeRequestIDs removes the "revoke_requests" edge to RevokeRequest entities by IDs.
func (rsu *RoleSuiteUpdate) RemoveRevokeRequestIDs(ids ...string) *RoleSuiteUpdate {
	rsu.mutation.RemoveRevokeRequestIDs(ids...)
	return rsu
}

// RemoveRevokeRequests removes "revoke_requests" edges to RevokeRequest entities.
func (rsu *RoleSuiteUpdate) RemoveRevokeRequests(r ...*RevokeRequest) *RoleSuiteUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rsu.RemoveRevokeRequestIDs(ids...)
}

// ClearRoles clears all "roles" edges to the Role entity.
func (rsu *RoleSuiteUpdate) ClearRoles() *RoleSuiteUpdate {
	rsu.mutation.ClearRoles()
	return rsu
}

// RemoveRoleIDs removes the "roles" edge to Role entities by IDs.
func (rsu *RoleSuiteUpdate) RemoveRoleIDs(ids ...string) *RoleSuiteUpdate {
	rsu.mutation.RemoveRoleIDs(ids...)
	return rsu
}

// RemoveRoles removes "roles" edges to Role entities.
func (rsu *RoleSuiteUpdate) RemoveRoles(r ...*Role) *RoleSuiteUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rsu.RemoveRoleIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rsu *RoleSuiteUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rsu.sqlSave, rsu.mutation, rsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rsu *RoleSuiteUpdate) SaveX(ctx context.Context) int {
	affected, err := rsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rsu *RoleSuiteUpdate) Exec(ctx context.Context) error {
	_, err := rsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rsu *RoleSuiteUpdate) ExecX(ctx context.Context) {
	if err := rsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rsu *RoleSuiteUpdate) check() error {
	if v, ok := rsu.mutation.OwnerType(); ok {
		if err := rolesuite.OwnerTypeValidator(v); err != nil {
			return &ValidationError{Name: "owner_type", err: fmt.Errorf(`ent: validator failed for field "RoleSuite.owner_type": %w`, err)}
		}
	}
	return nil
}

func (rsu *RoleSuiteUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rsu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(rolesuite.Table, rolesuite.Columns, sqlgraph.NewFieldSpec(rolesuite.FieldID, field.TypeString))
	if ps := rsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rsu.mutation.Name(); ok {
		_spec.SetField(rolesuite.FieldName, field.TypeString, value)
	}
	if value, ok := rsu.mutation.Description(); ok {
		_spec.SetField(rolesuite.FieldDescription, field.TypeString, value)
	}
	if rsu.mutation.DescriptionCleared() {
		_spec.ClearField(rolesuite.FieldDescription, field.TypeString)
	}
	if value, ok := rsu.mutation.Etag(); ok {
		_spec.SetField(rolesuite.FieldEtag, field.TypeString, value)
	}
	if value, ok := rsu.mutation.OwnerType(); ok {
		_spec.SetField(rolesuite.FieldOwnerType, field.TypeEnum, value)
	}
	if value, ok := rsu.mutation.OwnerRef(); ok {
		_spec.SetField(rolesuite.FieldOwnerRef, field.TypeString, value)
	}
	if value, ok := rsu.mutation.IsRequestable(); ok {
		_spec.SetField(rolesuite.FieldIsRequestable, field.TypeBool, value)
	}
	if value, ok := rsu.mutation.IsRequiredAttachment(); ok {
		_spec.SetField(rolesuite.FieldIsRequiredAttachment, field.TypeBool, value)
	}
	if value, ok := rsu.mutation.IsRequiredComment(); ok {
		_spec.SetField(rolesuite.FieldIsRequiredComment, field.TypeBool, value)
	}
	if rsu.mutation.OrgIDCleared() {
		_spec.ClearField(rolesuite.FieldOrgID, field.TypeString)
	}
	if rsu.mutation.RolesuiteUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   rolesuite.RolesuiteUsersTable,
			Columns: []string{rolesuite.RolesuiteUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolesuiteuser.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rsu.mutation.RemovedRolesuiteUsersIDs(); len(nodes) > 0 && !rsu.mutation.RolesuiteUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   rolesuite.RolesuiteUsersTable,
			Columns: []string{rolesuite.RolesuiteUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolesuiteuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rsu.mutation.RolesuiteUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   rolesuite.RolesuiteUsersTable,
			Columns: []string{rolesuite.RolesuiteUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolesuiteuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rsu.mutation.PermissionHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   rolesuite.PermissionHistoriesTable,
			Columns: []string{rolesuite.PermissionHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permissionhistory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rsu.mutation.RemovedPermissionHistoriesIDs(); len(nodes) > 0 && !rsu.mutation.PermissionHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   rolesuite.PermissionHistoriesTable,
			Columns: []string{rolesuite.PermissionHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permissionhistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rsu.mutation.PermissionHistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   rolesuite.PermissionHistoriesTable,
			Columns: []string{rolesuite.PermissionHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permissionhistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rsu.mutation.GrantRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   rolesuite.GrantRequestsTable,
			Columns: []string{rolesuite.GrantRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grantrequest.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rsu.mutation.RemovedGrantRequestsIDs(); len(nodes) > 0 && !rsu.mutation.GrantRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   rolesuite.GrantRequestsTable,
			Columns: []string{rolesuite.GrantRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grantrequest.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rsu.mutation.GrantRequestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   rolesuite.GrantRequestsTable,
			Columns: []string{rolesuite.GrantRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grantrequest.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rsu.mutation.RevokeRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   rolesuite.RevokeRequestsTable,
			Columns: []string{rolesuite.RevokeRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(revokerequest.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rsu.mutation.RemovedRevokeRequestsIDs(); len(nodes) > 0 && !rsu.mutation.RevokeRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   rolesuite.RevokeRequestsTable,
			Columns: []string{rolesuite.RevokeRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(revokerequest.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rsu.mutation.RevokeRequestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   rolesuite.RevokeRequestsTable,
			Columns: []string{rolesuite.RevokeRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(revokerequest.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rsu.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   rolesuite.RolesTable,
			Columns: rolesuite.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rsu.mutation.RemovedRolesIDs(); len(nodes) > 0 && !rsu.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   rolesuite.RolesTable,
			Columns: rolesuite.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rsu.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   rolesuite.RolesTable,
			Columns: rolesuite.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rolesuite.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rsu.mutation.done = true
	return n, nil
}

// RoleSuiteUpdateOne is the builder for updating a single RoleSuite entity.
type RoleSuiteUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RoleSuiteMutation
}

// SetName sets the "name" field.
func (rsuo *RoleSuiteUpdateOne) SetName(s string) *RoleSuiteUpdateOne {
	rsuo.mutation.SetName(s)
	return rsuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rsuo *RoleSuiteUpdateOne) SetNillableName(s *string) *RoleSuiteUpdateOne {
	if s != nil {
		rsuo.SetName(*s)
	}
	return rsuo
}

// SetDescription sets the "description" field.
func (rsuo *RoleSuiteUpdateOne) SetDescription(s string) *RoleSuiteUpdateOne {
	rsuo.mutation.SetDescription(s)
	return rsuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (rsuo *RoleSuiteUpdateOne) SetNillableDescription(s *string) *RoleSuiteUpdateOne {
	if s != nil {
		rsuo.SetDescription(*s)
	}
	return rsuo
}

// ClearDescription clears the value of the "description" field.
func (rsuo *RoleSuiteUpdateOne) ClearDescription() *RoleSuiteUpdateOne {
	rsuo.mutation.ClearDescription()
	return rsuo
}

// SetEtag sets the "etag" field.
func (rsuo *RoleSuiteUpdateOne) SetEtag(s string) *RoleSuiteUpdateOne {
	rsuo.mutation.SetEtag(s)
	return rsuo
}

// SetNillableEtag sets the "etag" field if the given value is not nil.
func (rsuo *RoleSuiteUpdateOne) SetNillableEtag(s *string) *RoleSuiteUpdateOne {
	if s != nil {
		rsuo.SetEtag(*s)
	}
	return rsuo
}

// SetOwnerType sets the "owner_type" field.
func (rsuo *RoleSuiteUpdateOne) SetOwnerType(rt rolesuite.OwnerType) *RoleSuiteUpdateOne {
	rsuo.mutation.SetOwnerType(rt)
	return rsuo
}

// SetNillableOwnerType sets the "owner_type" field if the given value is not nil.
func (rsuo *RoleSuiteUpdateOne) SetNillableOwnerType(rt *rolesuite.OwnerType) *RoleSuiteUpdateOne {
	if rt != nil {
		rsuo.SetOwnerType(*rt)
	}
	return rsuo
}

// SetOwnerRef sets the "owner_ref" field.
func (rsuo *RoleSuiteUpdateOne) SetOwnerRef(s string) *RoleSuiteUpdateOne {
	rsuo.mutation.SetOwnerRef(s)
	return rsuo
}

// SetNillableOwnerRef sets the "owner_ref" field if the given value is not nil.
func (rsuo *RoleSuiteUpdateOne) SetNillableOwnerRef(s *string) *RoleSuiteUpdateOne {
	if s != nil {
		rsuo.SetOwnerRef(*s)
	}
	return rsuo
}

// SetIsRequestable sets the "is_requestable" field.
func (rsuo *RoleSuiteUpdateOne) SetIsRequestable(b bool) *RoleSuiteUpdateOne {
	rsuo.mutation.SetIsRequestable(b)
	return rsuo
}

// SetNillableIsRequestable sets the "is_requestable" field if the given value is not nil.
func (rsuo *RoleSuiteUpdateOne) SetNillableIsRequestable(b *bool) *RoleSuiteUpdateOne {
	if b != nil {
		rsuo.SetIsRequestable(*b)
	}
	return rsuo
}

// SetIsRequiredAttachment sets the "is_required_attachment" field.
func (rsuo *RoleSuiteUpdateOne) SetIsRequiredAttachment(b bool) *RoleSuiteUpdateOne {
	rsuo.mutation.SetIsRequiredAttachment(b)
	return rsuo
}

// SetNillableIsRequiredAttachment sets the "is_required_attachment" field if the given value is not nil.
func (rsuo *RoleSuiteUpdateOne) SetNillableIsRequiredAttachment(b *bool) *RoleSuiteUpdateOne {
	if b != nil {
		rsuo.SetIsRequiredAttachment(*b)
	}
	return rsuo
}

// SetIsRequiredComment sets the "is_required_comment" field.
func (rsuo *RoleSuiteUpdateOne) SetIsRequiredComment(b bool) *RoleSuiteUpdateOne {
	rsuo.mutation.SetIsRequiredComment(b)
	return rsuo
}

// SetNillableIsRequiredComment sets the "is_required_comment" field if the given value is not nil.
func (rsuo *RoleSuiteUpdateOne) SetNillableIsRequiredComment(b *bool) *RoleSuiteUpdateOne {
	if b != nil {
		rsuo.SetIsRequiredComment(*b)
	}
	return rsuo
}

// AddRolesuiteUserIDs adds the "rolesuite_users" edge to the RoleSuiteUser entity by IDs.
func (rsuo *RoleSuiteUpdateOne) AddRolesuiteUserIDs(ids ...int) *RoleSuiteUpdateOne {
	rsuo.mutation.AddRolesuiteUserIDs(ids...)
	return rsuo
}

// AddRolesuiteUsers adds the "rolesuite_users" edges to the RoleSuiteUser entity.
func (rsuo *RoleSuiteUpdateOne) AddRolesuiteUsers(r ...*RoleSuiteUser) *RoleSuiteUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rsuo.AddRolesuiteUserIDs(ids...)
}

// AddPermissionHistoryIDs adds the "permission_histories" edge to the PermissionHistory entity by IDs.
func (rsuo *RoleSuiteUpdateOne) AddPermissionHistoryIDs(ids ...string) *RoleSuiteUpdateOne {
	rsuo.mutation.AddPermissionHistoryIDs(ids...)
	return rsuo
}

// AddPermissionHistories adds the "permission_histories" edges to the PermissionHistory entity.
func (rsuo *RoleSuiteUpdateOne) AddPermissionHistories(p ...*PermissionHistory) *RoleSuiteUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rsuo.AddPermissionHistoryIDs(ids...)
}

// AddGrantRequestIDs adds the "grant_requests" edge to the GrantRequest entity by IDs.
func (rsuo *RoleSuiteUpdateOne) AddGrantRequestIDs(ids ...string) *RoleSuiteUpdateOne {
	rsuo.mutation.AddGrantRequestIDs(ids...)
	return rsuo
}

// AddGrantRequests adds the "grant_requests" edges to the GrantRequest entity.
func (rsuo *RoleSuiteUpdateOne) AddGrantRequests(g ...*GrantRequest) *RoleSuiteUpdateOne {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return rsuo.AddGrantRequestIDs(ids...)
}

// AddRevokeRequestIDs adds the "revoke_requests" edge to the RevokeRequest entity by IDs.
func (rsuo *RoleSuiteUpdateOne) AddRevokeRequestIDs(ids ...string) *RoleSuiteUpdateOne {
	rsuo.mutation.AddRevokeRequestIDs(ids...)
	return rsuo
}

// AddRevokeRequests adds the "revoke_requests" edges to the RevokeRequest entity.
func (rsuo *RoleSuiteUpdateOne) AddRevokeRequests(r ...*RevokeRequest) *RoleSuiteUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rsuo.AddRevokeRequestIDs(ids...)
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (rsuo *RoleSuiteUpdateOne) AddRoleIDs(ids ...string) *RoleSuiteUpdateOne {
	rsuo.mutation.AddRoleIDs(ids...)
	return rsuo
}

// AddRoles adds the "roles" edges to the Role entity.
func (rsuo *RoleSuiteUpdateOne) AddRoles(r ...*Role) *RoleSuiteUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rsuo.AddRoleIDs(ids...)
}

// Mutation returns the RoleSuiteMutation object of the builder.
func (rsuo *RoleSuiteUpdateOne) Mutation() *RoleSuiteMutation {
	return rsuo.mutation
}

// ClearRolesuiteUsers clears all "rolesuite_users" edges to the RoleSuiteUser entity.
func (rsuo *RoleSuiteUpdateOne) ClearRolesuiteUsers() *RoleSuiteUpdateOne {
	rsuo.mutation.ClearRolesuiteUsers()
	return rsuo
}

// RemoveRolesuiteUserIDs removes the "rolesuite_users" edge to RoleSuiteUser entities by IDs.
func (rsuo *RoleSuiteUpdateOne) RemoveRolesuiteUserIDs(ids ...int) *RoleSuiteUpdateOne {
	rsuo.mutation.RemoveRolesuiteUserIDs(ids...)
	return rsuo
}

// RemoveRolesuiteUsers removes "rolesuite_users" edges to RoleSuiteUser entities.
func (rsuo *RoleSuiteUpdateOne) RemoveRolesuiteUsers(r ...*RoleSuiteUser) *RoleSuiteUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rsuo.RemoveRolesuiteUserIDs(ids...)
}

// ClearPermissionHistories clears all "permission_histories" edges to the PermissionHistory entity.
func (rsuo *RoleSuiteUpdateOne) ClearPermissionHistories() *RoleSuiteUpdateOne {
	rsuo.mutation.ClearPermissionHistories()
	return rsuo
}

// RemovePermissionHistoryIDs removes the "permission_histories" edge to PermissionHistory entities by IDs.
func (rsuo *RoleSuiteUpdateOne) RemovePermissionHistoryIDs(ids ...string) *RoleSuiteUpdateOne {
	rsuo.mutation.RemovePermissionHistoryIDs(ids...)
	return rsuo
}

// RemovePermissionHistories removes "permission_histories" edges to PermissionHistory entities.
func (rsuo *RoleSuiteUpdateOne) RemovePermissionHistories(p ...*PermissionHistory) *RoleSuiteUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rsuo.RemovePermissionHistoryIDs(ids...)
}

// ClearGrantRequests clears all "grant_requests" edges to the GrantRequest entity.
func (rsuo *RoleSuiteUpdateOne) ClearGrantRequests() *RoleSuiteUpdateOne {
	rsuo.mutation.ClearGrantRequests()
	return rsuo
}

// RemoveGrantRequestIDs removes the "grant_requests" edge to GrantRequest entities by IDs.
func (rsuo *RoleSuiteUpdateOne) RemoveGrantRequestIDs(ids ...string) *RoleSuiteUpdateOne {
	rsuo.mutation.RemoveGrantRequestIDs(ids...)
	return rsuo
}

// RemoveGrantRequests removes "grant_requests" edges to GrantRequest entities.
func (rsuo *RoleSuiteUpdateOne) RemoveGrantRequests(g ...*GrantRequest) *RoleSuiteUpdateOne {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return rsuo.RemoveGrantRequestIDs(ids...)
}

// ClearRevokeRequests clears all "revoke_requests" edges to the RevokeRequest entity.
func (rsuo *RoleSuiteUpdateOne) ClearRevokeRequests() *RoleSuiteUpdateOne {
	rsuo.mutation.ClearRevokeRequests()
	return rsuo
}

// RemoveRevokeRequestIDs removes the "revoke_requests" edge to RevokeRequest entities by IDs.
func (rsuo *RoleSuiteUpdateOne) RemoveRevokeRequestIDs(ids ...string) *RoleSuiteUpdateOne {
	rsuo.mutation.RemoveRevokeRequestIDs(ids...)
	return rsuo
}

// RemoveRevokeRequests removes "revoke_requests" edges to RevokeRequest entities.
func (rsuo *RoleSuiteUpdateOne) RemoveRevokeRequests(r ...*RevokeRequest) *RoleSuiteUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rsuo.RemoveRevokeRequestIDs(ids...)
}

// ClearRoles clears all "roles" edges to the Role entity.
func (rsuo *RoleSuiteUpdateOne) ClearRoles() *RoleSuiteUpdateOne {
	rsuo.mutation.ClearRoles()
	return rsuo
}

// RemoveRoleIDs removes the "roles" edge to Role entities by IDs.
func (rsuo *RoleSuiteUpdateOne) RemoveRoleIDs(ids ...string) *RoleSuiteUpdateOne {
	rsuo.mutation.RemoveRoleIDs(ids...)
	return rsuo
}

// RemoveRoles removes "roles" edges to Role entities.
func (rsuo *RoleSuiteUpdateOne) RemoveRoles(r ...*Role) *RoleSuiteUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rsuo.RemoveRoleIDs(ids...)
}

// Where appends a list predicates to the RoleSuiteUpdate builder.
func (rsuo *RoleSuiteUpdateOne) Where(ps ...predicate.RoleSuite) *RoleSuiteUpdateOne {
	rsuo.mutation.Where(ps...)
	return rsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rsuo *RoleSuiteUpdateOne) Select(field string, fields ...string) *RoleSuiteUpdateOne {
	rsuo.fields = append([]string{field}, fields...)
	return rsuo
}

// Save executes the query and returns the updated RoleSuite entity.
func (rsuo *RoleSuiteUpdateOne) Save(ctx context.Context) (*RoleSuite, error) {
	return withHooks(ctx, rsuo.sqlSave, rsuo.mutation, rsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rsuo *RoleSuiteUpdateOne) SaveX(ctx context.Context) *RoleSuite {
	node, err := rsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rsuo *RoleSuiteUpdateOne) Exec(ctx context.Context) error {
	_, err := rsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rsuo *RoleSuiteUpdateOne) ExecX(ctx context.Context) {
	if err := rsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rsuo *RoleSuiteUpdateOne) check() error {
	if v, ok := rsuo.mutation.OwnerType(); ok {
		if err := rolesuite.OwnerTypeValidator(v); err != nil {
			return &ValidationError{Name: "owner_type", err: fmt.Errorf(`ent: validator failed for field "RoleSuite.owner_type": %w`, err)}
		}
	}
	return nil
}

func (rsuo *RoleSuiteUpdateOne) sqlSave(ctx context.Context) (_node *RoleSuite, err error) {
	if err := rsuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(rolesuite.Table, rolesuite.Columns, sqlgraph.NewFieldSpec(rolesuite.FieldID, field.TypeString))
	id, ok := rsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RoleSuite.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rolesuite.FieldID)
		for _, f := range fields {
			if !rolesuite.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != rolesuite.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rsuo.mutation.Name(); ok {
		_spec.SetField(rolesuite.FieldName, field.TypeString, value)
	}
	if value, ok := rsuo.mutation.Description(); ok {
		_spec.SetField(rolesuite.FieldDescription, field.TypeString, value)
	}
	if rsuo.mutation.DescriptionCleared() {
		_spec.ClearField(rolesuite.FieldDescription, field.TypeString)
	}
	if value, ok := rsuo.mutation.Etag(); ok {
		_spec.SetField(rolesuite.FieldEtag, field.TypeString, value)
	}
	if value, ok := rsuo.mutation.OwnerType(); ok {
		_spec.SetField(rolesuite.FieldOwnerType, field.TypeEnum, value)
	}
	if value, ok := rsuo.mutation.OwnerRef(); ok {
		_spec.SetField(rolesuite.FieldOwnerRef, field.TypeString, value)
	}
	if value, ok := rsuo.mutation.IsRequestable(); ok {
		_spec.SetField(rolesuite.FieldIsRequestable, field.TypeBool, value)
	}
	if value, ok := rsuo.mutation.IsRequiredAttachment(); ok {
		_spec.SetField(rolesuite.FieldIsRequiredAttachment, field.TypeBool, value)
	}
	if value, ok := rsuo.mutation.IsRequiredComment(); ok {
		_spec.SetField(rolesuite.FieldIsRequiredComment, field.TypeBool, value)
	}
	if rsuo.mutation.OrgIDCleared() {
		_spec.ClearField(rolesuite.FieldOrgID, field.TypeString)
	}
	if rsuo.mutation.RolesuiteUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   rolesuite.RolesuiteUsersTable,
			Columns: []string{rolesuite.RolesuiteUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolesuiteuser.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rsuo.mutation.RemovedRolesuiteUsersIDs(); len(nodes) > 0 && !rsuo.mutation.RolesuiteUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   rolesuite.RolesuiteUsersTable,
			Columns: []string{rolesuite.RolesuiteUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolesuiteuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rsuo.mutation.RolesuiteUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   rolesuite.RolesuiteUsersTable,
			Columns: []string{rolesuite.RolesuiteUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolesuiteuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rsuo.mutation.PermissionHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   rolesuite.PermissionHistoriesTable,
			Columns: []string{rolesuite.PermissionHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permissionhistory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rsuo.mutation.RemovedPermissionHistoriesIDs(); len(nodes) > 0 && !rsuo.mutation.PermissionHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   rolesuite.PermissionHistoriesTable,
			Columns: []string{rolesuite.PermissionHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permissionhistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rsuo.mutation.PermissionHistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   rolesuite.PermissionHistoriesTable,
			Columns: []string{rolesuite.PermissionHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permissionhistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rsuo.mutation.GrantRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   rolesuite.GrantRequestsTable,
			Columns: []string{rolesuite.GrantRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grantrequest.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rsuo.mutation.RemovedGrantRequestsIDs(); len(nodes) > 0 && !rsuo.mutation.GrantRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   rolesuite.GrantRequestsTable,
			Columns: []string{rolesuite.GrantRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grantrequest.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rsuo.mutation.GrantRequestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   rolesuite.GrantRequestsTable,
			Columns: []string{rolesuite.GrantRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grantrequest.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rsuo.mutation.RevokeRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   rolesuite.RevokeRequestsTable,
			Columns: []string{rolesuite.RevokeRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(revokerequest.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rsuo.mutation.RemovedRevokeRequestsIDs(); len(nodes) > 0 && !rsuo.mutation.RevokeRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   rolesuite.RevokeRequestsTable,
			Columns: []string{rolesuite.RevokeRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(revokerequest.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rsuo.mutation.RevokeRequestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   rolesuite.RevokeRequestsTable,
			Columns: []string{rolesuite.RevokeRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(revokerequest.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rsuo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   rolesuite.RolesTable,
			Columns: rolesuite.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rsuo.mutation.RemovedRolesIDs(); len(nodes) > 0 && !rsuo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   rolesuite.RolesTable,
			Columns: rolesuite.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rsuo.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   rolesuite.RolesTable,
			Columns: rolesuite.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &RoleSuite{config: rsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rolesuite.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rsuo.mutation.done = true
	return _node, nil
}
