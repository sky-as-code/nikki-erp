// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/grantrequest"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/grantresponse"
)

// GrantResponse is the model entity for the GrantResponse schema.
type GrantResponse struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// RequestID holds the value of the "request_id" field.
	RequestID string `json:"request_id,omitempty"`
	// IsApproved holds the value of the "is_approved" field.
	IsApproved bool `json:"is_approved,omitempty"`
	// Reason holds the value of the "reason" field.
	Reason *string `json:"reason,omitempty"`
	// ResponderID holds the value of the "responder_id" field.
	ResponderID string `json:"responder_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Etag holds the value of the "etag" field.
	Etag string `json:"etag,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GrantResponseQuery when eager-loading is set.
	Edges        GrantResponseEdges `json:"edges"`
	selectValues sql.SelectValues
}

// GrantResponseEdges holds the relations/edges for other nodes in the graph.
type GrantResponseEdges struct {
	// GrantRequest holds the value of the grant_request edge.
	GrantRequest *GrantRequest `json:"grant_request,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// GrantRequestOrErr returns the GrantRequest value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GrantResponseEdges) GrantRequestOrErr() (*GrantRequest, error) {
	if e.GrantRequest != nil {
		return e.GrantRequest, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: grantrequest.Label}
	}
	return nil, &NotLoadedError{edge: "grant_request"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GrantResponse) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case grantresponse.FieldIsApproved:
			values[i] = new(sql.NullBool)
		case grantresponse.FieldID, grantresponse.FieldRequestID, grantresponse.FieldReason, grantresponse.FieldResponderID, grantresponse.FieldEtag:
			values[i] = new(sql.NullString)
		case grantresponse.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GrantResponse fields.
func (gr *GrantResponse) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case grantresponse.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				gr.ID = value.String
			}
		case grantresponse.FieldRequestID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field request_id", values[i])
			} else if value.Valid {
				gr.RequestID = value.String
			}
		case grantresponse.FieldIsApproved:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_approved", values[i])
			} else if value.Valid {
				gr.IsApproved = value.Bool
			}
		case grantresponse.FieldReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reason", values[i])
			} else if value.Valid {
				gr.Reason = new(string)
				*gr.Reason = value.String
			}
		case grantresponse.FieldResponderID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field responder_id", values[i])
			} else if value.Valid {
				gr.ResponderID = value.String
			}
		case grantresponse.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				gr.CreatedAt = value.Time
			}
		case grantresponse.FieldEtag:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field etag", values[i])
			} else if value.Valid {
				gr.Etag = value.String
			}
		default:
			gr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the GrantResponse.
// This includes values selected through modifiers, order, etc.
func (gr *GrantResponse) Value(name string) (ent.Value, error) {
	return gr.selectValues.Get(name)
}

// QueryGrantRequest queries the "grant_request" edge of the GrantResponse entity.
func (gr *GrantResponse) QueryGrantRequest() *GrantRequestQuery {
	return NewGrantResponseClient(gr.config).QueryGrantRequest(gr)
}

// Update returns a builder for updating this GrantResponse.
// Note that you need to call GrantResponse.Unwrap() before calling this method if this GrantResponse
// was returned from a transaction, and the transaction was committed or rolled back.
func (gr *GrantResponse) Update() *GrantResponseUpdateOne {
	return NewGrantResponseClient(gr.config).UpdateOne(gr)
}

// Unwrap unwraps the GrantResponse entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gr *GrantResponse) Unwrap() *GrantResponse {
	_tx, ok := gr.config.driver.(*txDriver)
	if !ok {
		panic("ent: GrantResponse is not a transactional entity")
	}
	gr.config.driver = _tx.drv
	return gr
}

// String implements the fmt.Stringer.
func (gr *GrantResponse) String() string {
	var builder strings.Builder
	builder.WriteString("GrantResponse(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gr.ID))
	builder.WriteString("request_id=")
	builder.WriteString(gr.RequestID)
	builder.WriteString(", ")
	builder.WriteString("is_approved=")
	builder.WriteString(fmt.Sprintf("%v", gr.IsApproved))
	builder.WriteString(", ")
	if v := gr.Reason; v != nil {
		builder.WriteString("reason=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("responder_id=")
	builder.WriteString(gr.ResponderID)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(gr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("etag=")
	builder.WriteString(gr.Etag)
	builder.WriteByte(')')
	return builder.String()
}

// GrantResponses is a parsable slice of GrantResponse.
type GrantResponses []*GrantResponse
