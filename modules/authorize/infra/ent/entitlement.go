// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/action"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/entitlement"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/resource"
)

// Entitlement is the model entity for the Entitlement schema.
type Entitlement struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// ActionID holds the value of the "action_id" field.
	ActionID *string `json:"action_id,omitempty"`
	// Format: '{actionName}:{scopeRef}:{resourceName}' E.g: 'create:01JWNZ5KW6WC643VXGKV1D0J64.user', '*:01JWNZ5KW6WC643VXGKV1D0J64.*'
	ActionExpr string `json:"action_expr,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// Name holds the value of the "name" field.
	Name *string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description *string `json:"description,omitempty"`
	// Etag holds the value of the "etag" field.
	Etag string `json:"etag,omitempty"`
	// ResourceID holds the value of the "resource_id" field.
	ResourceID *string `json:"resource_id,omitempty"`
	// ScopeRef holds the value of the "scope_ref" field.
	ScopeRef *string `json:"scope_ref,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EntitlementQuery when eager-loading is set.
	Edges        EntitlementEdges `json:"edges"`
	selectValues sql.SelectValues
}

// EntitlementEdges holds the relations/edges for other nodes in the graph.
type EntitlementEdges struct {
	// PermissionHistories holds the value of the permission_histories edge.
	PermissionHistories []*PermissionHistory `json:"permission_histories,omitempty"`
	// EntitlementAssignments holds the value of the entitlement_assignments edge.
	EntitlementAssignments []*EntitlementAssignment `json:"entitlement_assignments,omitempty"`
	// Action holds the value of the action edge.
	Action *Action `json:"action,omitempty"`
	// Resource holds the value of the resource edge.
	Resource *Resource `json:"resource,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// PermissionHistoriesOrErr returns the PermissionHistories value or an error if the edge
// was not loaded in eager-loading.
func (e EntitlementEdges) PermissionHistoriesOrErr() ([]*PermissionHistory, error) {
	if e.loadedTypes[0] {
		return e.PermissionHistories, nil
	}
	return nil, &NotLoadedError{edge: "permission_histories"}
}

// EntitlementAssignmentsOrErr returns the EntitlementAssignments value or an error if the edge
// was not loaded in eager-loading.
func (e EntitlementEdges) EntitlementAssignmentsOrErr() ([]*EntitlementAssignment, error) {
	if e.loadedTypes[1] {
		return e.EntitlementAssignments, nil
	}
	return nil, &NotLoadedError{edge: "entitlement_assignments"}
}

// ActionOrErr returns the Action value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EntitlementEdges) ActionOrErr() (*Action, error) {
	if e.Action != nil {
		return e.Action, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: action.Label}
	}
	return nil, &NotLoadedError{edge: "action"}
}

// ResourceOrErr returns the Resource value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EntitlementEdges) ResourceOrErr() (*Resource, error) {
	if e.Resource != nil {
		return e.Resource, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: resource.Label}
	}
	return nil, &NotLoadedError{edge: "resource"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Entitlement) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case entitlement.FieldID, entitlement.FieldActionID, entitlement.FieldActionExpr, entitlement.FieldCreatedBy, entitlement.FieldName, entitlement.FieldDescription, entitlement.FieldEtag, entitlement.FieldResourceID, entitlement.FieldScopeRef:
			values[i] = new(sql.NullString)
		case entitlement.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Entitlement fields.
func (e *Entitlement) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case entitlement.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				e.ID = value.String
			}
		case entitlement.FieldActionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field action_id", values[i])
			} else if value.Valid {
				e.ActionID = new(string)
				*e.ActionID = value.String
			}
		case entitlement.FieldActionExpr:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field action_expr", values[i])
			} else if value.Valid {
				e.ActionExpr = value.String
			}
		case entitlement.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				e.CreatedAt = value.Time
			}
		case entitlement.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				e.CreatedBy = value.String
			}
		case entitlement.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				e.Name = new(string)
				*e.Name = value.String
			}
		case entitlement.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				e.Description = new(string)
				*e.Description = value.String
			}
		case entitlement.FieldEtag:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field etag", values[i])
			} else if value.Valid {
				e.Etag = value.String
			}
		case entitlement.FieldResourceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource_id", values[i])
			} else if value.Valid {
				e.ResourceID = new(string)
				*e.ResourceID = value.String
			}
		case entitlement.FieldScopeRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field scope_ref", values[i])
			} else if value.Valid {
				e.ScopeRef = new(string)
				*e.ScopeRef = value.String
			}
		default:
			e.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Entitlement.
// This includes values selected through modifiers, order, etc.
func (e *Entitlement) Value(name string) (ent.Value, error) {
	return e.selectValues.Get(name)
}

// QueryPermissionHistories queries the "permission_histories" edge of the Entitlement entity.
func (e *Entitlement) QueryPermissionHistories() *PermissionHistoryQuery {
	return NewEntitlementClient(e.config).QueryPermissionHistories(e)
}

// QueryEntitlementAssignments queries the "entitlement_assignments" edge of the Entitlement entity.
func (e *Entitlement) QueryEntitlementAssignments() *EntitlementAssignmentQuery {
	return NewEntitlementClient(e.config).QueryEntitlementAssignments(e)
}

// QueryAction queries the "action" edge of the Entitlement entity.
func (e *Entitlement) QueryAction() *ActionQuery {
	return NewEntitlementClient(e.config).QueryAction(e)
}

// QueryResource queries the "resource" edge of the Entitlement entity.
func (e *Entitlement) QueryResource() *ResourceQuery {
	return NewEntitlementClient(e.config).QueryResource(e)
}

// Update returns a builder for updating this Entitlement.
// Note that you need to call Entitlement.Unwrap() before calling this method if this Entitlement
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Entitlement) Update() *EntitlementUpdateOne {
	return NewEntitlementClient(e.config).UpdateOne(e)
}

// Unwrap unwraps the Entitlement entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Entitlement) Unwrap() *Entitlement {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Entitlement is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Entitlement) String() string {
	var builder strings.Builder
	builder.WriteString("Entitlement(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	if v := e.ActionID; v != nil {
		builder.WriteString("action_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("action_expr=")
	builder.WriteString(e.ActionExpr)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(e.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(e.CreatedBy)
	builder.WriteString(", ")
	if v := e.Name; v != nil {
		builder.WriteString("name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := e.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("etag=")
	builder.WriteString(e.Etag)
	builder.WriteString(", ")
	if v := e.ResourceID; v != nil {
		builder.WriteString("resource_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := e.ScopeRef; v != nil {
		builder.WriteString("scope_ref=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// Entitlements is a parsable slice of Entitlement.
type Entitlements []*Entitlement
