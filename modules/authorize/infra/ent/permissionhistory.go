// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/entitlement"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/entitlementassignment"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/grantrequest"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/permissionhistory"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/revokerequest"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/role"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/rolesuite"
)

// PermissionHistory is the model entity for the PermissionHistory schema.
type PermissionHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Must be set NULL before the approver account is deleted
	ApproverID *string `json:"approver_id,omitempty"`
	// Approver email must be copied here before the approver account is deleted
	ApproverEmail string `json:"approver_email,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Effect holds the value of the "effect" field.
	Effect permissionhistory.Effect `json:"effect,omitempty"`
	// Permission is granted, revoked because entitlement, role or role suite is added, removed or deleted
	Reason permissionhistory.Reason `json:"reason,omitempty"`
	// Must be set NULL before the entitlement is deleted
	EntitlementID *string `json:"entitlement_id,omitempty"`
	// Entitlement expression must be copied here before the entitlement is deleted
	EntitlementExpr string `json:"entitlement_expr,omitempty"`
	// Must be set NULL before the entitlement assignment is deleted
	EntitlementAssignmentID *string `json:"entitlement_assignment_id,omitempty"`
	// Resolved expression must be copied here before the entitlement assignment is deleted
	ResolvedExpr string `json:"resolved_expr,omitempty"`
	// Must be set NULL before the receiver account is deleted
	ReceiverID *string `json:"receiver_id,omitempty"`
	// Receiver email must be copied here before the receiver account is deleted
	ReceiverEmail string `json:"receiver_email,omitempty"`
	// GrantRequestID holds the value of the "grant_request_id" field.
	GrantRequestID *string `json:"grant_request_id,omitempty"`
	// RevokeRequestID holds the value of the "revoke_request_id" field.
	RevokeRequestID *string `json:"revoke_request_id,omitempty"`
	// Must be set NULL before the role is deleted
	RoleID *string `json:"role_id,omitempty"`
	// Role name must be copied here before the role is deleted
	RoleName string `json:"role_name,omitempty"`
	// Must be set NULL before the role suite is deleted
	RoleSuiteID *string `json:"role_suite_id,omitempty"`
	// Role suite name must be copied here before the role suite is deleted
	RoleSuiteName string `json:"role_suite_name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PermissionHistoryQuery when eager-loading is set.
	Edges        PermissionHistoryEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PermissionHistoryEdges holds the relations/edges for other nodes in the graph.
type PermissionHistoryEdges struct {
	// Entitlement holds the value of the entitlement edge.
	Entitlement *Entitlement `json:"entitlement,omitempty"`
	// EntitlementAssignment holds the value of the entitlement_assignment edge.
	EntitlementAssignment *EntitlementAssignment `json:"entitlement_assignment,omitempty"`
	// Role holds the value of the role edge.
	Role *Role `json:"role,omitempty"`
	// RoleSuite holds the value of the role_suite edge.
	RoleSuite *RoleSuite `json:"role_suite,omitempty"`
	// GrantRequest holds the value of the grant_request edge.
	GrantRequest *GrantRequest `json:"grant_request,omitempty"`
	// RevokeRequest holds the value of the revoke_request edge.
	RevokeRequest *RevokeRequest `json:"revoke_request,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// EntitlementOrErr returns the Entitlement value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PermissionHistoryEdges) EntitlementOrErr() (*Entitlement, error) {
	if e.Entitlement != nil {
		return e.Entitlement, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: entitlement.Label}
	}
	return nil, &NotLoadedError{edge: "entitlement"}
}

// EntitlementAssignmentOrErr returns the EntitlementAssignment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PermissionHistoryEdges) EntitlementAssignmentOrErr() (*EntitlementAssignment, error) {
	if e.EntitlementAssignment != nil {
		return e.EntitlementAssignment, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: entitlementassignment.Label}
	}
	return nil, &NotLoadedError{edge: "entitlement_assignment"}
}

// RoleOrErr returns the Role value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PermissionHistoryEdges) RoleOrErr() (*Role, error) {
	if e.Role != nil {
		return e.Role, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: role.Label}
	}
	return nil, &NotLoadedError{edge: "role"}
}

// RoleSuiteOrErr returns the RoleSuite value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PermissionHistoryEdges) RoleSuiteOrErr() (*RoleSuite, error) {
	if e.RoleSuite != nil {
		return e.RoleSuite, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: rolesuite.Label}
	}
	return nil, &NotLoadedError{edge: "role_suite"}
}

// GrantRequestOrErr returns the GrantRequest value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PermissionHistoryEdges) GrantRequestOrErr() (*GrantRequest, error) {
	if e.GrantRequest != nil {
		return e.GrantRequest, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: grantrequest.Label}
	}
	return nil, &NotLoadedError{edge: "grant_request"}
}

// RevokeRequestOrErr returns the RevokeRequest value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PermissionHistoryEdges) RevokeRequestOrErr() (*RevokeRequest, error) {
	if e.RevokeRequest != nil {
		return e.RevokeRequest, nil
	} else if e.loadedTypes[5] {
		return nil, &NotFoundError{label: revokerequest.Label}
	}
	return nil, &NotLoadedError{edge: "revoke_request"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PermissionHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case permissionhistory.FieldID, permissionhistory.FieldApproverID, permissionhistory.FieldApproverEmail, permissionhistory.FieldEffect, permissionhistory.FieldReason, permissionhistory.FieldEntitlementID, permissionhistory.FieldEntitlementExpr, permissionhistory.FieldEntitlementAssignmentID, permissionhistory.FieldResolvedExpr, permissionhistory.FieldReceiverID, permissionhistory.FieldReceiverEmail, permissionhistory.FieldGrantRequestID, permissionhistory.FieldRevokeRequestID, permissionhistory.FieldRoleID, permissionhistory.FieldRoleName, permissionhistory.FieldRoleSuiteID, permissionhistory.FieldRoleSuiteName:
			values[i] = new(sql.NullString)
		case permissionhistory.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PermissionHistory fields.
func (ph *PermissionHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case permissionhistory.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ph.ID = value.String
			}
		case permissionhistory.FieldApproverID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field approver_id", values[i])
			} else if value.Valid {
				ph.ApproverID = new(string)
				*ph.ApproverID = value.String
			}
		case permissionhistory.FieldApproverEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field approver_email", values[i])
			} else if value.Valid {
				ph.ApproverEmail = value.String
			}
		case permissionhistory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ph.CreatedAt = value.Time
			}
		case permissionhistory.FieldEffect:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field effect", values[i])
			} else if value.Valid {
				ph.Effect = permissionhistory.Effect(value.String)
			}
		case permissionhistory.FieldReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reason", values[i])
			} else if value.Valid {
				ph.Reason = permissionhistory.Reason(value.String)
			}
		case permissionhistory.FieldEntitlementID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field entitlement_id", values[i])
			} else if value.Valid {
				ph.EntitlementID = new(string)
				*ph.EntitlementID = value.String
			}
		case permissionhistory.FieldEntitlementExpr:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field entitlement_expr", values[i])
			} else if value.Valid {
				ph.EntitlementExpr = value.String
			}
		case permissionhistory.FieldEntitlementAssignmentID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field entitlement_assignment_id", values[i])
			} else if value.Valid {
				ph.EntitlementAssignmentID = new(string)
				*ph.EntitlementAssignmentID = value.String
			}
		case permissionhistory.FieldResolvedExpr:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resolved_expr", values[i])
			} else if value.Valid {
				ph.ResolvedExpr = value.String
			}
		case permissionhistory.FieldReceiverID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field receiver_id", values[i])
			} else if value.Valid {
				ph.ReceiverID = new(string)
				*ph.ReceiverID = value.String
			}
		case permissionhistory.FieldReceiverEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field receiver_email", values[i])
			} else if value.Valid {
				ph.ReceiverEmail = value.String
			}
		case permissionhistory.FieldGrantRequestID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field grant_request_id", values[i])
			} else if value.Valid {
				ph.GrantRequestID = new(string)
				*ph.GrantRequestID = value.String
			}
		case permissionhistory.FieldRevokeRequestID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field revoke_request_id", values[i])
			} else if value.Valid {
				ph.RevokeRequestID = new(string)
				*ph.RevokeRequestID = value.String
			}
		case permissionhistory.FieldRoleID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role_id", values[i])
			} else if value.Valid {
				ph.RoleID = new(string)
				*ph.RoleID = value.String
			}
		case permissionhistory.FieldRoleName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role_name", values[i])
			} else if value.Valid {
				ph.RoleName = value.String
			}
		case permissionhistory.FieldRoleSuiteID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role_suite_id", values[i])
			} else if value.Valid {
				ph.RoleSuiteID = new(string)
				*ph.RoleSuiteID = value.String
			}
		case permissionhistory.FieldRoleSuiteName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role_suite_name", values[i])
			} else if value.Valid {
				ph.RoleSuiteName = value.String
			}
		default:
			ph.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PermissionHistory.
// This includes values selected through modifiers, order, etc.
func (ph *PermissionHistory) Value(name string) (ent.Value, error) {
	return ph.selectValues.Get(name)
}

// QueryEntitlement queries the "entitlement" edge of the PermissionHistory entity.
func (ph *PermissionHistory) QueryEntitlement() *EntitlementQuery {
	return NewPermissionHistoryClient(ph.config).QueryEntitlement(ph)
}

// QueryEntitlementAssignment queries the "entitlement_assignment" edge of the PermissionHistory entity.
func (ph *PermissionHistory) QueryEntitlementAssignment() *EntitlementAssignmentQuery {
	return NewPermissionHistoryClient(ph.config).QueryEntitlementAssignment(ph)
}

// QueryRole queries the "role" edge of the PermissionHistory entity.
func (ph *PermissionHistory) QueryRole() *RoleQuery {
	return NewPermissionHistoryClient(ph.config).QueryRole(ph)
}

// QueryRoleSuite queries the "role_suite" edge of the PermissionHistory entity.
func (ph *PermissionHistory) QueryRoleSuite() *RoleSuiteQuery {
	return NewPermissionHistoryClient(ph.config).QueryRoleSuite(ph)
}

// QueryGrantRequest queries the "grant_request" edge of the PermissionHistory entity.
func (ph *PermissionHistory) QueryGrantRequest() *GrantRequestQuery {
	return NewPermissionHistoryClient(ph.config).QueryGrantRequest(ph)
}

// QueryRevokeRequest queries the "revoke_request" edge of the PermissionHistory entity.
func (ph *PermissionHistory) QueryRevokeRequest() *RevokeRequestQuery {
	return NewPermissionHistoryClient(ph.config).QueryRevokeRequest(ph)
}

// Update returns a builder for updating this PermissionHistory.
// Note that you need to call PermissionHistory.Unwrap() before calling this method if this PermissionHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (ph *PermissionHistory) Update() *PermissionHistoryUpdateOne {
	return NewPermissionHistoryClient(ph.config).UpdateOne(ph)
}

// Unwrap unwraps the PermissionHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ph *PermissionHistory) Unwrap() *PermissionHistory {
	_tx, ok := ph.config.driver.(*txDriver)
	if !ok {
		panic("ent: PermissionHistory is not a transactional entity")
	}
	ph.config.driver = _tx.drv
	return ph
}

// String implements the fmt.Stringer.
func (ph *PermissionHistory) String() string {
	var builder strings.Builder
	builder.WriteString("PermissionHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ph.ID))
	if v := ph.ApproverID; v != nil {
		builder.WriteString("approver_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("approver_email=")
	builder.WriteString(ph.ApproverEmail)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ph.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("effect=")
	builder.WriteString(fmt.Sprintf("%v", ph.Effect))
	builder.WriteString(", ")
	builder.WriteString("reason=")
	builder.WriteString(fmt.Sprintf("%v", ph.Reason))
	builder.WriteString(", ")
	if v := ph.EntitlementID; v != nil {
		builder.WriteString("entitlement_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("entitlement_expr=")
	builder.WriteString(ph.EntitlementExpr)
	builder.WriteString(", ")
	if v := ph.EntitlementAssignmentID; v != nil {
		builder.WriteString("entitlement_assignment_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("resolved_expr=")
	builder.WriteString(ph.ResolvedExpr)
	builder.WriteString(", ")
	if v := ph.ReceiverID; v != nil {
		builder.WriteString("receiver_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("receiver_email=")
	builder.WriteString(ph.ReceiverEmail)
	builder.WriteString(", ")
	if v := ph.GrantRequestID; v != nil {
		builder.WriteString("grant_request_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := ph.RevokeRequestID; v != nil {
		builder.WriteString("revoke_request_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := ph.RoleID; v != nil {
		builder.WriteString("role_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("role_name=")
	builder.WriteString(ph.RoleName)
	builder.WriteString(", ")
	if v := ph.RoleSuiteID; v != nil {
		builder.WriteString("role_suite_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("role_suite_name=")
	builder.WriteString(ph.RoleSuiteName)
	builder.WriteByte(')')
	return builder.String()
}

// PermissionHistories is a parsable slice of PermissionHistory.
type PermissionHistories []*PermissionHistory
