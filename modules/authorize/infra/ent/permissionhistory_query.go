// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/entitlement"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/entitlementassignment"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/grantrequest"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/permissionhistory"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/predicate"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/revokerequest"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/role"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/rolesuite"
)

// PermissionHistoryQuery is the builder for querying PermissionHistory entities.
type PermissionHistoryQuery struct {
	config
	ctx                       *QueryContext
	order                     []permissionhistory.OrderOption
	inters                    []Interceptor
	predicates                []predicate.PermissionHistory
	withEntitlement           *EntitlementQuery
	withEntitlementAssignment *EntitlementAssignmentQuery
	withRole                  *RoleQuery
	withRoleSuite             *RoleSuiteQuery
	withGrantRequest          *GrantRequestQuery
	withRevokeRequest         *RevokeRequestQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PermissionHistoryQuery builder.
func (phq *PermissionHistoryQuery) Where(ps ...predicate.PermissionHistory) *PermissionHistoryQuery {
	phq.predicates = append(phq.predicates, ps...)
	return phq
}

// Limit the number of records to be returned by this query.
func (phq *PermissionHistoryQuery) Limit(limit int) *PermissionHistoryQuery {
	phq.ctx.Limit = &limit
	return phq
}

// Offset to start from.
func (phq *PermissionHistoryQuery) Offset(offset int) *PermissionHistoryQuery {
	phq.ctx.Offset = &offset
	return phq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (phq *PermissionHistoryQuery) Unique(unique bool) *PermissionHistoryQuery {
	phq.ctx.Unique = &unique
	return phq
}

// Order specifies how the records should be ordered.
func (phq *PermissionHistoryQuery) Order(o ...permissionhistory.OrderOption) *PermissionHistoryQuery {
	phq.order = append(phq.order, o...)
	return phq
}

// QueryEntitlement chains the current query on the "entitlement" edge.
func (phq *PermissionHistoryQuery) QueryEntitlement() *EntitlementQuery {
	query := (&EntitlementClient{config: phq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := phq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := phq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(permissionhistory.Table, permissionhistory.FieldID, selector),
			sqlgraph.To(entitlement.Table, entitlement.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, permissionhistory.EntitlementTable, permissionhistory.EntitlementColumn),
		)
		fromU = sqlgraph.SetNeighbors(phq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEntitlementAssignment chains the current query on the "entitlement_assignment" edge.
func (phq *PermissionHistoryQuery) QueryEntitlementAssignment() *EntitlementAssignmentQuery {
	query := (&EntitlementAssignmentClient{config: phq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := phq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := phq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(permissionhistory.Table, permissionhistory.FieldID, selector),
			sqlgraph.To(entitlementassignment.Table, entitlementassignment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, permissionhistory.EntitlementAssignmentTable, permissionhistory.EntitlementAssignmentColumn),
		)
		fromU = sqlgraph.SetNeighbors(phq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRole chains the current query on the "role" edge.
func (phq *PermissionHistoryQuery) QueryRole() *RoleQuery {
	query := (&RoleClient{config: phq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := phq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := phq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(permissionhistory.Table, permissionhistory.FieldID, selector),
			sqlgraph.To(role.Table, role.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, permissionhistory.RoleTable, permissionhistory.RoleColumn),
		)
		fromU = sqlgraph.SetNeighbors(phq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRoleSuite chains the current query on the "role_suite" edge.
func (phq *PermissionHistoryQuery) QueryRoleSuite() *RoleSuiteQuery {
	query := (&RoleSuiteClient{config: phq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := phq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := phq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(permissionhistory.Table, permissionhistory.FieldID, selector),
			sqlgraph.To(rolesuite.Table, rolesuite.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, permissionhistory.RoleSuiteTable, permissionhistory.RoleSuiteColumn),
		)
		fromU = sqlgraph.SetNeighbors(phq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryGrantRequest chains the current query on the "grant_request" edge.
func (phq *PermissionHistoryQuery) QueryGrantRequest() *GrantRequestQuery {
	query := (&GrantRequestClient{config: phq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := phq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := phq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(permissionhistory.Table, permissionhistory.FieldID, selector),
			sqlgraph.To(grantrequest.Table, grantrequest.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, permissionhistory.GrantRequestTable, permissionhistory.GrantRequestColumn),
		)
		fromU = sqlgraph.SetNeighbors(phq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRevokeRequest chains the current query on the "revoke_request" edge.
func (phq *PermissionHistoryQuery) QueryRevokeRequest() *RevokeRequestQuery {
	query := (&RevokeRequestClient{config: phq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := phq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := phq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(permissionhistory.Table, permissionhistory.FieldID, selector),
			sqlgraph.To(revokerequest.Table, revokerequest.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, permissionhistory.RevokeRequestTable, permissionhistory.RevokeRequestColumn),
		)
		fromU = sqlgraph.SetNeighbors(phq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first PermissionHistory entity from the query.
// Returns a *NotFoundError when no PermissionHistory was found.
func (phq *PermissionHistoryQuery) First(ctx context.Context) (*PermissionHistory, error) {
	nodes, err := phq.Limit(1).All(setContextOp(ctx, phq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{permissionhistory.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (phq *PermissionHistoryQuery) FirstX(ctx context.Context) *PermissionHistory {
	node, err := phq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first PermissionHistory ID from the query.
// Returns a *NotFoundError when no PermissionHistory ID was found.
func (phq *PermissionHistoryQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = phq.Limit(1).IDs(setContextOp(ctx, phq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{permissionhistory.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (phq *PermissionHistoryQuery) FirstIDX(ctx context.Context) string {
	id, err := phq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single PermissionHistory entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one PermissionHistory entity is found.
// Returns a *NotFoundError when no PermissionHistory entities are found.
func (phq *PermissionHistoryQuery) Only(ctx context.Context) (*PermissionHistory, error) {
	nodes, err := phq.Limit(2).All(setContextOp(ctx, phq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{permissionhistory.Label}
	default:
		return nil, &NotSingularError{permissionhistory.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (phq *PermissionHistoryQuery) OnlyX(ctx context.Context) *PermissionHistory {
	node, err := phq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only PermissionHistory ID in the query.
// Returns a *NotSingularError when more than one PermissionHistory ID is found.
// Returns a *NotFoundError when no entities are found.
func (phq *PermissionHistoryQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = phq.Limit(2).IDs(setContextOp(ctx, phq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{permissionhistory.Label}
	default:
		err = &NotSingularError{permissionhistory.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (phq *PermissionHistoryQuery) OnlyIDX(ctx context.Context) string {
	id, err := phq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PermissionHistories.
func (phq *PermissionHistoryQuery) All(ctx context.Context) ([]*PermissionHistory, error) {
	ctx = setContextOp(ctx, phq.ctx, ent.OpQueryAll)
	if err := phq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*PermissionHistory, *PermissionHistoryQuery]()
	return withInterceptors[[]*PermissionHistory](ctx, phq, qr, phq.inters)
}

// AllX is like All, but panics if an error occurs.
func (phq *PermissionHistoryQuery) AllX(ctx context.Context) []*PermissionHistory {
	nodes, err := phq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of PermissionHistory IDs.
func (phq *PermissionHistoryQuery) IDs(ctx context.Context) (ids []string, err error) {
	if phq.ctx.Unique == nil && phq.path != nil {
		phq.Unique(true)
	}
	ctx = setContextOp(ctx, phq.ctx, ent.OpQueryIDs)
	if err = phq.Select(permissionhistory.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (phq *PermissionHistoryQuery) IDsX(ctx context.Context) []string {
	ids, err := phq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (phq *PermissionHistoryQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, phq.ctx, ent.OpQueryCount)
	if err := phq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, phq, querierCount[*PermissionHistoryQuery](), phq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (phq *PermissionHistoryQuery) CountX(ctx context.Context) int {
	count, err := phq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (phq *PermissionHistoryQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, phq.ctx, ent.OpQueryExist)
	switch _, err := phq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (phq *PermissionHistoryQuery) ExistX(ctx context.Context) bool {
	exist, err := phq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PermissionHistoryQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (phq *PermissionHistoryQuery) Clone() *PermissionHistoryQuery {
	if phq == nil {
		return nil
	}
	return &PermissionHistoryQuery{
		config:                    phq.config,
		ctx:                       phq.ctx.Clone(),
		order:                     append([]permissionhistory.OrderOption{}, phq.order...),
		inters:                    append([]Interceptor{}, phq.inters...),
		predicates:                append([]predicate.PermissionHistory{}, phq.predicates...),
		withEntitlement:           phq.withEntitlement.Clone(),
		withEntitlementAssignment: phq.withEntitlementAssignment.Clone(),
		withRole:                  phq.withRole.Clone(),
		withRoleSuite:             phq.withRoleSuite.Clone(),
		withGrantRequest:          phq.withGrantRequest.Clone(),
		withRevokeRequest:         phq.withRevokeRequest.Clone(),
		// clone intermediate query.
		sql:  phq.sql.Clone(),
		path: phq.path,
	}
}

// WithEntitlement tells the query-builder to eager-load the nodes that are connected to
// the "entitlement" edge. The optional arguments are used to configure the query builder of the edge.
func (phq *PermissionHistoryQuery) WithEntitlement(opts ...func(*EntitlementQuery)) *PermissionHistoryQuery {
	query := (&EntitlementClient{config: phq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	phq.withEntitlement = query
	return phq
}

// WithEntitlementAssignment tells the query-builder to eager-load the nodes that are connected to
// the "entitlement_assignment" edge. The optional arguments are used to configure the query builder of the edge.
func (phq *PermissionHistoryQuery) WithEntitlementAssignment(opts ...func(*EntitlementAssignmentQuery)) *PermissionHistoryQuery {
	query := (&EntitlementAssignmentClient{config: phq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	phq.withEntitlementAssignment = query
	return phq
}

// WithRole tells the query-builder to eager-load the nodes that are connected to
// the "role" edge. The optional arguments are used to configure the query builder of the edge.
func (phq *PermissionHistoryQuery) WithRole(opts ...func(*RoleQuery)) *PermissionHistoryQuery {
	query := (&RoleClient{config: phq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	phq.withRole = query
	return phq
}

// WithRoleSuite tells the query-builder to eager-load the nodes that are connected to
// the "role_suite" edge. The optional arguments are used to configure the query builder of the edge.
func (phq *PermissionHistoryQuery) WithRoleSuite(opts ...func(*RoleSuiteQuery)) *PermissionHistoryQuery {
	query := (&RoleSuiteClient{config: phq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	phq.withRoleSuite = query
	return phq
}

// WithGrantRequest tells the query-builder to eager-load the nodes that are connected to
// the "grant_request" edge. The optional arguments are used to configure the query builder of the edge.
func (phq *PermissionHistoryQuery) WithGrantRequest(opts ...func(*GrantRequestQuery)) *PermissionHistoryQuery {
	query := (&GrantRequestClient{config: phq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	phq.withGrantRequest = query
	return phq
}

// WithRevokeRequest tells the query-builder to eager-load the nodes that are connected to
// the "revoke_request" edge. The optional arguments are used to configure the query builder of the edge.
func (phq *PermissionHistoryQuery) WithRevokeRequest(opts ...func(*RevokeRequestQuery)) *PermissionHistoryQuery {
	query := (&RevokeRequestClient{config: phq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	phq.withRevokeRequest = query
	return phq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ApproverID string `json:"approver_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.PermissionHistory.Query().
//		GroupBy(permissionhistory.FieldApproverID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (phq *PermissionHistoryQuery) GroupBy(field string, fields ...string) *PermissionHistoryGroupBy {
	phq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &PermissionHistoryGroupBy{build: phq}
	grbuild.flds = &phq.ctx.Fields
	grbuild.label = permissionhistory.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ApproverID string `json:"approver_id,omitempty"`
//	}
//
//	client.PermissionHistory.Query().
//		Select(permissionhistory.FieldApproverID).
//		Scan(ctx, &v)
func (phq *PermissionHistoryQuery) Select(fields ...string) *PermissionHistorySelect {
	phq.ctx.Fields = append(phq.ctx.Fields, fields...)
	sbuild := &PermissionHistorySelect{PermissionHistoryQuery: phq}
	sbuild.label = permissionhistory.Label
	sbuild.flds, sbuild.scan = &phq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a PermissionHistorySelect configured with the given aggregations.
func (phq *PermissionHistoryQuery) Aggregate(fns ...AggregateFunc) *PermissionHistorySelect {
	return phq.Select().Aggregate(fns...)
}

func (phq *PermissionHistoryQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range phq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, phq); err != nil {
				return err
			}
		}
	}
	for _, f := range phq.ctx.Fields {
		if !permissionhistory.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if phq.path != nil {
		prev, err := phq.path(ctx)
		if err != nil {
			return err
		}
		phq.sql = prev
	}
	return nil
}

func (phq *PermissionHistoryQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*PermissionHistory, error) {
	var (
		nodes       = []*PermissionHistory{}
		_spec       = phq.querySpec()
		loadedTypes = [6]bool{
			phq.withEntitlement != nil,
			phq.withEntitlementAssignment != nil,
			phq.withRole != nil,
			phq.withRoleSuite != nil,
			phq.withGrantRequest != nil,
			phq.withRevokeRequest != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*PermissionHistory).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &PermissionHistory{config: phq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, phq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := phq.withEntitlement; query != nil {
		if err := phq.loadEntitlement(ctx, query, nodes, nil,
			func(n *PermissionHistory, e *Entitlement) { n.Edges.Entitlement = e }); err != nil {
			return nil, err
		}
	}
	if query := phq.withEntitlementAssignment; query != nil {
		if err := phq.loadEntitlementAssignment(ctx, query, nodes, nil,
			func(n *PermissionHistory, e *EntitlementAssignment) { n.Edges.EntitlementAssignment = e }); err != nil {
			return nil, err
		}
	}
	if query := phq.withRole; query != nil {
		if err := phq.loadRole(ctx, query, nodes, nil,
			func(n *PermissionHistory, e *Role) { n.Edges.Role = e }); err != nil {
			return nil, err
		}
	}
	if query := phq.withRoleSuite; query != nil {
		if err := phq.loadRoleSuite(ctx, query, nodes, nil,
			func(n *PermissionHistory, e *RoleSuite) { n.Edges.RoleSuite = e }); err != nil {
			return nil, err
		}
	}
	if query := phq.withGrantRequest; query != nil {
		if err := phq.loadGrantRequest(ctx, query, nodes, nil,
			func(n *PermissionHistory, e *GrantRequest) { n.Edges.GrantRequest = e }); err != nil {
			return nil, err
		}
	}
	if query := phq.withRevokeRequest; query != nil {
		if err := phq.loadRevokeRequest(ctx, query, nodes, nil,
			func(n *PermissionHistory, e *RevokeRequest) { n.Edges.RevokeRequest = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (phq *PermissionHistoryQuery) loadEntitlement(ctx context.Context, query *EntitlementQuery, nodes []*PermissionHistory, init func(*PermissionHistory), assign func(*PermissionHistory, *Entitlement)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*PermissionHistory)
	for i := range nodes {
		if nodes[i].EntitlementID == nil {
			continue
		}
		fk := *nodes[i].EntitlementID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(entitlement.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "entitlement_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (phq *PermissionHistoryQuery) loadEntitlementAssignment(ctx context.Context, query *EntitlementAssignmentQuery, nodes []*PermissionHistory, init func(*PermissionHistory), assign func(*PermissionHistory, *EntitlementAssignment)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*PermissionHistory)
	for i := range nodes {
		if nodes[i].EntitlementAssignmentID == nil {
			continue
		}
		fk := *nodes[i].EntitlementAssignmentID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(entitlementassignment.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "entitlement_assignment_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (phq *PermissionHistoryQuery) loadRole(ctx context.Context, query *RoleQuery, nodes []*PermissionHistory, init func(*PermissionHistory), assign func(*PermissionHistory, *Role)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*PermissionHistory)
	for i := range nodes {
		if nodes[i].RoleID == nil {
			continue
		}
		fk := *nodes[i].RoleID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(role.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "role_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (phq *PermissionHistoryQuery) loadRoleSuite(ctx context.Context, query *RoleSuiteQuery, nodes []*PermissionHistory, init func(*PermissionHistory), assign func(*PermissionHistory, *RoleSuite)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*PermissionHistory)
	for i := range nodes {
		if nodes[i].RoleSuiteID == nil {
			continue
		}
		fk := *nodes[i].RoleSuiteID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(rolesuite.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "role_suite_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (phq *PermissionHistoryQuery) loadGrantRequest(ctx context.Context, query *GrantRequestQuery, nodes []*PermissionHistory, init func(*PermissionHistory), assign func(*PermissionHistory, *GrantRequest)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*PermissionHistory)
	for i := range nodes {
		if nodes[i].GrantRequestID == nil {
			continue
		}
		fk := *nodes[i].GrantRequestID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(grantrequest.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "grant_request_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (phq *PermissionHistoryQuery) loadRevokeRequest(ctx context.Context, query *RevokeRequestQuery, nodes []*PermissionHistory, init func(*PermissionHistory), assign func(*PermissionHistory, *RevokeRequest)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*PermissionHistory)
	for i := range nodes {
		if nodes[i].RevokeRequestID == nil {
			continue
		}
		fk := *nodes[i].RevokeRequestID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(revokerequest.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "revoke_request_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (phq *PermissionHistoryQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := phq.querySpec()
	_spec.Node.Columns = phq.ctx.Fields
	if len(phq.ctx.Fields) > 0 {
		_spec.Unique = phq.ctx.Unique != nil && *phq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, phq.driver, _spec)
}

func (phq *PermissionHistoryQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(permissionhistory.Table, permissionhistory.Columns, sqlgraph.NewFieldSpec(permissionhistory.FieldID, field.TypeString))
	_spec.From = phq.sql
	if unique := phq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if phq.path != nil {
		_spec.Unique = true
	}
	if fields := phq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, permissionhistory.FieldID)
		for i := range fields {
			if fields[i] != permissionhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if phq.withEntitlement != nil {
			_spec.Node.AddColumnOnce(permissionhistory.FieldEntitlementID)
		}
		if phq.withEntitlementAssignment != nil {
			_spec.Node.AddColumnOnce(permissionhistory.FieldEntitlementAssignmentID)
		}
		if phq.withRole != nil {
			_spec.Node.AddColumnOnce(permissionhistory.FieldRoleID)
		}
		if phq.withRoleSuite != nil {
			_spec.Node.AddColumnOnce(permissionhistory.FieldRoleSuiteID)
		}
		if phq.withGrantRequest != nil {
			_spec.Node.AddColumnOnce(permissionhistory.FieldGrantRequestID)
		}
		if phq.withRevokeRequest != nil {
			_spec.Node.AddColumnOnce(permissionhistory.FieldRevokeRequestID)
		}
	}
	if ps := phq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := phq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := phq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := phq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (phq *PermissionHistoryQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(phq.driver.Dialect())
	t1 := builder.Table(permissionhistory.Table)
	columns := phq.ctx.Fields
	if len(columns) == 0 {
		columns = permissionhistory.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if phq.sql != nil {
		selector = phq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if phq.ctx.Unique != nil && *phq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range phq.predicates {
		p(selector)
	}
	for _, p := range phq.order {
		p(selector)
	}
	if offset := phq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := phq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// PermissionHistoryGroupBy is the group-by builder for PermissionHistory entities.
type PermissionHistoryGroupBy struct {
	selector
	build *PermissionHistoryQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (phgb *PermissionHistoryGroupBy) Aggregate(fns ...AggregateFunc) *PermissionHistoryGroupBy {
	phgb.fns = append(phgb.fns, fns...)
	return phgb
}

// Scan applies the selector query and scans the result into the given value.
func (phgb *PermissionHistoryGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, phgb.build.ctx, ent.OpQueryGroupBy)
	if err := phgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PermissionHistoryQuery, *PermissionHistoryGroupBy](ctx, phgb.build, phgb, phgb.build.inters, v)
}

func (phgb *PermissionHistoryGroupBy) sqlScan(ctx context.Context, root *PermissionHistoryQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(phgb.fns))
	for _, fn := range phgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*phgb.flds)+len(phgb.fns))
		for _, f := range *phgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*phgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := phgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// PermissionHistorySelect is the builder for selecting fields of PermissionHistory entities.
type PermissionHistorySelect struct {
	*PermissionHistoryQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (phs *PermissionHistorySelect) Aggregate(fns ...AggregateFunc) *PermissionHistorySelect {
	phs.fns = append(phs.fns, fns...)
	return phs
}

// Scan applies the selector query and scans the result into the given value.
func (phs *PermissionHistorySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, phs.ctx, ent.OpQuerySelect)
	if err := phs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PermissionHistoryQuery, *PermissionHistorySelect](ctx, phs.PermissionHistoryQuery, phs, phs.inters, v)
}

func (phs *PermissionHistorySelect) sqlScan(ctx context.Context, root *PermissionHistoryQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(phs.fns))
	for _, fn := range phs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*phs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := phs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
