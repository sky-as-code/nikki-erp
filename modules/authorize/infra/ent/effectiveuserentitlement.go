// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/effectiveuserentitlement"
)

// EffectiveUserEntitlement is the model entity for the EffectiveUserEntitlement schema.
type EffectiveUserEntitlement struct {
	config `json:"-"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// ActionExpr holds the value of the "action_expr" field.
	ActionExpr string `json:"action_expr,omitempty"`
	// ResourceID holds the value of the "resource_id" field.
	ResourceID *string `json:"resource_id,omitempty"`
	// ResourceName holds the value of the "resource_name" field.
	ResourceName *string `json:"resource_name,omitempty"`
	// ScopeRef holds the value of the "scope_ref" field.
	ScopeRef *string `json:"scope_ref,omitempty"`
	// ScopeType holds the value of the "scope_type" field.
	ScopeType *string `json:"scope_type,omitempty"`
	// ActionID holds the value of the "action_id" field.
	ActionID *string `json:"action_id,omitempty"`
	// ActionName holds the value of the "action_name" field.
	ActionName *string `json:"action_name,omitempty"`
	// Source holds the value of the "source" field.
	Source       string `json:"source,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EffectiveUserEntitlement) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case effectiveuserentitlement.FieldUserID, effectiveuserentitlement.FieldActionExpr, effectiveuserentitlement.FieldResourceID, effectiveuserentitlement.FieldResourceName, effectiveuserentitlement.FieldScopeRef, effectiveuserentitlement.FieldScopeType, effectiveuserentitlement.FieldActionID, effectiveuserentitlement.FieldActionName, effectiveuserentitlement.FieldSource:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EffectiveUserEntitlement fields.
func (eue *EffectiveUserEntitlement) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case effectiveuserentitlement.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				eue.UserID = value.String
			}
		case effectiveuserentitlement.FieldActionExpr:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field action_expr", values[i])
			} else if value.Valid {
				eue.ActionExpr = value.String
			}
		case effectiveuserentitlement.FieldResourceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource_id", values[i])
			} else if value.Valid {
				eue.ResourceID = new(string)
				*eue.ResourceID = value.String
			}
		case effectiveuserentitlement.FieldResourceName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource_name", values[i])
			} else if value.Valid {
				eue.ResourceName = new(string)
				*eue.ResourceName = value.String
			}
		case effectiveuserentitlement.FieldScopeRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field scope_ref", values[i])
			} else if value.Valid {
				eue.ScopeRef = new(string)
				*eue.ScopeRef = value.String
			}
		case effectiveuserentitlement.FieldScopeType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field scope_type", values[i])
			} else if value.Valid {
				eue.ScopeType = new(string)
				*eue.ScopeType = value.String
			}
		case effectiveuserentitlement.FieldActionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field action_id", values[i])
			} else if value.Valid {
				eue.ActionID = new(string)
				*eue.ActionID = value.String
			}
		case effectiveuserentitlement.FieldActionName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field action_name", values[i])
			} else if value.Valid {
				eue.ActionName = new(string)
				*eue.ActionName = value.String
			}
		case effectiveuserentitlement.FieldSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source", values[i])
			} else if value.Valid {
				eue.Source = value.String
			}
		default:
			eue.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EffectiveUserEntitlement.
// This includes values selected through modifiers, order, etc.
func (eue *EffectiveUserEntitlement) Value(name string) (ent.Value, error) {
	return eue.selectValues.Get(name)
}

// Unwrap unwraps the EffectiveUserEntitlement entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (eue *EffectiveUserEntitlement) Unwrap() *EffectiveUserEntitlement {
	_tx, ok := eue.config.driver.(*txDriver)
	if !ok {
		panic("ent: EffectiveUserEntitlement is not a transactional entity")
	}
	eue.config.driver = _tx.drv
	return eue
}

// String implements the fmt.Stringer.
func (eue *EffectiveUserEntitlement) String() string {
	var builder strings.Builder
	builder.WriteString("EffectiveUserEntitlement(")
	builder.WriteString("user_id=")
	builder.WriteString(eue.UserID)
	builder.WriteString(", ")
	builder.WriteString("action_expr=")
	builder.WriteString(eue.ActionExpr)
	builder.WriteString(", ")
	if v := eue.ResourceID; v != nil {
		builder.WriteString("resource_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := eue.ResourceName; v != nil {
		builder.WriteString("resource_name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := eue.ScopeRef; v != nil {
		builder.WriteString("scope_ref=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := eue.ScopeType; v != nil {
		builder.WriteString("scope_type=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := eue.ActionID; v != nil {
		builder.WriteString("action_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := eue.ActionName; v != nil {
		builder.WriteString("action_name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("source=")
	builder.WriteString(eue.Source)
	builder.WriteByte(')')
	return builder.String()
}

// EffectiveUserEntitlements is a parsable slice of EffectiveUserEntitlement.
type EffectiveUserEntitlements []*EffectiveUserEntitlement
