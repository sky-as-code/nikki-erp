// Code generated by ent, DO NOT EDIT.

package grantresponse

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the grantresponse type in the database.
	Label = "grant_response"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRequestID holds the string denoting the request_id field in the database.
	FieldRequestID = "request_id"
	// FieldIsApproved holds the string denoting the is_approved field in the database.
	FieldIsApproved = "is_approved"
	// FieldReason holds the string denoting the reason field in the database.
	FieldReason = "reason"
	// FieldResponderID holds the string denoting the responder_id field in the database.
	FieldResponderID = "responder_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldEtag holds the string denoting the etag field in the database.
	FieldEtag = "etag"
	// EdgeGrantRequest holds the string denoting the grant_request edge name in mutations.
	EdgeGrantRequest = "grant_request"
	// Table holds the table name of the grantresponse in the database.
	Table = "authz_grant_responses"
	// GrantRequestTable is the table that holds the grant_request relation/edge.
	GrantRequestTable = "authz_grant_responses"
	// GrantRequestInverseTable is the table name for the GrantRequest entity.
	// It exists in this package in order to avoid circular dependency with the "grantrequest" package.
	GrantRequestInverseTable = "authz_grant_requests"
	// GrantRequestColumn is the table column denoting the grant_request relation/edge.
	GrantRequestColumn = "request_id"
)

// Columns holds all SQL columns for grantresponse fields.
var Columns = []string{
	FieldID,
	FieldRequestID,
	FieldIsApproved,
	FieldReason,
	FieldResponderID,
	FieldCreatedAt,
	FieldEtag,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the GrantResponse queries.
type OrderOption = func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByRequestID orders the results by the request_id field.
func ByRequestID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequestID, opts...).ToFunc()
}

// ByIsApproved orders the results by the is_approved field.
func ByIsApproved(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsApproved, opts...).ToFunc()
}

// ByReason orders the results by the reason field.
func ByReason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReason, opts...).ToFunc()
}

// ByResponderID orders the results by the responder_id field.
func ByResponderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResponderID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByEtag orders the results by the etag field.
func ByEtag(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEtag, opts...).ToFunc()
}

// ByGrantRequestField orders the results by grant_request field.
func ByGrantRequestField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGrantRequestStep(), sql.OrderByField(field, opts...))
	}
}

// Added by NikkieERP scripts/ent_templates/dialect/sql/meta.tmpl
func NewGrantRequestStepNikki() *sqlgraph.Step {
	return newGrantRequestStep()
}

func newGrantRequestStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GrantRequestInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, GrantRequestTable, GrantRequestColumn),
	)
}
