// Code generated by ent, DO NOT EDIT.

package grantresponse

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldContainsFold(FieldID, id))
}

// RequestID applies equality check predicate on the "request_id" field. It's identical to RequestIDEQ.
func RequestID(v string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldEQ(FieldRequestID, v))
}

// IsApproved applies equality check predicate on the "is_approved" field. It's identical to IsApprovedEQ.
func IsApproved(v bool) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldEQ(FieldIsApproved, v))
}

// Reason applies equality check predicate on the "reason" field. It's identical to ReasonEQ.
func Reason(v string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldEQ(FieldReason, v))
}

// ResponderID applies equality check predicate on the "responder_id" field. It's identical to ResponderIDEQ.
func ResponderID(v string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldEQ(FieldResponderID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldEQ(FieldCreatedAt, v))
}

// Etag applies equality check predicate on the "etag" field. It's identical to EtagEQ.
func Etag(v string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldEQ(FieldEtag, v))
}

// RequestIDEQ applies the EQ predicate on the "request_id" field.
func RequestIDEQ(v string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldEQ(FieldRequestID, v))
}

// RequestIDNEQ applies the NEQ predicate on the "request_id" field.
func RequestIDNEQ(v string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldNEQ(FieldRequestID, v))
}

// RequestIDIn applies the In predicate on the "request_id" field.
func RequestIDIn(vs ...string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldIn(FieldRequestID, vs...))
}

// RequestIDNotIn applies the NotIn predicate on the "request_id" field.
func RequestIDNotIn(vs ...string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldNotIn(FieldRequestID, vs...))
}

// RequestIDGT applies the GT predicate on the "request_id" field.
func RequestIDGT(v string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldGT(FieldRequestID, v))
}

// RequestIDGTE applies the GTE predicate on the "request_id" field.
func RequestIDGTE(v string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldGTE(FieldRequestID, v))
}

// RequestIDLT applies the LT predicate on the "request_id" field.
func RequestIDLT(v string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldLT(FieldRequestID, v))
}

// RequestIDLTE applies the LTE predicate on the "request_id" field.
func RequestIDLTE(v string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldLTE(FieldRequestID, v))
}

// RequestIDContains applies the Contains predicate on the "request_id" field.
func RequestIDContains(v string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldContains(FieldRequestID, v))
}

// RequestIDHasPrefix applies the HasPrefix predicate on the "request_id" field.
func RequestIDHasPrefix(v string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldHasPrefix(FieldRequestID, v))
}

// RequestIDHasSuffix applies the HasSuffix predicate on the "request_id" field.
func RequestIDHasSuffix(v string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldHasSuffix(FieldRequestID, v))
}

// RequestIDEqualFold applies the EqualFold predicate on the "request_id" field.
func RequestIDEqualFold(v string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldEqualFold(FieldRequestID, v))
}

// RequestIDContainsFold applies the ContainsFold predicate on the "request_id" field.
func RequestIDContainsFold(v string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldContainsFold(FieldRequestID, v))
}

// IsApprovedEQ applies the EQ predicate on the "is_approved" field.
func IsApprovedEQ(v bool) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldEQ(FieldIsApproved, v))
}

// IsApprovedNEQ applies the NEQ predicate on the "is_approved" field.
func IsApprovedNEQ(v bool) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldNEQ(FieldIsApproved, v))
}

// ReasonEQ applies the EQ predicate on the "reason" field.
func ReasonEQ(v string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldEQ(FieldReason, v))
}

// ReasonNEQ applies the NEQ predicate on the "reason" field.
func ReasonNEQ(v string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldNEQ(FieldReason, v))
}

// ReasonIn applies the In predicate on the "reason" field.
func ReasonIn(vs ...string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldIn(FieldReason, vs...))
}

// ReasonNotIn applies the NotIn predicate on the "reason" field.
func ReasonNotIn(vs ...string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldNotIn(FieldReason, vs...))
}

// ReasonGT applies the GT predicate on the "reason" field.
func ReasonGT(v string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldGT(FieldReason, v))
}

// ReasonGTE applies the GTE predicate on the "reason" field.
func ReasonGTE(v string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldGTE(FieldReason, v))
}

// ReasonLT applies the LT predicate on the "reason" field.
func ReasonLT(v string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldLT(FieldReason, v))
}

// ReasonLTE applies the LTE predicate on the "reason" field.
func ReasonLTE(v string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldLTE(FieldReason, v))
}

// ReasonContains applies the Contains predicate on the "reason" field.
func ReasonContains(v string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldContains(FieldReason, v))
}

// ReasonHasPrefix applies the HasPrefix predicate on the "reason" field.
func ReasonHasPrefix(v string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldHasPrefix(FieldReason, v))
}

// ReasonHasSuffix applies the HasSuffix predicate on the "reason" field.
func ReasonHasSuffix(v string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldHasSuffix(FieldReason, v))
}

// ReasonIsNil applies the IsNil predicate on the "reason" field.
func ReasonIsNil() predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldIsNull(FieldReason))
}

// ReasonNotNil applies the NotNil predicate on the "reason" field.
func ReasonNotNil() predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldNotNull(FieldReason))
}

// ReasonEqualFold applies the EqualFold predicate on the "reason" field.
func ReasonEqualFold(v string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldEqualFold(FieldReason, v))
}

// ReasonContainsFold applies the ContainsFold predicate on the "reason" field.
func ReasonContainsFold(v string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldContainsFold(FieldReason, v))
}

// ResponderIDEQ applies the EQ predicate on the "responder_id" field.
func ResponderIDEQ(v string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldEQ(FieldResponderID, v))
}

// ResponderIDNEQ applies the NEQ predicate on the "responder_id" field.
func ResponderIDNEQ(v string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldNEQ(FieldResponderID, v))
}

// ResponderIDIn applies the In predicate on the "responder_id" field.
func ResponderIDIn(vs ...string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldIn(FieldResponderID, vs...))
}

// ResponderIDNotIn applies the NotIn predicate on the "responder_id" field.
func ResponderIDNotIn(vs ...string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldNotIn(FieldResponderID, vs...))
}

// ResponderIDGT applies the GT predicate on the "responder_id" field.
func ResponderIDGT(v string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldGT(FieldResponderID, v))
}

// ResponderIDGTE applies the GTE predicate on the "responder_id" field.
func ResponderIDGTE(v string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldGTE(FieldResponderID, v))
}

// ResponderIDLT applies the LT predicate on the "responder_id" field.
func ResponderIDLT(v string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldLT(FieldResponderID, v))
}

// ResponderIDLTE applies the LTE predicate on the "responder_id" field.
func ResponderIDLTE(v string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldLTE(FieldResponderID, v))
}

// ResponderIDContains applies the Contains predicate on the "responder_id" field.
func ResponderIDContains(v string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldContains(FieldResponderID, v))
}

// ResponderIDHasPrefix applies the HasPrefix predicate on the "responder_id" field.
func ResponderIDHasPrefix(v string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldHasPrefix(FieldResponderID, v))
}

// ResponderIDHasSuffix applies the HasSuffix predicate on the "responder_id" field.
func ResponderIDHasSuffix(v string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldHasSuffix(FieldResponderID, v))
}

// ResponderIDEqualFold applies the EqualFold predicate on the "responder_id" field.
func ResponderIDEqualFold(v string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldEqualFold(FieldResponderID, v))
}

// ResponderIDContainsFold applies the ContainsFold predicate on the "responder_id" field.
func ResponderIDContainsFold(v string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldContainsFold(FieldResponderID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldLTE(FieldCreatedAt, v))
}

// EtagEQ applies the EQ predicate on the "etag" field.
func EtagEQ(v string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldEQ(FieldEtag, v))
}

// EtagNEQ applies the NEQ predicate on the "etag" field.
func EtagNEQ(v string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldNEQ(FieldEtag, v))
}

// EtagIn applies the In predicate on the "etag" field.
func EtagIn(vs ...string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldIn(FieldEtag, vs...))
}

// EtagNotIn applies the NotIn predicate on the "etag" field.
func EtagNotIn(vs ...string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldNotIn(FieldEtag, vs...))
}

// EtagGT applies the GT predicate on the "etag" field.
func EtagGT(v string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldGT(FieldEtag, v))
}

// EtagGTE applies the GTE predicate on the "etag" field.
func EtagGTE(v string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldGTE(FieldEtag, v))
}

// EtagLT applies the LT predicate on the "etag" field.
func EtagLT(v string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldLT(FieldEtag, v))
}

// EtagLTE applies the LTE predicate on the "etag" field.
func EtagLTE(v string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldLTE(FieldEtag, v))
}

// EtagContains applies the Contains predicate on the "etag" field.
func EtagContains(v string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldContains(FieldEtag, v))
}

// EtagHasPrefix applies the HasPrefix predicate on the "etag" field.
func EtagHasPrefix(v string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldHasPrefix(FieldEtag, v))
}

// EtagHasSuffix applies the HasSuffix predicate on the "etag" field.
func EtagHasSuffix(v string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldHasSuffix(FieldEtag, v))
}

// EtagEqualFold applies the EqualFold predicate on the "etag" field.
func EtagEqualFold(v string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldEqualFold(FieldEtag, v))
}

// EtagContainsFold applies the ContainsFold predicate on the "etag" field.
func EtagContainsFold(v string) predicate.GrantResponse {
	return predicate.GrantResponse(sql.FieldContainsFold(FieldEtag, v))
}

// HasGrantRequest applies the HasEdge predicate on the "grant_request" edge.
func HasGrantRequest() predicate.GrantResponse {
	return predicate.GrantResponse(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, GrantRequestTable, GrantRequestColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGrantRequestWith applies the HasEdge predicate on the "grant_request" edge with a given conditions (other predicates).
func HasGrantRequestWith(preds ...predicate.GrantRequest) predicate.GrantResponse {
	return predicate.GrantResponse(func(s *sql.Selector) {
		step := newGrantRequestStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GrantResponse) predicate.GrantResponse {
	return predicate.GrantResponse(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GrantResponse) predicate.GrantResponse {
	return predicate.GrantResponse(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GrantResponse) predicate.GrantResponse {
	return predicate.GrantResponse(sql.NotPredicates(p))
}
