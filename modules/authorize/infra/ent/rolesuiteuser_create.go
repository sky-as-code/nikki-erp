// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/rolesuite"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/rolesuiteuser"
)

// RoleSuiteUserCreate is the builder for creating a RoleSuiteUser entity.
type RoleSuiteUserCreate struct {
	config
	mutation *RoleSuiteUserMutation
	hooks    []Hook
}

// SetApproverID sets the "approver_id" field.
func (rsuc *RoleSuiteUserCreate) SetApproverID(s string) *RoleSuiteUserCreate {
	rsuc.mutation.SetApproverID(s)
	return rsuc
}

// SetReceiverID sets the "receiver_id" field.
func (rsuc *RoleSuiteUserCreate) SetReceiverID(s string) *RoleSuiteUserCreate {
	rsuc.mutation.SetReceiverID(s)
	return rsuc
}

// SetReceiverType sets the "receiver_type" field.
func (rsuc *RoleSuiteUserCreate) SetReceiverType(rt rolesuiteuser.ReceiverType) *RoleSuiteUserCreate {
	rsuc.mutation.SetReceiverType(rt)
	return rsuc
}

// SetRoleSuiteID sets the "role_suite_id" field.
func (rsuc *RoleSuiteUserCreate) SetRoleSuiteID(s string) *RoleSuiteUserCreate {
	rsuc.mutation.SetRoleSuiteID(s)
	return rsuc
}

// SetRoleSuite sets the "role_suite" edge to the RoleSuite entity.
func (rsuc *RoleSuiteUserCreate) SetRoleSuite(r *RoleSuite) *RoleSuiteUserCreate {
	return rsuc.SetRoleSuiteID(r.ID)
}

// Mutation returns the RoleSuiteUserMutation object of the builder.
func (rsuc *RoleSuiteUserCreate) Mutation() *RoleSuiteUserMutation {
	return rsuc.mutation
}

// Save creates the RoleSuiteUser in the database.
func (rsuc *RoleSuiteUserCreate) Save(ctx context.Context) (*RoleSuiteUser, error) {
	return withHooks(ctx, rsuc.sqlSave, rsuc.mutation, rsuc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rsuc *RoleSuiteUserCreate) SaveX(ctx context.Context) *RoleSuiteUser {
	v, err := rsuc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rsuc *RoleSuiteUserCreate) Exec(ctx context.Context) error {
	_, err := rsuc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rsuc *RoleSuiteUserCreate) ExecX(ctx context.Context) {
	if err := rsuc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rsuc *RoleSuiteUserCreate) check() error {
	if _, ok := rsuc.mutation.ApproverID(); !ok {
		return &ValidationError{Name: "approver_id", err: errors.New(`ent: missing required field "RoleSuiteUser.approver_id"`)}
	}
	if _, ok := rsuc.mutation.ReceiverID(); !ok {
		return &ValidationError{Name: "receiver_id", err: errors.New(`ent: missing required field "RoleSuiteUser.receiver_id"`)}
	}
	if _, ok := rsuc.mutation.ReceiverType(); !ok {
		return &ValidationError{Name: "receiver_type", err: errors.New(`ent: missing required field "RoleSuiteUser.receiver_type"`)}
	}
	if v, ok := rsuc.mutation.ReceiverType(); ok {
		if err := rolesuiteuser.ReceiverTypeValidator(v); err != nil {
			return &ValidationError{Name: "receiver_type", err: fmt.Errorf(`ent: validator failed for field "RoleSuiteUser.receiver_type": %w`, err)}
		}
	}
	if _, ok := rsuc.mutation.RoleSuiteID(); !ok {
		return &ValidationError{Name: "role_suite_id", err: errors.New(`ent: missing required field "RoleSuiteUser.role_suite_id"`)}
	}
	if len(rsuc.mutation.RoleSuiteIDs()) == 0 {
		return &ValidationError{Name: "role_suite", err: errors.New(`ent: missing required edge "RoleSuiteUser.role_suite"`)}
	}
	return nil
}

func (rsuc *RoleSuiteUserCreate) sqlSave(ctx context.Context) (*RoleSuiteUser, error) {
	if err := rsuc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rsuc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rsuc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rsuc.mutation.id = &_node.ID
	rsuc.mutation.done = true
	return _node, nil
}

func (rsuc *RoleSuiteUserCreate) createSpec() (*RoleSuiteUser, *sqlgraph.CreateSpec) {
	var (
		_node = &RoleSuiteUser{config: rsuc.config}
		_spec = sqlgraph.NewCreateSpec(rolesuiteuser.Table, sqlgraph.NewFieldSpec(rolesuiteuser.FieldID, field.TypeInt))
	)
	if value, ok := rsuc.mutation.ApproverID(); ok {
		_spec.SetField(rolesuiteuser.FieldApproverID, field.TypeString, value)
		_node.ApproverID = value
	}
	if value, ok := rsuc.mutation.ReceiverID(); ok {
		_spec.SetField(rolesuiteuser.FieldReceiverID, field.TypeString, value)
		_node.ReceiverID = value
	}
	if value, ok := rsuc.mutation.ReceiverType(); ok {
		_spec.SetField(rolesuiteuser.FieldReceiverType, field.TypeEnum, value)
		_node.ReceiverType = value
	}
	if nodes := rsuc.mutation.RoleSuiteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rolesuiteuser.RoleSuiteTable,
			Columns: []string{rolesuiteuser.RoleSuiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolesuite.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RoleSuiteID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RoleSuiteUserCreateBulk is the builder for creating many RoleSuiteUser entities in bulk.
type RoleSuiteUserCreateBulk struct {
	config
	err      error
	builders []*RoleSuiteUserCreate
}

// Save creates the RoleSuiteUser entities in the database.
func (rsucb *RoleSuiteUserCreateBulk) Save(ctx context.Context) ([]*RoleSuiteUser, error) {
	if rsucb.err != nil {
		return nil, rsucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rsucb.builders))
	nodes := make([]*RoleSuiteUser, len(rsucb.builders))
	mutators := make([]Mutator, len(rsucb.builders))
	for i := range rsucb.builders {
		func(i int, root context.Context) {
			builder := rsucb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RoleSuiteUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rsucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rsucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rsucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rsucb *RoleSuiteUserCreateBulk) SaveX(ctx context.Context) []*RoleSuiteUser {
	v, err := rsucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rsucb *RoleSuiteUserCreateBulk) Exec(ctx context.Context) error {
	_, err := rsucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rsucb *RoleSuiteUserCreateBulk) ExecX(ctx context.Context) {
	if err := rsucb.Exec(ctx); err != nil {
		panic(err)
	}
}
