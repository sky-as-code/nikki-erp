// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/grantrequest"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/permissionhistory"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/predicate"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/revokerequest"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/role"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/rolerolesuite"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/rolesuite"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/rolesuiteuser"
)

// RoleSuiteQuery is the builder for querying RoleSuite entities.
type RoleSuiteQuery struct {
	config
	ctx                     *QueryContext
	order                   []rolesuite.OrderOption
	inters                  []Interceptor
	predicates              []predicate.RoleSuite
	withRolesuiteUsers      *RoleSuiteUserQuery
	withPermissionHistories *PermissionHistoryQuery
	withGrantRequests       *GrantRequestQuery
	withRevokeRequests      *RevokeRequestQuery
	withRoles               *RoleQuery
	withRoleRolesuite       *RoleRoleSuiteQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the RoleSuiteQuery builder.
func (rsq *RoleSuiteQuery) Where(ps ...predicate.RoleSuite) *RoleSuiteQuery {
	rsq.predicates = append(rsq.predicates, ps...)
	return rsq
}

// Limit the number of records to be returned by this query.
func (rsq *RoleSuiteQuery) Limit(limit int) *RoleSuiteQuery {
	rsq.ctx.Limit = &limit
	return rsq
}

// Offset to start from.
func (rsq *RoleSuiteQuery) Offset(offset int) *RoleSuiteQuery {
	rsq.ctx.Offset = &offset
	return rsq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (rsq *RoleSuiteQuery) Unique(unique bool) *RoleSuiteQuery {
	rsq.ctx.Unique = &unique
	return rsq
}

// Order specifies how the records should be ordered.
func (rsq *RoleSuiteQuery) Order(o ...rolesuite.OrderOption) *RoleSuiteQuery {
	rsq.order = append(rsq.order, o...)
	return rsq
}

// QueryRolesuiteUsers chains the current query on the "rolesuite_users" edge.
func (rsq *RoleSuiteQuery) QueryRolesuiteUsers() *RoleSuiteUserQuery {
	query := (&RoleSuiteUserClient{config: rsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(rolesuite.Table, rolesuite.FieldID, selector),
			sqlgraph.To(rolesuiteuser.Table, rolesuiteuser.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, rolesuite.RolesuiteUsersTable, rolesuite.RolesuiteUsersColumn),
		)
		fromU = sqlgraph.SetNeighbors(rsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPermissionHistories chains the current query on the "permission_histories" edge.
func (rsq *RoleSuiteQuery) QueryPermissionHistories() *PermissionHistoryQuery {
	query := (&PermissionHistoryClient{config: rsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(rolesuite.Table, rolesuite.FieldID, selector),
			sqlgraph.To(permissionhistory.Table, permissionhistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, rolesuite.PermissionHistoriesTable, rolesuite.PermissionHistoriesColumn),
		)
		fromU = sqlgraph.SetNeighbors(rsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryGrantRequests chains the current query on the "grant_requests" edge.
func (rsq *RoleSuiteQuery) QueryGrantRequests() *GrantRequestQuery {
	query := (&GrantRequestClient{config: rsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(rolesuite.Table, rolesuite.FieldID, selector),
			sqlgraph.To(grantrequest.Table, grantrequest.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, rolesuite.GrantRequestsTable, rolesuite.GrantRequestsColumn),
		)
		fromU = sqlgraph.SetNeighbors(rsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRevokeRequests chains the current query on the "revoke_requests" edge.
func (rsq *RoleSuiteQuery) QueryRevokeRequests() *RevokeRequestQuery {
	query := (&RevokeRequestClient{config: rsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(rolesuite.Table, rolesuite.FieldID, selector),
			sqlgraph.To(revokerequest.Table, revokerequest.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, rolesuite.RevokeRequestsTable, rolesuite.RevokeRequestsColumn),
		)
		fromU = sqlgraph.SetNeighbors(rsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRoles chains the current query on the "roles" edge.
func (rsq *RoleSuiteQuery) QueryRoles() *RoleQuery {
	query := (&RoleClient{config: rsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(rolesuite.Table, rolesuite.FieldID, selector),
			sqlgraph.To(role.Table, role.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, rolesuite.RolesTable, rolesuite.RolesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(rsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRoleRolesuite chains the current query on the "role_rolesuite" edge.
func (rsq *RoleSuiteQuery) QueryRoleRolesuite() *RoleRoleSuiteQuery {
	query := (&RoleRoleSuiteClient{config: rsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(rolesuite.Table, rolesuite.FieldID, selector),
			sqlgraph.To(rolerolesuite.Table, rolerolesuite.RoleSuiteColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, rolesuite.RoleRolesuiteTable, rolesuite.RoleRolesuiteColumn),
		)
		fromU = sqlgraph.SetNeighbors(rsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first RoleSuite entity from the query.
// Returns a *NotFoundError when no RoleSuite was found.
func (rsq *RoleSuiteQuery) First(ctx context.Context) (*RoleSuite, error) {
	nodes, err := rsq.Limit(1).All(setContextOp(ctx, rsq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{rolesuite.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (rsq *RoleSuiteQuery) FirstX(ctx context.Context) *RoleSuite {
	node, err := rsq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first RoleSuite ID from the query.
// Returns a *NotFoundError when no RoleSuite ID was found.
func (rsq *RoleSuiteQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = rsq.Limit(1).IDs(setContextOp(ctx, rsq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{rolesuite.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (rsq *RoleSuiteQuery) FirstIDX(ctx context.Context) string {
	id, err := rsq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single RoleSuite entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one RoleSuite entity is found.
// Returns a *NotFoundError when no RoleSuite entities are found.
func (rsq *RoleSuiteQuery) Only(ctx context.Context) (*RoleSuite, error) {
	nodes, err := rsq.Limit(2).All(setContextOp(ctx, rsq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{rolesuite.Label}
	default:
		return nil, &NotSingularError{rolesuite.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (rsq *RoleSuiteQuery) OnlyX(ctx context.Context) *RoleSuite {
	node, err := rsq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only RoleSuite ID in the query.
// Returns a *NotSingularError when more than one RoleSuite ID is found.
// Returns a *NotFoundError when no entities are found.
func (rsq *RoleSuiteQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = rsq.Limit(2).IDs(setContextOp(ctx, rsq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{rolesuite.Label}
	default:
		err = &NotSingularError{rolesuite.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (rsq *RoleSuiteQuery) OnlyIDX(ctx context.Context) string {
	id, err := rsq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of RoleSuites.
func (rsq *RoleSuiteQuery) All(ctx context.Context) ([]*RoleSuite, error) {
	ctx = setContextOp(ctx, rsq.ctx, ent.OpQueryAll)
	if err := rsq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*RoleSuite, *RoleSuiteQuery]()
	return withInterceptors[[]*RoleSuite](ctx, rsq, qr, rsq.inters)
}

// AllX is like All, but panics if an error occurs.
func (rsq *RoleSuiteQuery) AllX(ctx context.Context) []*RoleSuite {
	nodes, err := rsq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of RoleSuite IDs.
func (rsq *RoleSuiteQuery) IDs(ctx context.Context) (ids []string, err error) {
	if rsq.ctx.Unique == nil && rsq.path != nil {
		rsq.Unique(true)
	}
	ctx = setContextOp(ctx, rsq.ctx, ent.OpQueryIDs)
	if err = rsq.Select(rolesuite.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (rsq *RoleSuiteQuery) IDsX(ctx context.Context) []string {
	ids, err := rsq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (rsq *RoleSuiteQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, rsq.ctx, ent.OpQueryCount)
	if err := rsq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, rsq, querierCount[*RoleSuiteQuery](), rsq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (rsq *RoleSuiteQuery) CountX(ctx context.Context) int {
	count, err := rsq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (rsq *RoleSuiteQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, rsq.ctx, ent.OpQueryExist)
	switch _, err := rsq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (rsq *RoleSuiteQuery) ExistX(ctx context.Context) bool {
	exist, err := rsq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the RoleSuiteQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (rsq *RoleSuiteQuery) Clone() *RoleSuiteQuery {
	if rsq == nil {
		return nil
	}
	return &RoleSuiteQuery{
		config:                  rsq.config,
		ctx:                     rsq.ctx.Clone(),
		order:                   append([]rolesuite.OrderOption{}, rsq.order...),
		inters:                  append([]Interceptor{}, rsq.inters...),
		predicates:              append([]predicate.RoleSuite{}, rsq.predicates...),
		withRolesuiteUsers:      rsq.withRolesuiteUsers.Clone(),
		withPermissionHistories: rsq.withPermissionHistories.Clone(),
		withGrantRequests:       rsq.withGrantRequests.Clone(),
		withRevokeRequests:      rsq.withRevokeRequests.Clone(),
		withRoles:               rsq.withRoles.Clone(),
		withRoleRolesuite:       rsq.withRoleRolesuite.Clone(),
		// clone intermediate query.
		sql:  rsq.sql.Clone(),
		path: rsq.path,
	}
}

// WithRolesuiteUsers tells the query-builder to eager-load the nodes that are connected to
// the "rolesuite_users" edge. The optional arguments are used to configure the query builder of the edge.
func (rsq *RoleSuiteQuery) WithRolesuiteUsers(opts ...func(*RoleSuiteUserQuery)) *RoleSuiteQuery {
	query := (&RoleSuiteUserClient{config: rsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rsq.withRolesuiteUsers = query
	return rsq
}

// WithPermissionHistories tells the query-builder to eager-load the nodes that are connected to
// the "permission_histories" edge. The optional arguments are used to configure the query builder of the edge.
func (rsq *RoleSuiteQuery) WithPermissionHistories(opts ...func(*PermissionHistoryQuery)) *RoleSuiteQuery {
	query := (&PermissionHistoryClient{config: rsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rsq.withPermissionHistories = query
	return rsq
}

// WithGrantRequests tells the query-builder to eager-load the nodes that are connected to
// the "grant_requests" edge. The optional arguments are used to configure the query builder of the edge.
func (rsq *RoleSuiteQuery) WithGrantRequests(opts ...func(*GrantRequestQuery)) *RoleSuiteQuery {
	query := (&GrantRequestClient{config: rsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rsq.withGrantRequests = query
	return rsq
}

// WithRevokeRequests tells the query-builder to eager-load the nodes that are connected to
// the "revoke_requests" edge. The optional arguments are used to configure the query builder of the edge.
func (rsq *RoleSuiteQuery) WithRevokeRequests(opts ...func(*RevokeRequestQuery)) *RoleSuiteQuery {
	query := (&RevokeRequestClient{config: rsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rsq.withRevokeRequests = query
	return rsq
}

// WithRoles tells the query-builder to eager-load the nodes that are connected to
// the "roles" edge. The optional arguments are used to configure the query builder of the edge.
func (rsq *RoleSuiteQuery) WithRoles(opts ...func(*RoleQuery)) *RoleSuiteQuery {
	query := (&RoleClient{config: rsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rsq.withRoles = query
	return rsq
}

// WithRoleRolesuite tells the query-builder to eager-load the nodes that are connected to
// the "role_rolesuite" edge. The optional arguments are used to configure the query builder of the edge.
func (rsq *RoleSuiteQuery) WithRoleRolesuite(opts ...func(*RoleRoleSuiteQuery)) *RoleSuiteQuery {
	query := (&RoleRoleSuiteClient{config: rsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rsq.withRoleRolesuite = query
	return rsq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.RoleSuite.Query().
//		GroupBy(rolesuite.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (rsq *RoleSuiteQuery) GroupBy(field string, fields ...string) *RoleSuiteGroupBy {
	rsq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &RoleSuiteGroupBy{build: rsq}
	grbuild.flds = &rsq.ctx.Fields
	grbuild.label = rolesuite.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.RoleSuite.Query().
//		Select(rolesuite.FieldCreatedAt).
//		Scan(ctx, &v)
func (rsq *RoleSuiteQuery) Select(fields ...string) *RoleSuiteSelect {
	rsq.ctx.Fields = append(rsq.ctx.Fields, fields...)
	sbuild := &RoleSuiteSelect{RoleSuiteQuery: rsq}
	sbuild.label = rolesuite.Label
	sbuild.flds, sbuild.scan = &rsq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a RoleSuiteSelect configured with the given aggregations.
func (rsq *RoleSuiteQuery) Aggregate(fns ...AggregateFunc) *RoleSuiteSelect {
	return rsq.Select().Aggregate(fns...)
}

func (rsq *RoleSuiteQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range rsq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, rsq); err != nil {
				return err
			}
		}
	}
	for _, f := range rsq.ctx.Fields {
		if !rolesuite.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if rsq.path != nil {
		prev, err := rsq.path(ctx)
		if err != nil {
			return err
		}
		rsq.sql = prev
	}
	return nil
}

func (rsq *RoleSuiteQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*RoleSuite, error) {
	var (
		nodes       = []*RoleSuite{}
		_spec       = rsq.querySpec()
		loadedTypes = [6]bool{
			rsq.withRolesuiteUsers != nil,
			rsq.withPermissionHistories != nil,
			rsq.withGrantRequests != nil,
			rsq.withRevokeRequests != nil,
			rsq.withRoles != nil,
			rsq.withRoleRolesuite != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*RoleSuite).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &RoleSuite{config: rsq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, rsq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := rsq.withRolesuiteUsers; query != nil {
		if err := rsq.loadRolesuiteUsers(ctx, query, nodes,
			func(n *RoleSuite) { n.Edges.RolesuiteUsers = []*RoleSuiteUser{} },
			func(n *RoleSuite, e *RoleSuiteUser) { n.Edges.RolesuiteUsers = append(n.Edges.RolesuiteUsers, e) }); err != nil {
			return nil, err
		}
	}
	if query := rsq.withPermissionHistories; query != nil {
		if err := rsq.loadPermissionHistories(ctx, query, nodes,
			func(n *RoleSuite) { n.Edges.PermissionHistories = []*PermissionHistory{} },
			func(n *RoleSuite, e *PermissionHistory) {
				n.Edges.PermissionHistories = append(n.Edges.PermissionHistories, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := rsq.withGrantRequests; query != nil {
		if err := rsq.loadGrantRequests(ctx, query, nodes,
			func(n *RoleSuite) { n.Edges.GrantRequests = []*GrantRequest{} },
			func(n *RoleSuite, e *GrantRequest) { n.Edges.GrantRequests = append(n.Edges.GrantRequests, e) }); err != nil {
			return nil, err
		}
	}
	if query := rsq.withRevokeRequests; query != nil {
		if err := rsq.loadRevokeRequests(ctx, query, nodes,
			func(n *RoleSuite) { n.Edges.RevokeRequests = []*RevokeRequest{} },
			func(n *RoleSuite, e *RevokeRequest) { n.Edges.RevokeRequests = append(n.Edges.RevokeRequests, e) }); err != nil {
			return nil, err
		}
	}
	if query := rsq.withRoles; query != nil {
		if err := rsq.loadRoles(ctx, query, nodes,
			func(n *RoleSuite) { n.Edges.Roles = []*Role{} },
			func(n *RoleSuite, e *Role) { n.Edges.Roles = append(n.Edges.Roles, e) }); err != nil {
			return nil, err
		}
	}
	if query := rsq.withRoleRolesuite; query != nil {
		if err := rsq.loadRoleRolesuite(ctx, query, nodes,
			func(n *RoleSuite) { n.Edges.RoleRolesuite = []*RoleRoleSuite{} },
			func(n *RoleSuite, e *RoleRoleSuite) { n.Edges.RoleRolesuite = append(n.Edges.RoleRolesuite, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (rsq *RoleSuiteQuery) loadRolesuiteUsers(ctx context.Context, query *RoleSuiteUserQuery, nodes []*RoleSuite, init func(*RoleSuite), assign func(*RoleSuite, *RoleSuiteUser)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*RoleSuite)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(rolesuiteuser.FieldRoleSuiteID)
	}
	query.Where(predicate.RoleSuiteUser(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(rolesuite.RolesuiteUsersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.RoleSuiteID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "role_suite_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (rsq *RoleSuiteQuery) loadPermissionHistories(ctx context.Context, query *PermissionHistoryQuery, nodes []*RoleSuite, init func(*RoleSuite), assign func(*RoleSuite, *PermissionHistory)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*RoleSuite)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(permissionhistory.FieldRoleSuiteID)
	}
	query.Where(predicate.PermissionHistory(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(rolesuite.PermissionHistoriesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.RoleSuiteID
		if fk == nil {
			return fmt.Errorf(`foreign-key "role_suite_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "role_suite_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (rsq *RoleSuiteQuery) loadGrantRequests(ctx context.Context, query *GrantRequestQuery, nodes []*RoleSuite, init func(*RoleSuite), assign func(*RoleSuite, *GrantRequest)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*RoleSuite)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(grantrequest.FieldTargetSuiteID)
	}
	query.Where(predicate.GrantRequest(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(rolesuite.GrantRequestsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.TargetSuiteID
		if fk == nil {
			return fmt.Errorf(`foreign-key "target_suite_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "target_suite_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (rsq *RoleSuiteQuery) loadRevokeRequests(ctx context.Context, query *RevokeRequestQuery, nodes []*RoleSuite, init func(*RoleSuite), assign func(*RoleSuite, *RevokeRequest)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*RoleSuite)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(revokerequest.FieldTargetSuiteID)
	}
	query.Where(predicate.RevokeRequest(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(rolesuite.RevokeRequestsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.TargetSuiteID
		if fk == nil {
			return fmt.Errorf(`foreign-key "target_suite_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "target_suite_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (rsq *RoleSuiteQuery) loadRoles(ctx context.Context, query *RoleQuery, nodes []*RoleSuite, init func(*RoleSuite), assign func(*RoleSuite, *Role)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*RoleSuite)
	nids := make(map[string]map[*RoleSuite]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(rolesuite.RolesTable)
		s.Join(joinT).On(s.C(role.FieldID), joinT.C(rolesuite.RolesPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(rolesuite.RolesPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(rolesuite.RolesPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*RoleSuite]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Role](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "roles" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (rsq *RoleSuiteQuery) loadRoleRolesuite(ctx context.Context, query *RoleRoleSuiteQuery, nodes []*RoleSuite, init func(*RoleSuite), assign func(*RoleSuite, *RoleRoleSuite)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*RoleSuite)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(rolerolesuite.FieldRoleSuiteID)
	}
	query.Where(predicate.RoleRoleSuite(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(rolesuite.RoleRolesuiteColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.RoleSuiteID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "role_suite_id" returned %v for node %v`, fk, n)
		}
		assign(node, n)
	}
	return nil
}

func (rsq *RoleSuiteQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := rsq.querySpec()
	_spec.Node.Columns = rsq.ctx.Fields
	if len(rsq.ctx.Fields) > 0 {
		_spec.Unique = rsq.ctx.Unique != nil && *rsq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, rsq.driver, _spec)
}

func (rsq *RoleSuiteQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(rolesuite.Table, rolesuite.Columns, sqlgraph.NewFieldSpec(rolesuite.FieldID, field.TypeString))
	_spec.From = rsq.sql
	if unique := rsq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if rsq.path != nil {
		_spec.Unique = true
	}
	if fields := rsq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rolesuite.FieldID)
		for i := range fields {
			if fields[i] != rolesuite.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := rsq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := rsq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := rsq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := rsq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (rsq *RoleSuiteQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(rsq.driver.Dialect())
	t1 := builder.Table(rolesuite.Table)
	columns := rsq.ctx.Fields
	if len(columns) == 0 {
		columns = rolesuite.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if rsq.sql != nil {
		selector = rsq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if rsq.ctx.Unique != nil && *rsq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range rsq.predicates {
		p(selector)
	}
	for _, p := range rsq.order {
		p(selector)
	}
	if offset := rsq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := rsq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// RoleSuiteGroupBy is the group-by builder for RoleSuite entities.
type RoleSuiteGroupBy struct {
	selector
	build *RoleSuiteQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rsgb *RoleSuiteGroupBy) Aggregate(fns ...AggregateFunc) *RoleSuiteGroupBy {
	rsgb.fns = append(rsgb.fns, fns...)
	return rsgb
}

// Scan applies the selector query and scans the result into the given value.
func (rsgb *RoleSuiteGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rsgb.build.ctx, ent.OpQueryGroupBy)
	if err := rsgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*RoleSuiteQuery, *RoleSuiteGroupBy](ctx, rsgb.build, rsgb, rsgb.build.inters, v)
}

func (rsgb *RoleSuiteGroupBy) sqlScan(ctx context.Context, root *RoleSuiteQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(rsgb.fns))
	for _, fn := range rsgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*rsgb.flds)+len(rsgb.fns))
		for _, f := range *rsgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*rsgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rsgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// RoleSuiteSelect is the builder for selecting fields of RoleSuite entities.
type RoleSuiteSelect struct {
	*RoleSuiteQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (rss *RoleSuiteSelect) Aggregate(fns ...AggregateFunc) *RoleSuiteSelect {
	rss.fns = append(rss.fns, fns...)
	return rss
}

// Scan applies the selector query and scans the result into the given value.
func (rss *RoleSuiteSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rss.ctx, ent.OpQuerySelect)
	if err := rss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*RoleSuiteQuery, *RoleSuiteSelect](ctx, rss.RoleSuiteQuery, rss, rss.inters, v)
}

func (rss *RoleSuiteSelect) sqlScan(ctx context.Context, root *RoleSuiteQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(rss.fns))
	for _, fn := range rss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*rss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
