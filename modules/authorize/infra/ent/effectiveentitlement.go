// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/effectiveentitlement"
)

// EffectiveEntitlement is the model entity for the EffectiveEntitlement schema.
type EffectiveEntitlement struct {
	config `json:"-"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// ActionExpr holds the value of the "action_expr" field.
	ActionExpr string `json:"action_expr,omitempty"`
	// ResourceID holds the value of the "resource_id" field.
	ResourceID string `json:"resource_id,omitempty"`
	// ScopeRef holds the value of the "scope_ref" field.
	ScopeRef *string `json:"scope_ref,omitempty"`
	// Source holds the value of the "source" field.
	Source       string `json:"source,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EffectiveEntitlement) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case effectiveentitlement.FieldUserID, effectiveentitlement.FieldActionExpr, effectiveentitlement.FieldResourceID, effectiveentitlement.FieldScopeRef, effectiveentitlement.FieldSource:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EffectiveEntitlement fields.
func (ee *EffectiveEntitlement) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case effectiveentitlement.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ee.UserID = value.String
			}
		case effectiveentitlement.FieldActionExpr:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field action_expr", values[i])
			} else if value.Valid {
				ee.ActionExpr = value.String
			}
		case effectiveentitlement.FieldResourceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource_id", values[i])
			} else if value.Valid {
				ee.ResourceID = value.String
			}
		case effectiveentitlement.FieldScopeRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field scope_ref", values[i])
			} else if value.Valid {
				ee.ScopeRef = new(string)
				*ee.ScopeRef = value.String
			}
		case effectiveentitlement.FieldSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source", values[i])
			} else if value.Valid {
				ee.Source = value.String
			}
		default:
			ee.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EffectiveEntitlement.
// This includes values selected through modifiers, order, etc.
func (ee *EffectiveEntitlement) Value(name string) (ent.Value, error) {
	return ee.selectValues.Get(name)
}

// Unwrap unwraps the EffectiveEntitlement entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ee *EffectiveEntitlement) Unwrap() *EffectiveEntitlement {
	_tx, ok := ee.config.driver.(*txDriver)
	if !ok {
		panic("ent: EffectiveEntitlement is not a transactional entity")
	}
	ee.config.driver = _tx.drv
	return ee
}

// String implements the fmt.Stringer.
func (ee *EffectiveEntitlement) String() string {
	var builder strings.Builder
	builder.WriteString("EffectiveEntitlement(")
	builder.WriteString("user_id=")
	builder.WriteString(ee.UserID)
	builder.WriteString(", ")
	builder.WriteString("action_expr=")
	builder.WriteString(ee.ActionExpr)
	builder.WriteString(", ")
	builder.WriteString("resource_id=")
	builder.WriteString(ee.ResourceID)
	builder.WriteString(", ")
	if v := ee.ScopeRef; v != nil {
		builder.WriteString("scope_ref=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("source=")
	builder.WriteString(ee.Source)
	builder.WriteByte(')')
	return builder.String()
}

// EffectiveEntitlements is a parsable slice of EffectiveEntitlement.
type EffectiveEntitlements []*EffectiveEntitlement
