// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/predicate"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/role"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/rolerolesuite"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/rolesuite"
)

// RoleRoleSuiteQuery is the builder for querying RoleRoleSuite entities.
type RoleRoleSuiteQuery struct {
	config
	ctx           *QueryContext
	order         []rolerolesuite.OrderOption
	inters        []Interceptor
	predicates    []predicate.RoleRoleSuite
	withRole      *RoleQuery
	withRoleSuite *RoleSuiteQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the RoleRoleSuiteQuery builder.
func (rrsq *RoleRoleSuiteQuery) Where(ps ...predicate.RoleRoleSuite) *RoleRoleSuiteQuery {
	rrsq.predicates = append(rrsq.predicates, ps...)
	return rrsq
}

// Limit the number of records to be returned by this query.
func (rrsq *RoleRoleSuiteQuery) Limit(limit int) *RoleRoleSuiteQuery {
	rrsq.ctx.Limit = &limit
	return rrsq
}

// Offset to start from.
func (rrsq *RoleRoleSuiteQuery) Offset(offset int) *RoleRoleSuiteQuery {
	rrsq.ctx.Offset = &offset
	return rrsq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (rrsq *RoleRoleSuiteQuery) Unique(unique bool) *RoleRoleSuiteQuery {
	rrsq.ctx.Unique = &unique
	return rrsq
}

// Order specifies how the records should be ordered.
func (rrsq *RoleRoleSuiteQuery) Order(o ...rolerolesuite.OrderOption) *RoleRoleSuiteQuery {
	rrsq.order = append(rrsq.order, o...)
	return rrsq
}

// QueryRole chains the current query on the "role" edge.
func (rrsq *RoleRoleSuiteQuery) QueryRole() *RoleQuery {
	query := (&RoleClient{config: rrsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rrsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rrsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(rolerolesuite.Table, rolerolesuite.RoleColumn, selector),
			sqlgraph.To(role.Table, role.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, rolerolesuite.RoleTable, rolerolesuite.RoleColumn),
		)
		fromU = sqlgraph.SetNeighbors(rrsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRoleSuite chains the current query on the "role_suite" edge.
func (rrsq *RoleRoleSuiteQuery) QueryRoleSuite() *RoleSuiteQuery {
	query := (&RoleSuiteClient{config: rrsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rrsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rrsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(rolerolesuite.Table, rolerolesuite.RoleSuiteColumn, selector),
			sqlgraph.To(rolesuite.Table, rolesuite.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, rolerolesuite.RoleSuiteTable, rolerolesuite.RoleSuiteColumn),
		)
		fromU = sqlgraph.SetNeighbors(rrsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first RoleRoleSuite entity from the query.
// Returns a *NotFoundError when no RoleRoleSuite was found.
func (rrsq *RoleRoleSuiteQuery) First(ctx context.Context) (*RoleRoleSuite, error) {
	nodes, err := rrsq.Limit(1).All(setContextOp(ctx, rrsq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{rolerolesuite.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (rrsq *RoleRoleSuiteQuery) FirstX(ctx context.Context) *RoleRoleSuite {
	node, err := rrsq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// Only returns a single RoleRoleSuite entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one RoleRoleSuite entity is found.
// Returns a *NotFoundError when no RoleRoleSuite entities are found.
func (rrsq *RoleRoleSuiteQuery) Only(ctx context.Context) (*RoleRoleSuite, error) {
	nodes, err := rrsq.Limit(2).All(setContextOp(ctx, rrsq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{rolerolesuite.Label}
	default:
		return nil, &NotSingularError{rolerolesuite.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (rrsq *RoleRoleSuiteQuery) OnlyX(ctx context.Context) *RoleRoleSuite {
	node, err := rrsq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// All executes the query and returns a list of RoleRoleSuites.
func (rrsq *RoleRoleSuiteQuery) All(ctx context.Context) ([]*RoleRoleSuite, error) {
	ctx = setContextOp(ctx, rrsq.ctx, ent.OpQueryAll)
	if err := rrsq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*RoleRoleSuite, *RoleRoleSuiteQuery]()
	return withInterceptors[[]*RoleRoleSuite](ctx, rrsq, qr, rrsq.inters)
}

// AllX is like All, but panics if an error occurs.
func (rrsq *RoleRoleSuiteQuery) AllX(ctx context.Context) []*RoleRoleSuite {
	nodes, err := rrsq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// Count returns the count of the given query.
func (rrsq *RoleRoleSuiteQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, rrsq.ctx, ent.OpQueryCount)
	if err := rrsq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, rrsq, querierCount[*RoleRoleSuiteQuery](), rrsq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (rrsq *RoleRoleSuiteQuery) CountX(ctx context.Context) int {
	count, err := rrsq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (rrsq *RoleRoleSuiteQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, rrsq.ctx, ent.OpQueryExist)
	switch _, err := rrsq.First(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (rrsq *RoleRoleSuiteQuery) ExistX(ctx context.Context) bool {
	exist, err := rrsq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the RoleRoleSuiteQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (rrsq *RoleRoleSuiteQuery) Clone() *RoleRoleSuiteQuery {
	if rrsq == nil {
		return nil
	}
	return &RoleRoleSuiteQuery{
		config:        rrsq.config,
		ctx:           rrsq.ctx.Clone(),
		order:         append([]rolerolesuite.OrderOption{}, rrsq.order...),
		inters:        append([]Interceptor{}, rrsq.inters...),
		predicates:    append([]predicate.RoleRoleSuite{}, rrsq.predicates...),
		withRole:      rrsq.withRole.Clone(),
		withRoleSuite: rrsq.withRoleSuite.Clone(),
		// clone intermediate query.
		sql:  rrsq.sql.Clone(),
		path: rrsq.path,
	}
}

// WithRole tells the query-builder to eager-load the nodes that are connected to
// the "role" edge. The optional arguments are used to configure the query builder of the edge.
func (rrsq *RoleRoleSuiteQuery) WithRole(opts ...func(*RoleQuery)) *RoleRoleSuiteQuery {
	query := (&RoleClient{config: rrsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rrsq.withRole = query
	return rrsq
}

// WithRoleSuite tells the query-builder to eager-load the nodes that are connected to
// the "role_suite" edge. The optional arguments are used to configure the query builder of the edge.
func (rrsq *RoleRoleSuiteQuery) WithRoleSuite(opts ...func(*RoleSuiteQuery)) *RoleRoleSuiteQuery {
	query := (&RoleSuiteClient{config: rrsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rrsq.withRoleSuite = query
	return rrsq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		RoleID string `json:"role_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.RoleRoleSuite.Query().
//		GroupBy(rolerolesuite.FieldRoleID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (rrsq *RoleRoleSuiteQuery) GroupBy(field string, fields ...string) *RoleRoleSuiteGroupBy {
	rrsq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &RoleRoleSuiteGroupBy{build: rrsq}
	grbuild.flds = &rrsq.ctx.Fields
	grbuild.label = rolerolesuite.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		RoleID string `json:"role_id,omitempty"`
//	}
//
//	client.RoleRoleSuite.Query().
//		Select(rolerolesuite.FieldRoleID).
//		Scan(ctx, &v)
func (rrsq *RoleRoleSuiteQuery) Select(fields ...string) *RoleRoleSuiteSelect {
	rrsq.ctx.Fields = append(rrsq.ctx.Fields, fields...)
	sbuild := &RoleRoleSuiteSelect{RoleRoleSuiteQuery: rrsq}
	sbuild.label = rolerolesuite.Label
	sbuild.flds, sbuild.scan = &rrsq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a RoleRoleSuiteSelect configured with the given aggregations.
func (rrsq *RoleRoleSuiteQuery) Aggregate(fns ...AggregateFunc) *RoleRoleSuiteSelect {
	return rrsq.Select().Aggregate(fns...)
}

func (rrsq *RoleRoleSuiteQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range rrsq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, rrsq); err != nil {
				return err
			}
		}
	}
	for _, f := range rrsq.ctx.Fields {
		if !rolerolesuite.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if rrsq.path != nil {
		prev, err := rrsq.path(ctx)
		if err != nil {
			return err
		}
		rrsq.sql = prev
	}
	return nil
}

func (rrsq *RoleRoleSuiteQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*RoleRoleSuite, error) {
	var (
		nodes       = []*RoleRoleSuite{}
		_spec       = rrsq.querySpec()
		loadedTypes = [2]bool{
			rrsq.withRole != nil,
			rrsq.withRoleSuite != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*RoleRoleSuite).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &RoleRoleSuite{config: rrsq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, rrsq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := rrsq.withRole; query != nil {
		if err := rrsq.loadRole(ctx, query, nodes, nil,
			func(n *RoleRoleSuite, e *Role) { n.Edges.Role = e }); err != nil {
			return nil, err
		}
	}
	if query := rrsq.withRoleSuite; query != nil {
		if err := rrsq.loadRoleSuite(ctx, query, nodes, nil,
			func(n *RoleRoleSuite, e *RoleSuite) { n.Edges.RoleSuite = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (rrsq *RoleRoleSuiteQuery) loadRole(ctx context.Context, query *RoleQuery, nodes []*RoleRoleSuite, init func(*RoleRoleSuite), assign func(*RoleRoleSuite, *Role)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*RoleRoleSuite)
	for i := range nodes {
		fk := nodes[i].RoleID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(role.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "role_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (rrsq *RoleRoleSuiteQuery) loadRoleSuite(ctx context.Context, query *RoleSuiteQuery, nodes []*RoleRoleSuite, init func(*RoleRoleSuite), assign func(*RoleRoleSuite, *RoleSuite)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*RoleRoleSuite)
	for i := range nodes {
		fk := nodes[i].RoleSuiteID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(rolesuite.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "role_suite_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (rrsq *RoleRoleSuiteQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := rrsq.querySpec()
	_spec.Unique = false
	_spec.Node.Columns = nil
	return sqlgraph.CountNodes(ctx, rrsq.driver, _spec)
}

func (rrsq *RoleRoleSuiteQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(rolerolesuite.Table, rolerolesuite.Columns, nil)
	_spec.From = rrsq.sql
	if unique := rrsq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if rrsq.path != nil {
		_spec.Unique = true
	}
	if fields := rrsq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		for i := range fields {
			_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
		}
		if rrsq.withRole != nil {
			_spec.Node.AddColumnOnce(rolerolesuite.FieldRoleID)
		}
		if rrsq.withRoleSuite != nil {
			_spec.Node.AddColumnOnce(rolerolesuite.FieldRoleSuiteID)
		}
	}
	if ps := rrsq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := rrsq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := rrsq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := rrsq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (rrsq *RoleRoleSuiteQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(rrsq.driver.Dialect())
	t1 := builder.Table(rolerolesuite.Table)
	columns := rrsq.ctx.Fields
	if len(columns) == 0 {
		columns = rolerolesuite.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if rrsq.sql != nil {
		selector = rrsq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if rrsq.ctx.Unique != nil && *rrsq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range rrsq.predicates {
		p(selector)
	}
	for _, p := range rrsq.order {
		p(selector)
	}
	if offset := rrsq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := rrsq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// RoleRoleSuiteGroupBy is the group-by builder for RoleRoleSuite entities.
type RoleRoleSuiteGroupBy struct {
	selector
	build *RoleRoleSuiteQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rrsgb *RoleRoleSuiteGroupBy) Aggregate(fns ...AggregateFunc) *RoleRoleSuiteGroupBy {
	rrsgb.fns = append(rrsgb.fns, fns...)
	return rrsgb
}

// Scan applies the selector query and scans the result into the given value.
func (rrsgb *RoleRoleSuiteGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rrsgb.build.ctx, ent.OpQueryGroupBy)
	if err := rrsgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*RoleRoleSuiteQuery, *RoleRoleSuiteGroupBy](ctx, rrsgb.build, rrsgb, rrsgb.build.inters, v)
}

func (rrsgb *RoleRoleSuiteGroupBy) sqlScan(ctx context.Context, root *RoleRoleSuiteQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(rrsgb.fns))
	for _, fn := range rrsgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*rrsgb.flds)+len(rrsgb.fns))
		for _, f := range *rrsgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*rrsgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rrsgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// RoleRoleSuiteSelect is the builder for selecting fields of RoleRoleSuite entities.
type RoleRoleSuiteSelect struct {
	*RoleRoleSuiteQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (rrss *RoleRoleSuiteSelect) Aggregate(fns ...AggregateFunc) *RoleRoleSuiteSelect {
	rrss.fns = append(rrss.fns, fns...)
	return rrss
}

// Scan applies the selector query and scans the result into the given value.
func (rrss *RoleRoleSuiteSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rrss.ctx, ent.OpQuerySelect)
	if err := rrss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*RoleRoleSuiteQuery, *RoleRoleSuiteSelect](ctx, rrss.RoleRoleSuiteQuery, rrss, rrss.inters, v)
}

func (rrss *RoleRoleSuiteSelect) sqlScan(ctx context.Context, root *RoleRoleSuiteQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(rrss.fns))
	for _, fn := range rrss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*rrss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rrss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
