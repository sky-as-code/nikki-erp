// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/grantrequest"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/permissionhistory"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/predicate"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/role"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/rolesuite"
)

// GrantRequestUpdate is the builder for updating GrantRequest entities.
type GrantRequestUpdate struct {
	config
	hooks    []Hook
	mutation *GrantRequestMutation
}

// Where appends a list predicates to the GrantRequestUpdate builder.
func (gru *GrantRequestUpdate) Where(ps ...predicate.GrantRequest) *GrantRequestUpdate {
	gru.mutation.Where(ps...)
	return gru
}

// SetEtag sets the "etag" field.
func (gru *GrantRequestUpdate) SetEtag(s string) *GrantRequestUpdate {
	gru.mutation.SetEtag(s)
	return gru
}

// SetNillableEtag sets the "etag" field if the given value is not nil.
func (gru *GrantRequestUpdate) SetNillableEtag(s *string) *GrantRequestUpdate {
	if s != nil {
		gru.SetEtag(*s)
	}
	return gru
}

// SetTargetRoleID sets the "target_role_id" field.
func (gru *GrantRequestUpdate) SetTargetRoleID(s string) *GrantRequestUpdate {
	gru.mutation.SetTargetRoleID(s)
	return gru
}

// SetNillableTargetRoleID sets the "target_role_id" field if the given value is not nil.
func (gru *GrantRequestUpdate) SetNillableTargetRoleID(s *string) *GrantRequestUpdate {
	if s != nil {
		gru.SetTargetRoleID(*s)
	}
	return gru
}

// ClearTargetRoleID clears the value of the "target_role_id" field.
func (gru *GrantRequestUpdate) ClearTargetRoleID() *GrantRequestUpdate {
	gru.mutation.ClearTargetRoleID()
	return gru
}

// SetTargetRoleName sets the "target_role_name" field.
func (gru *GrantRequestUpdate) SetTargetRoleName(s string) *GrantRequestUpdate {
	gru.mutation.SetTargetRoleName(s)
	return gru
}

// SetNillableTargetRoleName sets the "target_role_name" field if the given value is not nil.
func (gru *GrantRequestUpdate) SetNillableTargetRoleName(s *string) *GrantRequestUpdate {
	if s != nil {
		gru.SetTargetRoleName(*s)
	}
	return gru
}

// SetTargetSuiteID sets the "target_suite_id" field.
func (gru *GrantRequestUpdate) SetTargetSuiteID(s string) *GrantRequestUpdate {
	gru.mutation.SetTargetSuiteID(s)
	return gru
}

// SetNillableTargetSuiteID sets the "target_suite_id" field if the given value is not nil.
func (gru *GrantRequestUpdate) SetNillableTargetSuiteID(s *string) *GrantRequestUpdate {
	if s != nil {
		gru.SetTargetSuiteID(*s)
	}
	return gru
}

// ClearTargetSuiteID clears the value of the "target_suite_id" field.
func (gru *GrantRequestUpdate) ClearTargetSuiteID() *GrantRequestUpdate {
	gru.mutation.ClearTargetSuiteID()
	return gru
}

// SetTargetSuiteName sets the "target_suite_name" field.
func (gru *GrantRequestUpdate) SetTargetSuiteName(s string) *GrantRequestUpdate {
	gru.mutation.SetTargetSuiteName(s)
	return gru
}

// SetNillableTargetSuiteName sets the "target_suite_name" field if the given value is not nil.
func (gru *GrantRequestUpdate) SetNillableTargetSuiteName(s *string) *GrantRequestUpdate {
	if s != nil {
		gru.SetTargetSuiteName(*s)
	}
	return gru
}

// SetStatus sets the "status" field.
func (gru *GrantRequestUpdate) SetStatus(gr grantrequest.Status) *GrantRequestUpdate {
	gru.mutation.SetStatus(gr)
	return gru
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (gru *GrantRequestUpdate) SetNillableStatus(gr *grantrequest.Status) *GrantRequestUpdate {
	if gr != nil {
		gru.SetStatus(*gr)
	}
	return gru
}

// AddPermissionHistoryIDs adds the "permission_histories" edge to the PermissionHistory entity by IDs.
func (gru *GrantRequestUpdate) AddPermissionHistoryIDs(ids ...string) *GrantRequestUpdate {
	gru.mutation.AddPermissionHistoryIDs(ids...)
	return gru
}

// AddPermissionHistories adds the "permission_histories" edges to the PermissionHistory entity.
func (gru *GrantRequestUpdate) AddPermissionHistories(p ...*PermissionHistory) *GrantRequestUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return gru.AddPermissionHistoryIDs(ids...)
}

// SetRoleID sets the "role" edge to the Role entity by ID.
func (gru *GrantRequestUpdate) SetRoleID(id string) *GrantRequestUpdate {
	gru.mutation.SetRoleID(id)
	return gru
}

// SetNillableRoleID sets the "role" edge to the Role entity by ID if the given value is not nil.
func (gru *GrantRequestUpdate) SetNillableRoleID(id *string) *GrantRequestUpdate {
	if id != nil {
		gru = gru.SetRoleID(*id)
	}
	return gru
}

// SetRole sets the "role" edge to the Role entity.
func (gru *GrantRequestUpdate) SetRole(r *Role) *GrantRequestUpdate {
	return gru.SetRoleID(r.ID)
}

// SetRoleSuiteID sets the "role_suite" edge to the RoleSuite entity by ID.
func (gru *GrantRequestUpdate) SetRoleSuiteID(id string) *GrantRequestUpdate {
	gru.mutation.SetRoleSuiteID(id)
	return gru
}

// SetNillableRoleSuiteID sets the "role_suite" edge to the RoleSuite entity by ID if the given value is not nil.
func (gru *GrantRequestUpdate) SetNillableRoleSuiteID(id *string) *GrantRequestUpdate {
	if id != nil {
		gru = gru.SetRoleSuiteID(*id)
	}
	return gru
}

// SetRoleSuite sets the "role_suite" edge to the RoleSuite entity.
func (gru *GrantRequestUpdate) SetRoleSuite(r *RoleSuite) *GrantRequestUpdate {
	return gru.SetRoleSuiteID(r.ID)
}

// Mutation returns the GrantRequestMutation object of the builder.
func (gru *GrantRequestUpdate) Mutation() *GrantRequestMutation {
	return gru.mutation
}

// ClearPermissionHistories clears all "permission_histories" edges to the PermissionHistory entity.
func (gru *GrantRequestUpdate) ClearPermissionHistories() *GrantRequestUpdate {
	gru.mutation.ClearPermissionHistories()
	return gru
}

// RemovePermissionHistoryIDs removes the "permission_histories" edge to PermissionHistory entities by IDs.
func (gru *GrantRequestUpdate) RemovePermissionHistoryIDs(ids ...string) *GrantRequestUpdate {
	gru.mutation.RemovePermissionHistoryIDs(ids...)
	return gru
}

// RemovePermissionHistories removes "permission_histories" edges to PermissionHistory entities.
func (gru *GrantRequestUpdate) RemovePermissionHistories(p ...*PermissionHistory) *GrantRequestUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return gru.RemovePermissionHistoryIDs(ids...)
}

// ClearRole clears the "role" edge to the Role entity.
func (gru *GrantRequestUpdate) ClearRole() *GrantRequestUpdate {
	gru.mutation.ClearRole()
	return gru
}

// ClearRoleSuite clears the "role_suite" edge to the RoleSuite entity.
func (gru *GrantRequestUpdate) ClearRoleSuite() *GrantRequestUpdate {
	gru.mutation.ClearRoleSuite()
	return gru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gru *GrantRequestUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, gru.sqlSave, gru.mutation, gru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gru *GrantRequestUpdate) SaveX(ctx context.Context) int {
	affected, err := gru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gru *GrantRequestUpdate) Exec(ctx context.Context) error {
	_, err := gru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gru *GrantRequestUpdate) ExecX(ctx context.Context) {
	if err := gru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gru *GrantRequestUpdate) check() error {
	if v, ok := gru.mutation.Status(); ok {
		if err := grantrequest.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "GrantRequest.status": %w`, err)}
		}
	}
	return nil
}

func (gru *GrantRequestUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := gru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(grantrequest.Table, grantrequest.Columns, sqlgraph.NewFieldSpec(grantrequest.FieldID, field.TypeString))
	if ps := gru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if gru.mutation.AttachmentURLCleared() {
		_spec.ClearField(grantrequest.FieldAttachmentURL, field.TypeString)
	}
	if gru.mutation.CommentCleared() {
		_spec.ClearField(grantrequest.FieldComment, field.TypeString)
	}
	if value, ok := gru.mutation.Etag(); ok {
		_spec.SetField(grantrequest.FieldEtag, field.TypeString, value)
	}
	if value, ok := gru.mutation.TargetRoleName(); ok {
		_spec.SetField(grantrequest.FieldTargetRoleName, field.TypeString, value)
	}
	if value, ok := gru.mutation.TargetSuiteName(); ok {
		_spec.SetField(grantrequest.FieldTargetSuiteName, field.TypeString, value)
	}
	if value, ok := gru.mutation.Status(); ok {
		_spec.SetField(grantrequest.FieldStatus, field.TypeEnum, value)
	}
	if gru.mutation.PermissionHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   grantrequest.PermissionHistoriesTable,
			Columns: []string{grantrequest.PermissionHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permissionhistory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gru.mutation.RemovedPermissionHistoriesIDs(); len(nodes) > 0 && !gru.mutation.PermissionHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   grantrequest.PermissionHistoriesTable,
			Columns: []string{grantrequest.PermissionHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permissionhistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gru.mutation.PermissionHistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   grantrequest.PermissionHistoriesTable,
			Columns: []string{grantrequest.PermissionHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permissionhistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gru.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   grantrequest.RoleTable,
			Columns: []string{grantrequest.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gru.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   grantrequest.RoleTable,
			Columns: []string{grantrequest.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gru.mutation.RoleSuiteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   grantrequest.RoleSuiteTable,
			Columns: []string{grantrequest.RoleSuiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolesuite.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gru.mutation.RoleSuiteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   grantrequest.RoleSuiteTable,
			Columns: []string{grantrequest.RoleSuiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolesuite.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{grantrequest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gru.mutation.done = true
	return n, nil
}

// GrantRequestUpdateOne is the builder for updating a single GrantRequest entity.
type GrantRequestUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GrantRequestMutation
}

// SetEtag sets the "etag" field.
func (gruo *GrantRequestUpdateOne) SetEtag(s string) *GrantRequestUpdateOne {
	gruo.mutation.SetEtag(s)
	return gruo
}

// SetNillableEtag sets the "etag" field if the given value is not nil.
func (gruo *GrantRequestUpdateOne) SetNillableEtag(s *string) *GrantRequestUpdateOne {
	if s != nil {
		gruo.SetEtag(*s)
	}
	return gruo
}

// SetTargetRoleID sets the "target_role_id" field.
func (gruo *GrantRequestUpdateOne) SetTargetRoleID(s string) *GrantRequestUpdateOne {
	gruo.mutation.SetTargetRoleID(s)
	return gruo
}

// SetNillableTargetRoleID sets the "target_role_id" field if the given value is not nil.
func (gruo *GrantRequestUpdateOne) SetNillableTargetRoleID(s *string) *GrantRequestUpdateOne {
	if s != nil {
		gruo.SetTargetRoleID(*s)
	}
	return gruo
}

// ClearTargetRoleID clears the value of the "target_role_id" field.
func (gruo *GrantRequestUpdateOne) ClearTargetRoleID() *GrantRequestUpdateOne {
	gruo.mutation.ClearTargetRoleID()
	return gruo
}

// SetTargetRoleName sets the "target_role_name" field.
func (gruo *GrantRequestUpdateOne) SetTargetRoleName(s string) *GrantRequestUpdateOne {
	gruo.mutation.SetTargetRoleName(s)
	return gruo
}

// SetNillableTargetRoleName sets the "target_role_name" field if the given value is not nil.
func (gruo *GrantRequestUpdateOne) SetNillableTargetRoleName(s *string) *GrantRequestUpdateOne {
	if s != nil {
		gruo.SetTargetRoleName(*s)
	}
	return gruo
}

// SetTargetSuiteID sets the "target_suite_id" field.
func (gruo *GrantRequestUpdateOne) SetTargetSuiteID(s string) *GrantRequestUpdateOne {
	gruo.mutation.SetTargetSuiteID(s)
	return gruo
}

// SetNillableTargetSuiteID sets the "target_suite_id" field if the given value is not nil.
func (gruo *GrantRequestUpdateOne) SetNillableTargetSuiteID(s *string) *GrantRequestUpdateOne {
	if s != nil {
		gruo.SetTargetSuiteID(*s)
	}
	return gruo
}

// ClearTargetSuiteID clears the value of the "target_suite_id" field.
func (gruo *GrantRequestUpdateOne) ClearTargetSuiteID() *GrantRequestUpdateOne {
	gruo.mutation.ClearTargetSuiteID()
	return gruo
}

// SetTargetSuiteName sets the "target_suite_name" field.
func (gruo *GrantRequestUpdateOne) SetTargetSuiteName(s string) *GrantRequestUpdateOne {
	gruo.mutation.SetTargetSuiteName(s)
	return gruo
}

// SetNillableTargetSuiteName sets the "target_suite_name" field if the given value is not nil.
func (gruo *GrantRequestUpdateOne) SetNillableTargetSuiteName(s *string) *GrantRequestUpdateOne {
	if s != nil {
		gruo.SetTargetSuiteName(*s)
	}
	return gruo
}

// SetStatus sets the "status" field.
func (gruo *GrantRequestUpdateOne) SetStatus(gr grantrequest.Status) *GrantRequestUpdateOne {
	gruo.mutation.SetStatus(gr)
	return gruo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (gruo *GrantRequestUpdateOne) SetNillableStatus(gr *grantrequest.Status) *GrantRequestUpdateOne {
	if gr != nil {
		gruo.SetStatus(*gr)
	}
	return gruo
}

// AddPermissionHistoryIDs adds the "permission_histories" edge to the PermissionHistory entity by IDs.
func (gruo *GrantRequestUpdateOne) AddPermissionHistoryIDs(ids ...string) *GrantRequestUpdateOne {
	gruo.mutation.AddPermissionHistoryIDs(ids...)
	return gruo
}

// AddPermissionHistories adds the "permission_histories" edges to the PermissionHistory entity.
func (gruo *GrantRequestUpdateOne) AddPermissionHistories(p ...*PermissionHistory) *GrantRequestUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return gruo.AddPermissionHistoryIDs(ids...)
}

// SetRoleID sets the "role" edge to the Role entity by ID.
func (gruo *GrantRequestUpdateOne) SetRoleID(id string) *GrantRequestUpdateOne {
	gruo.mutation.SetRoleID(id)
	return gruo
}

// SetNillableRoleID sets the "role" edge to the Role entity by ID if the given value is not nil.
func (gruo *GrantRequestUpdateOne) SetNillableRoleID(id *string) *GrantRequestUpdateOne {
	if id != nil {
		gruo = gruo.SetRoleID(*id)
	}
	return gruo
}

// SetRole sets the "role" edge to the Role entity.
func (gruo *GrantRequestUpdateOne) SetRole(r *Role) *GrantRequestUpdateOne {
	return gruo.SetRoleID(r.ID)
}

// SetRoleSuiteID sets the "role_suite" edge to the RoleSuite entity by ID.
func (gruo *GrantRequestUpdateOne) SetRoleSuiteID(id string) *GrantRequestUpdateOne {
	gruo.mutation.SetRoleSuiteID(id)
	return gruo
}

// SetNillableRoleSuiteID sets the "role_suite" edge to the RoleSuite entity by ID if the given value is not nil.
func (gruo *GrantRequestUpdateOne) SetNillableRoleSuiteID(id *string) *GrantRequestUpdateOne {
	if id != nil {
		gruo = gruo.SetRoleSuiteID(*id)
	}
	return gruo
}

// SetRoleSuite sets the "role_suite" edge to the RoleSuite entity.
func (gruo *GrantRequestUpdateOne) SetRoleSuite(r *RoleSuite) *GrantRequestUpdateOne {
	return gruo.SetRoleSuiteID(r.ID)
}

// Mutation returns the GrantRequestMutation object of the builder.
func (gruo *GrantRequestUpdateOne) Mutation() *GrantRequestMutation {
	return gruo.mutation
}

// ClearPermissionHistories clears all "permission_histories" edges to the PermissionHistory entity.
func (gruo *GrantRequestUpdateOne) ClearPermissionHistories() *GrantRequestUpdateOne {
	gruo.mutation.ClearPermissionHistories()
	return gruo
}

// RemovePermissionHistoryIDs removes the "permission_histories" edge to PermissionHistory entities by IDs.
func (gruo *GrantRequestUpdateOne) RemovePermissionHistoryIDs(ids ...string) *GrantRequestUpdateOne {
	gruo.mutation.RemovePermissionHistoryIDs(ids...)
	return gruo
}

// RemovePermissionHistories removes "permission_histories" edges to PermissionHistory entities.
func (gruo *GrantRequestUpdateOne) RemovePermissionHistories(p ...*PermissionHistory) *GrantRequestUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return gruo.RemovePermissionHistoryIDs(ids...)
}

// ClearRole clears the "role" edge to the Role entity.
func (gruo *GrantRequestUpdateOne) ClearRole() *GrantRequestUpdateOne {
	gruo.mutation.ClearRole()
	return gruo
}

// ClearRoleSuite clears the "role_suite" edge to the RoleSuite entity.
func (gruo *GrantRequestUpdateOne) ClearRoleSuite() *GrantRequestUpdateOne {
	gruo.mutation.ClearRoleSuite()
	return gruo
}

// Where appends a list predicates to the GrantRequestUpdate builder.
func (gruo *GrantRequestUpdateOne) Where(ps ...predicate.GrantRequest) *GrantRequestUpdateOne {
	gruo.mutation.Where(ps...)
	return gruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gruo *GrantRequestUpdateOne) Select(field string, fields ...string) *GrantRequestUpdateOne {
	gruo.fields = append([]string{field}, fields...)
	return gruo
}

// Save executes the query and returns the updated GrantRequest entity.
func (gruo *GrantRequestUpdateOne) Save(ctx context.Context) (*GrantRequest, error) {
	return withHooks(ctx, gruo.sqlSave, gruo.mutation, gruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gruo *GrantRequestUpdateOne) SaveX(ctx context.Context) *GrantRequest {
	node, err := gruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gruo *GrantRequestUpdateOne) Exec(ctx context.Context) error {
	_, err := gruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gruo *GrantRequestUpdateOne) ExecX(ctx context.Context) {
	if err := gruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gruo *GrantRequestUpdateOne) check() error {
	if v, ok := gruo.mutation.Status(); ok {
		if err := grantrequest.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "GrantRequest.status": %w`, err)}
		}
	}
	return nil
}

func (gruo *GrantRequestUpdateOne) sqlSave(ctx context.Context) (_node *GrantRequest, err error) {
	if err := gruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(grantrequest.Table, grantrequest.Columns, sqlgraph.NewFieldSpec(grantrequest.FieldID, field.TypeString))
	id, ok := gruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GrantRequest.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, grantrequest.FieldID)
		for _, f := range fields {
			if !grantrequest.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != grantrequest.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if gruo.mutation.AttachmentURLCleared() {
		_spec.ClearField(grantrequest.FieldAttachmentURL, field.TypeString)
	}
	if gruo.mutation.CommentCleared() {
		_spec.ClearField(grantrequest.FieldComment, field.TypeString)
	}
	if value, ok := gruo.mutation.Etag(); ok {
		_spec.SetField(grantrequest.FieldEtag, field.TypeString, value)
	}
	if value, ok := gruo.mutation.TargetRoleName(); ok {
		_spec.SetField(grantrequest.FieldTargetRoleName, field.TypeString, value)
	}
	if value, ok := gruo.mutation.TargetSuiteName(); ok {
		_spec.SetField(grantrequest.FieldTargetSuiteName, field.TypeString, value)
	}
	if value, ok := gruo.mutation.Status(); ok {
		_spec.SetField(grantrequest.FieldStatus, field.TypeEnum, value)
	}
	if gruo.mutation.PermissionHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   grantrequest.PermissionHistoriesTable,
			Columns: []string{grantrequest.PermissionHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permissionhistory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gruo.mutation.RemovedPermissionHistoriesIDs(); len(nodes) > 0 && !gruo.mutation.PermissionHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   grantrequest.PermissionHistoriesTable,
			Columns: []string{grantrequest.PermissionHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permissionhistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gruo.mutation.PermissionHistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   grantrequest.PermissionHistoriesTable,
			Columns: []string{grantrequest.PermissionHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permissionhistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gruo.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   grantrequest.RoleTable,
			Columns: []string{grantrequest.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gruo.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   grantrequest.RoleTable,
			Columns: []string{grantrequest.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gruo.mutation.RoleSuiteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   grantrequest.RoleSuiteTable,
			Columns: []string{grantrequest.RoleSuiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolesuite.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gruo.mutation.RoleSuiteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   grantrequest.RoleSuiteTable,
			Columns: []string{grantrequest.RoleSuiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolesuite.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &GrantRequest{config: gruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{grantrequest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	gruo.mutation.done = true
	return _node, nil
}
