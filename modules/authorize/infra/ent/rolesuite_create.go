// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/grantrequest"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/permissionhistory"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/revokerequest"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/role"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/rolesuite"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/rolesuiteuser"
)

// RoleSuiteCreate is the builder for creating a RoleSuite entity.
type RoleSuiteCreate struct {
	config
	mutation *RoleSuiteMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (rsc *RoleSuiteCreate) SetCreatedAt(t time.Time) *RoleSuiteCreate {
	rsc.mutation.SetCreatedAt(t)
	return rsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rsc *RoleSuiteCreate) SetNillableCreatedAt(t *time.Time) *RoleSuiteCreate {
	if t != nil {
		rsc.SetCreatedAt(*t)
	}
	return rsc
}

// SetCreatedBy sets the "created_by" field.
func (rsc *RoleSuiteCreate) SetCreatedBy(s string) *RoleSuiteCreate {
	rsc.mutation.SetCreatedBy(s)
	return rsc
}

// SetName sets the "name" field.
func (rsc *RoleSuiteCreate) SetName(s string) *RoleSuiteCreate {
	rsc.mutation.SetName(s)
	return rsc
}

// SetDescription sets the "description" field.
func (rsc *RoleSuiteCreate) SetDescription(s string) *RoleSuiteCreate {
	rsc.mutation.SetDescription(s)
	return rsc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (rsc *RoleSuiteCreate) SetNillableDescription(s *string) *RoleSuiteCreate {
	if s != nil {
		rsc.SetDescription(*s)
	}
	return rsc
}

// SetEtag sets the "etag" field.
func (rsc *RoleSuiteCreate) SetEtag(s string) *RoleSuiteCreate {
	rsc.mutation.SetEtag(s)
	return rsc
}

// SetOwnerType sets the "owner_type" field.
func (rsc *RoleSuiteCreate) SetOwnerType(rt rolesuite.OwnerType) *RoleSuiteCreate {
	rsc.mutation.SetOwnerType(rt)
	return rsc
}

// SetOwnerRef sets the "owner_ref" field.
func (rsc *RoleSuiteCreate) SetOwnerRef(s string) *RoleSuiteCreate {
	rsc.mutation.SetOwnerRef(s)
	return rsc
}

// SetIsRequestable sets the "is_requestable" field.
func (rsc *RoleSuiteCreate) SetIsRequestable(b bool) *RoleSuiteCreate {
	rsc.mutation.SetIsRequestable(b)
	return rsc
}

// SetIsRequiredAttachment sets the "is_required_attachment" field.
func (rsc *RoleSuiteCreate) SetIsRequiredAttachment(b bool) *RoleSuiteCreate {
	rsc.mutation.SetIsRequiredAttachment(b)
	return rsc
}

// SetIsRequiredComment sets the "is_required_comment" field.
func (rsc *RoleSuiteCreate) SetIsRequiredComment(b bool) *RoleSuiteCreate {
	rsc.mutation.SetIsRequiredComment(b)
	return rsc
}

// SetID sets the "id" field.
func (rsc *RoleSuiteCreate) SetID(s string) *RoleSuiteCreate {
	rsc.mutation.SetID(s)
	return rsc
}

// AddRolesuiteUserIDs adds the "rolesuite_users" edge to the RoleSuiteUser entity by IDs.
func (rsc *RoleSuiteCreate) AddRolesuiteUserIDs(ids ...int) *RoleSuiteCreate {
	rsc.mutation.AddRolesuiteUserIDs(ids...)
	return rsc
}

// AddRolesuiteUsers adds the "rolesuite_users" edges to the RoleSuiteUser entity.
func (rsc *RoleSuiteCreate) AddRolesuiteUsers(r ...*RoleSuiteUser) *RoleSuiteCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rsc.AddRolesuiteUserIDs(ids...)
}

// AddPermissionHistoryIDs adds the "permission_histories" edge to the PermissionHistory entity by IDs.
func (rsc *RoleSuiteCreate) AddPermissionHistoryIDs(ids ...string) *RoleSuiteCreate {
	rsc.mutation.AddPermissionHistoryIDs(ids...)
	return rsc
}

// AddPermissionHistories adds the "permission_histories" edges to the PermissionHistory entity.
func (rsc *RoleSuiteCreate) AddPermissionHistories(p ...*PermissionHistory) *RoleSuiteCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rsc.AddPermissionHistoryIDs(ids...)
}

// AddGrantRequestIDs adds the "grant_requests" edge to the GrantRequest entity by IDs.
func (rsc *RoleSuiteCreate) AddGrantRequestIDs(ids ...string) *RoleSuiteCreate {
	rsc.mutation.AddGrantRequestIDs(ids...)
	return rsc
}

// AddGrantRequests adds the "grant_requests" edges to the GrantRequest entity.
func (rsc *RoleSuiteCreate) AddGrantRequests(g ...*GrantRequest) *RoleSuiteCreate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return rsc.AddGrantRequestIDs(ids...)
}

// AddRevokeRequestIDs adds the "revoke_requests" edge to the RevokeRequest entity by IDs.
func (rsc *RoleSuiteCreate) AddRevokeRequestIDs(ids ...string) *RoleSuiteCreate {
	rsc.mutation.AddRevokeRequestIDs(ids...)
	return rsc
}

// AddRevokeRequests adds the "revoke_requests" edges to the RevokeRequest entity.
func (rsc *RoleSuiteCreate) AddRevokeRequests(r ...*RevokeRequest) *RoleSuiteCreate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rsc.AddRevokeRequestIDs(ids...)
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (rsc *RoleSuiteCreate) AddRoleIDs(ids ...string) *RoleSuiteCreate {
	rsc.mutation.AddRoleIDs(ids...)
	return rsc
}

// AddRoles adds the "roles" edges to the Role entity.
func (rsc *RoleSuiteCreate) AddRoles(r ...*Role) *RoleSuiteCreate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rsc.AddRoleIDs(ids...)
}

// Mutation returns the RoleSuiteMutation object of the builder.
func (rsc *RoleSuiteCreate) Mutation() *RoleSuiteMutation {
	return rsc.mutation
}

// Save creates the RoleSuite in the database.
func (rsc *RoleSuiteCreate) Save(ctx context.Context) (*RoleSuite, error) {
	rsc.defaults()
	return withHooks(ctx, rsc.sqlSave, rsc.mutation, rsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rsc *RoleSuiteCreate) SaveX(ctx context.Context) *RoleSuite {
	v, err := rsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rsc *RoleSuiteCreate) Exec(ctx context.Context) error {
	_, err := rsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rsc *RoleSuiteCreate) ExecX(ctx context.Context) {
	if err := rsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rsc *RoleSuiteCreate) defaults() {
	if _, ok := rsc.mutation.CreatedAt(); !ok {
		v := rolesuite.DefaultCreatedAt()
		rsc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rsc *RoleSuiteCreate) check() error {
	if _, ok := rsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "RoleSuite.created_at"`)}
	}
	if _, ok := rsc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "RoleSuite.created_by"`)}
	}
	if _, ok := rsc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "RoleSuite.name"`)}
	}
	if _, ok := rsc.mutation.Etag(); !ok {
		return &ValidationError{Name: "etag", err: errors.New(`ent: missing required field "RoleSuite.etag"`)}
	}
	if _, ok := rsc.mutation.OwnerType(); !ok {
		return &ValidationError{Name: "owner_type", err: errors.New(`ent: missing required field "RoleSuite.owner_type"`)}
	}
	if v, ok := rsc.mutation.OwnerType(); ok {
		if err := rolesuite.OwnerTypeValidator(v); err != nil {
			return &ValidationError{Name: "owner_type", err: fmt.Errorf(`ent: validator failed for field "RoleSuite.owner_type": %w`, err)}
		}
	}
	if _, ok := rsc.mutation.OwnerRef(); !ok {
		return &ValidationError{Name: "owner_ref", err: errors.New(`ent: missing required field "RoleSuite.owner_ref"`)}
	}
	if _, ok := rsc.mutation.IsRequestable(); !ok {
		return &ValidationError{Name: "is_requestable", err: errors.New(`ent: missing required field "RoleSuite.is_requestable"`)}
	}
	if _, ok := rsc.mutation.IsRequiredAttachment(); !ok {
		return &ValidationError{Name: "is_required_attachment", err: errors.New(`ent: missing required field "RoleSuite.is_required_attachment"`)}
	}
	if _, ok := rsc.mutation.IsRequiredComment(); !ok {
		return &ValidationError{Name: "is_required_comment", err: errors.New(`ent: missing required field "RoleSuite.is_required_comment"`)}
	}
	return nil
}

func (rsc *RoleSuiteCreate) sqlSave(ctx context.Context) (*RoleSuite, error) {
	if err := rsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected RoleSuite.ID type: %T", _spec.ID.Value)
		}
	}
	rsc.mutation.id = &_node.ID
	rsc.mutation.done = true
	return _node, nil
}

func (rsc *RoleSuiteCreate) createSpec() (*RoleSuite, *sqlgraph.CreateSpec) {
	var (
		_node = &RoleSuite{config: rsc.config}
		_spec = sqlgraph.NewCreateSpec(rolesuite.Table, sqlgraph.NewFieldSpec(rolesuite.FieldID, field.TypeString))
	)
	if id, ok := rsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rsc.mutation.CreatedAt(); ok {
		_spec.SetField(rolesuite.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rsc.mutation.CreatedBy(); ok {
		_spec.SetField(rolesuite.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := rsc.mutation.Name(); ok {
		_spec.SetField(rolesuite.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := rsc.mutation.Description(); ok {
		_spec.SetField(rolesuite.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := rsc.mutation.Etag(); ok {
		_spec.SetField(rolesuite.FieldEtag, field.TypeString, value)
		_node.Etag = value
	}
	if value, ok := rsc.mutation.OwnerType(); ok {
		_spec.SetField(rolesuite.FieldOwnerType, field.TypeEnum, value)
		_node.OwnerType = value
	}
	if value, ok := rsc.mutation.OwnerRef(); ok {
		_spec.SetField(rolesuite.FieldOwnerRef, field.TypeString, value)
		_node.OwnerRef = value
	}
	if value, ok := rsc.mutation.IsRequestable(); ok {
		_spec.SetField(rolesuite.FieldIsRequestable, field.TypeBool, value)
		_node.IsRequestable = value
	}
	if value, ok := rsc.mutation.IsRequiredAttachment(); ok {
		_spec.SetField(rolesuite.FieldIsRequiredAttachment, field.TypeBool, value)
		_node.IsRequiredAttachment = value
	}
	if value, ok := rsc.mutation.IsRequiredComment(); ok {
		_spec.SetField(rolesuite.FieldIsRequiredComment, field.TypeBool, value)
		_node.IsRequiredComment = value
	}
	if nodes := rsc.mutation.RolesuiteUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   rolesuite.RolesuiteUsersTable,
			Columns: []string{rolesuite.RolesuiteUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolesuiteuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rsc.mutation.PermissionHistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   rolesuite.PermissionHistoriesTable,
			Columns: []string{rolesuite.PermissionHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permissionhistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rsc.mutation.GrantRequestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   rolesuite.GrantRequestsTable,
			Columns: []string{rolesuite.GrantRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grantrequest.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rsc.mutation.RevokeRequestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   rolesuite.RevokeRequestsTable,
			Columns: []string{rolesuite.RevokeRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(revokerequest.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rsc.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   rolesuite.RolesTable,
			Columns: rolesuite.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RoleSuiteCreateBulk is the builder for creating many RoleSuite entities in bulk.
type RoleSuiteCreateBulk struct {
	config
	err      error
	builders []*RoleSuiteCreate
}

// Save creates the RoleSuite entities in the database.
func (rscb *RoleSuiteCreateBulk) Save(ctx context.Context) ([]*RoleSuite, error) {
	if rscb.err != nil {
		return nil, rscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rscb.builders))
	nodes := make([]*RoleSuite, len(rscb.builders))
	mutators := make([]Mutator, len(rscb.builders))
	for i := range rscb.builders {
		func(i int, root context.Context) {
			builder := rscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RoleSuiteMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rscb *RoleSuiteCreateBulk) SaveX(ctx context.Context) []*RoleSuite {
	v, err := rscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rscb *RoleSuiteCreateBulk) Exec(ctx context.Context) error {
	_, err := rscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rscb *RoleSuiteCreateBulk) ExecX(ctx context.Context) {
	if err := rscb.Exec(ctx); err != nil {
		panic(err)
	}
}
