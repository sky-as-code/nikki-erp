// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/entitlement"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/entitlementassignment"
)

// EntitlementAssignment is the model entity for the EntitlementAssignment schema.
type EntitlementAssignment struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// EntitlementID holds the value of the "entitlement_id" field.
	EntitlementID string `json:"entitlement_id,omitempty"`
	// SubjectType holds the value of the "subject_type" field.
	SubjectType entitlementassignment.SubjectType `json:"subject_type,omitempty"`
	// SubjectRef holds the value of the "subject_ref" field.
	SubjectRef string `json:"subject_ref,omitempty"`
	// Format: '{subjectRef}:{actionName}:{scopeRef}.{resourceName}' E.g: '01JWNXT3EY7FG47VDJTEPTDC98:create:01JWNZ5KW6WC643VXGKV1D0J64.user'
	ResolvedExpr string `json:"resolved_expr,omitempty"`
	// Denormalized action name for easier search and display
	ActionName *string `json:"action_name,omitempty"`
	// Denormalized resource name for easier search and display
	ResourceName *string `json:"resource_name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EntitlementAssignmentQuery when eager-loading is set.
	Edges        EntitlementAssignmentEdges `json:"edges"`
	selectValues sql.SelectValues
}

// EntitlementAssignmentEdges holds the relations/edges for other nodes in the graph.
type EntitlementAssignmentEdges struct {
	// Entitlement holds the value of the entitlement edge.
	Entitlement *Entitlement `json:"entitlement,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EntitlementOrErr returns the Entitlement value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EntitlementAssignmentEdges) EntitlementOrErr() (*Entitlement, error) {
	if e.Entitlement != nil {
		return e.Entitlement, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: entitlement.Label}
	}
	return nil, &NotLoadedError{edge: "entitlement"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EntitlementAssignment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case entitlementassignment.FieldID, entitlementassignment.FieldEntitlementID, entitlementassignment.FieldSubjectType, entitlementassignment.FieldSubjectRef, entitlementassignment.FieldResolvedExpr, entitlementassignment.FieldActionName, entitlementassignment.FieldResourceName:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EntitlementAssignment fields.
func (ea *EntitlementAssignment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case entitlementassignment.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ea.ID = value.String
			}
		case entitlementassignment.FieldEntitlementID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field entitlement_id", values[i])
			} else if value.Valid {
				ea.EntitlementID = value.String
			}
		case entitlementassignment.FieldSubjectType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subject_type", values[i])
			} else if value.Valid {
				ea.SubjectType = entitlementassignment.SubjectType(value.String)
			}
		case entitlementassignment.FieldSubjectRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subject_ref", values[i])
			} else if value.Valid {
				ea.SubjectRef = value.String
			}
		case entitlementassignment.FieldResolvedExpr:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resolved_expr", values[i])
			} else if value.Valid {
				ea.ResolvedExpr = value.String
			}
		case entitlementassignment.FieldActionName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field action_name", values[i])
			} else if value.Valid {
				ea.ActionName = new(string)
				*ea.ActionName = value.String
			}
		case entitlementassignment.FieldResourceName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource_name", values[i])
			} else if value.Valid {
				ea.ResourceName = new(string)
				*ea.ResourceName = value.String
			}
		default:
			ea.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EntitlementAssignment.
// This includes values selected through modifiers, order, etc.
func (ea *EntitlementAssignment) Value(name string) (ent.Value, error) {
	return ea.selectValues.Get(name)
}

// QueryEntitlement queries the "entitlement" edge of the EntitlementAssignment entity.
func (ea *EntitlementAssignment) QueryEntitlement() *EntitlementQuery {
	return NewEntitlementAssignmentClient(ea.config).QueryEntitlement(ea)
}

// Update returns a builder for updating this EntitlementAssignment.
// Note that you need to call EntitlementAssignment.Unwrap() before calling this method if this EntitlementAssignment
// was returned from a transaction, and the transaction was committed or rolled back.
func (ea *EntitlementAssignment) Update() *EntitlementAssignmentUpdateOne {
	return NewEntitlementAssignmentClient(ea.config).UpdateOne(ea)
}

// Unwrap unwraps the EntitlementAssignment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ea *EntitlementAssignment) Unwrap() *EntitlementAssignment {
	_tx, ok := ea.config.driver.(*txDriver)
	if !ok {
		panic("ent: EntitlementAssignment is not a transactional entity")
	}
	ea.config.driver = _tx.drv
	return ea
}

// String implements the fmt.Stringer.
func (ea *EntitlementAssignment) String() string {
	var builder strings.Builder
	builder.WriteString("EntitlementAssignment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ea.ID))
	builder.WriteString("entitlement_id=")
	builder.WriteString(ea.EntitlementID)
	builder.WriteString(", ")
	builder.WriteString("subject_type=")
	builder.WriteString(fmt.Sprintf("%v", ea.SubjectType))
	builder.WriteString(", ")
	builder.WriteString("subject_ref=")
	builder.WriteString(ea.SubjectRef)
	builder.WriteString(", ")
	builder.WriteString("resolved_expr=")
	builder.WriteString(ea.ResolvedExpr)
	builder.WriteString(", ")
	if v := ea.ActionName; v != nil {
		builder.WriteString("action_name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := ea.ResourceName; v != nil {
		builder.WriteString("resource_name=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// EntitlementAssignments is a parsable slice of EntitlementAssignment.
type EntitlementAssignments []*EntitlementAssignment
