// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/entitlement"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/entitlementassignment"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/permissionhistory"
)

// EntitlementAssignmentCreate is the builder for creating a EntitlementAssignment entity.
type EntitlementAssignmentCreate struct {
	config
	mutation *EntitlementAssignmentMutation
	hooks    []Hook
}

// SetEntitlementID sets the "entitlement_id" field.
func (eac *EntitlementAssignmentCreate) SetEntitlementID(s string) *EntitlementAssignmentCreate {
	eac.mutation.SetEntitlementID(s)
	return eac
}

// SetSubjectType sets the "subject_type" field.
func (eac *EntitlementAssignmentCreate) SetSubjectType(et entitlementassignment.SubjectType) *EntitlementAssignmentCreate {
	eac.mutation.SetSubjectType(et)
	return eac
}

// SetSubjectRef sets the "subject_ref" field.
func (eac *EntitlementAssignmentCreate) SetSubjectRef(s string) *EntitlementAssignmentCreate {
	eac.mutation.SetSubjectRef(s)
	return eac
}

// SetResolvedExpr sets the "resolved_expr" field.
func (eac *EntitlementAssignmentCreate) SetResolvedExpr(s string) *EntitlementAssignmentCreate {
	eac.mutation.SetResolvedExpr(s)
	return eac
}

// SetActionName sets the "action_name" field.
func (eac *EntitlementAssignmentCreate) SetActionName(s string) *EntitlementAssignmentCreate {
	eac.mutation.SetActionName(s)
	return eac
}

// SetNillableActionName sets the "action_name" field if the given value is not nil.
func (eac *EntitlementAssignmentCreate) SetNillableActionName(s *string) *EntitlementAssignmentCreate {
	if s != nil {
		eac.SetActionName(*s)
	}
	return eac
}

// SetResourceName sets the "resource_name" field.
func (eac *EntitlementAssignmentCreate) SetResourceName(s string) *EntitlementAssignmentCreate {
	eac.mutation.SetResourceName(s)
	return eac
}

// SetNillableResourceName sets the "resource_name" field if the given value is not nil.
func (eac *EntitlementAssignmentCreate) SetNillableResourceName(s *string) *EntitlementAssignmentCreate {
	if s != nil {
		eac.SetResourceName(*s)
	}
	return eac
}

// SetOrgID sets the "org_id" field.
func (eac *EntitlementAssignmentCreate) SetOrgID(s string) *EntitlementAssignmentCreate {
	eac.mutation.SetOrgID(s)
	return eac
}

// SetNillableOrgID sets the "org_id" field if the given value is not nil.
func (eac *EntitlementAssignmentCreate) SetNillableOrgID(s *string) *EntitlementAssignmentCreate {
	if s != nil {
		eac.SetOrgID(*s)
	}
	return eac
}

// SetID sets the "id" field.
func (eac *EntitlementAssignmentCreate) SetID(s string) *EntitlementAssignmentCreate {
	eac.mutation.SetID(s)
	return eac
}

// SetEntitlement sets the "entitlement" edge to the Entitlement entity.
func (eac *EntitlementAssignmentCreate) SetEntitlement(e *Entitlement) *EntitlementAssignmentCreate {
	return eac.SetEntitlementID(e.ID)
}

// AddPermissionHistoryIDs adds the "permission_histories" edge to the PermissionHistory entity by IDs.
func (eac *EntitlementAssignmentCreate) AddPermissionHistoryIDs(ids ...string) *EntitlementAssignmentCreate {
	eac.mutation.AddPermissionHistoryIDs(ids...)
	return eac
}

// AddPermissionHistories adds the "permission_histories" edges to the PermissionHistory entity.
func (eac *EntitlementAssignmentCreate) AddPermissionHistories(p ...*PermissionHistory) *EntitlementAssignmentCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eac.AddPermissionHistoryIDs(ids...)
}

// Mutation returns the EntitlementAssignmentMutation object of the builder.
func (eac *EntitlementAssignmentCreate) Mutation() *EntitlementAssignmentMutation {
	return eac.mutation
}

// Save creates the EntitlementAssignment in the database.
func (eac *EntitlementAssignmentCreate) Save(ctx context.Context) (*EntitlementAssignment, error) {
	return withHooks(ctx, eac.sqlSave, eac.mutation, eac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (eac *EntitlementAssignmentCreate) SaveX(ctx context.Context) *EntitlementAssignment {
	v, err := eac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eac *EntitlementAssignmentCreate) Exec(ctx context.Context) error {
	_, err := eac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eac *EntitlementAssignmentCreate) ExecX(ctx context.Context) {
	if err := eac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eac *EntitlementAssignmentCreate) check() error {
	if _, ok := eac.mutation.EntitlementID(); !ok {
		return &ValidationError{Name: "entitlement_id", err: errors.New(`ent: missing required field "EntitlementAssignment.entitlement_id"`)}
	}
	if _, ok := eac.mutation.SubjectType(); !ok {
		return &ValidationError{Name: "subject_type", err: errors.New(`ent: missing required field "EntitlementAssignment.subject_type"`)}
	}
	if v, ok := eac.mutation.SubjectType(); ok {
		if err := entitlementassignment.SubjectTypeValidator(v); err != nil {
			return &ValidationError{Name: "subject_type", err: fmt.Errorf(`ent: validator failed for field "EntitlementAssignment.subject_type": %w`, err)}
		}
	}
	if _, ok := eac.mutation.SubjectRef(); !ok {
		return &ValidationError{Name: "subject_ref", err: errors.New(`ent: missing required field "EntitlementAssignment.subject_ref"`)}
	}
	if _, ok := eac.mutation.ResolvedExpr(); !ok {
		return &ValidationError{Name: "resolved_expr", err: errors.New(`ent: missing required field "EntitlementAssignment.resolved_expr"`)}
	}
	if len(eac.mutation.EntitlementIDs()) == 0 {
		return &ValidationError{Name: "entitlement", err: errors.New(`ent: missing required edge "EntitlementAssignment.entitlement"`)}
	}
	return nil
}

func (eac *EntitlementAssignmentCreate) sqlSave(ctx context.Context) (*EntitlementAssignment, error) {
	if err := eac.check(); err != nil {
		return nil, err
	}
	_node, _spec := eac.createSpec()
	if err := sqlgraph.CreateNode(ctx, eac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected EntitlementAssignment.ID type: %T", _spec.ID.Value)
		}
	}
	eac.mutation.id = &_node.ID
	eac.mutation.done = true
	return _node, nil
}

func (eac *EntitlementAssignmentCreate) createSpec() (*EntitlementAssignment, *sqlgraph.CreateSpec) {
	var (
		_node = &EntitlementAssignment{config: eac.config}
		_spec = sqlgraph.NewCreateSpec(entitlementassignment.Table, sqlgraph.NewFieldSpec(entitlementassignment.FieldID, field.TypeString))
	)
	if id, ok := eac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := eac.mutation.SubjectType(); ok {
		_spec.SetField(entitlementassignment.FieldSubjectType, field.TypeEnum, value)
		_node.SubjectType = value
	}
	if value, ok := eac.mutation.SubjectRef(); ok {
		_spec.SetField(entitlementassignment.FieldSubjectRef, field.TypeString, value)
		_node.SubjectRef = value
	}
	if value, ok := eac.mutation.ResolvedExpr(); ok {
		_spec.SetField(entitlementassignment.FieldResolvedExpr, field.TypeString, value)
		_node.ResolvedExpr = value
	}
	if value, ok := eac.mutation.ActionName(); ok {
		_spec.SetField(entitlementassignment.FieldActionName, field.TypeString, value)
		_node.ActionName = &value
	}
	if value, ok := eac.mutation.ResourceName(); ok {
		_spec.SetField(entitlementassignment.FieldResourceName, field.TypeString, value)
		_node.ResourceName = &value
	}
	if value, ok := eac.mutation.OrgID(); ok {
		_spec.SetField(entitlementassignment.FieldOrgID, field.TypeString, value)
		_node.OrgID = &value
	}
	if nodes := eac.mutation.EntitlementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   entitlementassignment.EntitlementTable,
			Columns: []string{entitlementassignment.EntitlementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlement.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EntitlementID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := eac.mutation.PermissionHistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   entitlementassignment.PermissionHistoriesTable,
			Columns: []string{entitlementassignment.PermissionHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permissionhistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EntitlementAssignmentCreateBulk is the builder for creating many EntitlementAssignment entities in bulk.
type EntitlementAssignmentCreateBulk struct {
	config
	err      error
	builders []*EntitlementAssignmentCreate
}

// Save creates the EntitlementAssignment entities in the database.
func (eacb *EntitlementAssignmentCreateBulk) Save(ctx context.Context) ([]*EntitlementAssignment, error) {
	if eacb.err != nil {
		return nil, eacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(eacb.builders))
	nodes := make([]*EntitlementAssignment, len(eacb.builders))
	mutators := make([]Mutator, len(eacb.builders))
	for i := range eacb.builders {
		func(i int, root context.Context) {
			builder := eacb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EntitlementAssignmentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, eacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, eacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, eacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (eacb *EntitlementAssignmentCreateBulk) SaveX(ctx context.Context) []*EntitlementAssignment {
	v, err := eacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eacb *EntitlementAssignmentCreateBulk) Exec(ctx context.Context) error {
	_, err := eacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eacb *EntitlementAssignmentCreateBulk) ExecX(ctx context.Context) {
	if err := eacb.Exec(ctx); err != nil {
		panic(err)
	}
}
