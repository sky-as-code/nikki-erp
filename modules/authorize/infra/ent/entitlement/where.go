// Code generated by ent, DO NOT EDIT.

package entitlement

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldContainsFold(FieldID, id))
}

// ActionID applies equality check predicate on the "action_id" field. It's identical to ActionIDEQ.
func ActionID(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldActionID, v))
}

// ActionExpr applies equality check predicate on the "action_expr" field. It's identical to ActionExprEQ.
func ActionExpr(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldActionExpr, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldCreatedBy, v))
}

// ResourceID applies equality check predicate on the "resource_id" field. It's identical to ResourceIDEQ.
func ResourceID(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldResourceID, v))
}

// SubjectRef applies equality check predicate on the "subject_ref" field. It's identical to SubjectRefEQ.
func SubjectRef(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldSubjectRef, v))
}

// ScopeRef applies equality check predicate on the "scope_ref" field. It's identical to ScopeRefEQ.
func ScopeRef(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldScopeRef, v))
}

// ActionIDEQ applies the EQ predicate on the "action_id" field.
func ActionIDEQ(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldActionID, v))
}

// ActionIDNEQ applies the NEQ predicate on the "action_id" field.
func ActionIDNEQ(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNEQ(FieldActionID, v))
}

// ActionIDIn applies the In predicate on the "action_id" field.
func ActionIDIn(vs ...string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldIn(FieldActionID, vs...))
}

// ActionIDNotIn applies the NotIn predicate on the "action_id" field.
func ActionIDNotIn(vs ...string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNotIn(FieldActionID, vs...))
}

// ActionIDGT applies the GT predicate on the "action_id" field.
func ActionIDGT(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldGT(FieldActionID, v))
}

// ActionIDGTE applies the GTE predicate on the "action_id" field.
func ActionIDGTE(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldGTE(FieldActionID, v))
}

// ActionIDLT applies the LT predicate on the "action_id" field.
func ActionIDLT(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldLT(FieldActionID, v))
}

// ActionIDLTE applies the LTE predicate on the "action_id" field.
func ActionIDLTE(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldLTE(FieldActionID, v))
}

// ActionIDContains applies the Contains predicate on the "action_id" field.
func ActionIDContains(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldContains(FieldActionID, v))
}

// ActionIDHasPrefix applies the HasPrefix predicate on the "action_id" field.
func ActionIDHasPrefix(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldHasPrefix(FieldActionID, v))
}

// ActionIDHasSuffix applies the HasSuffix predicate on the "action_id" field.
func ActionIDHasSuffix(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldHasSuffix(FieldActionID, v))
}

// ActionIDIsNil applies the IsNil predicate on the "action_id" field.
func ActionIDIsNil() predicate.Entitlement {
	return predicate.Entitlement(sql.FieldIsNull(FieldActionID))
}

// ActionIDNotNil applies the NotNil predicate on the "action_id" field.
func ActionIDNotNil() predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNotNull(FieldActionID))
}

// ActionIDEqualFold applies the EqualFold predicate on the "action_id" field.
func ActionIDEqualFold(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEqualFold(FieldActionID, v))
}

// ActionIDContainsFold applies the ContainsFold predicate on the "action_id" field.
func ActionIDContainsFold(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldContainsFold(FieldActionID, v))
}

// ActionExprEQ applies the EQ predicate on the "action_expr" field.
func ActionExprEQ(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldActionExpr, v))
}

// ActionExprNEQ applies the NEQ predicate on the "action_expr" field.
func ActionExprNEQ(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNEQ(FieldActionExpr, v))
}

// ActionExprIn applies the In predicate on the "action_expr" field.
func ActionExprIn(vs ...string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldIn(FieldActionExpr, vs...))
}

// ActionExprNotIn applies the NotIn predicate on the "action_expr" field.
func ActionExprNotIn(vs ...string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNotIn(FieldActionExpr, vs...))
}

// ActionExprGT applies the GT predicate on the "action_expr" field.
func ActionExprGT(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldGT(FieldActionExpr, v))
}

// ActionExprGTE applies the GTE predicate on the "action_expr" field.
func ActionExprGTE(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldGTE(FieldActionExpr, v))
}

// ActionExprLT applies the LT predicate on the "action_expr" field.
func ActionExprLT(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldLT(FieldActionExpr, v))
}

// ActionExprLTE applies the LTE predicate on the "action_expr" field.
func ActionExprLTE(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldLTE(FieldActionExpr, v))
}

// ActionExprContains applies the Contains predicate on the "action_expr" field.
func ActionExprContains(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldContains(FieldActionExpr, v))
}

// ActionExprHasPrefix applies the HasPrefix predicate on the "action_expr" field.
func ActionExprHasPrefix(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldHasPrefix(FieldActionExpr, v))
}

// ActionExprHasSuffix applies the HasSuffix predicate on the "action_expr" field.
func ActionExprHasSuffix(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldHasSuffix(FieldActionExpr, v))
}

// ActionExprEqualFold applies the EqualFold predicate on the "action_expr" field.
func ActionExprEqualFold(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEqualFold(FieldActionExpr, v))
}

// ActionExprContainsFold applies the ContainsFold predicate on the "action_expr" field.
func ActionExprContainsFold(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldContainsFold(FieldActionExpr, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldContainsFold(FieldCreatedBy, v))
}

// ResourceIDEQ applies the EQ predicate on the "resource_id" field.
func ResourceIDEQ(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldResourceID, v))
}

// ResourceIDNEQ applies the NEQ predicate on the "resource_id" field.
func ResourceIDNEQ(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNEQ(FieldResourceID, v))
}

// ResourceIDIn applies the In predicate on the "resource_id" field.
func ResourceIDIn(vs ...string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldIn(FieldResourceID, vs...))
}

// ResourceIDNotIn applies the NotIn predicate on the "resource_id" field.
func ResourceIDNotIn(vs ...string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNotIn(FieldResourceID, vs...))
}

// ResourceIDGT applies the GT predicate on the "resource_id" field.
func ResourceIDGT(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldGT(FieldResourceID, v))
}

// ResourceIDGTE applies the GTE predicate on the "resource_id" field.
func ResourceIDGTE(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldGTE(FieldResourceID, v))
}

// ResourceIDLT applies the LT predicate on the "resource_id" field.
func ResourceIDLT(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldLT(FieldResourceID, v))
}

// ResourceIDLTE applies the LTE predicate on the "resource_id" field.
func ResourceIDLTE(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldLTE(FieldResourceID, v))
}

// ResourceIDContains applies the Contains predicate on the "resource_id" field.
func ResourceIDContains(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldContains(FieldResourceID, v))
}

// ResourceIDHasPrefix applies the HasPrefix predicate on the "resource_id" field.
func ResourceIDHasPrefix(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldHasPrefix(FieldResourceID, v))
}

// ResourceIDHasSuffix applies the HasSuffix predicate on the "resource_id" field.
func ResourceIDHasSuffix(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldHasSuffix(FieldResourceID, v))
}

// ResourceIDIsNil applies the IsNil predicate on the "resource_id" field.
func ResourceIDIsNil() predicate.Entitlement {
	return predicate.Entitlement(sql.FieldIsNull(FieldResourceID))
}

// ResourceIDNotNil applies the NotNil predicate on the "resource_id" field.
func ResourceIDNotNil() predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNotNull(FieldResourceID))
}

// ResourceIDEqualFold applies the EqualFold predicate on the "resource_id" field.
func ResourceIDEqualFold(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEqualFold(FieldResourceID, v))
}

// ResourceIDContainsFold applies the ContainsFold predicate on the "resource_id" field.
func ResourceIDContainsFold(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldContainsFold(FieldResourceID, v))
}

// SubjectTypeEQ applies the EQ predicate on the "subject_type" field.
func SubjectTypeEQ(v SubjectType) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldSubjectType, v))
}

// SubjectTypeNEQ applies the NEQ predicate on the "subject_type" field.
func SubjectTypeNEQ(v SubjectType) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNEQ(FieldSubjectType, v))
}

// SubjectTypeIn applies the In predicate on the "subject_type" field.
func SubjectTypeIn(vs ...SubjectType) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldIn(FieldSubjectType, vs...))
}

// SubjectTypeNotIn applies the NotIn predicate on the "subject_type" field.
func SubjectTypeNotIn(vs ...SubjectType) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNotIn(FieldSubjectType, vs...))
}

// SubjectRefEQ applies the EQ predicate on the "subject_ref" field.
func SubjectRefEQ(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldSubjectRef, v))
}

// SubjectRefNEQ applies the NEQ predicate on the "subject_ref" field.
func SubjectRefNEQ(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNEQ(FieldSubjectRef, v))
}

// SubjectRefIn applies the In predicate on the "subject_ref" field.
func SubjectRefIn(vs ...string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldIn(FieldSubjectRef, vs...))
}

// SubjectRefNotIn applies the NotIn predicate on the "subject_ref" field.
func SubjectRefNotIn(vs ...string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNotIn(FieldSubjectRef, vs...))
}

// SubjectRefGT applies the GT predicate on the "subject_ref" field.
func SubjectRefGT(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldGT(FieldSubjectRef, v))
}

// SubjectRefGTE applies the GTE predicate on the "subject_ref" field.
func SubjectRefGTE(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldGTE(FieldSubjectRef, v))
}

// SubjectRefLT applies the LT predicate on the "subject_ref" field.
func SubjectRefLT(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldLT(FieldSubjectRef, v))
}

// SubjectRefLTE applies the LTE predicate on the "subject_ref" field.
func SubjectRefLTE(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldLTE(FieldSubjectRef, v))
}

// SubjectRefContains applies the Contains predicate on the "subject_ref" field.
func SubjectRefContains(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldContains(FieldSubjectRef, v))
}

// SubjectRefHasPrefix applies the HasPrefix predicate on the "subject_ref" field.
func SubjectRefHasPrefix(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldHasPrefix(FieldSubjectRef, v))
}

// SubjectRefHasSuffix applies the HasSuffix predicate on the "subject_ref" field.
func SubjectRefHasSuffix(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldHasSuffix(FieldSubjectRef, v))
}

// SubjectRefEqualFold applies the EqualFold predicate on the "subject_ref" field.
func SubjectRefEqualFold(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEqualFold(FieldSubjectRef, v))
}

// SubjectRefContainsFold applies the ContainsFold predicate on the "subject_ref" field.
func SubjectRefContainsFold(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldContainsFold(FieldSubjectRef, v))
}

// ScopeRefEQ applies the EQ predicate on the "scope_ref" field.
func ScopeRefEQ(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldScopeRef, v))
}

// ScopeRefNEQ applies the NEQ predicate on the "scope_ref" field.
func ScopeRefNEQ(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNEQ(FieldScopeRef, v))
}

// ScopeRefIn applies the In predicate on the "scope_ref" field.
func ScopeRefIn(vs ...string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldIn(FieldScopeRef, vs...))
}

// ScopeRefNotIn applies the NotIn predicate on the "scope_ref" field.
func ScopeRefNotIn(vs ...string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNotIn(FieldScopeRef, vs...))
}

// ScopeRefGT applies the GT predicate on the "scope_ref" field.
func ScopeRefGT(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldGT(FieldScopeRef, v))
}

// ScopeRefGTE applies the GTE predicate on the "scope_ref" field.
func ScopeRefGTE(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldGTE(FieldScopeRef, v))
}

// ScopeRefLT applies the LT predicate on the "scope_ref" field.
func ScopeRefLT(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldLT(FieldScopeRef, v))
}

// ScopeRefLTE applies the LTE predicate on the "scope_ref" field.
func ScopeRefLTE(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldLTE(FieldScopeRef, v))
}

// ScopeRefContains applies the Contains predicate on the "scope_ref" field.
func ScopeRefContains(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldContains(FieldScopeRef, v))
}

// ScopeRefHasPrefix applies the HasPrefix predicate on the "scope_ref" field.
func ScopeRefHasPrefix(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldHasPrefix(FieldScopeRef, v))
}

// ScopeRefHasSuffix applies the HasSuffix predicate on the "scope_ref" field.
func ScopeRefHasSuffix(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldHasSuffix(FieldScopeRef, v))
}

// ScopeRefIsNil applies the IsNil predicate on the "scope_ref" field.
func ScopeRefIsNil() predicate.Entitlement {
	return predicate.Entitlement(sql.FieldIsNull(FieldScopeRef))
}

// ScopeRefNotNil applies the NotNil predicate on the "scope_ref" field.
func ScopeRefNotNil() predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNotNull(FieldScopeRef))
}

// ScopeRefEqualFold applies the EqualFold predicate on the "scope_ref" field.
func ScopeRefEqualFold(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEqualFold(FieldScopeRef, v))
}

// ScopeRefContainsFold applies the ContainsFold predicate on the "scope_ref" field.
func ScopeRefContainsFold(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldContainsFold(FieldScopeRef, v))
}

// HasPermissionHistories applies the HasEdge predicate on the "permission_histories" edge.
func HasPermissionHistories() predicate.Entitlement {
	return predicate.Entitlement(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, PermissionHistoriesTable, PermissionHistoriesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPermissionHistoriesWith applies the HasEdge predicate on the "permission_histories" edge with a given conditions (other predicates).
func HasPermissionHistoriesWith(preds ...predicate.PermissionHistory) predicate.Entitlement {
	return predicate.Entitlement(func(s *sql.Selector) {
		step := newPermissionHistoriesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAction applies the HasEdge predicate on the "action" edge.
func HasAction() predicate.Entitlement {
	return predicate.Entitlement(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ActionTable, ActionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasActionWith applies the HasEdge predicate on the "action" edge with a given conditions (other predicates).
func HasActionWith(preds ...predicate.Action) predicate.Entitlement {
	return predicate.Entitlement(func(s *sql.Selector) {
		step := newActionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasResource applies the HasEdge predicate on the "resource" edge.
func HasResource() predicate.Entitlement {
	return predicate.Entitlement(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ResourceTable, ResourceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasResourceWith applies the HasEdge predicate on the "resource" edge with a given conditions (other predicates).
func HasResourceWith(preds ...predicate.Resource) predicate.Entitlement {
	return predicate.Entitlement(func(s *sql.Selector) {
		step := newResourceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Entitlement) predicate.Entitlement {
	return predicate.Entitlement(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Entitlement) predicate.Entitlement {
	return predicate.Entitlement(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Entitlement) predicate.Entitlement {
	return predicate.Entitlement(sql.NotPredicates(p))
}
