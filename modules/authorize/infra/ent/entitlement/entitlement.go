// Code generated by ent, DO NOT EDIT.

package entitlement

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the entitlement type in the database.
	Label = "entitlement"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldActionID holds the string denoting the action_id field in the database.
	FieldActionID = "action_id"
	// FieldActionExpr holds the string denoting the action_expr field in the database.
	FieldActionExpr = "action_expr"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldEtag holds the string denoting the etag field in the database.
	FieldEtag = "etag"
	// FieldResourceID holds the string denoting the resource_id field in the database.
	FieldResourceID = "resource_id"
	// FieldScopeRef holds the string denoting the scope_ref field in the database.
	FieldScopeRef = "scope_ref"
	// EdgePermissionHistories holds the string denoting the permission_histories edge name in mutations.
	EdgePermissionHistories = "permission_histories"
	// EdgeEntitlementAssignments holds the string denoting the entitlement_assignments edge name in mutations.
	EdgeEntitlementAssignments = "entitlement_assignments"
	// EdgeAction holds the string denoting the action edge name in mutations.
	EdgeAction = "action"
	// EdgeResource holds the string denoting the resource edge name in mutations.
	EdgeResource = "resource"
	// Table holds the table name of the entitlement in the database.
	Table = "authz_entitlements"
	// PermissionHistoriesTable is the table that holds the permission_histories relation/edge.
	PermissionHistoriesTable = "authz_permission_histories"
	// PermissionHistoriesInverseTable is the table name for the PermissionHistory entity.
	// It exists in this package in order to avoid circular dependency with the "permissionhistory" package.
	PermissionHistoriesInverseTable = "authz_permission_histories"
	// PermissionHistoriesColumn is the table column denoting the permission_histories relation/edge.
	PermissionHistoriesColumn = "entitlement_id"
	// EntitlementAssignmentsTable is the table that holds the entitlement_assignments relation/edge.
	EntitlementAssignmentsTable = "authz_entitlement_assignments"
	// EntitlementAssignmentsInverseTable is the table name for the EntitlementAssignment entity.
	// It exists in this package in order to avoid circular dependency with the "entitlementassignment" package.
	EntitlementAssignmentsInverseTable = "authz_entitlement_assignments"
	// EntitlementAssignmentsColumn is the table column denoting the entitlement_assignments relation/edge.
	EntitlementAssignmentsColumn = "entitlement_id"
	// ActionTable is the table that holds the action relation/edge.
	ActionTable = "authz_entitlements"
	// ActionInverseTable is the table name for the Action entity.
	// It exists in this package in order to avoid circular dependency with the "action" package.
	ActionInverseTable = "authz_actions"
	// ActionColumn is the table column denoting the action relation/edge.
	ActionColumn = "action_id"
	// ResourceTable is the table that holds the resource relation/edge.
	ResourceTable = "authz_entitlements"
	// ResourceInverseTable is the table name for the Resource entity.
	// It exists in this package in order to avoid circular dependency with the "resource" package.
	ResourceInverseTable = "authz_resources"
	// ResourceColumn is the table column denoting the resource relation/edge.
	ResourceColumn = "resource_id"
)

// Columns holds all SQL columns for entitlement fields.
var Columns = []string{
	FieldID,
	FieldActionID,
	FieldActionExpr,
	FieldCreatedAt,
	FieldCreatedBy,
	FieldName,
	FieldDescription,
	FieldEtag,
	FieldResourceID,
	FieldScopeRef,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the Entitlement queries.
type OrderOption = func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByActionID orders the results by the action_id field.
func ByActionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActionID, opts...).ToFunc()
}

// ByActionExpr orders the results by the action_expr field.
func ByActionExpr(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActionExpr, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByEtag orders the results by the etag field.
func ByEtag(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEtag, opts...).ToFunc()
}

// ByResourceID orders the results by the resource_id field.
func ByResourceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResourceID, opts...).ToFunc()
}

// ByScopeRef orders the results by the scope_ref field.
func ByScopeRef(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScopeRef, opts...).ToFunc()
}

// ByPermissionHistoriesCount orders the results by permission_histories count.
func ByPermissionHistoriesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPermissionHistoriesStep(), opts...)
	}
}

// ByPermissionHistories orders the results by permission_histories terms.
func ByPermissionHistories(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPermissionHistoriesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEntitlementAssignmentsCount orders the results by entitlement_assignments count.
func ByEntitlementAssignmentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEntitlementAssignmentsStep(), opts...)
	}
}

// ByEntitlementAssignments orders the results by entitlement_assignments terms.
func ByEntitlementAssignments(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEntitlementAssignmentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByActionField orders the results by action field.
func ByActionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newActionStep(), sql.OrderByField(field, opts...))
	}
}

// ByResourceField orders the results by resource field.
func ByResourceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newResourceStep(), sql.OrderByField(field, opts...))
	}
}

// Added by NikkieERP scripts/ent_templates/dialect/sql/meta.tmpl
func NewPermissionHistoriesStepNikki() *sqlgraph.Step {
	return newPermissionHistoriesStep()
}

func newPermissionHistoriesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PermissionHistoriesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, PermissionHistoriesTable, PermissionHistoriesColumn),
	)
}

// Added by NikkieERP scripts/ent_templates/dialect/sql/meta.tmpl
func NewEntitlementAssignmentsStepNikki() *sqlgraph.Step {
	return newEntitlementAssignmentsStep()
}

func newEntitlementAssignmentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EntitlementAssignmentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, EntitlementAssignmentsTable, EntitlementAssignmentsColumn),
	)
}

// Added by NikkieERP scripts/ent_templates/dialect/sql/meta.tmpl
func NewActionStepNikki() *sqlgraph.Step {
	return newActionStep()
}

func newActionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ActionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ActionTable, ActionColumn),
	)
}

// Added by NikkieERP scripts/ent_templates/dialect/sql/meta.tmpl
func NewResourceStepNikki() *sqlgraph.Step {
	return newResourceStep()
}

func newResourceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ResourceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ResourceTable, ResourceColumn),
	)
}
