// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/grantrequest"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/role"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/rolesuite"
)

// GrantRequest is the model entity for the GrantRequest schema.
type GrantRequest struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// AttachmentURL holds the value of the "attachment_url" field.
	AttachmentURL *string `json:"attachment_url,omitempty"`
	// Comment holds the value of the "comment" field.
	Comment *string `json:"comment,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// Etag holds the value of the "etag" field.
	Etag string `json:"etag,omitempty"`
	// ReceiverID holds the value of the "receiver_id" field.
	ReceiverID string `json:"receiver_id,omitempty"`
	// TargetType holds the value of the "target_type" field.
	TargetType grantrequest.TargetType `json:"target_type,omitempty"`
	// Must be set NULL before the role is deleted
	TargetRoleID *string `json:"target_role_id,omitempty"`
	// Must be set NULL before the role suite is deleted
	TargetSuiteID *string `json:"target_suite_id,omitempty"`
	// Status holds the value of the "status" field.
	Status grantrequest.Status `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GrantRequestQuery when eager-loading is set.
	Edges        GrantRequestEdges `json:"edges"`
	selectValues sql.SelectValues
}

// GrantRequestEdges holds the relations/edges for other nodes in the graph.
type GrantRequestEdges struct {
	// PermissionHistories holds the value of the permission_histories edge.
	PermissionHistories []*PermissionHistory `json:"permission_histories,omitempty"`
	// Role holds the value of the role edge.
	Role *Role `json:"role,omitempty"`
	// RoleSuite holds the value of the role_suite edge.
	RoleSuite *RoleSuite `json:"role_suite,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// PermissionHistoriesOrErr returns the PermissionHistories value or an error if the edge
// was not loaded in eager-loading.
func (e GrantRequestEdges) PermissionHistoriesOrErr() ([]*PermissionHistory, error) {
	if e.loadedTypes[0] {
		return e.PermissionHistories, nil
	}
	return nil, &NotLoadedError{edge: "permission_histories"}
}

// RoleOrErr returns the Role value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GrantRequestEdges) RoleOrErr() (*Role, error) {
	if e.Role != nil {
		return e.Role, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: role.Label}
	}
	return nil, &NotLoadedError{edge: "role"}
}

// RoleSuiteOrErr returns the RoleSuite value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GrantRequestEdges) RoleSuiteOrErr() (*RoleSuite, error) {
	if e.RoleSuite != nil {
		return e.RoleSuite, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: rolesuite.Label}
	}
	return nil, &NotLoadedError{edge: "role_suite"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GrantRequest) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case grantrequest.FieldID, grantrequest.FieldAttachmentURL, grantrequest.FieldComment, grantrequest.FieldCreatedBy, grantrequest.FieldEtag, grantrequest.FieldReceiverID, grantrequest.FieldTargetType, grantrequest.FieldTargetRoleID, grantrequest.FieldTargetSuiteID, grantrequest.FieldStatus:
			values[i] = new(sql.NullString)
		case grantrequest.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GrantRequest fields.
func (gr *GrantRequest) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case grantrequest.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				gr.ID = value.String
			}
		case grantrequest.FieldAttachmentURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field attachment_url", values[i])
			} else if value.Valid {
				gr.AttachmentURL = new(string)
				*gr.AttachmentURL = value.String
			}
		case grantrequest.FieldComment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comment", values[i])
			} else if value.Valid {
				gr.Comment = new(string)
				*gr.Comment = value.String
			}
		case grantrequest.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				gr.CreatedAt = value.Time
			}
		case grantrequest.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				gr.CreatedBy = value.String
			}
		case grantrequest.FieldEtag:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field etag", values[i])
			} else if value.Valid {
				gr.Etag = value.String
			}
		case grantrequest.FieldReceiverID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field receiver_id", values[i])
			} else if value.Valid {
				gr.ReceiverID = value.String
			}
		case grantrequest.FieldTargetType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field target_type", values[i])
			} else if value.Valid {
				gr.TargetType = grantrequest.TargetType(value.String)
			}
		case grantrequest.FieldTargetRoleID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field target_role_id", values[i])
			} else if value.Valid {
				gr.TargetRoleID = new(string)
				*gr.TargetRoleID = value.String
			}
		case grantrequest.FieldTargetSuiteID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field target_suite_id", values[i])
			} else if value.Valid {
				gr.TargetSuiteID = new(string)
				*gr.TargetSuiteID = value.String
			}
		case grantrequest.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				gr.Status = grantrequest.Status(value.String)
			}
		default:
			gr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the GrantRequest.
// This includes values selected through modifiers, order, etc.
func (gr *GrantRequest) Value(name string) (ent.Value, error) {
	return gr.selectValues.Get(name)
}

// QueryPermissionHistories queries the "permission_histories" edge of the GrantRequest entity.
func (gr *GrantRequest) QueryPermissionHistories() *PermissionHistoryQuery {
	return NewGrantRequestClient(gr.config).QueryPermissionHistories(gr)
}

// QueryRole queries the "role" edge of the GrantRequest entity.
func (gr *GrantRequest) QueryRole() *RoleQuery {
	return NewGrantRequestClient(gr.config).QueryRole(gr)
}

// QueryRoleSuite queries the "role_suite" edge of the GrantRequest entity.
func (gr *GrantRequest) QueryRoleSuite() *RoleSuiteQuery {
	return NewGrantRequestClient(gr.config).QueryRoleSuite(gr)
}

// Update returns a builder for updating this GrantRequest.
// Note that you need to call GrantRequest.Unwrap() before calling this method if this GrantRequest
// was returned from a transaction, and the transaction was committed or rolled back.
func (gr *GrantRequest) Update() *GrantRequestUpdateOne {
	return NewGrantRequestClient(gr.config).UpdateOne(gr)
}

// Unwrap unwraps the GrantRequest entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gr *GrantRequest) Unwrap() *GrantRequest {
	_tx, ok := gr.config.driver.(*txDriver)
	if !ok {
		panic("ent: GrantRequest is not a transactional entity")
	}
	gr.config.driver = _tx.drv
	return gr
}

// String implements the fmt.Stringer.
func (gr *GrantRequest) String() string {
	var builder strings.Builder
	builder.WriteString("GrantRequest(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gr.ID))
	if v := gr.AttachmentURL; v != nil {
		builder.WriteString("attachment_url=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := gr.Comment; v != nil {
		builder.WriteString("comment=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(gr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(gr.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("etag=")
	builder.WriteString(gr.Etag)
	builder.WriteString(", ")
	builder.WriteString("receiver_id=")
	builder.WriteString(gr.ReceiverID)
	builder.WriteString(", ")
	builder.WriteString("target_type=")
	builder.WriteString(fmt.Sprintf("%v", gr.TargetType))
	builder.WriteString(", ")
	if v := gr.TargetRoleID; v != nil {
		builder.WriteString("target_role_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := gr.TargetSuiteID; v != nil {
		builder.WriteString("target_suite_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", gr.Status))
	builder.WriteByte(')')
	return builder.String()
}

// GrantRequests is a parsable slice of GrantRequest.
type GrantRequests []*GrantRequest
