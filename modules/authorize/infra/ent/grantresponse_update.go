// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/grantresponse"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/predicate"
)

// GrantResponseUpdate is the builder for updating GrantResponse entities.
type GrantResponseUpdate struct {
	config
	hooks    []Hook
	mutation *GrantResponseMutation
}

// Where appends a list predicates to the GrantResponseUpdate builder.
func (gru *GrantResponseUpdate) Where(ps ...predicate.GrantResponse) *GrantResponseUpdate {
	gru.mutation.Where(ps...)
	return gru
}

// SetEtag sets the "etag" field.
func (gru *GrantResponseUpdate) SetEtag(s string) *GrantResponseUpdate {
	gru.mutation.SetEtag(s)
	return gru
}

// SetNillableEtag sets the "etag" field if the given value is not nil.
func (gru *GrantResponseUpdate) SetNillableEtag(s *string) *GrantResponseUpdate {
	if s != nil {
		gru.SetEtag(*s)
	}
	return gru
}

// Mutation returns the GrantResponseMutation object of the builder.
func (gru *GrantResponseUpdate) Mutation() *GrantResponseMutation {
	return gru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gru *GrantResponseUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, gru.sqlSave, gru.mutation, gru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gru *GrantResponseUpdate) SaveX(ctx context.Context) int {
	affected, err := gru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gru *GrantResponseUpdate) Exec(ctx context.Context) error {
	_, err := gru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gru *GrantResponseUpdate) ExecX(ctx context.Context) {
	if err := gru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gru *GrantResponseUpdate) check() error {
	if gru.mutation.GrantRequestCleared() && len(gru.mutation.GrantRequestIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "GrantResponse.grant_request"`)
	}
	return nil
}

func (gru *GrantResponseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := gru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(grantresponse.Table, grantresponse.Columns, sqlgraph.NewFieldSpec(grantresponse.FieldID, field.TypeString))
	if ps := gru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if gru.mutation.ReasonCleared() {
		_spec.ClearField(grantresponse.FieldReason, field.TypeString)
	}
	if value, ok := gru.mutation.Etag(); ok {
		_spec.SetField(grantresponse.FieldEtag, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{grantresponse.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gru.mutation.done = true
	return n, nil
}

// GrantResponseUpdateOne is the builder for updating a single GrantResponse entity.
type GrantResponseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GrantResponseMutation
}

// SetEtag sets the "etag" field.
func (gruo *GrantResponseUpdateOne) SetEtag(s string) *GrantResponseUpdateOne {
	gruo.mutation.SetEtag(s)
	return gruo
}

// SetNillableEtag sets the "etag" field if the given value is not nil.
func (gruo *GrantResponseUpdateOne) SetNillableEtag(s *string) *GrantResponseUpdateOne {
	if s != nil {
		gruo.SetEtag(*s)
	}
	return gruo
}

// Mutation returns the GrantResponseMutation object of the builder.
func (gruo *GrantResponseUpdateOne) Mutation() *GrantResponseMutation {
	return gruo.mutation
}

// Where appends a list predicates to the GrantResponseUpdate builder.
func (gruo *GrantResponseUpdateOne) Where(ps ...predicate.GrantResponse) *GrantResponseUpdateOne {
	gruo.mutation.Where(ps...)
	return gruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gruo *GrantResponseUpdateOne) Select(field string, fields ...string) *GrantResponseUpdateOne {
	gruo.fields = append([]string{field}, fields...)
	return gruo
}

// Save executes the query and returns the updated GrantResponse entity.
func (gruo *GrantResponseUpdateOne) Save(ctx context.Context) (*GrantResponse, error) {
	return withHooks(ctx, gruo.sqlSave, gruo.mutation, gruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gruo *GrantResponseUpdateOne) SaveX(ctx context.Context) *GrantResponse {
	node, err := gruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gruo *GrantResponseUpdateOne) Exec(ctx context.Context) error {
	_, err := gruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gruo *GrantResponseUpdateOne) ExecX(ctx context.Context) {
	if err := gruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gruo *GrantResponseUpdateOne) check() error {
	if gruo.mutation.GrantRequestCleared() && len(gruo.mutation.GrantRequestIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "GrantResponse.grant_request"`)
	}
	return nil
}

func (gruo *GrantResponseUpdateOne) sqlSave(ctx context.Context) (_node *GrantResponse, err error) {
	if err := gruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(grantresponse.Table, grantresponse.Columns, sqlgraph.NewFieldSpec(grantresponse.FieldID, field.TypeString))
	id, ok := gruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GrantResponse.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, grantresponse.FieldID)
		for _, f := range fields {
			if !grantresponse.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != grantresponse.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if gruo.mutation.ReasonCleared() {
		_spec.ClearField(grantresponse.FieldReason, field.TypeString)
	}
	if value, ok := gruo.mutation.Etag(); ok {
		_spec.SetField(grantresponse.FieldEtag, field.TypeString, value)
	}
	_node = &GrantResponse{config: gruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{grantresponse.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	gruo.mutation.done = true
	return _node, nil
}
