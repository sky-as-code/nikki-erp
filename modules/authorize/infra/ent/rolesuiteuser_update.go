// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/predicate"
	"github.com/sky-as-code/nikki-erp/modules/authorize/infra/ent/rolesuiteuser"
)

// RoleSuiteUserUpdate is the builder for updating RoleSuiteUser entities.
type RoleSuiteUserUpdate struct {
	config
	hooks    []Hook
	mutation *RoleSuiteUserMutation
}

// Where appends a list predicates to the RoleSuiteUserUpdate builder.
func (rsuu *RoleSuiteUserUpdate) Where(ps ...predicate.RoleSuiteUser) *RoleSuiteUserUpdate {
	rsuu.mutation.Where(ps...)
	return rsuu
}

// Mutation returns the RoleSuiteUserMutation object of the builder.
func (rsuu *RoleSuiteUserUpdate) Mutation() *RoleSuiteUserMutation {
	return rsuu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rsuu *RoleSuiteUserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rsuu.sqlSave, rsuu.mutation, rsuu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rsuu *RoleSuiteUserUpdate) SaveX(ctx context.Context) int {
	affected, err := rsuu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rsuu *RoleSuiteUserUpdate) Exec(ctx context.Context) error {
	_, err := rsuu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rsuu *RoleSuiteUserUpdate) ExecX(ctx context.Context) {
	if err := rsuu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rsuu *RoleSuiteUserUpdate) check() error {
	if rsuu.mutation.RoleSuiteCleared() && len(rsuu.mutation.RoleSuiteIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "RoleSuiteUser.role_suite"`)
	}
	return nil
}

func (rsuu *RoleSuiteUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rsuu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(rolesuiteuser.Table, rolesuiteuser.Columns, sqlgraph.NewFieldSpec(rolesuiteuser.FieldID, field.TypeInt))
	if ps := rsuu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rsuu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rolesuiteuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rsuu.mutation.done = true
	return n, nil
}

// RoleSuiteUserUpdateOne is the builder for updating a single RoleSuiteUser entity.
type RoleSuiteUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RoleSuiteUserMutation
}

// Mutation returns the RoleSuiteUserMutation object of the builder.
func (rsuuo *RoleSuiteUserUpdateOne) Mutation() *RoleSuiteUserMutation {
	return rsuuo.mutation
}

// Where appends a list predicates to the RoleSuiteUserUpdate builder.
func (rsuuo *RoleSuiteUserUpdateOne) Where(ps ...predicate.RoleSuiteUser) *RoleSuiteUserUpdateOne {
	rsuuo.mutation.Where(ps...)
	return rsuuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rsuuo *RoleSuiteUserUpdateOne) Select(field string, fields ...string) *RoleSuiteUserUpdateOne {
	rsuuo.fields = append([]string{field}, fields...)
	return rsuuo
}

// Save executes the query and returns the updated RoleSuiteUser entity.
func (rsuuo *RoleSuiteUserUpdateOne) Save(ctx context.Context) (*RoleSuiteUser, error) {
	return withHooks(ctx, rsuuo.sqlSave, rsuuo.mutation, rsuuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rsuuo *RoleSuiteUserUpdateOne) SaveX(ctx context.Context) *RoleSuiteUser {
	node, err := rsuuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rsuuo *RoleSuiteUserUpdateOne) Exec(ctx context.Context) error {
	_, err := rsuuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rsuuo *RoleSuiteUserUpdateOne) ExecX(ctx context.Context) {
	if err := rsuuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rsuuo *RoleSuiteUserUpdateOne) check() error {
	if rsuuo.mutation.RoleSuiteCleared() && len(rsuuo.mutation.RoleSuiteIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "RoleSuiteUser.role_suite"`)
	}
	return nil
}

func (rsuuo *RoleSuiteUserUpdateOne) sqlSave(ctx context.Context) (_node *RoleSuiteUser, err error) {
	if err := rsuuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(rolesuiteuser.Table, rolesuiteuser.Columns, sqlgraph.NewFieldSpec(rolesuiteuser.FieldID, field.TypeInt))
	id, ok := rsuuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RoleSuiteUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rsuuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rolesuiteuser.FieldID)
		for _, f := range fields {
			if !rolesuiteuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != rolesuiteuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rsuuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_node = &RoleSuiteUser{config: rsuuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rsuuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rolesuiteuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rsuuo.mutation.done = true
	return _node, nil
}
