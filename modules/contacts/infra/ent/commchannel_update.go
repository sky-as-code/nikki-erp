// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky-as-code/nikki-erp/modules/contacts/domain"
	"github.com/sky-as-code/nikki-erp/modules/contacts/infra/ent/commchannel"
	"github.com/sky-as-code/nikki-erp/modules/contacts/infra/ent/party"
	"github.com/sky-as-code/nikki-erp/modules/contacts/infra/ent/predicate"
)

// CommChannelUpdate is the builder for updating CommChannel entities.
type CommChannelUpdate struct {
	config
	hooks    []Hook
	mutation *CommChannelMutation
}

// Where appends a list predicates to the CommChannelUpdate builder.
func (ccu *CommChannelUpdate) Where(ps ...predicate.CommChannel) *CommChannelUpdate {
	ccu.mutation.Where(ps...)
	return ccu
}

// SetDeletedBy sets the "deleted_by" field.
func (ccu *CommChannelUpdate) SetDeletedBy(s string) *CommChannelUpdate {
	ccu.mutation.SetDeletedBy(s)
	return ccu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (ccu *CommChannelUpdate) SetNillableDeletedBy(s *string) *CommChannelUpdate {
	if s != nil {
		ccu.SetDeletedBy(*s)
	}
	return ccu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (ccu *CommChannelUpdate) ClearDeletedBy() *CommChannelUpdate {
	ccu.mutation.ClearDeletedBy()
	return ccu
}

// SetDeletedAt sets the "deleted_at" field.
func (ccu *CommChannelUpdate) SetDeletedAt(t time.Time) *CommChannelUpdate {
	ccu.mutation.SetDeletedAt(t)
	return ccu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ccu *CommChannelUpdate) SetNillableDeletedAt(t *time.Time) *CommChannelUpdate {
	if t != nil {
		ccu.SetDeletedAt(*t)
	}
	return ccu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ccu *CommChannelUpdate) ClearDeletedAt() *CommChannelUpdate {
	ccu.mutation.ClearDeletedAt()
	return ccu
}

// SetEtag sets the "etag" field.
func (ccu *CommChannelUpdate) SetEtag(s string) *CommChannelUpdate {
	ccu.mutation.SetEtag(s)
	return ccu
}

// SetNillableEtag sets the "etag" field if the given value is not nil.
func (ccu *CommChannelUpdate) SetNillableEtag(s *string) *CommChannelUpdate {
	if s != nil {
		ccu.SetEtag(*s)
	}
	return ccu
}

// SetNote sets the "note" field.
func (ccu *CommChannelUpdate) SetNote(s string) *CommChannelUpdate {
	ccu.mutation.SetNote(s)
	return ccu
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (ccu *CommChannelUpdate) SetNillableNote(s *string) *CommChannelUpdate {
	if s != nil {
		ccu.SetNote(*s)
	}
	return ccu
}

// ClearNote clears the value of the "note" field.
func (ccu *CommChannelUpdate) ClearNote() *CommChannelUpdate {
	ccu.mutation.ClearNote()
	return ccu
}

// SetPartyID sets the "party_id" field.
func (ccu *CommChannelUpdate) SetPartyID(s string) *CommChannelUpdate {
	ccu.mutation.SetPartyID(s)
	return ccu
}

// SetNillablePartyID sets the "party_id" field if the given value is not nil.
func (ccu *CommChannelUpdate) SetNillablePartyID(s *string) *CommChannelUpdate {
	if s != nil {
		ccu.SetPartyID(*s)
	}
	return ccu
}

// SetType sets the "type" field.
func (ccu *CommChannelUpdate) SetType(c commchannel.Type) *CommChannelUpdate {
	ccu.mutation.SetType(c)
	return ccu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ccu *CommChannelUpdate) SetNillableType(c *commchannel.Type) *CommChannelUpdate {
	if c != nil {
		ccu.SetType(*c)
	}
	return ccu
}

// SetUpdatedAt sets the "updated_at" field.
func (ccu *CommChannelUpdate) SetUpdatedAt(t time.Time) *CommChannelUpdate {
	ccu.mutation.SetUpdatedAt(t)
	return ccu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ccu *CommChannelUpdate) SetNillableUpdatedAt(t *time.Time) *CommChannelUpdate {
	if t != nil {
		ccu.SetUpdatedAt(*t)
	}
	return ccu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ccu *CommChannelUpdate) ClearUpdatedAt() *CommChannelUpdate {
	ccu.mutation.ClearUpdatedAt()
	return ccu
}

// SetValue sets the "value" field.
func (ccu *CommChannelUpdate) SetValue(s string) *CommChannelUpdate {
	ccu.mutation.SetValue(s)
	return ccu
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (ccu *CommChannelUpdate) SetNillableValue(s *string) *CommChannelUpdate {
	if s != nil {
		ccu.SetValue(*s)
	}
	return ccu
}

// ClearValue clears the value of the "value" field.
func (ccu *CommChannelUpdate) ClearValue() *CommChannelUpdate {
	ccu.mutation.ClearValue()
	return ccu
}

// SetValueJSON sets the "value_json" field.
func (ccu *CommChannelUpdate) SetValueJSON(djd domain.ValueJsonData) *CommChannelUpdate {
	ccu.mutation.SetValueJSON(djd)
	return ccu
}

// SetNillableValueJSON sets the "value_json" field if the given value is not nil.
func (ccu *CommChannelUpdate) SetNillableValueJSON(djd *domain.ValueJsonData) *CommChannelUpdate {
	if djd != nil {
		ccu.SetValueJSON(*djd)
	}
	return ccu
}

// ClearValueJSON clears the value of the "value_json" field.
func (ccu *CommChannelUpdate) ClearValueJSON() *CommChannelUpdate {
	ccu.mutation.ClearValueJSON()
	return ccu
}

// SetParty sets the "party" edge to the Party entity.
func (ccu *CommChannelUpdate) SetParty(p *Party) *CommChannelUpdate {
	return ccu.SetPartyID(p.ID)
}

// Mutation returns the CommChannelMutation object of the builder.
func (ccu *CommChannelUpdate) Mutation() *CommChannelMutation {
	return ccu.mutation
}

// ClearParty clears the "party" edge to the Party entity.
func (ccu *CommChannelUpdate) ClearParty() *CommChannelUpdate {
	ccu.mutation.ClearParty()
	return ccu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ccu *CommChannelUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ccu.sqlSave, ccu.mutation, ccu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ccu *CommChannelUpdate) SaveX(ctx context.Context) int {
	affected, err := ccu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ccu *CommChannelUpdate) Exec(ctx context.Context) error {
	_, err := ccu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccu *CommChannelUpdate) ExecX(ctx context.Context) {
	if err := ccu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ccu *CommChannelUpdate) check() error {
	if v, ok := ccu.mutation.GetType(); ok {
		if err := commchannel.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "CommChannel.type": %w`, err)}
		}
	}
	if ccu.mutation.PartyCleared() && len(ccu.mutation.PartyIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CommChannel.party"`)
	}
	return nil
}

func (ccu *CommChannelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ccu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(commchannel.Table, commchannel.Columns, sqlgraph.NewFieldSpec(commchannel.FieldID, field.TypeString))
	if ps := ccu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ccu.mutation.DeletedBy(); ok {
		_spec.SetField(commchannel.FieldDeletedBy, field.TypeString, value)
	}
	if ccu.mutation.DeletedByCleared() {
		_spec.ClearField(commchannel.FieldDeletedBy, field.TypeString)
	}
	if value, ok := ccu.mutation.DeletedAt(); ok {
		_spec.SetField(commchannel.FieldDeletedAt, field.TypeTime, value)
	}
	if ccu.mutation.DeletedAtCleared() {
		_spec.ClearField(commchannel.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ccu.mutation.Etag(); ok {
		_spec.SetField(commchannel.FieldEtag, field.TypeString, value)
	}
	if value, ok := ccu.mutation.Note(); ok {
		_spec.SetField(commchannel.FieldNote, field.TypeString, value)
	}
	if ccu.mutation.NoteCleared() {
		_spec.ClearField(commchannel.FieldNote, field.TypeString)
	}
	if value, ok := ccu.mutation.GetType(); ok {
		_spec.SetField(commchannel.FieldType, field.TypeEnum, value)
	}
	if value, ok := ccu.mutation.UpdatedAt(); ok {
		_spec.SetField(commchannel.FieldUpdatedAt, field.TypeTime, value)
	}
	if ccu.mutation.UpdatedAtCleared() {
		_spec.ClearField(commchannel.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := ccu.mutation.Value(); ok {
		_spec.SetField(commchannel.FieldValue, field.TypeString, value)
	}
	if ccu.mutation.ValueCleared() {
		_spec.ClearField(commchannel.FieldValue, field.TypeString)
	}
	if value, ok := ccu.mutation.ValueJSON(); ok {
		_spec.SetField(commchannel.FieldValueJSON, field.TypeJSON, value)
	}
	if ccu.mutation.ValueJSONCleared() {
		_spec.ClearField(commchannel.FieldValueJSON, field.TypeJSON)
	}
	if ccu.mutation.PartyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   commchannel.PartyTable,
			Columns: []string{commchannel.PartyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(party.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccu.mutation.PartyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   commchannel.PartyTable,
			Columns: []string{commchannel.PartyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(party.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ccu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{commchannel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ccu.mutation.done = true
	return n, nil
}

// CommChannelUpdateOne is the builder for updating a single CommChannel entity.
type CommChannelUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CommChannelMutation
}

// SetDeletedBy sets the "deleted_by" field.
func (ccuo *CommChannelUpdateOne) SetDeletedBy(s string) *CommChannelUpdateOne {
	ccuo.mutation.SetDeletedBy(s)
	return ccuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (ccuo *CommChannelUpdateOne) SetNillableDeletedBy(s *string) *CommChannelUpdateOne {
	if s != nil {
		ccuo.SetDeletedBy(*s)
	}
	return ccuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (ccuo *CommChannelUpdateOne) ClearDeletedBy() *CommChannelUpdateOne {
	ccuo.mutation.ClearDeletedBy()
	return ccuo
}

// SetDeletedAt sets the "deleted_at" field.
func (ccuo *CommChannelUpdateOne) SetDeletedAt(t time.Time) *CommChannelUpdateOne {
	ccuo.mutation.SetDeletedAt(t)
	return ccuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ccuo *CommChannelUpdateOne) SetNillableDeletedAt(t *time.Time) *CommChannelUpdateOne {
	if t != nil {
		ccuo.SetDeletedAt(*t)
	}
	return ccuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ccuo *CommChannelUpdateOne) ClearDeletedAt() *CommChannelUpdateOne {
	ccuo.mutation.ClearDeletedAt()
	return ccuo
}

// SetEtag sets the "etag" field.
func (ccuo *CommChannelUpdateOne) SetEtag(s string) *CommChannelUpdateOne {
	ccuo.mutation.SetEtag(s)
	return ccuo
}

// SetNillableEtag sets the "etag" field if the given value is not nil.
func (ccuo *CommChannelUpdateOne) SetNillableEtag(s *string) *CommChannelUpdateOne {
	if s != nil {
		ccuo.SetEtag(*s)
	}
	return ccuo
}

// SetNote sets the "note" field.
func (ccuo *CommChannelUpdateOne) SetNote(s string) *CommChannelUpdateOne {
	ccuo.mutation.SetNote(s)
	return ccuo
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (ccuo *CommChannelUpdateOne) SetNillableNote(s *string) *CommChannelUpdateOne {
	if s != nil {
		ccuo.SetNote(*s)
	}
	return ccuo
}

// ClearNote clears the value of the "note" field.
func (ccuo *CommChannelUpdateOne) ClearNote() *CommChannelUpdateOne {
	ccuo.mutation.ClearNote()
	return ccuo
}

// SetPartyID sets the "party_id" field.
func (ccuo *CommChannelUpdateOne) SetPartyID(s string) *CommChannelUpdateOne {
	ccuo.mutation.SetPartyID(s)
	return ccuo
}

// SetNillablePartyID sets the "party_id" field if the given value is not nil.
func (ccuo *CommChannelUpdateOne) SetNillablePartyID(s *string) *CommChannelUpdateOne {
	if s != nil {
		ccuo.SetPartyID(*s)
	}
	return ccuo
}

// SetType sets the "type" field.
func (ccuo *CommChannelUpdateOne) SetType(c commchannel.Type) *CommChannelUpdateOne {
	ccuo.mutation.SetType(c)
	return ccuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ccuo *CommChannelUpdateOne) SetNillableType(c *commchannel.Type) *CommChannelUpdateOne {
	if c != nil {
		ccuo.SetType(*c)
	}
	return ccuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ccuo *CommChannelUpdateOne) SetUpdatedAt(t time.Time) *CommChannelUpdateOne {
	ccuo.mutation.SetUpdatedAt(t)
	return ccuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ccuo *CommChannelUpdateOne) SetNillableUpdatedAt(t *time.Time) *CommChannelUpdateOne {
	if t != nil {
		ccuo.SetUpdatedAt(*t)
	}
	return ccuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ccuo *CommChannelUpdateOne) ClearUpdatedAt() *CommChannelUpdateOne {
	ccuo.mutation.ClearUpdatedAt()
	return ccuo
}

// SetValue sets the "value" field.
func (ccuo *CommChannelUpdateOne) SetValue(s string) *CommChannelUpdateOne {
	ccuo.mutation.SetValue(s)
	return ccuo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (ccuo *CommChannelUpdateOne) SetNillableValue(s *string) *CommChannelUpdateOne {
	if s != nil {
		ccuo.SetValue(*s)
	}
	return ccuo
}

// ClearValue clears the value of the "value" field.
func (ccuo *CommChannelUpdateOne) ClearValue() *CommChannelUpdateOne {
	ccuo.mutation.ClearValue()
	return ccuo
}

// SetValueJSON sets the "value_json" field.
func (ccuo *CommChannelUpdateOne) SetValueJSON(djd domain.ValueJsonData) *CommChannelUpdateOne {
	ccuo.mutation.SetValueJSON(djd)
	return ccuo
}

// SetNillableValueJSON sets the "value_json" field if the given value is not nil.
func (ccuo *CommChannelUpdateOne) SetNillableValueJSON(djd *domain.ValueJsonData) *CommChannelUpdateOne {
	if djd != nil {
		ccuo.SetValueJSON(*djd)
	}
	return ccuo
}

// ClearValueJSON clears the value of the "value_json" field.
func (ccuo *CommChannelUpdateOne) ClearValueJSON() *CommChannelUpdateOne {
	ccuo.mutation.ClearValueJSON()
	return ccuo
}

// SetParty sets the "party" edge to the Party entity.
func (ccuo *CommChannelUpdateOne) SetParty(p *Party) *CommChannelUpdateOne {
	return ccuo.SetPartyID(p.ID)
}

// Mutation returns the CommChannelMutation object of the builder.
func (ccuo *CommChannelUpdateOne) Mutation() *CommChannelMutation {
	return ccuo.mutation
}

// ClearParty clears the "party" edge to the Party entity.
func (ccuo *CommChannelUpdateOne) ClearParty() *CommChannelUpdateOne {
	ccuo.mutation.ClearParty()
	return ccuo
}

// Where appends a list predicates to the CommChannelUpdate builder.
func (ccuo *CommChannelUpdateOne) Where(ps ...predicate.CommChannel) *CommChannelUpdateOne {
	ccuo.mutation.Where(ps...)
	return ccuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ccuo *CommChannelUpdateOne) Select(field string, fields ...string) *CommChannelUpdateOne {
	ccuo.fields = append([]string{field}, fields...)
	return ccuo
}

// Save executes the query and returns the updated CommChannel entity.
func (ccuo *CommChannelUpdateOne) Save(ctx context.Context) (*CommChannel, error) {
	return withHooks(ctx, ccuo.sqlSave, ccuo.mutation, ccuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ccuo *CommChannelUpdateOne) SaveX(ctx context.Context) *CommChannel {
	node, err := ccuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ccuo *CommChannelUpdateOne) Exec(ctx context.Context) error {
	_, err := ccuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccuo *CommChannelUpdateOne) ExecX(ctx context.Context) {
	if err := ccuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ccuo *CommChannelUpdateOne) check() error {
	if v, ok := ccuo.mutation.GetType(); ok {
		if err := commchannel.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "CommChannel.type": %w`, err)}
		}
	}
	if ccuo.mutation.PartyCleared() && len(ccuo.mutation.PartyIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CommChannel.party"`)
	}
	return nil
}

func (ccuo *CommChannelUpdateOne) sqlSave(ctx context.Context) (_node *CommChannel, err error) {
	if err := ccuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(commchannel.Table, commchannel.Columns, sqlgraph.NewFieldSpec(commchannel.FieldID, field.TypeString))
	id, ok := ccuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CommChannel.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ccuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, commchannel.FieldID)
		for _, f := range fields {
			if !commchannel.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != commchannel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ccuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ccuo.mutation.DeletedBy(); ok {
		_spec.SetField(commchannel.FieldDeletedBy, field.TypeString, value)
	}
	if ccuo.mutation.DeletedByCleared() {
		_spec.ClearField(commchannel.FieldDeletedBy, field.TypeString)
	}
	if value, ok := ccuo.mutation.DeletedAt(); ok {
		_spec.SetField(commchannel.FieldDeletedAt, field.TypeTime, value)
	}
	if ccuo.mutation.DeletedAtCleared() {
		_spec.ClearField(commchannel.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ccuo.mutation.Etag(); ok {
		_spec.SetField(commchannel.FieldEtag, field.TypeString, value)
	}
	if value, ok := ccuo.mutation.Note(); ok {
		_spec.SetField(commchannel.FieldNote, field.TypeString, value)
	}
	if ccuo.mutation.NoteCleared() {
		_spec.ClearField(commchannel.FieldNote, field.TypeString)
	}
	if value, ok := ccuo.mutation.GetType(); ok {
		_spec.SetField(commchannel.FieldType, field.TypeEnum, value)
	}
	if value, ok := ccuo.mutation.UpdatedAt(); ok {
		_spec.SetField(commchannel.FieldUpdatedAt, field.TypeTime, value)
	}
	if ccuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(commchannel.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := ccuo.mutation.Value(); ok {
		_spec.SetField(commchannel.FieldValue, field.TypeString, value)
	}
	if ccuo.mutation.ValueCleared() {
		_spec.ClearField(commchannel.FieldValue, field.TypeString)
	}
	if value, ok := ccuo.mutation.ValueJSON(); ok {
		_spec.SetField(commchannel.FieldValueJSON, field.TypeJSON, value)
	}
	if ccuo.mutation.ValueJSONCleared() {
		_spec.ClearField(commchannel.FieldValueJSON, field.TypeJSON)
	}
	if ccuo.mutation.PartyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   commchannel.PartyTable,
			Columns: []string{commchannel.PartyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(party.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccuo.mutation.PartyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   commchannel.PartyTable,
			Columns: []string{commchannel.PartyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(party.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CommChannel{config: ccuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ccuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{commchannel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ccuo.mutation.done = true
	return _node, nil
}
