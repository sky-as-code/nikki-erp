// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/sky-as-code/nikki-erp/modules/contacts/infra/ent/party"
)

// Party is the model entity for the Party schema.
type Party struct {
	config `json:"-"`
	// ID of the ent.
	// ULID
	ID string `json:"id,omitempty"`
	// URL to avatar image
	AvatarURL *string `json:"avatar_url,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy *string `json:"deleted_by,omitempty"`
	// Display name, max 50 characters
	DisplayName string `json:"display_name,omitempty"`
	// Etag holds the value of the "etag" field.
	Etag string `json:"etag,omitempty"`
	// Job title (Individual)
	JobPosition *string `json:"job_position,omitempty"`
	// LanguageID holds the value of the "language_id" field.
	LanguageID *string `json:"language_id,omitempty"`
	// Registered business address (Company)
	LegalAddress *string `json:"legal_address,omitempty"`
	// Legal name (Company)
	LegalName *string `json:"legal_name,omitempty"`
	// NationalityID holds the value of the "nationality_id" field.
	NationalityID *string `json:"nationality_id,omitempty"`
	// Notes
	Note *string `json:"note,omitempty"`
	// Tax Identification Number
	TaxID *string `json:"tax_id,omitempty"`
	// Title holds the value of the "title" field.
	Title *party.Title `json:"title,omitempty"`
	// "individual" for person, "company" for organization
	Type string `json:"type,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// Website URL
	Website *string `json:"website,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PartyQuery when eager-loading is set.
	Edges        PartyEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PartyEdges holds the relations/edges for other nodes in the graph.
type PartyEdges struct {
	// CommChannels holds the value of the comm_channels edge.
	CommChannels []*CommChannel `json:"comm_channels,omitempty"`
	// Relationships holds the value of the relationships edge.
	Relationships []*Relationship `json:"relationships,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CommChannelsOrErr returns the CommChannels value or an error if the edge
// was not loaded in eager-loading.
func (e PartyEdges) CommChannelsOrErr() ([]*CommChannel, error) {
	if e.loadedTypes[0] {
		return e.CommChannels, nil
	}
	return nil, &NotLoadedError{edge: "comm_channels"}
}

// RelationshipsOrErr returns the Relationships value or an error if the edge
// was not loaded in eager-loading.
func (e PartyEdges) RelationshipsOrErr() ([]*Relationship, error) {
	if e.loadedTypes[1] {
		return e.Relationships, nil
	}
	return nil, &NotLoadedError{edge: "relationships"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Party) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case party.FieldID, party.FieldAvatarURL, party.FieldDeletedBy, party.FieldDisplayName, party.FieldEtag, party.FieldJobPosition, party.FieldLanguageID, party.FieldLegalAddress, party.FieldLegalName, party.FieldNationalityID, party.FieldNote, party.FieldTaxID, party.FieldTitle, party.FieldType, party.FieldWebsite:
			values[i] = new(sql.NullString)
		case party.FieldCreatedAt, party.FieldDeletedAt, party.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Party fields.
func (pa *Party) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case party.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				pa.ID = value.String
			}
		case party.FieldAvatarURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar_url", values[i])
			} else if value.Valid {
				pa.AvatarURL = new(string)
				*pa.AvatarURL = value.String
			}
		case party.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pa.CreatedAt = value.Time
			}
		case party.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				pa.DeletedAt = new(time.Time)
				*pa.DeletedAt = value.Time
			}
		case party.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				pa.DeletedBy = new(string)
				*pa.DeletedBy = value.String
			}
		case party.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				pa.DisplayName = value.String
			}
		case party.FieldEtag:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field etag", values[i])
			} else if value.Valid {
				pa.Etag = value.String
			}
		case party.FieldJobPosition:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field job_position", values[i])
			} else if value.Valid {
				pa.JobPosition = new(string)
				*pa.JobPosition = value.String
			}
		case party.FieldLanguageID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field language_id", values[i])
			} else if value.Valid {
				pa.LanguageID = new(string)
				*pa.LanguageID = value.String
			}
		case party.FieldLegalAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field legal_address", values[i])
			} else if value.Valid {
				pa.LegalAddress = new(string)
				*pa.LegalAddress = value.String
			}
		case party.FieldLegalName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field legal_name", values[i])
			} else if value.Valid {
				pa.LegalName = new(string)
				*pa.LegalName = value.String
			}
		case party.FieldNationalityID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nationality_id", values[i])
			} else if value.Valid {
				pa.NationalityID = new(string)
				*pa.NationalityID = value.String
			}
		case party.FieldNote:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field note", values[i])
			} else if value.Valid {
				pa.Note = new(string)
				*pa.Note = value.String
			}
		case party.FieldTaxID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tax_id", values[i])
			} else if value.Valid {
				pa.TaxID = new(string)
				*pa.TaxID = value.String
			}
		case party.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				pa.Title = new(party.Title)
				*pa.Title = party.Title(value.String)
			}
		case party.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				pa.Type = value.String
			}
		case party.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pa.UpdatedAt = new(time.Time)
				*pa.UpdatedAt = value.Time
			}
		case party.FieldWebsite:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field website", values[i])
			} else if value.Valid {
				pa.Website = new(string)
				*pa.Website = value.String
			}
		default:
			pa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Party.
// This includes values selected through modifiers, order, etc.
func (pa *Party) Value(name string) (ent.Value, error) {
	return pa.selectValues.Get(name)
}

// QueryCommChannels queries the "comm_channels" edge of the Party entity.
func (pa *Party) QueryCommChannels() *CommChannelQuery {
	return NewPartyClient(pa.config).QueryCommChannels(pa)
}

// QueryRelationships queries the "relationships" edge of the Party entity.
func (pa *Party) QueryRelationships() *RelationshipQuery {
	return NewPartyClient(pa.config).QueryRelationships(pa)
}

// Update returns a builder for updating this Party.
// Note that you need to call Party.Unwrap() before calling this method if this Party
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *Party) Update() *PartyUpdateOne {
	return NewPartyClient(pa.config).UpdateOne(pa)
}

// Unwrap unwraps the Party entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pa *Party) Unwrap() *Party {
	_tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: Party is not a transactional entity")
	}
	pa.config.driver = _tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *Party) String() string {
	var builder strings.Builder
	builder.WriteString("Party(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pa.ID))
	if v := pa.AvatarURL; v != nil {
		builder.WriteString("avatar_url=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pa.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := pa.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := pa.DeletedBy; v != nil {
		builder.WriteString("deleted_by=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("display_name=")
	builder.WriteString(pa.DisplayName)
	builder.WriteString(", ")
	builder.WriteString("etag=")
	builder.WriteString(pa.Etag)
	builder.WriteString(", ")
	if v := pa.JobPosition; v != nil {
		builder.WriteString("job_position=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := pa.LanguageID; v != nil {
		builder.WriteString("language_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := pa.LegalAddress; v != nil {
		builder.WriteString("legal_address=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := pa.LegalName; v != nil {
		builder.WriteString("legal_name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := pa.NationalityID; v != nil {
		builder.WriteString("nationality_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := pa.Note; v != nil {
		builder.WriteString("note=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := pa.TaxID; v != nil {
		builder.WriteString("tax_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := pa.Title; v != nil {
		builder.WriteString("title=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(pa.Type)
	builder.WriteString(", ")
	if v := pa.UpdatedAt; v != nil {
		builder.WriteString("updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := pa.Website; v != nil {
		builder.WriteString("website=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// Parties is a parsable slice of Party.
type Parties []*Party
