// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky-as-code/nikki-erp/modules/contacts/infra/ent/commchannel"
	"github.com/sky-as-code/nikki-erp/modules/contacts/infra/ent/party"
	"github.com/sky-as-code/nikki-erp/modules/contacts/infra/ent/relationship"
)

// PartyCreate is the builder for creating a Party entity.
type PartyCreate struct {
	config
	mutation *PartyMutation
	hooks    []Hook
}

// SetAvatarURL sets the "avatar_url" field.
func (pc *PartyCreate) SetAvatarURL(s string) *PartyCreate {
	pc.mutation.SetAvatarURL(s)
	return pc
}

// SetNillableAvatarURL sets the "avatar_url" field if the given value is not nil.
func (pc *PartyCreate) SetNillableAvatarURL(s *string) *PartyCreate {
	if s != nil {
		pc.SetAvatarURL(*s)
	}
	return pc
}

// SetCreatedAt sets the "created_at" field.
func (pc *PartyCreate) SetCreatedAt(t time.Time) *PartyCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PartyCreate) SetNillableCreatedAt(t *time.Time) *PartyCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetDeletedAt sets the "deleted_at" field.
func (pc *PartyCreate) SetDeletedAt(t time.Time) *PartyCreate {
	pc.mutation.SetDeletedAt(t)
	return pc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pc *PartyCreate) SetNillableDeletedAt(t *time.Time) *PartyCreate {
	if t != nil {
		pc.SetDeletedAt(*t)
	}
	return pc
}

// SetDeletedBy sets the "deleted_by" field.
func (pc *PartyCreate) SetDeletedBy(s string) *PartyCreate {
	pc.mutation.SetDeletedBy(s)
	return pc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (pc *PartyCreate) SetNillableDeletedBy(s *string) *PartyCreate {
	if s != nil {
		pc.SetDeletedBy(*s)
	}
	return pc
}

// SetDisplayName sets the "display_name" field.
func (pc *PartyCreate) SetDisplayName(s string) *PartyCreate {
	pc.mutation.SetDisplayName(s)
	return pc
}

// SetEtag sets the "etag" field.
func (pc *PartyCreate) SetEtag(s string) *PartyCreate {
	pc.mutation.SetEtag(s)
	return pc
}

// SetJobPosition sets the "job_position" field.
func (pc *PartyCreate) SetJobPosition(s string) *PartyCreate {
	pc.mutation.SetJobPosition(s)
	return pc
}

// SetNillableJobPosition sets the "job_position" field if the given value is not nil.
func (pc *PartyCreate) SetNillableJobPosition(s *string) *PartyCreate {
	if s != nil {
		pc.SetJobPosition(*s)
	}
	return pc
}

// SetLanguageID sets the "language_id" field.
func (pc *PartyCreate) SetLanguageID(s string) *PartyCreate {
	pc.mutation.SetLanguageID(s)
	return pc
}

// SetNillableLanguageID sets the "language_id" field if the given value is not nil.
func (pc *PartyCreate) SetNillableLanguageID(s *string) *PartyCreate {
	if s != nil {
		pc.SetLanguageID(*s)
	}
	return pc
}

// SetLegalAddress sets the "legal_address" field.
func (pc *PartyCreate) SetLegalAddress(s string) *PartyCreate {
	pc.mutation.SetLegalAddress(s)
	return pc
}

// SetNillableLegalAddress sets the "legal_address" field if the given value is not nil.
func (pc *PartyCreate) SetNillableLegalAddress(s *string) *PartyCreate {
	if s != nil {
		pc.SetLegalAddress(*s)
	}
	return pc
}

// SetLegalName sets the "legal_name" field.
func (pc *PartyCreate) SetLegalName(s string) *PartyCreate {
	pc.mutation.SetLegalName(s)
	return pc
}

// SetNillableLegalName sets the "legal_name" field if the given value is not nil.
func (pc *PartyCreate) SetNillableLegalName(s *string) *PartyCreate {
	if s != nil {
		pc.SetLegalName(*s)
	}
	return pc
}

// SetNationalityID sets the "nationality_id" field.
func (pc *PartyCreate) SetNationalityID(s string) *PartyCreate {
	pc.mutation.SetNationalityID(s)
	return pc
}

// SetNillableNationalityID sets the "nationality_id" field if the given value is not nil.
func (pc *PartyCreate) SetNillableNationalityID(s *string) *PartyCreate {
	if s != nil {
		pc.SetNationalityID(*s)
	}
	return pc
}

// SetNote sets the "note" field.
func (pc *PartyCreate) SetNote(s string) *PartyCreate {
	pc.mutation.SetNote(s)
	return pc
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (pc *PartyCreate) SetNillableNote(s *string) *PartyCreate {
	if s != nil {
		pc.SetNote(*s)
	}
	return pc
}

// SetTaxID sets the "tax_id" field.
func (pc *PartyCreate) SetTaxID(s string) *PartyCreate {
	pc.mutation.SetTaxID(s)
	return pc
}

// SetNillableTaxID sets the "tax_id" field if the given value is not nil.
func (pc *PartyCreate) SetNillableTaxID(s *string) *PartyCreate {
	if s != nil {
		pc.SetTaxID(*s)
	}
	return pc
}

// SetTitle sets the "title" field.
func (pc *PartyCreate) SetTitle(pa party.Title) *PartyCreate {
	pc.mutation.SetTitle(pa)
	return pc
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (pc *PartyCreate) SetNillableTitle(pa *party.Title) *PartyCreate {
	if pa != nil {
		pc.SetTitle(*pa)
	}
	return pc
}

// SetType sets the "type" field.
func (pc *PartyCreate) SetType(s string) *PartyCreate {
	pc.mutation.SetType(s)
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *PartyCreate) SetUpdatedAt(t time.Time) *PartyCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *PartyCreate) SetNillableUpdatedAt(t *time.Time) *PartyCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetWebsite sets the "website" field.
func (pc *PartyCreate) SetWebsite(s string) *PartyCreate {
	pc.mutation.SetWebsite(s)
	return pc
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (pc *PartyCreate) SetNillableWebsite(s *string) *PartyCreate {
	if s != nil {
		pc.SetWebsite(*s)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *PartyCreate) SetID(s string) *PartyCreate {
	pc.mutation.SetID(s)
	return pc
}

// AddCommChannelIDs adds the "comm_channels" edge to the CommChannel entity by IDs.
func (pc *PartyCreate) AddCommChannelIDs(ids ...string) *PartyCreate {
	pc.mutation.AddCommChannelIDs(ids...)
	return pc
}

// AddCommChannels adds the "comm_channels" edges to the CommChannel entity.
func (pc *PartyCreate) AddCommChannels(c ...*CommChannel) *PartyCreate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pc.AddCommChannelIDs(ids...)
}

// AddRelationshipIDs adds the "relationships" edge to the Relationship entity by IDs.
func (pc *PartyCreate) AddRelationshipIDs(ids ...string) *PartyCreate {
	pc.mutation.AddRelationshipIDs(ids...)
	return pc
}

// AddRelationships adds the "relationships" edges to the Relationship entity.
func (pc *PartyCreate) AddRelationships(r ...*Relationship) *PartyCreate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pc.AddRelationshipIDs(ids...)
}

// Mutation returns the PartyMutation object of the builder.
func (pc *PartyCreate) Mutation() *PartyMutation {
	return pc.mutation
}

// Save creates the Party in the database.
func (pc *PartyCreate) Save(ctx context.Context) (*Party, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PartyCreate) SaveX(ctx context.Context) *Party {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PartyCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PartyCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PartyCreate) defaults() {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := party.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PartyCreate) check() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Party.created_at"`)}
	}
	if _, ok := pc.mutation.DisplayName(); !ok {
		return &ValidationError{Name: "display_name", err: errors.New(`ent: missing required field "Party.display_name"`)}
	}
	if v, ok := pc.mutation.DisplayName(); ok {
		if err := party.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`ent: validator failed for field "Party.display_name": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Etag(); !ok {
		return &ValidationError{Name: "etag", err: errors.New(`ent: missing required field "Party.etag"`)}
	}
	if v, ok := pc.mutation.LegalName(); ok {
		if err := party.LegalNameValidator(v); err != nil {
			return &ValidationError{Name: "legal_name", err: fmt.Errorf(`ent: validator failed for field "Party.legal_name": %w`, err)}
		}
	}
	if v, ok := pc.mutation.Title(); ok {
		if err := party.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Party.title": %w`, err)}
		}
	}
	if _, ok := pc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Party.type"`)}
	}
	return nil
}

func (pc *PartyCreate) sqlSave(ctx context.Context) (*Party, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Party.ID type: %T", _spec.ID.Value)
		}
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PartyCreate) createSpec() (*Party, *sqlgraph.CreateSpec) {
	var (
		_node = &Party{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(party.Table, sqlgraph.NewFieldSpec(party.FieldID, field.TypeString))
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.AvatarURL(); ok {
		_spec.SetField(party.FieldAvatarURL, field.TypeString, value)
		_node.AvatarURL = &value
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(party.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.DeletedAt(); ok {
		_spec.SetField(party.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := pc.mutation.DeletedBy(); ok {
		_spec.SetField(party.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = &value
	}
	if value, ok := pc.mutation.DisplayName(); ok {
		_spec.SetField(party.FieldDisplayName, field.TypeString, value)
		_node.DisplayName = value
	}
	if value, ok := pc.mutation.Etag(); ok {
		_spec.SetField(party.FieldEtag, field.TypeString, value)
		_node.Etag = value
	}
	if value, ok := pc.mutation.JobPosition(); ok {
		_spec.SetField(party.FieldJobPosition, field.TypeString, value)
		_node.JobPosition = &value
	}
	if value, ok := pc.mutation.LanguageID(); ok {
		_spec.SetField(party.FieldLanguageID, field.TypeString, value)
		_node.LanguageID = &value
	}
	if value, ok := pc.mutation.LegalAddress(); ok {
		_spec.SetField(party.FieldLegalAddress, field.TypeString, value)
		_node.LegalAddress = &value
	}
	if value, ok := pc.mutation.LegalName(); ok {
		_spec.SetField(party.FieldLegalName, field.TypeString, value)
		_node.LegalName = &value
	}
	if value, ok := pc.mutation.NationalityID(); ok {
		_spec.SetField(party.FieldNationalityID, field.TypeString, value)
		_node.NationalityID = &value
	}
	if value, ok := pc.mutation.Note(); ok {
		_spec.SetField(party.FieldNote, field.TypeString, value)
		_node.Note = &value
	}
	if value, ok := pc.mutation.TaxID(); ok {
		_spec.SetField(party.FieldTaxID, field.TypeString, value)
		_node.TaxID = &value
	}
	if value, ok := pc.mutation.Title(); ok {
		_spec.SetField(party.FieldTitle, field.TypeEnum, value)
		_node.Title = &value
	}
	if value, ok := pc.mutation.GetType(); ok {
		_spec.SetField(party.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(party.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = &value
	}
	if value, ok := pc.mutation.Website(); ok {
		_spec.SetField(party.FieldWebsite, field.TypeString, value)
		_node.Website = &value
	}
	if nodes := pc.mutation.CommChannelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   party.CommChannelsTable,
			Columns: []string{party.CommChannelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commchannel.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.RelationshipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   party.RelationshipsTable,
			Columns: []string{party.RelationshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(relationship.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PartyCreateBulk is the builder for creating many Party entities in bulk.
type PartyCreateBulk struct {
	config
	err      error
	builders []*PartyCreate
}

// Save creates the Party entities in the database.
func (pcb *PartyCreateBulk) Save(ctx context.Context) ([]*Party, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Party, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PartyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PartyCreateBulk) SaveX(ctx context.Context) []*Party {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PartyCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PartyCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
