// Code generated by ent, DO NOT EDIT.

package relationship

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the relationship type in the database.
	Label = "relationship"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldDeletedBy holds the string denoting the deleted_by field in the database.
	FieldDeletedBy = "deleted_by"
	// FieldEtag holds the string denoting the etag field in the database.
	FieldEtag = "etag"
	// FieldNote holds the string denoting the note field in the database.
	FieldNote = "note"
	// FieldTargetPartyID holds the string denoting the target_party_id field in the database.
	FieldTargetPartyID = "target_party_id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeParty holds the string denoting the party edge name in mutations.
	EdgeParty = "party"
	// Table holds the table name of the relationship in the database.
	Table = "contacts_relationships"
	// PartyTable is the table that holds the party relation/edge.
	PartyTable = "contacts_relationships"
	// PartyInverseTable is the table name for the Party entity.
	// It exists in this package in order to avoid circular dependency with the "party" package.
	PartyInverseTable = "contacts_parties"
	// PartyColumn is the table column denoting the party relation/edge.
	PartyColumn = "target_party_id"
)

// Columns holds all SQL columns for relationship fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldDeletedAt,
	FieldDeletedBy,
	FieldEtag,
	FieldNote,
	FieldTargetPartyID,
	FieldType,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeEmployee   Type = "employee"
	TypeSpouse     Type = "spouse"
	TypeParent     Type = "parent"
	TypeSibling    Type = "sibling"
	TypeEmergency  Type = "emergency"
	TypeSubsidiary Type = "subsidiary"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeEmployee, TypeSpouse, TypeParent, TypeSibling, TypeEmergency, TypeSubsidiary:
		return nil
	default:
		return fmt.Errorf("relationship: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the Relationship queries.
type OrderOption = func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByDeletedBy orders the results by the deleted_by field.
func ByDeletedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedBy, opts...).ToFunc()
}

// ByEtag orders the results by the etag field.
func ByEtag(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEtag, opts...).ToFunc()
}

// ByNote orders the results by the note field.
func ByNote(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNote, opts...).ToFunc()
}

// ByTargetPartyID orders the results by the target_party_id field.
func ByTargetPartyID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTargetPartyID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByPartyField orders the results by party field.
func ByPartyField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPartyStep(), sql.OrderByField(field, opts...))
	}
}

// Added by NikkieERP scripts/ent_templates/dialect/sql/meta.tmpl
func NewPartyStepNikki() *sqlgraph.Step {
	return newPartyStep()
}

func newPartyStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PartyInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, PartyTable, PartyColumn),
	)
}
