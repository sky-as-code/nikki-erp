// Code generated by ent, DO NOT EDIT.

package relationship

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/sky-as-code/nikki-erp/modules/contacts/infra/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Relationship {
	return predicate.Relationship(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Relationship {
	return predicate.Relationship(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Relationship {
	return predicate.Relationship(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Relationship {
	return predicate.Relationship(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Relationship {
	return predicate.Relationship(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Relationship {
	return predicate.Relationship(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Relationship {
	return predicate.Relationship(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Relationship {
	return predicate.Relationship(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Relationship {
	return predicate.Relationship(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Relationship {
	return predicate.Relationship(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Relationship {
	return predicate.Relationship(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Relationship {
	return predicate.Relationship(sql.FieldEQ(FieldCreatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Relationship {
	return predicate.Relationship(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedBy applies equality check predicate on the "deleted_by" field. It's identical to DeletedByEQ.
func DeletedBy(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldEQ(FieldDeletedBy, v))
}

// Etag applies equality check predicate on the "etag" field. It's identical to EtagEQ.
func Etag(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldEQ(FieldEtag, v))
}

// Note applies equality check predicate on the "note" field. It's identical to NoteEQ.
func Note(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldEQ(FieldNote, v))
}

// PartyID applies equality check predicate on the "party_id" field. It's identical to PartyIDEQ.
func PartyID(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldEQ(FieldPartyID, v))
}

// TargetPartyID applies equality check predicate on the "target_party_id" field. It's identical to TargetPartyIDEQ.
func TargetPartyID(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldEQ(FieldTargetPartyID, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldEQ(FieldType, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Relationship {
	return predicate.Relationship(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Relationship {
	return predicate.Relationship(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Relationship {
	return predicate.Relationship(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Relationship {
	return predicate.Relationship(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Relationship {
	return predicate.Relationship(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Relationship {
	return predicate.Relationship(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Relationship {
	return predicate.Relationship(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Relationship {
	return predicate.Relationship(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Relationship {
	return predicate.Relationship(sql.FieldLTE(FieldCreatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Relationship {
	return predicate.Relationship(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Relationship {
	return predicate.Relationship(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Relationship {
	return predicate.Relationship(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Relationship {
	return predicate.Relationship(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Relationship {
	return predicate.Relationship(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Relationship {
	return predicate.Relationship(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Relationship {
	return predicate.Relationship(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Relationship {
	return predicate.Relationship(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Relationship {
	return predicate.Relationship(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Relationship {
	return predicate.Relationship(sql.FieldNotNull(FieldDeletedAt))
}

// DeletedByEQ applies the EQ predicate on the "deleted_by" field.
func DeletedByEQ(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldEQ(FieldDeletedBy, v))
}

// DeletedByNEQ applies the NEQ predicate on the "deleted_by" field.
func DeletedByNEQ(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldNEQ(FieldDeletedBy, v))
}

// DeletedByIn applies the In predicate on the "deleted_by" field.
func DeletedByIn(vs ...string) predicate.Relationship {
	return predicate.Relationship(sql.FieldIn(FieldDeletedBy, vs...))
}

// DeletedByNotIn applies the NotIn predicate on the "deleted_by" field.
func DeletedByNotIn(vs ...string) predicate.Relationship {
	return predicate.Relationship(sql.FieldNotIn(FieldDeletedBy, vs...))
}

// DeletedByGT applies the GT predicate on the "deleted_by" field.
func DeletedByGT(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldGT(FieldDeletedBy, v))
}

// DeletedByGTE applies the GTE predicate on the "deleted_by" field.
func DeletedByGTE(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldGTE(FieldDeletedBy, v))
}

// DeletedByLT applies the LT predicate on the "deleted_by" field.
func DeletedByLT(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldLT(FieldDeletedBy, v))
}

// DeletedByLTE applies the LTE predicate on the "deleted_by" field.
func DeletedByLTE(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldLTE(FieldDeletedBy, v))
}

// DeletedByContains applies the Contains predicate on the "deleted_by" field.
func DeletedByContains(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldContains(FieldDeletedBy, v))
}

// DeletedByHasPrefix applies the HasPrefix predicate on the "deleted_by" field.
func DeletedByHasPrefix(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldHasPrefix(FieldDeletedBy, v))
}

// DeletedByHasSuffix applies the HasSuffix predicate on the "deleted_by" field.
func DeletedByHasSuffix(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldHasSuffix(FieldDeletedBy, v))
}

// DeletedByIsNil applies the IsNil predicate on the "deleted_by" field.
func DeletedByIsNil() predicate.Relationship {
	return predicate.Relationship(sql.FieldIsNull(FieldDeletedBy))
}

// DeletedByNotNil applies the NotNil predicate on the "deleted_by" field.
func DeletedByNotNil() predicate.Relationship {
	return predicate.Relationship(sql.FieldNotNull(FieldDeletedBy))
}

// DeletedByEqualFold applies the EqualFold predicate on the "deleted_by" field.
func DeletedByEqualFold(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldEqualFold(FieldDeletedBy, v))
}

// DeletedByContainsFold applies the ContainsFold predicate on the "deleted_by" field.
func DeletedByContainsFold(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldContainsFold(FieldDeletedBy, v))
}

// EtagEQ applies the EQ predicate on the "etag" field.
func EtagEQ(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldEQ(FieldEtag, v))
}

// EtagNEQ applies the NEQ predicate on the "etag" field.
func EtagNEQ(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldNEQ(FieldEtag, v))
}

// EtagIn applies the In predicate on the "etag" field.
func EtagIn(vs ...string) predicate.Relationship {
	return predicate.Relationship(sql.FieldIn(FieldEtag, vs...))
}

// EtagNotIn applies the NotIn predicate on the "etag" field.
func EtagNotIn(vs ...string) predicate.Relationship {
	return predicate.Relationship(sql.FieldNotIn(FieldEtag, vs...))
}

// EtagGT applies the GT predicate on the "etag" field.
func EtagGT(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldGT(FieldEtag, v))
}

// EtagGTE applies the GTE predicate on the "etag" field.
func EtagGTE(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldGTE(FieldEtag, v))
}

// EtagLT applies the LT predicate on the "etag" field.
func EtagLT(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldLT(FieldEtag, v))
}

// EtagLTE applies the LTE predicate on the "etag" field.
func EtagLTE(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldLTE(FieldEtag, v))
}

// EtagContains applies the Contains predicate on the "etag" field.
func EtagContains(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldContains(FieldEtag, v))
}

// EtagHasPrefix applies the HasPrefix predicate on the "etag" field.
func EtagHasPrefix(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldHasPrefix(FieldEtag, v))
}

// EtagHasSuffix applies the HasSuffix predicate on the "etag" field.
func EtagHasSuffix(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldHasSuffix(FieldEtag, v))
}

// EtagEqualFold applies the EqualFold predicate on the "etag" field.
func EtagEqualFold(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldEqualFold(FieldEtag, v))
}

// EtagContainsFold applies the ContainsFold predicate on the "etag" field.
func EtagContainsFold(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldContainsFold(FieldEtag, v))
}

// NoteEQ applies the EQ predicate on the "note" field.
func NoteEQ(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldEQ(FieldNote, v))
}

// NoteNEQ applies the NEQ predicate on the "note" field.
func NoteNEQ(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldNEQ(FieldNote, v))
}

// NoteIn applies the In predicate on the "note" field.
func NoteIn(vs ...string) predicate.Relationship {
	return predicate.Relationship(sql.FieldIn(FieldNote, vs...))
}

// NoteNotIn applies the NotIn predicate on the "note" field.
func NoteNotIn(vs ...string) predicate.Relationship {
	return predicate.Relationship(sql.FieldNotIn(FieldNote, vs...))
}

// NoteGT applies the GT predicate on the "note" field.
func NoteGT(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldGT(FieldNote, v))
}

// NoteGTE applies the GTE predicate on the "note" field.
func NoteGTE(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldGTE(FieldNote, v))
}

// NoteLT applies the LT predicate on the "note" field.
func NoteLT(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldLT(FieldNote, v))
}

// NoteLTE applies the LTE predicate on the "note" field.
func NoteLTE(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldLTE(FieldNote, v))
}

// NoteContains applies the Contains predicate on the "note" field.
func NoteContains(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldContains(FieldNote, v))
}

// NoteHasPrefix applies the HasPrefix predicate on the "note" field.
func NoteHasPrefix(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldHasPrefix(FieldNote, v))
}

// NoteHasSuffix applies the HasSuffix predicate on the "note" field.
func NoteHasSuffix(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldHasSuffix(FieldNote, v))
}

// NoteIsNil applies the IsNil predicate on the "note" field.
func NoteIsNil() predicate.Relationship {
	return predicate.Relationship(sql.FieldIsNull(FieldNote))
}

// NoteNotNil applies the NotNil predicate on the "note" field.
func NoteNotNil() predicate.Relationship {
	return predicate.Relationship(sql.FieldNotNull(FieldNote))
}

// NoteEqualFold applies the EqualFold predicate on the "note" field.
func NoteEqualFold(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldEqualFold(FieldNote, v))
}

// NoteContainsFold applies the ContainsFold predicate on the "note" field.
func NoteContainsFold(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldContainsFold(FieldNote, v))
}

// PartyIDEQ applies the EQ predicate on the "party_id" field.
func PartyIDEQ(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldEQ(FieldPartyID, v))
}

// PartyIDNEQ applies the NEQ predicate on the "party_id" field.
func PartyIDNEQ(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldNEQ(FieldPartyID, v))
}

// PartyIDIn applies the In predicate on the "party_id" field.
func PartyIDIn(vs ...string) predicate.Relationship {
	return predicate.Relationship(sql.FieldIn(FieldPartyID, vs...))
}

// PartyIDNotIn applies the NotIn predicate on the "party_id" field.
func PartyIDNotIn(vs ...string) predicate.Relationship {
	return predicate.Relationship(sql.FieldNotIn(FieldPartyID, vs...))
}

// PartyIDGT applies the GT predicate on the "party_id" field.
func PartyIDGT(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldGT(FieldPartyID, v))
}

// PartyIDGTE applies the GTE predicate on the "party_id" field.
func PartyIDGTE(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldGTE(FieldPartyID, v))
}

// PartyIDLT applies the LT predicate on the "party_id" field.
func PartyIDLT(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldLT(FieldPartyID, v))
}

// PartyIDLTE applies the LTE predicate on the "party_id" field.
func PartyIDLTE(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldLTE(FieldPartyID, v))
}

// PartyIDContains applies the Contains predicate on the "party_id" field.
func PartyIDContains(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldContains(FieldPartyID, v))
}

// PartyIDHasPrefix applies the HasPrefix predicate on the "party_id" field.
func PartyIDHasPrefix(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldHasPrefix(FieldPartyID, v))
}

// PartyIDHasSuffix applies the HasSuffix predicate on the "party_id" field.
func PartyIDHasSuffix(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldHasSuffix(FieldPartyID, v))
}

// PartyIDEqualFold applies the EqualFold predicate on the "party_id" field.
func PartyIDEqualFold(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldEqualFold(FieldPartyID, v))
}

// PartyIDContainsFold applies the ContainsFold predicate on the "party_id" field.
func PartyIDContainsFold(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldContainsFold(FieldPartyID, v))
}

// TargetPartyIDEQ applies the EQ predicate on the "target_party_id" field.
func TargetPartyIDEQ(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldEQ(FieldTargetPartyID, v))
}

// TargetPartyIDNEQ applies the NEQ predicate on the "target_party_id" field.
func TargetPartyIDNEQ(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldNEQ(FieldTargetPartyID, v))
}

// TargetPartyIDIn applies the In predicate on the "target_party_id" field.
func TargetPartyIDIn(vs ...string) predicate.Relationship {
	return predicate.Relationship(sql.FieldIn(FieldTargetPartyID, vs...))
}

// TargetPartyIDNotIn applies the NotIn predicate on the "target_party_id" field.
func TargetPartyIDNotIn(vs ...string) predicate.Relationship {
	return predicate.Relationship(sql.FieldNotIn(FieldTargetPartyID, vs...))
}

// TargetPartyIDGT applies the GT predicate on the "target_party_id" field.
func TargetPartyIDGT(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldGT(FieldTargetPartyID, v))
}

// TargetPartyIDGTE applies the GTE predicate on the "target_party_id" field.
func TargetPartyIDGTE(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldGTE(FieldTargetPartyID, v))
}

// TargetPartyIDLT applies the LT predicate on the "target_party_id" field.
func TargetPartyIDLT(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldLT(FieldTargetPartyID, v))
}

// TargetPartyIDLTE applies the LTE predicate on the "target_party_id" field.
func TargetPartyIDLTE(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldLTE(FieldTargetPartyID, v))
}

// TargetPartyIDContains applies the Contains predicate on the "target_party_id" field.
func TargetPartyIDContains(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldContains(FieldTargetPartyID, v))
}

// TargetPartyIDHasPrefix applies the HasPrefix predicate on the "target_party_id" field.
func TargetPartyIDHasPrefix(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldHasPrefix(FieldTargetPartyID, v))
}

// TargetPartyIDHasSuffix applies the HasSuffix predicate on the "target_party_id" field.
func TargetPartyIDHasSuffix(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldHasSuffix(FieldTargetPartyID, v))
}

// TargetPartyIDEqualFold applies the EqualFold predicate on the "target_party_id" field.
func TargetPartyIDEqualFold(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldEqualFold(FieldTargetPartyID, v))
}

// TargetPartyIDContainsFold applies the ContainsFold predicate on the "target_party_id" field.
func TargetPartyIDContainsFold(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldContainsFold(FieldTargetPartyID, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.Relationship {
	return predicate.Relationship(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.Relationship {
	return predicate.Relationship(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.Relationship {
	return predicate.Relationship(sql.FieldContainsFold(FieldType, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Relationship {
	return predicate.Relationship(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Relationship {
	return predicate.Relationship(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Relationship {
	return predicate.Relationship(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Relationship {
	return predicate.Relationship(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Relationship {
	return predicate.Relationship(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Relationship {
	return predicate.Relationship(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Relationship {
	return predicate.Relationship(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Relationship {
	return predicate.Relationship(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Relationship {
	return predicate.Relationship(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Relationship {
	return predicate.Relationship(sql.FieldNotNull(FieldUpdatedAt))
}

// HasSourceParty applies the HasEdge predicate on the "source_party" edge.
func HasSourceParty() predicate.Relationship {
	return predicate.Relationship(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, SourcePartyTable, SourcePartyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSourcePartyWith applies the HasEdge predicate on the "source_party" edge with a given conditions (other predicates).
func HasSourcePartyWith(preds ...predicate.Party) predicate.Relationship {
	return predicate.Relationship(func(s *sql.Selector) {
		step := newSourcePartyStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTargetParty applies the HasEdge predicate on the "target_party" edge.
func HasTargetParty() predicate.Relationship {
	return predicate.Relationship(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TargetPartyTable, TargetPartyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTargetPartyWith applies the HasEdge predicate on the "target_party" edge with a given conditions (other predicates).
func HasTargetPartyWith(preds ...predicate.Party) predicate.Relationship {
	return predicate.Relationship(func(s *sql.Selector) {
		step := newTargetPartyStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Relationship) predicate.Relationship {
	return predicate.Relationship(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Relationship) predicate.Relationship {
	return predicate.Relationship(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Relationship) predicate.Relationship {
	return predicate.Relationship(sql.NotPredicates(p))
}
