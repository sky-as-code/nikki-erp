// Code generated by ent, DO NOT EDIT.

package party

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/sky-as-code/nikki-erp/modules/contacts/infra/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Party {
	return predicate.Party(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Party {
	return predicate.Party(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Party {
	return predicate.Party(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Party {
	return predicate.Party(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Party {
	return predicate.Party(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Party {
	return predicate.Party(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Party {
	return predicate.Party(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Party {
	return predicate.Party(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Party {
	return predicate.Party(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Party {
	return predicate.Party(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Party {
	return predicate.Party(sql.FieldContainsFold(FieldID, id))
}

// AvatarURL applies equality check predicate on the "avatar_url" field. It's identical to AvatarURLEQ.
func AvatarURL(v string) predicate.Party {
	return predicate.Party(sql.FieldEQ(FieldAvatarURL, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Party {
	return predicate.Party(sql.FieldEQ(FieldCreatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Party {
	return predicate.Party(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedBy applies equality check predicate on the "deleted_by" field. It's identical to DeletedByEQ.
func DeletedBy(v string) predicate.Party {
	return predicate.Party(sql.FieldEQ(FieldDeletedBy, v))
}

// DisplayName applies equality check predicate on the "display_name" field. It's identical to DisplayNameEQ.
func DisplayName(v string) predicate.Party {
	return predicate.Party(sql.FieldEQ(FieldDisplayName, v))
}

// Etag applies equality check predicate on the "etag" field. It's identical to EtagEQ.
func Etag(v string) predicate.Party {
	return predicate.Party(sql.FieldEQ(FieldEtag, v))
}

// JobPosition applies equality check predicate on the "job_position" field. It's identical to JobPositionEQ.
func JobPosition(v string) predicate.Party {
	return predicate.Party(sql.FieldEQ(FieldJobPosition, v))
}

// LanguageID applies equality check predicate on the "language_id" field. It's identical to LanguageIDEQ.
func LanguageID(v string) predicate.Party {
	return predicate.Party(sql.FieldEQ(FieldLanguageID, v))
}

// LegalAddress applies equality check predicate on the "legal_address" field. It's identical to LegalAddressEQ.
func LegalAddress(v string) predicate.Party {
	return predicate.Party(sql.FieldEQ(FieldLegalAddress, v))
}

// LegalName applies equality check predicate on the "legal_name" field. It's identical to LegalNameEQ.
func LegalName(v string) predicate.Party {
	return predicate.Party(sql.FieldEQ(FieldLegalName, v))
}

// NationalityID applies equality check predicate on the "nationality_id" field. It's identical to NationalityIDEQ.
func NationalityID(v string) predicate.Party {
	return predicate.Party(sql.FieldEQ(FieldNationalityID, v))
}

// Note applies equality check predicate on the "note" field. It's identical to NoteEQ.
func Note(v string) predicate.Party {
	return predicate.Party(sql.FieldEQ(FieldNote, v))
}

// TaxID applies equality check predicate on the "tax_id" field. It's identical to TaxIDEQ.
func TaxID(v string) predicate.Party {
	return predicate.Party(sql.FieldEQ(FieldTaxID, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.Party {
	return predicate.Party(sql.FieldEQ(FieldType, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Party {
	return predicate.Party(sql.FieldEQ(FieldUpdatedAt, v))
}

// Website applies equality check predicate on the "website" field. It's identical to WebsiteEQ.
func Website(v string) predicate.Party {
	return predicate.Party(sql.FieldEQ(FieldWebsite, v))
}

// AvatarURLEQ applies the EQ predicate on the "avatar_url" field.
func AvatarURLEQ(v string) predicate.Party {
	return predicate.Party(sql.FieldEQ(FieldAvatarURL, v))
}

// AvatarURLNEQ applies the NEQ predicate on the "avatar_url" field.
func AvatarURLNEQ(v string) predicate.Party {
	return predicate.Party(sql.FieldNEQ(FieldAvatarURL, v))
}

// AvatarURLIn applies the In predicate on the "avatar_url" field.
func AvatarURLIn(vs ...string) predicate.Party {
	return predicate.Party(sql.FieldIn(FieldAvatarURL, vs...))
}

// AvatarURLNotIn applies the NotIn predicate on the "avatar_url" field.
func AvatarURLNotIn(vs ...string) predicate.Party {
	return predicate.Party(sql.FieldNotIn(FieldAvatarURL, vs...))
}

// AvatarURLGT applies the GT predicate on the "avatar_url" field.
func AvatarURLGT(v string) predicate.Party {
	return predicate.Party(sql.FieldGT(FieldAvatarURL, v))
}

// AvatarURLGTE applies the GTE predicate on the "avatar_url" field.
func AvatarURLGTE(v string) predicate.Party {
	return predicate.Party(sql.FieldGTE(FieldAvatarURL, v))
}

// AvatarURLLT applies the LT predicate on the "avatar_url" field.
func AvatarURLLT(v string) predicate.Party {
	return predicate.Party(sql.FieldLT(FieldAvatarURL, v))
}

// AvatarURLLTE applies the LTE predicate on the "avatar_url" field.
func AvatarURLLTE(v string) predicate.Party {
	return predicate.Party(sql.FieldLTE(FieldAvatarURL, v))
}

// AvatarURLContains applies the Contains predicate on the "avatar_url" field.
func AvatarURLContains(v string) predicate.Party {
	return predicate.Party(sql.FieldContains(FieldAvatarURL, v))
}

// AvatarURLHasPrefix applies the HasPrefix predicate on the "avatar_url" field.
func AvatarURLHasPrefix(v string) predicate.Party {
	return predicate.Party(sql.FieldHasPrefix(FieldAvatarURL, v))
}

// AvatarURLHasSuffix applies the HasSuffix predicate on the "avatar_url" field.
func AvatarURLHasSuffix(v string) predicate.Party {
	return predicate.Party(sql.FieldHasSuffix(FieldAvatarURL, v))
}

// AvatarURLIsNil applies the IsNil predicate on the "avatar_url" field.
func AvatarURLIsNil() predicate.Party {
	return predicate.Party(sql.FieldIsNull(FieldAvatarURL))
}

// AvatarURLNotNil applies the NotNil predicate on the "avatar_url" field.
func AvatarURLNotNil() predicate.Party {
	return predicate.Party(sql.FieldNotNull(FieldAvatarURL))
}

// AvatarURLEqualFold applies the EqualFold predicate on the "avatar_url" field.
func AvatarURLEqualFold(v string) predicate.Party {
	return predicate.Party(sql.FieldEqualFold(FieldAvatarURL, v))
}

// AvatarURLContainsFold applies the ContainsFold predicate on the "avatar_url" field.
func AvatarURLContainsFold(v string) predicate.Party {
	return predicate.Party(sql.FieldContainsFold(FieldAvatarURL, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Party {
	return predicate.Party(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Party {
	return predicate.Party(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Party {
	return predicate.Party(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Party {
	return predicate.Party(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Party {
	return predicate.Party(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Party {
	return predicate.Party(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Party {
	return predicate.Party(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Party {
	return predicate.Party(sql.FieldLTE(FieldCreatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Party {
	return predicate.Party(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Party {
	return predicate.Party(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Party {
	return predicate.Party(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Party {
	return predicate.Party(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Party {
	return predicate.Party(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Party {
	return predicate.Party(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Party {
	return predicate.Party(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Party {
	return predicate.Party(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Party {
	return predicate.Party(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Party {
	return predicate.Party(sql.FieldNotNull(FieldDeletedAt))
}

// DeletedByEQ applies the EQ predicate on the "deleted_by" field.
func DeletedByEQ(v string) predicate.Party {
	return predicate.Party(sql.FieldEQ(FieldDeletedBy, v))
}

// DeletedByNEQ applies the NEQ predicate on the "deleted_by" field.
func DeletedByNEQ(v string) predicate.Party {
	return predicate.Party(sql.FieldNEQ(FieldDeletedBy, v))
}

// DeletedByIn applies the In predicate on the "deleted_by" field.
func DeletedByIn(vs ...string) predicate.Party {
	return predicate.Party(sql.FieldIn(FieldDeletedBy, vs...))
}

// DeletedByNotIn applies the NotIn predicate on the "deleted_by" field.
func DeletedByNotIn(vs ...string) predicate.Party {
	return predicate.Party(sql.FieldNotIn(FieldDeletedBy, vs...))
}

// DeletedByGT applies the GT predicate on the "deleted_by" field.
func DeletedByGT(v string) predicate.Party {
	return predicate.Party(sql.FieldGT(FieldDeletedBy, v))
}

// DeletedByGTE applies the GTE predicate on the "deleted_by" field.
func DeletedByGTE(v string) predicate.Party {
	return predicate.Party(sql.FieldGTE(FieldDeletedBy, v))
}

// DeletedByLT applies the LT predicate on the "deleted_by" field.
func DeletedByLT(v string) predicate.Party {
	return predicate.Party(sql.FieldLT(FieldDeletedBy, v))
}

// DeletedByLTE applies the LTE predicate on the "deleted_by" field.
func DeletedByLTE(v string) predicate.Party {
	return predicate.Party(sql.FieldLTE(FieldDeletedBy, v))
}

// DeletedByContains applies the Contains predicate on the "deleted_by" field.
func DeletedByContains(v string) predicate.Party {
	return predicate.Party(sql.FieldContains(FieldDeletedBy, v))
}

// DeletedByHasPrefix applies the HasPrefix predicate on the "deleted_by" field.
func DeletedByHasPrefix(v string) predicate.Party {
	return predicate.Party(sql.FieldHasPrefix(FieldDeletedBy, v))
}

// DeletedByHasSuffix applies the HasSuffix predicate on the "deleted_by" field.
func DeletedByHasSuffix(v string) predicate.Party {
	return predicate.Party(sql.FieldHasSuffix(FieldDeletedBy, v))
}

// DeletedByIsNil applies the IsNil predicate on the "deleted_by" field.
func DeletedByIsNil() predicate.Party {
	return predicate.Party(sql.FieldIsNull(FieldDeletedBy))
}

// DeletedByNotNil applies the NotNil predicate on the "deleted_by" field.
func DeletedByNotNil() predicate.Party {
	return predicate.Party(sql.FieldNotNull(FieldDeletedBy))
}

// DeletedByEqualFold applies the EqualFold predicate on the "deleted_by" field.
func DeletedByEqualFold(v string) predicate.Party {
	return predicate.Party(sql.FieldEqualFold(FieldDeletedBy, v))
}

// DeletedByContainsFold applies the ContainsFold predicate on the "deleted_by" field.
func DeletedByContainsFold(v string) predicate.Party {
	return predicate.Party(sql.FieldContainsFold(FieldDeletedBy, v))
}

// DisplayNameEQ applies the EQ predicate on the "display_name" field.
func DisplayNameEQ(v string) predicate.Party {
	return predicate.Party(sql.FieldEQ(FieldDisplayName, v))
}

// DisplayNameNEQ applies the NEQ predicate on the "display_name" field.
func DisplayNameNEQ(v string) predicate.Party {
	return predicate.Party(sql.FieldNEQ(FieldDisplayName, v))
}

// DisplayNameIn applies the In predicate on the "display_name" field.
func DisplayNameIn(vs ...string) predicate.Party {
	return predicate.Party(sql.FieldIn(FieldDisplayName, vs...))
}

// DisplayNameNotIn applies the NotIn predicate on the "display_name" field.
func DisplayNameNotIn(vs ...string) predicate.Party {
	return predicate.Party(sql.FieldNotIn(FieldDisplayName, vs...))
}

// DisplayNameGT applies the GT predicate on the "display_name" field.
func DisplayNameGT(v string) predicate.Party {
	return predicate.Party(sql.FieldGT(FieldDisplayName, v))
}

// DisplayNameGTE applies the GTE predicate on the "display_name" field.
func DisplayNameGTE(v string) predicate.Party {
	return predicate.Party(sql.FieldGTE(FieldDisplayName, v))
}

// DisplayNameLT applies the LT predicate on the "display_name" field.
func DisplayNameLT(v string) predicate.Party {
	return predicate.Party(sql.FieldLT(FieldDisplayName, v))
}

// DisplayNameLTE applies the LTE predicate on the "display_name" field.
func DisplayNameLTE(v string) predicate.Party {
	return predicate.Party(sql.FieldLTE(FieldDisplayName, v))
}

// DisplayNameContains applies the Contains predicate on the "display_name" field.
func DisplayNameContains(v string) predicate.Party {
	return predicate.Party(sql.FieldContains(FieldDisplayName, v))
}

// DisplayNameHasPrefix applies the HasPrefix predicate on the "display_name" field.
func DisplayNameHasPrefix(v string) predicate.Party {
	return predicate.Party(sql.FieldHasPrefix(FieldDisplayName, v))
}

// DisplayNameHasSuffix applies the HasSuffix predicate on the "display_name" field.
func DisplayNameHasSuffix(v string) predicate.Party {
	return predicate.Party(sql.FieldHasSuffix(FieldDisplayName, v))
}

// DisplayNameEqualFold applies the EqualFold predicate on the "display_name" field.
func DisplayNameEqualFold(v string) predicate.Party {
	return predicate.Party(sql.FieldEqualFold(FieldDisplayName, v))
}

// DisplayNameContainsFold applies the ContainsFold predicate on the "display_name" field.
func DisplayNameContainsFold(v string) predicate.Party {
	return predicate.Party(sql.FieldContainsFold(FieldDisplayName, v))
}

// EtagEQ applies the EQ predicate on the "etag" field.
func EtagEQ(v string) predicate.Party {
	return predicate.Party(sql.FieldEQ(FieldEtag, v))
}

// EtagNEQ applies the NEQ predicate on the "etag" field.
func EtagNEQ(v string) predicate.Party {
	return predicate.Party(sql.FieldNEQ(FieldEtag, v))
}

// EtagIn applies the In predicate on the "etag" field.
func EtagIn(vs ...string) predicate.Party {
	return predicate.Party(sql.FieldIn(FieldEtag, vs...))
}

// EtagNotIn applies the NotIn predicate on the "etag" field.
func EtagNotIn(vs ...string) predicate.Party {
	return predicate.Party(sql.FieldNotIn(FieldEtag, vs...))
}

// EtagGT applies the GT predicate on the "etag" field.
func EtagGT(v string) predicate.Party {
	return predicate.Party(sql.FieldGT(FieldEtag, v))
}

// EtagGTE applies the GTE predicate on the "etag" field.
func EtagGTE(v string) predicate.Party {
	return predicate.Party(sql.FieldGTE(FieldEtag, v))
}

// EtagLT applies the LT predicate on the "etag" field.
func EtagLT(v string) predicate.Party {
	return predicate.Party(sql.FieldLT(FieldEtag, v))
}

// EtagLTE applies the LTE predicate on the "etag" field.
func EtagLTE(v string) predicate.Party {
	return predicate.Party(sql.FieldLTE(FieldEtag, v))
}

// EtagContains applies the Contains predicate on the "etag" field.
func EtagContains(v string) predicate.Party {
	return predicate.Party(sql.FieldContains(FieldEtag, v))
}

// EtagHasPrefix applies the HasPrefix predicate on the "etag" field.
func EtagHasPrefix(v string) predicate.Party {
	return predicate.Party(sql.FieldHasPrefix(FieldEtag, v))
}

// EtagHasSuffix applies the HasSuffix predicate on the "etag" field.
func EtagHasSuffix(v string) predicate.Party {
	return predicate.Party(sql.FieldHasSuffix(FieldEtag, v))
}

// EtagEqualFold applies the EqualFold predicate on the "etag" field.
func EtagEqualFold(v string) predicate.Party {
	return predicate.Party(sql.FieldEqualFold(FieldEtag, v))
}

// EtagContainsFold applies the ContainsFold predicate on the "etag" field.
func EtagContainsFold(v string) predicate.Party {
	return predicate.Party(sql.FieldContainsFold(FieldEtag, v))
}

// JobPositionEQ applies the EQ predicate on the "job_position" field.
func JobPositionEQ(v string) predicate.Party {
	return predicate.Party(sql.FieldEQ(FieldJobPosition, v))
}

// JobPositionNEQ applies the NEQ predicate on the "job_position" field.
func JobPositionNEQ(v string) predicate.Party {
	return predicate.Party(sql.FieldNEQ(FieldJobPosition, v))
}

// JobPositionIn applies the In predicate on the "job_position" field.
func JobPositionIn(vs ...string) predicate.Party {
	return predicate.Party(sql.FieldIn(FieldJobPosition, vs...))
}

// JobPositionNotIn applies the NotIn predicate on the "job_position" field.
func JobPositionNotIn(vs ...string) predicate.Party {
	return predicate.Party(sql.FieldNotIn(FieldJobPosition, vs...))
}

// JobPositionGT applies the GT predicate on the "job_position" field.
func JobPositionGT(v string) predicate.Party {
	return predicate.Party(sql.FieldGT(FieldJobPosition, v))
}

// JobPositionGTE applies the GTE predicate on the "job_position" field.
func JobPositionGTE(v string) predicate.Party {
	return predicate.Party(sql.FieldGTE(FieldJobPosition, v))
}

// JobPositionLT applies the LT predicate on the "job_position" field.
func JobPositionLT(v string) predicate.Party {
	return predicate.Party(sql.FieldLT(FieldJobPosition, v))
}

// JobPositionLTE applies the LTE predicate on the "job_position" field.
func JobPositionLTE(v string) predicate.Party {
	return predicate.Party(sql.FieldLTE(FieldJobPosition, v))
}

// JobPositionContains applies the Contains predicate on the "job_position" field.
func JobPositionContains(v string) predicate.Party {
	return predicate.Party(sql.FieldContains(FieldJobPosition, v))
}

// JobPositionHasPrefix applies the HasPrefix predicate on the "job_position" field.
func JobPositionHasPrefix(v string) predicate.Party {
	return predicate.Party(sql.FieldHasPrefix(FieldJobPosition, v))
}

// JobPositionHasSuffix applies the HasSuffix predicate on the "job_position" field.
func JobPositionHasSuffix(v string) predicate.Party {
	return predicate.Party(sql.FieldHasSuffix(FieldJobPosition, v))
}

// JobPositionIsNil applies the IsNil predicate on the "job_position" field.
func JobPositionIsNil() predicate.Party {
	return predicate.Party(sql.FieldIsNull(FieldJobPosition))
}

// JobPositionNotNil applies the NotNil predicate on the "job_position" field.
func JobPositionNotNil() predicate.Party {
	return predicate.Party(sql.FieldNotNull(FieldJobPosition))
}

// JobPositionEqualFold applies the EqualFold predicate on the "job_position" field.
func JobPositionEqualFold(v string) predicate.Party {
	return predicate.Party(sql.FieldEqualFold(FieldJobPosition, v))
}

// JobPositionContainsFold applies the ContainsFold predicate on the "job_position" field.
func JobPositionContainsFold(v string) predicate.Party {
	return predicate.Party(sql.FieldContainsFold(FieldJobPosition, v))
}

// LanguageIDEQ applies the EQ predicate on the "language_id" field.
func LanguageIDEQ(v string) predicate.Party {
	return predicate.Party(sql.FieldEQ(FieldLanguageID, v))
}

// LanguageIDNEQ applies the NEQ predicate on the "language_id" field.
func LanguageIDNEQ(v string) predicate.Party {
	return predicate.Party(sql.FieldNEQ(FieldLanguageID, v))
}

// LanguageIDIn applies the In predicate on the "language_id" field.
func LanguageIDIn(vs ...string) predicate.Party {
	return predicate.Party(sql.FieldIn(FieldLanguageID, vs...))
}

// LanguageIDNotIn applies the NotIn predicate on the "language_id" field.
func LanguageIDNotIn(vs ...string) predicate.Party {
	return predicate.Party(sql.FieldNotIn(FieldLanguageID, vs...))
}

// LanguageIDGT applies the GT predicate on the "language_id" field.
func LanguageIDGT(v string) predicate.Party {
	return predicate.Party(sql.FieldGT(FieldLanguageID, v))
}

// LanguageIDGTE applies the GTE predicate on the "language_id" field.
func LanguageIDGTE(v string) predicate.Party {
	return predicate.Party(sql.FieldGTE(FieldLanguageID, v))
}

// LanguageIDLT applies the LT predicate on the "language_id" field.
func LanguageIDLT(v string) predicate.Party {
	return predicate.Party(sql.FieldLT(FieldLanguageID, v))
}

// LanguageIDLTE applies the LTE predicate on the "language_id" field.
func LanguageIDLTE(v string) predicate.Party {
	return predicate.Party(sql.FieldLTE(FieldLanguageID, v))
}

// LanguageIDContains applies the Contains predicate on the "language_id" field.
func LanguageIDContains(v string) predicate.Party {
	return predicate.Party(sql.FieldContains(FieldLanguageID, v))
}

// LanguageIDHasPrefix applies the HasPrefix predicate on the "language_id" field.
func LanguageIDHasPrefix(v string) predicate.Party {
	return predicate.Party(sql.FieldHasPrefix(FieldLanguageID, v))
}

// LanguageIDHasSuffix applies the HasSuffix predicate on the "language_id" field.
func LanguageIDHasSuffix(v string) predicate.Party {
	return predicate.Party(sql.FieldHasSuffix(FieldLanguageID, v))
}

// LanguageIDIsNil applies the IsNil predicate on the "language_id" field.
func LanguageIDIsNil() predicate.Party {
	return predicate.Party(sql.FieldIsNull(FieldLanguageID))
}

// LanguageIDNotNil applies the NotNil predicate on the "language_id" field.
func LanguageIDNotNil() predicate.Party {
	return predicate.Party(sql.FieldNotNull(FieldLanguageID))
}

// LanguageIDEqualFold applies the EqualFold predicate on the "language_id" field.
func LanguageIDEqualFold(v string) predicate.Party {
	return predicate.Party(sql.FieldEqualFold(FieldLanguageID, v))
}

// LanguageIDContainsFold applies the ContainsFold predicate on the "language_id" field.
func LanguageIDContainsFold(v string) predicate.Party {
	return predicate.Party(sql.FieldContainsFold(FieldLanguageID, v))
}

// LegalAddressEQ applies the EQ predicate on the "legal_address" field.
func LegalAddressEQ(v string) predicate.Party {
	return predicate.Party(sql.FieldEQ(FieldLegalAddress, v))
}

// LegalAddressNEQ applies the NEQ predicate on the "legal_address" field.
func LegalAddressNEQ(v string) predicate.Party {
	return predicate.Party(sql.FieldNEQ(FieldLegalAddress, v))
}

// LegalAddressIn applies the In predicate on the "legal_address" field.
func LegalAddressIn(vs ...string) predicate.Party {
	return predicate.Party(sql.FieldIn(FieldLegalAddress, vs...))
}

// LegalAddressNotIn applies the NotIn predicate on the "legal_address" field.
func LegalAddressNotIn(vs ...string) predicate.Party {
	return predicate.Party(sql.FieldNotIn(FieldLegalAddress, vs...))
}

// LegalAddressGT applies the GT predicate on the "legal_address" field.
func LegalAddressGT(v string) predicate.Party {
	return predicate.Party(sql.FieldGT(FieldLegalAddress, v))
}

// LegalAddressGTE applies the GTE predicate on the "legal_address" field.
func LegalAddressGTE(v string) predicate.Party {
	return predicate.Party(sql.FieldGTE(FieldLegalAddress, v))
}

// LegalAddressLT applies the LT predicate on the "legal_address" field.
func LegalAddressLT(v string) predicate.Party {
	return predicate.Party(sql.FieldLT(FieldLegalAddress, v))
}

// LegalAddressLTE applies the LTE predicate on the "legal_address" field.
func LegalAddressLTE(v string) predicate.Party {
	return predicate.Party(sql.FieldLTE(FieldLegalAddress, v))
}

// LegalAddressContains applies the Contains predicate on the "legal_address" field.
func LegalAddressContains(v string) predicate.Party {
	return predicate.Party(sql.FieldContains(FieldLegalAddress, v))
}

// LegalAddressHasPrefix applies the HasPrefix predicate on the "legal_address" field.
func LegalAddressHasPrefix(v string) predicate.Party {
	return predicate.Party(sql.FieldHasPrefix(FieldLegalAddress, v))
}

// LegalAddressHasSuffix applies the HasSuffix predicate on the "legal_address" field.
func LegalAddressHasSuffix(v string) predicate.Party {
	return predicate.Party(sql.FieldHasSuffix(FieldLegalAddress, v))
}

// LegalAddressIsNil applies the IsNil predicate on the "legal_address" field.
func LegalAddressIsNil() predicate.Party {
	return predicate.Party(sql.FieldIsNull(FieldLegalAddress))
}

// LegalAddressNotNil applies the NotNil predicate on the "legal_address" field.
func LegalAddressNotNil() predicate.Party {
	return predicate.Party(sql.FieldNotNull(FieldLegalAddress))
}

// LegalAddressEqualFold applies the EqualFold predicate on the "legal_address" field.
func LegalAddressEqualFold(v string) predicate.Party {
	return predicate.Party(sql.FieldEqualFold(FieldLegalAddress, v))
}

// LegalAddressContainsFold applies the ContainsFold predicate on the "legal_address" field.
func LegalAddressContainsFold(v string) predicate.Party {
	return predicate.Party(sql.FieldContainsFold(FieldLegalAddress, v))
}

// LegalNameEQ applies the EQ predicate on the "legal_name" field.
func LegalNameEQ(v string) predicate.Party {
	return predicate.Party(sql.FieldEQ(FieldLegalName, v))
}

// LegalNameNEQ applies the NEQ predicate on the "legal_name" field.
func LegalNameNEQ(v string) predicate.Party {
	return predicate.Party(sql.FieldNEQ(FieldLegalName, v))
}

// LegalNameIn applies the In predicate on the "legal_name" field.
func LegalNameIn(vs ...string) predicate.Party {
	return predicate.Party(sql.FieldIn(FieldLegalName, vs...))
}

// LegalNameNotIn applies the NotIn predicate on the "legal_name" field.
func LegalNameNotIn(vs ...string) predicate.Party {
	return predicate.Party(sql.FieldNotIn(FieldLegalName, vs...))
}

// LegalNameGT applies the GT predicate on the "legal_name" field.
func LegalNameGT(v string) predicate.Party {
	return predicate.Party(sql.FieldGT(FieldLegalName, v))
}

// LegalNameGTE applies the GTE predicate on the "legal_name" field.
func LegalNameGTE(v string) predicate.Party {
	return predicate.Party(sql.FieldGTE(FieldLegalName, v))
}

// LegalNameLT applies the LT predicate on the "legal_name" field.
func LegalNameLT(v string) predicate.Party {
	return predicate.Party(sql.FieldLT(FieldLegalName, v))
}

// LegalNameLTE applies the LTE predicate on the "legal_name" field.
func LegalNameLTE(v string) predicate.Party {
	return predicate.Party(sql.FieldLTE(FieldLegalName, v))
}

// LegalNameContains applies the Contains predicate on the "legal_name" field.
func LegalNameContains(v string) predicate.Party {
	return predicate.Party(sql.FieldContains(FieldLegalName, v))
}

// LegalNameHasPrefix applies the HasPrefix predicate on the "legal_name" field.
func LegalNameHasPrefix(v string) predicate.Party {
	return predicate.Party(sql.FieldHasPrefix(FieldLegalName, v))
}

// LegalNameHasSuffix applies the HasSuffix predicate on the "legal_name" field.
func LegalNameHasSuffix(v string) predicate.Party {
	return predicate.Party(sql.FieldHasSuffix(FieldLegalName, v))
}

// LegalNameIsNil applies the IsNil predicate on the "legal_name" field.
func LegalNameIsNil() predicate.Party {
	return predicate.Party(sql.FieldIsNull(FieldLegalName))
}

// LegalNameNotNil applies the NotNil predicate on the "legal_name" field.
func LegalNameNotNil() predicate.Party {
	return predicate.Party(sql.FieldNotNull(FieldLegalName))
}

// LegalNameEqualFold applies the EqualFold predicate on the "legal_name" field.
func LegalNameEqualFold(v string) predicate.Party {
	return predicate.Party(sql.FieldEqualFold(FieldLegalName, v))
}

// LegalNameContainsFold applies the ContainsFold predicate on the "legal_name" field.
func LegalNameContainsFold(v string) predicate.Party {
	return predicate.Party(sql.FieldContainsFold(FieldLegalName, v))
}

// NationalityIDEQ applies the EQ predicate on the "nationality_id" field.
func NationalityIDEQ(v string) predicate.Party {
	return predicate.Party(sql.FieldEQ(FieldNationalityID, v))
}

// NationalityIDNEQ applies the NEQ predicate on the "nationality_id" field.
func NationalityIDNEQ(v string) predicate.Party {
	return predicate.Party(sql.FieldNEQ(FieldNationalityID, v))
}

// NationalityIDIn applies the In predicate on the "nationality_id" field.
func NationalityIDIn(vs ...string) predicate.Party {
	return predicate.Party(sql.FieldIn(FieldNationalityID, vs...))
}

// NationalityIDNotIn applies the NotIn predicate on the "nationality_id" field.
func NationalityIDNotIn(vs ...string) predicate.Party {
	return predicate.Party(sql.FieldNotIn(FieldNationalityID, vs...))
}

// NationalityIDGT applies the GT predicate on the "nationality_id" field.
func NationalityIDGT(v string) predicate.Party {
	return predicate.Party(sql.FieldGT(FieldNationalityID, v))
}

// NationalityIDGTE applies the GTE predicate on the "nationality_id" field.
func NationalityIDGTE(v string) predicate.Party {
	return predicate.Party(sql.FieldGTE(FieldNationalityID, v))
}

// NationalityIDLT applies the LT predicate on the "nationality_id" field.
func NationalityIDLT(v string) predicate.Party {
	return predicate.Party(sql.FieldLT(FieldNationalityID, v))
}

// NationalityIDLTE applies the LTE predicate on the "nationality_id" field.
func NationalityIDLTE(v string) predicate.Party {
	return predicate.Party(sql.FieldLTE(FieldNationalityID, v))
}

// NationalityIDContains applies the Contains predicate on the "nationality_id" field.
func NationalityIDContains(v string) predicate.Party {
	return predicate.Party(sql.FieldContains(FieldNationalityID, v))
}

// NationalityIDHasPrefix applies the HasPrefix predicate on the "nationality_id" field.
func NationalityIDHasPrefix(v string) predicate.Party {
	return predicate.Party(sql.FieldHasPrefix(FieldNationalityID, v))
}

// NationalityIDHasSuffix applies the HasSuffix predicate on the "nationality_id" field.
func NationalityIDHasSuffix(v string) predicate.Party {
	return predicate.Party(sql.FieldHasSuffix(FieldNationalityID, v))
}

// NationalityIDIsNil applies the IsNil predicate on the "nationality_id" field.
func NationalityIDIsNil() predicate.Party {
	return predicate.Party(sql.FieldIsNull(FieldNationalityID))
}

// NationalityIDNotNil applies the NotNil predicate on the "nationality_id" field.
func NationalityIDNotNil() predicate.Party {
	return predicate.Party(sql.FieldNotNull(FieldNationalityID))
}

// NationalityIDEqualFold applies the EqualFold predicate on the "nationality_id" field.
func NationalityIDEqualFold(v string) predicate.Party {
	return predicate.Party(sql.FieldEqualFold(FieldNationalityID, v))
}

// NationalityIDContainsFold applies the ContainsFold predicate on the "nationality_id" field.
func NationalityIDContainsFold(v string) predicate.Party {
	return predicate.Party(sql.FieldContainsFold(FieldNationalityID, v))
}

// NoteEQ applies the EQ predicate on the "note" field.
func NoteEQ(v string) predicate.Party {
	return predicate.Party(sql.FieldEQ(FieldNote, v))
}

// NoteNEQ applies the NEQ predicate on the "note" field.
func NoteNEQ(v string) predicate.Party {
	return predicate.Party(sql.FieldNEQ(FieldNote, v))
}

// NoteIn applies the In predicate on the "note" field.
func NoteIn(vs ...string) predicate.Party {
	return predicate.Party(sql.FieldIn(FieldNote, vs...))
}

// NoteNotIn applies the NotIn predicate on the "note" field.
func NoteNotIn(vs ...string) predicate.Party {
	return predicate.Party(sql.FieldNotIn(FieldNote, vs...))
}

// NoteGT applies the GT predicate on the "note" field.
func NoteGT(v string) predicate.Party {
	return predicate.Party(sql.FieldGT(FieldNote, v))
}

// NoteGTE applies the GTE predicate on the "note" field.
func NoteGTE(v string) predicate.Party {
	return predicate.Party(sql.FieldGTE(FieldNote, v))
}

// NoteLT applies the LT predicate on the "note" field.
func NoteLT(v string) predicate.Party {
	return predicate.Party(sql.FieldLT(FieldNote, v))
}

// NoteLTE applies the LTE predicate on the "note" field.
func NoteLTE(v string) predicate.Party {
	return predicate.Party(sql.FieldLTE(FieldNote, v))
}

// NoteContains applies the Contains predicate on the "note" field.
func NoteContains(v string) predicate.Party {
	return predicate.Party(sql.FieldContains(FieldNote, v))
}

// NoteHasPrefix applies the HasPrefix predicate on the "note" field.
func NoteHasPrefix(v string) predicate.Party {
	return predicate.Party(sql.FieldHasPrefix(FieldNote, v))
}

// NoteHasSuffix applies the HasSuffix predicate on the "note" field.
func NoteHasSuffix(v string) predicate.Party {
	return predicate.Party(sql.FieldHasSuffix(FieldNote, v))
}

// NoteIsNil applies the IsNil predicate on the "note" field.
func NoteIsNil() predicate.Party {
	return predicate.Party(sql.FieldIsNull(FieldNote))
}

// NoteNotNil applies the NotNil predicate on the "note" field.
func NoteNotNil() predicate.Party {
	return predicate.Party(sql.FieldNotNull(FieldNote))
}

// NoteEqualFold applies the EqualFold predicate on the "note" field.
func NoteEqualFold(v string) predicate.Party {
	return predicate.Party(sql.FieldEqualFold(FieldNote, v))
}

// NoteContainsFold applies the ContainsFold predicate on the "note" field.
func NoteContainsFold(v string) predicate.Party {
	return predicate.Party(sql.FieldContainsFold(FieldNote, v))
}

// TaxIDEQ applies the EQ predicate on the "tax_id" field.
func TaxIDEQ(v string) predicate.Party {
	return predicate.Party(sql.FieldEQ(FieldTaxID, v))
}

// TaxIDNEQ applies the NEQ predicate on the "tax_id" field.
func TaxIDNEQ(v string) predicate.Party {
	return predicate.Party(sql.FieldNEQ(FieldTaxID, v))
}

// TaxIDIn applies the In predicate on the "tax_id" field.
func TaxIDIn(vs ...string) predicate.Party {
	return predicate.Party(sql.FieldIn(FieldTaxID, vs...))
}

// TaxIDNotIn applies the NotIn predicate on the "tax_id" field.
func TaxIDNotIn(vs ...string) predicate.Party {
	return predicate.Party(sql.FieldNotIn(FieldTaxID, vs...))
}

// TaxIDGT applies the GT predicate on the "tax_id" field.
func TaxIDGT(v string) predicate.Party {
	return predicate.Party(sql.FieldGT(FieldTaxID, v))
}

// TaxIDGTE applies the GTE predicate on the "tax_id" field.
func TaxIDGTE(v string) predicate.Party {
	return predicate.Party(sql.FieldGTE(FieldTaxID, v))
}

// TaxIDLT applies the LT predicate on the "tax_id" field.
func TaxIDLT(v string) predicate.Party {
	return predicate.Party(sql.FieldLT(FieldTaxID, v))
}

// TaxIDLTE applies the LTE predicate on the "tax_id" field.
func TaxIDLTE(v string) predicate.Party {
	return predicate.Party(sql.FieldLTE(FieldTaxID, v))
}

// TaxIDContains applies the Contains predicate on the "tax_id" field.
func TaxIDContains(v string) predicate.Party {
	return predicate.Party(sql.FieldContains(FieldTaxID, v))
}

// TaxIDHasPrefix applies the HasPrefix predicate on the "tax_id" field.
func TaxIDHasPrefix(v string) predicate.Party {
	return predicate.Party(sql.FieldHasPrefix(FieldTaxID, v))
}

// TaxIDHasSuffix applies the HasSuffix predicate on the "tax_id" field.
func TaxIDHasSuffix(v string) predicate.Party {
	return predicate.Party(sql.FieldHasSuffix(FieldTaxID, v))
}

// TaxIDIsNil applies the IsNil predicate on the "tax_id" field.
func TaxIDIsNil() predicate.Party {
	return predicate.Party(sql.FieldIsNull(FieldTaxID))
}

// TaxIDNotNil applies the NotNil predicate on the "tax_id" field.
func TaxIDNotNil() predicate.Party {
	return predicate.Party(sql.FieldNotNull(FieldTaxID))
}

// TaxIDEqualFold applies the EqualFold predicate on the "tax_id" field.
func TaxIDEqualFold(v string) predicate.Party {
	return predicate.Party(sql.FieldEqualFold(FieldTaxID, v))
}

// TaxIDContainsFold applies the ContainsFold predicate on the "tax_id" field.
func TaxIDContainsFold(v string) predicate.Party {
	return predicate.Party(sql.FieldContainsFold(FieldTaxID, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v Title) predicate.Party {
	return predicate.Party(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v Title) predicate.Party {
	return predicate.Party(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...Title) predicate.Party {
	return predicate.Party(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...Title) predicate.Party {
	return predicate.Party(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleIsNil applies the IsNil predicate on the "title" field.
func TitleIsNil() predicate.Party {
	return predicate.Party(sql.FieldIsNull(FieldTitle))
}

// TitleNotNil applies the NotNil predicate on the "title" field.
func TitleNotNil() predicate.Party {
	return predicate.Party(sql.FieldNotNull(FieldTitle))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.Party {
	return predicate.Party(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.Party {
	return predicate.Party(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.Party {
	return predicate.Party(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.Party {
	return predicate.Party(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.Party {
	return predicate.Party(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.Party {
	return predicate.Party(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.Party {
	return predicate.Party(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.Party {
	return predicate.Party(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.Party {
	return predicate.Party(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.Party {
	return predicate.Party(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.Party {
	return predicate.Party(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.Party {
	return predicate.Party(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.Party {
	return predicate.Party(sql.FieldContainsFold(FieldType, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Party {
	return predicate.Party(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Party {
	return predicate.Party(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Party {
	return predicate.Party(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Party {
	return predicate.Party(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Party {
	return predicate.Party(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Party {
	return predicate.Party(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Party {
	return predicate.Party(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Party {
	return predicate.Party(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Party {
	return predicate.Party(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Party {
	return predicate.Party(sql.FieldNotNull(FieldUpdatedAt))
}

// WebsiteEQ applies the EQ predicate on the "website" field.
func WebsiteEQ(v string) predicate.Party {
	return predicate.Party(sql.FieldEQ(FieldWebsite, v))
}

// WebsiteNEQ applies the NEQ predicate on the "website" field.
func WebsiteNEQ(v string) predicate.Party {
	return predicate.Party(sql.FieldNEQ(FieldWebsite, v))
}

// WebsiteIn applies the In predicate on the "website" field.
func WebsiteIn(vs ...string) predicate.Party {
	return predicate.Party(sql.FieldIn(FieldWebsite, vs...))
}

// WebsiteNotIn applies the NotIn predicate on the "website" field.
func WebsiteNotIn(vs ...string) predicate.Party {
	return predicate.Party(sql.FieldNotIn(FieldWebsite, vs...))
}

// WebsiteGT applies the GT predicate on the "website" field.
func WebsiteGT(v string) predicate.Party {
	return predicate.Party(sql.FieldGT(FieldWebsite, v))
}

// WebsiteGTE applies the GTE predicate on the "website" field.
func WebsiteGTE(v string) predicate.Party {
	return predicate.Party(sql.FieldGTE(FieldWebsite, v))
}

// WebsiteLT applies the LT predicate on the "website" field.
func WebsiteLT(v string) predicate.Party {
	return predicate.Party(sql.FieldLT(FieldWebsite, v))
}

// WebsiteLTE applies the LTE predicate on the "website" field.
func WebsiteLTE(v string) predicate.Party {
	return predicate.Party(sql.FieldLTE(FieldWebsite, v))
}

// WebsiteContains applies the Contains predicate on the "website" field.
func WebsiteContains(v string) predicate.Party {
	return predicate.Party(sql.FieldContains(FieldWebsite, v))
}

// WebsiteHasPrefix applies the HasPrefix predicate on the "website" field.
func WebsiteHasPrefix(v string) predicate.Party {
	return predicate.Party(sql.FieldHasPrefix(FieldWebsite, v))
}

// WebsiteHasSuffix applies the HasSuffix predicate on the "website" field.
func WebsiteHasSuffix(v string) predicate.Party {
	return predicate.Party(sql.FieldHasSuffix(FieldWebsite, v))
}

// WebsiteIsNil applies the IsNil predicate on the "website" field.
func WebsiteIsNil() predicate.Party {
	return predicate.Party(sql.FieldIsNull(FieldWebsite))
}

// WebsiteNotNil applies the NotNil predicate on the "website" field.
func WebsiteNotNil() predicate.Party {
	return predicate.Party(sql.FieldNotNull(FieldWebsite))
}

// WebsiteEqualFold applies the EqualFold predicate on the "website" field.
func WebsiteEqualFold(v string) predicate.Party {
	return predicate.Party(sql.FieldEqualFold(FieldWebsite, v))
}

// WebsiteContainsFold applies the ContainsFold predicate on the "website" field.
func WebsiteContainsFold(v string) predicate.Party {
	return predicate.Party(sql.FieldContainsFold(FieldWebsite, v))
}

// HasCommChannels applies the HasEdge predicate on the "comm_channels" edge.
func HasCommChannels() predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, CommChannelsTable, CommChannelsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCommChannelsWith applies the HasEdge predicate on the "comm_channels" edge with a given conditions (other predicates).
func HasCommChannelsWith(preds ...predicate.CommChannel) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		step := newCommChannelsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRelationships applies the HasEdge predicate on the "relationships" edge.
func HasRelationships() predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, RelationshipsTable, RelationshipsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRelationshipsWith applies the HasEdge predicate on the "relationships" edge with a given conditions (other predicates).
func HasRelationshipsWith(preds ...predicate.Relationship) predicate.Party {
	return predicate.Party(func(s *sql.Selector) {
		step := newRelationshipsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Party) predicate.Party {
	return predicate.Party(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Party) predicate.Party {
	return predicate.Party(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Party) predicate.Party {
	return predicate.Party(sql.NotPredicates(p))
}
