// Code generated by ent, DO NOT EDIT.

package party

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the party type in the database.
	Label = "party"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAvatarURL holds the string denoting the avatar_url field in the database.
	FieldAvatarURL = "avatar_url"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldDeletedBy holds the string denoting the deleted_by field in the database.
	FieldDeletedBy = "deleted_by"
	// FieldDisplayName holds the string denoting the display_name field in the database.
	FieldDisplayName = "display_name"
	// FieldEtag holds the string denoting the etag field in the database.
	FieldEtag = "etag"
	// FieldJobPosition holds the string denoting the job_position field in the database.
	FieldJobPosition = "job_position"
	// FieldLanguageID holds the string denoting the language_id field in the database.
	FieldLanguageID = "language_id"
	// FieldLegalAddress holds the string denoting the legal_address field in the database.
	FieldLegalAddress = "legal_address"
	// FieldLegalName holds the string denoting the legal_name field in the database.
	FieldLegalName = "legal_name"
	// FieldNationalityID holds the string denoting the nationality_id field in the database.
	FieldNationalityID = "nationality_id"
	// FieldNote holds the string denoting the note field in the database.
	FieldNote = "note"
	// FieldTaxID holds the string denoting the tax_id field in the database.
	FieldTaxID = "tax_id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldWebsite holds the string denoting the website field in the database.
	FieldWebsite = "website"
	// EdgeCommChannels holds the string denoting the comm_channels edge name in mutations.
	EdgeCommChannels = "comm_channels"
	// EdgeRelationships holds the string denoting the relationships edge name in mutations.
	EdgeRelationships = "relationships"
	// Table holds the table name of the party in the database.
	Table = "contacts_parties"
	// CommChannelsTable is the table that holds the comm_channels relation/edge.
	CommChannelsTable = "contacts_comm_channels"
	// CommChannelsInverseTable is the table name for the CommChannel entity.
	// It exists in this package in order to avoid circular dependency with the "commchannel" package.
	CommChannelsInverseTable = "contacts_comm_channels"
	// CommChannelsColumn is the table column denoting the comm_channels relation/edge.
	CommChannelsColumn = "party_id"
	// RelationshipsTable is the table that holds the relationships relation/edge.
	RelationshipsTable = "contacts_relationships"
	// RelationshipsInverseTable is the table name for the Relationship entity.
	// It exists in this package in order to avoid circular dependency with the "relationship" package.
	RelationshipsInverseTable = "contacts_relationships"
	// RelationshipsColumn is the table column denoting the relationships relation/edge.
	RelationshipsColumn = "target_party_id"
)

// Columns holds all SQL columns for party fields.
var Columns = []string{
	FieldID,
	FieldAvatarURL,
	FieldCreatedAt,
	FieldDeletedAt,
	FieldDeletedBy,
	FieldDisplayName,
	FieldEtag,
	FieldJobPosition,
	FieldLanguageID,
	FieldLegalAddress,
	FieldLegalName,
	FieldNationalityID,
	FieldNote,
	FieldTaxID,
	FieldTitle,
	FieldType,
	FieldUpdatedAt,
	FieldWebsite,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DisplayNameValidator is a validator for the "display_name" field. It is called by the builders before save.
	DisplayNameValidator func(string) error
	// LegalNameValidator is a validator for the "legal_name" field. It is called by the builders before save.
	LegalNameValidator func(string) error
)

// Title defines the type for the "title" enum field.
type Title string

// Title values.
const (
	TitleMr     Title = "Mr"
	TitleMrs    Title = "Mrs"
	TitleMs     Title = "Ms"
	TitleDoctor Title = "Doctor"
	TitleSir    Title = "Sir"
)

func (t Title) String() string {
	return string(t)
}

// TitleValidator is a validator for the "title" field enum values. It is called by the builders before save.
func TitleValidator(t Title) error {
	switch t {
	case TitleMr, TitleMrs, TitleMs, TitleDoctor, TitleSir:
		return nil
	default:
		return fmt.Errorf("party: invalid enum value for title field: %q", t)
	}
}

// OrderOption defines the ordering options for the Party queries.
type OrderOption = func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAvatarURL orders the results by the avatar_url field.
func ByAvatarURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvatarURL, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByDeletedBy orders the results by the deleted_by field.
func ByDeletedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedBy, opts...).ToFunc()
}

// ByDisplayName orders the results by the display_name field.
func ByDisplayName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayName, opts...).ToFunc()
}

// ByEtag orders the results by the etag field.
func ByEtag(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEtag, opts...).ToFunc()
}

// ByJobPosition orders the results by the job_position field.
func ByJobPosition(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJobPosition, opts...).ToFunc()
}

// ByLanguageID orders the results by the language_id field.
func ByLanguageID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLanguageID, opts...).ToFunc()
}

// ByLegalAddress orders the results by the legal_address field.
func ByLegalAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLegalAddress, opts...).ToFunc()
}

// ByLegalName orders the results by the legal_name field.
func ByLegalName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLegalName, opts...).ToFunc()
}

// ByNationalityID orders the results by the nationality_id field.
func ByNationalityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNationalityID, opts...).ToFunc()
}

// ByNote orders the results by the note field.
func ByNote(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNote, opts...).ToFunc()
}

// ByTaxID orders the results by the tax_id field.
func ByTaxID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaxID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByWebsite orders the results by the website field.
func ByWebsite(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWebsite, opts...).ToFunc()
}

// ByCommChannelsCount orders the results by comm_channels count.
func ByCommChannelsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCommChannelsStep(), opts...)
	}
}

// ByCommChannels orders the results by comm_channels terms.
func ByCommChannels(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCommChannelsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRelationshipsCount orders the results by relationships count.
func ByRelationshipsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRelationshipsStep(), opts...)
	}
}

// ByRelationships orders the results by relationships terms.
func ByRelationships(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRelationshipsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// Added by NikkieERP scripts/ent_templates/dialect/sql/meta.tmpl
func NewCommChannelsStepNikki() *sqlgraph.Step {
	return newCommChannelsStep()
}

func newCommChannelsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CommChannelsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, CommChannelsTable, CommChannelsColumn),
	)
}

// Added by NikkieERP scripts/ent_templates/dialect/sql/meta.tmpl
func NewRelationshipsStepNikki() *sqlgraph.Step {
	return newRelationshipsStep()
}

func newRelationshipsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RelationshipsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, RelationshipsTable, RelationshipsColumn),
	)
}
