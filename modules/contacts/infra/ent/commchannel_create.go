// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky-as-code/nikki-erp/modules/contacts/domain"
	"github.com/sky-as-code/nikki-erp/modules/contacts/infra/ent/commchannel"
	"github.com/sky-as-code/nikki-erp/modules/contacts/infra/ent/party"
)

// CommChannelCreate is the builder for creating a CommChannel entity.
type CommChannelCreate struct {
	config
	mutation *CommChannelMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (ccc *CommChannelCreate) SetCreatedAt(t time.Time) *CommChannelCreate {
	ccc.mutation.SetCreatedAt(t)
	return ccc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ccc *CommChannelCreate) SetNillableCreatedAt(t *time.Time) *CommChannelCreate {
	if t != nil {
		ccc.SetCreatedAt(*t)
	}
	return ccc
}

// SetDeletedBy sets the "deleted_by" field.
func (ccc *CommChannelCreate) SetDeletedBy(s string) *CommChannelCreate {
	ccc.mutation.SetDeletedBy(s)
	return ccc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (ccc *CommChannelCreate) SetNillableDeletedBy(s *string) *CommChannelCreate {
	if s != nil {
		ccc.SetDeletedBy(*s)
	}
	return ccc
}

// SetDeletedAt sets the "deleted_at" field.
func (ccc *CommChannelCreate) SetDeletedAt(t time.Time) *CommChannelCreate {
	ccc.mutation.SetDeletedAt(t)
	return ccc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ccc *CommChannelCreate) SetNillableDeletedAt(t *time.Time) *CommChannelCreate {
	if t != nil {
		ccc.SetDeletedAt(*t)
	}
	return ccc
}

// SetEtag sets the "etag" field.
func (ccc *CommChannelCreate) SetEtag(s string) *CommChannelCreate {
	ccc.mutation.SetEtag(s)
	return ccc
}

// SetNote sets the "note" field.
func (ccc *CommChannelCreate) SetNote(s string) *CommChannelCreate {
	ccc.mutation.SetNote(s)
	return ccc
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (ccc *CommChannelCreate) SetNillableNote(s *string) *CommChannelCreate {
	if s != nil {
		ccc.SetNote(*s)
	}
	return ccc
}

// SetPartyID sets the "party_id" field.
func (ccc *CommChannelCreate) SetPartyID(s string) *CommChannelCreate {
	ccc.mutation.SetPartyID(s)
	return ccc
}

// SetType sets the "type" field.
func (ccc *CommChannelCreate) SetType(c commchannel.Type) *CommChannelCreate {
	ccc.mutation.SetType(c)
	return ccc
}

// SetUpdatedAt sets the "updated_at" field.
func (ccc *CommChannelCreate) SetUpdatedAt(t time.Time) *CommChannelCreate {
	ccc.mutation.SetUpdatedAt(t)
	return ccc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ccc *CommChannelCreate) SetNillableUpdatedAt(t *time.Time) *CommChannelCreate {
	if t != nil {
		ccc.SetUpdatedAt(*t)
	}
	return ccc
}

// SetValue sets the "value" field.
func (ccc *CommChannelCreate) SetValue(s string) *CommChannelCreate {
	ccc.mutation.SetValue(s)
	return ccc
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (ccc *CommChannelCreate) SetNillableValue(s *string) *CommChannelCreate {
	if s != nil {
		ccc.SetValue(*s)
	}
	return ccc
}

// SetValueJSON sets the "value_json" field.
func (ccc *CommChannelCreate) SetValueJSON(djd domain.ValueJsonData) *CommChannelCreate {
	ccc.mutation.SetValueJSON(djd)
	return ccc
}

// SetNillableValueJSON sets the "value_json" field if the given value is not nil.
func (ccc *CommChannelCreate) SetNillableValueJSON(djd *domain.ValueJsonData) *CommChannelCreate {
	if djd != nil {
		ccc.SetValueJSON(*djd)
	}
	return ccc
}

// SetID sets the "id" field.
func (ccc *CommChannelCreate) SetID(s string) *CommChannelCreate {
	ccc.mutation.SetID(s)
	return ccc
}

// SetParty sets the "party" edge to the Party entity.
func (ccc *CommChannelCreate) SetParty(p *Party) *CommChannelCreate {
	return ccc.SetPartyID(p.ID)
}

// Mutation returns the CommChannelMutation object of the builder.
func (ccc *CommChannelCreate) Mutation() *CommChannelMutation {
	return ccc.mutation
}

// Save creates the CommChannel in the database.
func (ccc *CommChannelCreate) Save(ctx context.Context) (*CommChannel, error) {
	ccc.defaults()
	return withHooks(ctx, ccc.sqlSave, ccc.mutation, ccc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ccc *CommChannelCreate) SaveX(ctx context.Context) *CommChannel {
	v, err := ccc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccc *CommChannelCreate) Exec(ctx context.Context) error {
	_, err := ccc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccc *CommChannelCreate) ExecX(ctx context.Context) {
	if err := ccc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ccc *CommChannelCreate) defaults() {
	if _, ok := ccc.mutation.CreatedAt(); !ok {
		v := commchannel.DefaultCreatedAt()
		ccc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ccc *CommChannelCreate) check() error {
	if _, ok := ccc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CommChannel.created_at"`)}
	}
	if _, ok := ccc.mutation.Etag(); !ok {
		return &ValidationError{Name: "etag", err: errors.New(`ent: missing required field "CommChannel.etag"`)}
	}
	if _, ok := ccc.mutation.PartyID(); !ok {
		return &ValidationError{Name: "party_id", err: errors.New(`ent: missing required field "CommChannel.party_id"`)}
	}
	if _, ok := ccc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "CommChannel.type"`)}
	}
	if v, ok := ccc.mutation.GetType(); ok {
		if err := commchannel.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "CommChannel.type": %w`, err)}
		}
	}
	if len(ccc.mutation.PartyIDs()) == 0 {
		return &ValidationError{Name: "party", err: errors.New(`ent: missing required edge "CommChannel.party"`)}
	}
	return nil
}

func (ccc *CommChannelCreate) sqlSave(ctx context.Context) (*CommChannel, error) {
	if err := ccc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ccc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ccc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected CommChannel.ID type: %T", _spec.ID.Value)
		}
	}
	ccc.mutation.id = &_node.ID
	ccc.mutation.done = true
	return _node, nil
}

func (ccc *CommChannelCreate) createSpec() (*CommChannel, *sqlgraph.CreateSpec) {
	var (
		_node = &CommChannel{config: ccc.config}
		_spec = sqlgraph.NewCreateSpec(commchannel.Table, sqlgraph.NewFieldSpec(commchannel.FieldID, field.TypeString))
	)
	if id, ok := ccc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ccc.mutation.CreatedAt(); ok {
		_spec.SetField(commchannel.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ccc.mutation.DeletedBy(); ok {
		_spec.SetField(commchannel.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = &value
	}
	if value, ok := ccc.mutation.DeletedAt(); ok {
		_spec.SetField(commchannel.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := ccc.mutation.Etag(); ok {
		_spec.SetField(commchannel.FieldEtag, field.TypeString, value)
		_node.Etag = value
	}
	if value, ok := ccc.mutation.Note(); ok {
		_spec.SetField(commchannel.FieldNote, field.TypeString, value)
		_node.Note = &value
	}
	if value, ok := ccc.mutation.GetType(); ok {
		_spec.SetField(commchannel.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := ccc.mutation.UpdatedAt(); ok {
		_spec.SetField(commchannel.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = &value
	}
	if value, ok := ccc.mutation.Value(); ok {
		_spec.SetField(commchannel.FieldValue, field.TypeString, value)
		_node.Value = &value
	}
	if value, ok := ccc.mutation.ValueJSON(); ok {
		_spec.SetField(commchannel.FieldValueJSON, field.TypeJSON, value)
		_node.ValueJSON = value
	}
	if nodes := ccc.mutation.PartyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   commchannel.PartyTable,
			Columns: []string{commchannel.PartyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(party.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PartyID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CommChannelCreateBulk is the builder for creating many CommChannel entities in bulk.
type CommChannelCreateBulk struct {
	config
	err      error
	builders []*CommChannelCreate
}

// Save creates the CommChannel entities in the database.
func (cccb *CommChannelCreateBulk) Save(ctx context.Context) ([]*CommChannel, error) {
	if cccb.err != nil {
		return nil, cccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cccb.builders))
	nodes := make([]*CommChannel, len(cccb.builders))
	mutators := make([]Mutator, len(cccb.builders))
	for i := range cccb.builders {
		func(i int, root context.Context) {
			builder := cccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CommChannelMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cccb *CommChannelCreateBulk) SaveX(ctx context.Context) []*CommChannel {
	v, err := cccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cccb *CommChannelCreateBulk) Exec(ctx context.Context) error {
	_, err := cccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cccb *CommChannelCreateBulk) ExecX(ctx context.Context) {
	if err := cccb.Exec(ctx); err != nil {
		panic(err)
	}
}
