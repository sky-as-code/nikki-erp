// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/sky-as-code/nikki-erp/modules/contacts/domain"
	"github.com/sky-as-code/nikki-erp/modules/contacts/infra/ent/commchannel"
	"github.com/sky-as-code/nikki-erp/modules/contacts/infra/ent/party"
)

// CommChannel is the model entity for the CommChannel schema.
type CommChannel struct {
	config `json:"-"`
	// ID of the ent.
	// ULID
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy *string `json:"deleted_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Etag holds the value of the "etag" field.
	Etag string `json:"etag,omitempty"`
	// Note holds the value of the "note" field.
	Note *string `json:"note,omitempty"`
	// PartyID holds the value of the "party_id" field.
	PartyID string `json:"party_id,omitempty"`
	// Type holds the value of the "type" field.
	Type commchannel.Type `json:"type,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// Value holds the value of the "value" field.
	Value *string `json:"value,omitempty"`
	// ValueJSON holds the value of the "value_json" field.
	ValueJSON domain.ValueJsonData `json:"value_json,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CommChannelQuery when eager-loading is set.
	Edges        CommChannelEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CommChannelEdges holds the relations/edges for other nodes in the graph.
type CommChannelEdges struct {
	// Party holds the value of the party edge.
	Party *Party `json:"party,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PartyOrErr returns the Party value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CommChannelEdges) PartyOrErr() (*Party, error) {
	if e.Party != nil {
		return e.Party, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: party.Label}
	}
	return nil, &NotLoadedError{edge: "party"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CommChannel) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case commchannel.FieldValueJSON:
			values[i] = new([]byte)
		case commchannel.FieldID, commchannel.FieldDeletedBy, commchannel.FieldEtag, commchannel.FieldNote, commchannel.FieldPartyID, commchannel.FieldType, commchannel.FieldValue:
			values[i] = new(sql.NullString)
		case commchannel.FieldCreatedAt, commchannel.FieldDeletedAt, commchannel.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CommChannel fields.
func (cc *CommChannel) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case commchannel.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				cc.ID = value.String
			}
		case commchannel.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cc.CreatedAt = value.Time
			}
		case commchannel.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				cc.DeletedBy = new(string)
				*cc.DeletedBy = value.String
			}
		case commchannel.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				cc.DeletedAt = new(time.Time)
				*cc.DeletedAt = value.Time
			}
		case commchannel.FieldEtag:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field etag", values[i])
			} else if value.Valid {
				cc.Etag = value.String
			}
		case commchannel.FieldNote:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field note", values[i])
			} else if value.Valid {
				cc.Note = new(string)
				*cc.Note = value.String
			}
		case commchannel.FieldPartyID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field party_id", values[i])
			} else if value.Valid {
				cc.PartyID = value.String
			}
		case commchannel.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				cc.Type = commchannel.Type(value.String)
			}
		case commchannel.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cc.UpdatedAt = new(time.Time)
				*cc.UpdatedAt = value.Time
			}
		case commchannel.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				cc.Value = new(string)
				*cc.Value = value.String
			}
		case commchannel.FieldValueJSON:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field value_json", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &cc.ValueJSON); err != nil {
					return fmt.Errorf("unmarshal field value_json: %w", err)
				}
			}
		default:
			cc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the CommChannel.
// This includes values selected through modifiers, order, etc.
func (cc *CommChannel) GetValue(name string) (ent.Value, error) {
	return cc.selectValues.Get(name)
}

// QueryParty queries the "party" edge of the CommChannel entity.
func (cc *CommChannel) QueryParty() *PartyQuery {
	return NewCommChannelClient(cc.config).QueryParty(cc)
}

// Update returns a builder for updating this CommChannel.
// Note that you need to call CommChannel.Unwrap() before calling this method if this CommChannel
// was returned from a transaction, and the transaction was committed or rolled back.
func (cc *CommChannel) Update() *CommChannelUpdateOne {
	return NewCommChannelClient(cc.config).UpdateOne(cc)
}

// Unwrap unwraps the CommChannel entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cc *CommChannel) Unwrap() *CommChannel {
	_tx, ok := cc.config.driver.(*txDriver)
	if !ok {
		panic("ent: CommChannel is not a transactional entity")
	}
	cc.config.driver = _tx.drv
	return cc
}

// String implements the fmt.Stringer.
func (cc *CommChannel) String() string {
	var builder strings.Builder
	builder.WriteString("CommChannel(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cc.ID))
	builder.WriteString("created_at=")
	builder.WriteString(cc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := cc.DeletedBy; v != nil {
		builder.WriteString("deleted_by=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := cc.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("etag=")
	builder.WriteString(cc.Etag)
	builder.WriteString(", ")
	if v := cc.Note; v != nil {
		builder.WriteString("note=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("party_id=")
	builder.WriteString(cc.PartyID)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", cc.Type))
	builder.WriteString(", ")
	if v := cc.UpdatedAt; v != nil {
		builder.WriteString("updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := cc.Value; v != nil {
		builder.WriteString("value=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("value_json=")
	builder.WriteString(fmt.Sprintf("%v", cc.ValueJSON))
	builder.WriteByte(')')
	return builder.String()
}

// CommChannels is a parsable slice of CommChannel.
type CommChannels []*CommChannel
