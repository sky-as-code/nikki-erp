// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky-as-code/nikki-erp/modules/contacts/infra/ent/commchannel"
	"github.com/sky-as-code/nikki-erp/modules/contacts/infra/ent/party"
	"github.com/sky-as-code/nikki-erp/modules/contacts/infra/ent/predicate"
	"github.com/sky-as-code/nikki-erp/modules/contacts/infra/ent/relationship"
)

// PartyUpdate is the builder for updating Party entities.
type PartyUpdate struct {
	config
	hooks    []Hook
	mutation *PartyMutation
}

// Where appends a list predicates to the PartyUpdate builder.
func (pu *PartyUpdate) Where(ps ...predicate.Party) *PartyUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetAvatarURL sets the "avatar_url" field.
func (pu *PartyUpdate) SetAvatarURL(s string) *PartyUpdate {
	pu.mutation.SetAvatarURL(s)
	return pu
}

// SetNillableAvatarURL sets the "avatar_url" field if the given value is not nil.
func (pu *PartyUpdate) SetNillableAvatarURL(s *string) *PartyUpdate {
	if s != nil {
		pu.SetAvatarURL(*s)
	}
	return pu
}

// ClearAvatarURL clears the value of the "avatar_url" field.
func (pu *PartyUpdate) ClearAvatarURL() *PartyUpdate {
	pu.mutation.ClearAvatarURL()
	return pu
}

// SetDeletedAt sets the "deleted_at" field.
func (pu *PartyUpdate) SetDeletedAt(t time.Time) *PartyUpdate {
	pu.mutation.SetDeletedAt(t)
	return pu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pu *PartyUpdate) SetNillableDeletedAt(t *time.Time) *PartyUpdate {
	if t != nil {
		pu.SetDeletedAt(*t)
	}
	return pu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pu *PartyUpdate) ClearDeletedAt() *PartyUpdate {
	pu.mutation.ClearDeletedAt()
	return pu
}

// SetDeletedBy sets the "deleted_by" field.
func (pu *PartyUpdate) SetDeletedBy(s string) *PartyUpdate {
	pu.mutation.SetDeletedBy(s)
	return pu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (pu *PartyUpdate) SetNillableDeletedBy(s *string) *PartyUpdate {
	if s != nil {
		pu.SetDeletedBy(*s)
	}
	return pu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (pu *PartyUpdate) ClearDeletedBy() *PartyUpdate {
	pu.mutation.ClearDeletedBy()
	return pu
}

// SetDisplayName sets the "display_name" field.
func (pu *PartyUpdate) SetDisplayName(s string) *PartyUpdate {
	pu.mutation.SetDisplayName(s)
	return pu
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (pu *PartyUpdate) SetNillableDisplayName(s *string) *PartyUpdate {
	if s != nil {
		pu.SetDisplayName(*s)
	}
	return pu
}

// SetEtag sets the "etag" field.
func (pu *PartyUpdate) SetEtag(s string) *PartyUpdate {
	pu.mutation.SetEtag(s)
	return pu
}

// SetNillableEtag sets the "etag" field if the given value is not nil.
func (pu *PartyUpdate) SetNillableEtag(s *string) *PartyUpdate {
	if s != nil {
		pu.SetEtag(*s)
	}
	return pu
}

// SetJobPosition sets the "job_position" field.
func (pu *PartyUpdate) SetJobPosition(s string) *PartyUpdate {
	pu.mutation.SetJobPosition(s)
	return pu
}

// SetNillableJobPosition sets the "job_position" field if the given value is not nil.
func (pu *PartyUpdate) SetNillableJobPosition(s *string) *PartyUpdate {
	if s != nil {
		pu.SetJobPosition(*s)
	}
	return pu
}

// ClearJobPosition clears the value of the "job_position" field.
func (pu *PartyUpdate) ClearJobPosition() *PartyUpdate {
	pu.mutation.ClearJobPosition()
	return pu
}

// SetLanguageID sets the "language_id" field.
func (pu *PartyUpdate) SetLanguageID(s string) *PartyUpdate {
	pu.mutation.SetLanguageID(s)
	return pu
}

// SetNillableLanguageID sets the "language_id" field if the given value is not nil.
func (pu *PartyUpdate) SetNillableLanguageID(s *string) *PartyUpdate {
	if s != nil {
		pu.SetLanguageID(*s)
	}
	return pu
}

// ClearLanguageID clears the value of the "language_id" field.
func (pu *PartyUpdate) ClearLanguageID() *PartyUpdate {
	pu.mutation.ClearLanguageID()
	return pu
}

// SetLegalAddress sets the "legal_address" field.
func (pu *PartyUpdate) SetLegalAddress(s string) *PartyUpdate {
	pu.mutation.SetLegalAddress(s)
	return pu
}

// SetNillableLegalAddress sets the "legal_address" field if the given value is not nil.
func (pu *PartyUpdate) SetNillableLegalAddress(s *string) *PartyUpdate {
	if s != nil {
		pu.SetLegalAddress(*s)
	}
	return pu
}

// ClearLegalAddress clears the value of the "legal_address" field.
func (pu *PartyUpdate) ClearLegalAddress() *PartyUpdate {
	pu.mutation.ClearLegalAddress()
	return pu
}

// SetLegalName sets the "legal_name" field.
func (pu *PartyUpdate) SetLegalName(s string) *PartyUpdate {
	pu.mutation.SetLegalName(s)
	return pu
}

// SetNillableLegalName sets the "legal_name" field if the given value is not nil.
func (pu *PartyUpdate) SetNillableLegalName(s *string) *PartyUpdate {
	if s != nil {
		pu.SetLegalName(*s)
	}
	return pu
}

// ClearLegalName clears the value of the "legal_name" field.
func (pu *PartyUpdate) ClearLegalName() *PartyUpdate {
	pu.mutation.ClearLegalName()
	return pu
}

// SetNationalityID sets the "nationality_id" field.
func (pu *PartyUpdate) SetNationalityID(s string) *PartyUpdate {
	pu.mutation.SetNationalityID(s)
	return pu
}

// SetNillableNationalityID sets the "nationality_id" field if the given value is not nil.
func (pu *PartyUpdate) SetNillableNationalityID(s *string) *PartyUpdate {
	if s != nil {
		pu.SetNationalityID(*s)
	}
	return pu
}

// ClearNationalityID clears the value of the "nationality_id" field.
func (pu *PartyUpdate) ClearNationalityID() *PartyUpdate {
	pu.mutation.ClearNationalityID()
	return pu
}

// SetNote sets the "note" field.
func (pu *PartyUpdate) SetNote(s string) *PartyUpdate {
	pu.mutation.SetNote(s)
	return pu
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (pu *PartyUpdate) SetNillableNote(s *string) *PartyUpdate {
	if s != nil {
		pu.SetNote(*s)
	}
	return pu
}

// ClearNote clears the value of the "note" field.
func (pu *PartyUpdate) ClearNote() *PartyUpdate {
	pu.mutation.ClearNote()
	return pu
}

// SetTaxID sets the "tax_id" field.
func (pu *PartyUpdate) SetTaxID(s string) *PartyUpdate {
	pu.mutation.SetTaxID(s)
	return pu
}

// SetNillableTaxID sets the "tax_id" field if the given value is not nil.
func (pu *PartyUpdate) SetNillableTaxID(s *string) *PartyUpdate {
	if s != nil {
		pu.SetTaxID(*s)
	}
	return pu
}

// ClearTaxID clears the value of the "tax_id" field.
func (pu *PartyUpdate) ClearTaxID() *PartyUpdate {
	pu.mutation.ClearTaxID()
	return pu
}

// SetTitle sets the "title" field.
func (pu *PartyUpdate) SetTitle(pa party.Title) *PartyUpdate {
	pu.mutation.SetTitle(pa)
	return pu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (pu *PartyUpdate) SetNillableTitle(pa *party.Title) *PartyUpdate {
	if pa != nil {
		pu.SetTitle(*pa)
	}
	return pu
}

// ClearTitle clears the value of the "title" field.
func (pu *PartyUpdate) ClearTitle() *PartyUpdate {
	pu.mutation.ClearTitle()
	return pu
}

// SetType sets the "type" field.
func (pu *PartyUpdate) SetType(s string) *PartyUpdate {
	pu.mutation.SetType(s)
	return pu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (pu *PartyUpdate) SetNillableType(s *string) *PartyUpdate {
	if s != nil {
		pu.SetType(*s)
	}
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PartyUpdate) SetUpdatedAt(t time.Time) *PartyUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pu *PartyUpdate) SetNillableUpdatedAt(t *time.Time) *PartyUpdate {
	if t != nil {
		pu.SetUpdatedAt(*t)
	}
	return pu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (pu *PartyUpdate) ClearUpdatedAt() *PartyUpdate {
	pu.mutation.ClearUpdatedAt()
	return pu
}

// SetWebsite sets the "website" field.
func (pu *PartyUpdate) SetWebsite(s string) *PartyUpdate {
	pu.mutation.SetWebsite(s)
	return pu
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (pu *PartyUpdate) SetNillableWebsite(s *string) *PartyUpdate {
	if s != nil {
		pu.SetWebsite(*s)
	}
	return pu
}

// ClearWebsite clears the value of the "website" field.
func (pu *PartyUpdate) ClearWebsite() *PartyUpdate {
	pu.mutation.ClearWebsite()
	return pu
}

// AddCommChannelIDs adds the "comm_channels" edge to the CommChannel entity by IDs.
func (pu *PartyUpdate) AddCommChannelIDs(ids ...string) *PartyUpdate {
	pu.mutation.AddCommChannelIDs(ids...)
	return pu
}

// AddCommChannels adds the "comm_channels" edges to the CommChannel entity.
func (pu *PartyUpdate) AddCommChannels(c ...*CommChannel) *PartyUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.AddCommChannelIDs(ids...)
}

// AddRelationshipIDs adds the "relationships" edge to the Relationship entity by IDs.
func (pu *PartyUpdate) AddRelationshipIDs(ids ...string) *PartyUpdate {
	pu.mutation.AddRelationshipIDs(ids...)
	return pu
}

// AddRelationships adds the "relationships" edges to the Relationship entity.
func (pu *PartyUpdate) AddRelationships(r ...*Relationship) *PartyUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.AddRelationshipIDs(ids...)
}

// Mutation returns the PartyMutation object of the builder.
func (pu *PartyUpdate) Mutation() *PartyMutation {
	return pu.mutation
}

// ClearCommChannels clears all "comm_channels" edges to the CommChannel entity.
func (pu *PartyUpdate) ClearCommChannels() *PartyUpdate {
	pu.mutation.ClearCommChannels()
	return pu
}

// RemoveCommChannelIDs removes the "comm_channels" edge to CommChannel entities by IDs.
func (pu *PartyUpdate) RemoveCommChannelIDs(ids ...string) *PartyUpdate {
	pu.mutation.RemoveCommChannelIDs(ids...)
	return pu
}

// RemoveCommChannels removes "comm_channels" edges to CommChannel entities.
func (pu *PartyUpdate) RemoveCommChannels(c ...*CommChannel) *PartyUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.RemoveCommChannelIDs(ids...)
}

// ClearRelationships clears all "relationships" edges to the Relationship entity.
func (pu *PartyUpdate) ClearRelationships() *PartyUpdate {
	pu.mutation.ClearRelationships()
	return pu
}

// RemoveRelationshipIDs removes the "relationships" edge to Relationship entities by IDs.
func (pu *PartyUpdate) RemoveRelationshipIDs(ids ...string) *PartyUpdate {
	pu.mutation.RemoveRelationshipIDs(ids...)
	return pu
}

// RemoveRelationships removes "relationships" edges to Relationship entities.
func (pu *PartyUpdate) RemoveRelationships(r ...*Relationship) *PartyUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.RemoveRelationshipIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PartyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PartyUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PartyUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PartyUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PartyUpdate) check() error {
	if v, ok := pu.mutation.DisplayName(); ok {
		if err := party.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`ent: validator failed for field "Party.display_name": %w`, err)}
		}
	}
	if v, ok := pu.mutation.LegalName(); ok {
		if err := party.LegalNameValidator(v); err != nil {
			return &ValidationError{Name: "legal_name", err: fmt.Errorf(`ent: validator failed for field "Party.legal_name": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Title(); ok {
		if err := party.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Party.title": %w`, err)}
		}
	}
	return nil
}

func (pu *PartyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(party.Table, party.Columns, sqlgraph.NewFieldSpec(party.FieldID, field.TypeString))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.AvatarURL(); ok {
		_spec.SetField(party.FieldAvatarURL, field.TypeString, value)
	}
	if pu.mutation.AvatarURLCleared() {
		_spec.ClearField(party.FieldAvatarURL, field.TypeString)
	}
	if value, ok := pu.mutation.DeletedAt(); ok {
		_spec.SetField(party.FieldDeletedAt, field.TypeTime, value)
	}
	if pu.mutation.DeletedAtCleared() {
		_spec.ClearField(party.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := pu.mutation.DeletedBy(); ok {
		_spec.SetField(party.FieldDeletedBy, field.TypeString, value)
	}
	if pu.mutation.DeletedByCleared() {
		_spec.ClearField(party.FieldDeletedBy, field.TypeString)
	}
	if value, ok := pu.mutation.DisplayName(); ok {
		_spec.SetField(party.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := pu.mutation.Etag(); ok {
		_spec.SetField(party.FieldEtag, field.TypeString, value)
	}
	if value, ok := pu.mutation.JobPosition(); ok {
		_spec.SetField(party.FieldJobPosition, field.TypeString, value)
	}
	if pu.mutation.JobPositionCleared() {
		_spec.ClearField(party.FieldJobPosition, field.TypeString)
	}
	if value, ok := pu.mutation.LanguageID(); ok {
		_spec.SetField(party.FieldLanguageID, field.TypeString, value)
	}
	if pu.mutation.LanguageIDCleared() {
		_spec.ClearField(party.FieldLanguageID, field.TypeString)
	}
	if value, ok := pu.mutation.LegalAddress(); ok {
		_spec.SetField(party.FieldLegalAddress, field.TypeString, value)
	}
	if pu.mutation.LegalAddressCleared() {
		_spec.ClearField(party.FieldLegalAddress, field.TypeString)
	}
	if value, ok := pu.mutation.LegalName(); ok {
		_spec.SetField(party.FieldLegalName, field.TypeString, value)
	}
	if pu.mutation.LegalNameCleared() {
		_spec.ClearField(party.FieldLegalName, field.TypeString)
	}
	if value, ok := pu.mutation.NationalityID(); ok {
		_spec.SetField(party.FieldNationalityID, field.TypeString, value)
	}
	if pu.mutation.NationalityIDCleared() {
		_spec.ClearField(party.FieldNationalityID, field.TypeString)
	}
	if value, ok := pu.mutation.Note(); ok {
		_spec.SetField(party.FieldNote, field.TypeString, value)
	}
	if pu.mutation.NoteCleared() {
		_spec.ClearField(party.FieldNote, field.TypeString)
	}
	if value, ok := pu.mutation.TaxID(); ok {
		_spec.SetField(party.FieldTaxID, field.TypeString, value)
	}
	if pu.mutation.TaxIDCleared() {
		_spec.ClearField(party.FieldTaxID, field.TypeString)
	}
	if value, ok := pu.mutation.Title(); ok {
		_spec.SetField(party.FieldTitle, field.TypeEnum, value)
	}
	if pu.mutation.TitleCleared() {
		_spec.ClearField(party.FieldTitle, field.TypeEnum)
	}
	if value, ok := pu.mutation.GetType(); ok {
		_spec.SetField(party.FieldType, field.TypeString, value)
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(party.FieldUpdatedAt, field.TypeTime, value)
	}
	if pu.mutation.UpdatedAtCleared() {
		_spec.ClearField(party.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := pu.mutation.Website(); ok {
		_spec.SetField(party.FieldWebsite, field.TypeString, value)
	}
	if pu.mutation.WebsiteCleared() {
		_spec.ClearField(party.FieldWebsite, field.TypeString)
	}
	if pu.mutation.CommChannelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   party.CommChannelsTable,
			Columns: []string{party.CommChannelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commchannel.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedCommChannelsIDs(); len(nodes) > 0 && !pu.mutation.CommChannelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   party.CommChannelsTable,
			Columns: []string{party.CommChannelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commchannel.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.CommChannelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   party.CommChannelsTable,
			Columns: []string{party.CommChannelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commchannel.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.RelationshipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   party.RelationshipsTable,
			Columns: []string{party.RelationshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(relationship.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedRelationshipsIDs(); len(nodes) > 0 && !pu.mutation.RelationshipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   party.RelationshipsTable,
			Columns: []string{party.RelationshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(relationship.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RelationshipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   party.RelationshipsTable,
			Columns: []string{party.RelationshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(relationship.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{party.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PartyUpdateOne is the builder for updating a single Party entity.
type PartyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PartyMutation
}

// SetAvatarURL sets the "avatar_url" field.
func (puo *PartyUpdateOne) SetAvatarURL(s string) *PartyUpdateOne {
	puo.mutation.SetAvatarURL(s)
	return puo
}

// SetNillableAvatarURL sets the "avatar_url" field if the given value is not nil.
func (puo *PartyUpdateOne) SetNillableAvatarURL(s *string) *PartyUpdateOne {
	if s != nil {
		puo.SetAvatarURL(*s)
	}
	return puo
}

// ClearAvatarURL clears the value of the "avatar_url" field.
func (puo *PartyUpdateOne) ClearAvatarURL() *PartyUpdateOne {
	puo.mutation.ClearAvatarURL()
	return puo
}

// SetDeletedAt sets the "deleted_at" field.
func (puo *PartyUpdateOne) SetDeletedAt(t time.Time) *PartyUpdateOne {
	puo.mutation.SetDeletedAt(t)
	return puo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (puo *PartyUpdateOne) SetNillableDeletedAt(t *time.Time) *PartyUpdateOne {
	if t != nil {
		puo.SetDeletedAt(*t)
	}
	return puo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (puo *PartyUpdateOne) ClearDeletedAt() *PartyUpdateOne {
	puo.mutation.ClearDeletedAt()
	return puo
}

// SetDeletedBy sets the "deleted_by" field.
func (puo *PartyUpdateOne) SetDeletedBy(s string) *PartyUpdateOne {
	puo.mutation.SetDeletedBy(s)
	return puo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (puo *PartyUpdateOne) SetNillableDeletedBy(s *string) *PartyUpdateOne {
	if s != nil {
		puo.SetDeletedBy(*s)
	}
	return puo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (puo *PartyUpdateOne) ClearDeletedBy() *PartyUpdateOne {
	puo.mutation.ClearDeletedBy()
	return puo
}

// SetDisplayName sets the "display_name" field.
func (puo *PartyUpdateOne) SetDisplayName(s string) *PartyUpdateOne {
	puo.mutation.SetDisplayName(s)
	return puo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (puo *PartyUpdateOne) SetNillableDisplayName(s *string) *PartyUpdateOne {
	if s != nil {
		puo.SetDisplayName(*s)
	}
	return puo
}

// SetEtag sets the "etag" field.
func (puo *PartyUpdateOne) SetEtag(s string) *PartyUpdateOne {
	puo.mutation.SetEtag(s)
	return puo
}

// SetNillableEtag sets the "etag" field if the given value is not nil.
func (puo *PartyUpdateOne) SetNillableEtag(s *string) *PartyUpdateOne {
	if s != nil {
		puo.SetEtag(*s)
	}
	return puo
}

// SetJobPosition sets the "job_position" field.
func (puo *PartyUpdateOne) SetJobPosition(s string) *PartyUpdateOne {
	puo.mutation.SetJobPosition(s)
	return puo
}

// SetNillableJobPosition sets the "job_position" field if the given value is not nil.
func (puo *PartyUpdateOne) SetNillableJobPosition(s *string) *PartyUpdateOne {
	if s != nil {
		puo.SetJobPosition(*s)
	}
	return puo
}

// ClearJobPosition clears the value of the "job_position" field.
func (puo *PartyUpdateOne) ClearJobPosition() *PartyUpdateOne {
	puo.mutation.ClearJobPosition()
	return puo
}

// SetLanguageID sets the "language_id" field.
func (puo *PartyUpdateOne) SetLanguageID(s string) *PartyUpdateOne {
	puo.mutation.SetLanguageID(s)
	return puo
}

// SetNillableLanguageID sets the "language_id" field if the given value is not nil.
func (puo *PartyUpdateOne) SetNillableLanguageID(s *string) *PartyUpdateOne {
	if s != nil {
		puo.SetLanguageID(*s)
	}
	return puo
}

// ClearLanguageID clears the value of the "language_id" field.
func (puo *PartyUpdateOne) ClearLanguageID() *PartyUpdateOne {
	puo.mutation.ClearLanguageID()
	return puo
}

// SetLegalAddress sets the "legal_address" field.
func (puo *PartyUpdateOne) SetLegalAddress(s string) *PartyUpdateOne {
	puo.mutation.SetLegalAddress(s)
	return puo
}

// SetNillableLegalAddress sets the "legal_address" field if the given value is not nil.
func (puo *PartyUpdateOne) SetNillableLegalAddress(s *string) *PartyUpdateOne {
	if s != nil {
		puo.SetLegalAddress(*s)
	}
	return puo
}

// ClearLegalAddress clears the value of the "legal_address" field.
func (puo *PartyUpdateOne) ClearLegalAddress() *PartyUpdateOne {
	puo.mutation.ClearLegalAddress()
	return puo
}

// SetLegalName sets the "legal_name" field.
func (puo *PartyUpdateOne) SetLegalName(s string) *PartyUpdateOne {
	puo.mutation.SetLegalName(s)
	return puo
}

// SetNillableLegalName sets the "legal_name" field if the given value is not nil.
func (puo *PartyUpdateOne) SetNillableLegalName(s *string) *PartyUpdateOne {
	if s != nil {
		puo.SetLegalName(*s)
	}
	return puo
}

// ClearLegalName clears the value of the "legal_name" field.
func (puo *PartyUpdateOne) ClearLegalName() *PartyUpdateOne {
	puo.mutation.ClearLegalName()
	return puo
}

// SetNationalityID sets the "nationality_id" field.
func (puo *PartyUpdateOne) SetNationalityID(s string) *PartyUpdateOne {
	puo.mutation.SetNationalityID(s)
	return puo
}

// SetNillableNationalityID sets the "nationality_id" field if the given value is not nil.
func (puo *PartyUpdateOne) SetNillableNationalityID(s *string) *PartyUpdateOne {
	if s != nil {
		puo.SetNationalityID(*s)
	}
	return puo
}

// ClearNationalityID clears the value of the "nationality_id" field.
func (puo *PartyUpdateOne) ClearNationalityID() *PartyUpdateOne {
	puo.mutation.ClearNationalityID()
	return puo
}

// SetNote sets the "note" field.
func (puo *PartyUpdateOne) SetNote(s string) *PartyUpdateOne {
	puo.mutation.SetNote(s)
	return puo
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (puo *PartyUpdateOne) SetNillableNote(s *string) *PartyUpdateOne {
	if s != nil {
		puo.SetNote(*s)
	}
	return puo
}

// ClearNote clears the value of the "note" field.
func (puo *PartyUpdateOne) ClearNote() *PartyUpdateOne {
	puo.mutation.ClearNote()
	return puo
}

// SetTaxID sets the "tax_id" field.
func (puo *PartyUpdateOne) SetTaxID(s string) *PartyUpdateOne {
	puo.mutation.SetTaxID(s)
	return puo
}

// SetNillableTaxID sets the "tax_id" field if the given value is not nil.
func (puo *PartyUpdateOne) SetNillableTaxID(s *string) *PartyUpdateOne {
	if s != nil {
		puo.SetTaxID(*s)
	}
	return puo
}

// ClearTaxID clears the value of the "tax_id" field.
func (puo *PartyUpdateOne) ClearTaxID() *PartyUpdateOne {
	puo.mutation.ClearTaxID()
	return puo
}

// SetTitle sets the "title" field.
func (puo *PartyUpdateOne) SetTitle(pa party.Title) *PartyUpdateOne {
	puo.mutation.SetTitle(pa)
	return puo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (puo *PartyUpdateOne) SetNillableTitle(pa *party.Title) *PartyUpdateOne {
	if pa != nil {
		puo.SetTitle(*pa)
	}
	return puo
}

// ClearTitle clears the value of the "title" field.
func (puo *PartyUpdateOne) ClearTitle() *PartyUpdateOne {
	puo.mutation.ClearTitle()
	return puo
}

// SetType sets the "type" field.
func (puo *PartyUpdateOne) SetType(s string) *PartyUpdateOne {
	puo.mutation.SetType(s)
	return puo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (puo *PartyUpdateOne) SetNillableType(s *string) *PartyUpdateOne {
	if s != nil {
		puo.SetType(*s)
	}
	return puo
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PartyUpdateOne) SetUpdatedAt(t time.Time) *PartyUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (puo *PartyUpdateOne) SetNillableUpdatedAt(t *time.Time) *PartyUpdateOne {
	if t != nil {
		puo.SetUpdatedAt(*t)
	}
	return puo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (puo *PartyUpdateOne) ClearUpdatedAt() *PartyUpdateOne {
	puo.mutation.ClearUpdatedAt()
	return puo
}

// SetWebsite sets the "website" field.
func (puo *PartyUpdateOne) SetWebsite(s string) *PartyUpdateOne {
	puo.mutation.SetWebsite(s)
	return puo
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (puo *PartyUpdateOne) SetNillableWebsite(s *string) *PartyUpdateOne {
	if s != nil {
		puo.SetWebsite(*s)
	}
	return puo
}

// ClearWebsite clears the value of the "website" field.
func (puo *PartyUpdateOne) ClearWebsite() *PartyUpdateOne {
	puo.mutation.ClearWebsite()
	return puo
}

// AddCommChannelIDs adds the "comm_channels" edge to the CommChannel entity by IDs.
func (puo *PartyUpdateOne) AddCommChannelIDs(ids ...string) *PartyUpdateOne {
	puo.mutation.AddCommChannelIDs(ids...)
	return puo
}

// AddCommChannels adds the "comm_channels" edges to the CommChannel entity.
func (puo *PartyUpdateOne) AddCommChannels(c ...*CommChannel) *PartyUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.AddCommChannelIDs(ids...)
}

// AddRelationshipIDs adds the "relationships" edge to the Relationship entity by IDs.
func (puo *PartyUpdateOne) AddRelationshipIDs(ids ...string) *PartyUpdateOne {
	puo.mutation.AddRelationshipIDs(ids...)
	return puo
}

// AddRelationships adds the "relationships" edges to the Relationship entity.
func (puo *PartyUpdateOne) AddRelationships(r ...*Relationship) *PartyUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.AddRelationshipIDs(ids...)
}

// Mutation returns the PartyMutation object of the builder.
func (puo *PartyUpdateOne) Mutation() *PartyMutation {
	return puo.mutation
}

// ClearCommChannels clears all "comm_channels" edges to the CommChannel entity.
func (puo *PartyUpdateOne) ClearCommChannels() *PartyUpdateOne {
	puo.mutation.ClearCommChannels()
	return puo
}

// RemoveCommChannelIDs removes the "comm_channels" edge to CommChannel entities by IDs.
func (puo *PartyUpdateOne) RemoveCommChannelIDs(ids ...string) *PartyUpdateOne {
	puo.mutation.RemoveCommChannelIDs(ids...)
	return puo
}

// RemoveCommChannels removes "comm_channels" edges to CommChannel entities.
func (puo *PartyUpdateOne) RemoveCommChannels(c ...*CommChannel) *PartyUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.RemoveCommChannelIDs(ids...)
}

// ClearRelationships clears all "relationships" edges to the Relationship entity.
func (puo *PartyUpdateOne) ClearRelationships() *PartyUpdateOne {
	puo.mutation.ClearRelationships()
	return puo
}

// RemoveRelationshipIDs removes the "relationships" edge to Relationship entities by IDs.
func (puo *PartyUpdateOne) RemoveRelationshipIDs(ids ...string) *PartyUpdateOne {
	puo.mutation.RemoveRelationshipIDs(ids...)
	return puo
}

// RemoveRelationships removes "relationships" edges to Relationship entities.
func (puo *PartyUpdateOne) RemoveRelationships(r ...*Relationship) *PartyUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.RemoveRelationshipIDs(ids...)
}

// Where appends a list predicates to the PartyUpdate builder.
func (puo *PartyUpdateOne) Where(ps ...predicate.Party) *PartyUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PartyUpdateOne) Select(field string, fields ...string) *PartyUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Party entity.
func (puo *PartyUpdateOne) Save(ctx context.Context) (*Party, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PartyUpdateOne) SaveX(ctx context.Context) *Party {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PartyUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PartyUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PartyUpdateOne) check() error {
	if v, ok := puo.mutation.DisplayName(); ok {
		if err := party.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`ent: validator failed for field "Party.display_name": %w`, err)}
		}
	}
	if v, ok := puo.mutation.LegalName(); ok {
		if err := party.LegalNameValidator(v); err != nil {
			return &ValidationError{Name: "legal_name", err: fmt.Errorf(`ent: validator failed for field "Party.legal_name": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Title(); ok {
		if err := party.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Party.title": %w`, err)}
		}
	}
	return nil
}

func (puo *PartyUpdateOne) sqlSave(ctx context.Context) (_node *Party, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(party.Table, party.Columns, sqlgraph.NewFieldSpec(party.FieldID, field.TypeString))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Party.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, party.FieldID)
		for _, f := range fields {
			if !party.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != party.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.AvatarURL(); ok {
		_spec.SetField(party.FieldAvatarURL, field.TypeString, value)
	}
	if puo.mutation.AvatarURLCleared() {
		_spec.ClearField(party.FieldAvatarURL, field.TypeString)
	}
	if value, ok := puo.mutation.DeletedAt(); ok {
		_spec.SetField(party.FieldDeletedAt, field.TypeTime, value)
	}
	if puo.mutation.DeletedAtCleared() {
		_spec.ClearField(party.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := puo.mutation.DeletedBy(); ok {
		_spec.SetField(party.FieldDeletedBy, field.TypeString, value)
	}
	if puo.mutation.DeletedByCleared() {
		_spec.ClearField(party.FieldDeletedBy, field.TypeString)
	}
	if value, ok := puo.mutation.DisplayName(); ok {
		_spec.SetField(party.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := puo.mutation.Etag(); ok {
		_spec.SetField(party.FieldEtag, field.TypeString, value)
	}
	if value, ok := puo.mutation.JobPosition(); ok {
		_spec.SetField(party.FieldJobPosition, field.TypeString, value)
	}
	if puo.mutation.JobPositionCleared() {
		_spec.ClearField(party.FieldJobPosition, field.TypeString)
	}
	if value, ok := puo.mutation.LanguageID(); ok {
		_spec.SetField(party.FieldLanguageID, field.TypeString, value)
	}
	if puo.mutation.LanguageIDCleared() {
		_spec.ClearField(party.FieldLanguageID, field.TypeString)
	}
	if value, ok := puo.mutation.LegalAddress(); ok {
		_spec.SetField(party.FieldLegalAddress, field.TypeString, value)
	}
	if puo.mutation.LegalAddressCleared() {
		_spec.ClearField(party.FieldLegalAddress, field.TypeString)
	}
	if value, ok := puo.mutation.LegalName(); ok {
		_spec.SetField(party.FieldLegalName, field.TypeString, value)
	}
	if puo.mutation.LegalNameCleared() {
		_spec.ClearField(party.FieldLegalName, field.TypeString)
	}
	if value, ok := puo.mutation.NationalityID(); ok {
		_spec.SetField(party.FieldNationalityID, field.TypeString, value)
	}
	if puo.mutation.NationalityIDCleared() {
		_spec.ClearField(party.FieldNationalityID, field.TypeString)
	}
	if value, ok := puo.mutation.Note(); ok {
		_spec.SetField(party.FieldNote, field.TypeString, value)
	}
	if puo.mutation.NoteCleared() {
		_spec.ClearField(party.FieldNote, field.TypeString)
	}
	if value, ok := puo.mutation.TaxID(); ok {
		_spec.SetField(party.FieldTaxID, field.TypeString, value)
	}
	if puo.mutation.TaxIDCleared() {
		_spec.ClearField(party.FieldTaxID, field.TypeString)
	}
	if value, ok := puo.mutation.Title(); ok {
		_spec.SetField(party.FieldTitle, field.TypeEnum, value)
	}
	if puo.mutation.TitleCleared() {
		_spec.ClearField(party.FieldTitle, field.TypeEnum)
	}
	if value, ok := puo.mutation.GetType(); ok {
		_spec.SetField(party.FieldType, field.TypeString, value)
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(party.FieldUpdatedAt, field.TypeTime, value)
	}
	if puo.mutation.UpdatedAtCleared() {
		_spec.ClearField(party.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := puo.mutation.Website(); ok {
		_spec.SetField(party.FieldWebsite, field.TypeString, value)
	}
	if puo.mutation.WebsiteCleared() {
		_spec.ClearField(party.FieldWebsite, field.TypeString)
	}
	if puo.mutation.CommChannelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   party.CommChannelsTable,
			Columns: []string{party.CommChannelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commchannel.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedCommChannelsIDs(); len(nodes) > 0 && !puo.mutation.CommChannelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   party.CommChannelsTable,
			Columns: []string{party.CommChannelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commchannel.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.CommChannelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   party.CommChannelsTable,
			Columns: []string{party.CommChannelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commchannel.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.RelationshipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   party.RelationshipsTable,
			Columns: []string{party.RelationshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(relationship.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedRelationshipsIDs(); len(nodes) > 0 && !puo.mutation.RelationshipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   party.RelationshipsTable,
			Columns: []string{party.RelationshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(relationship.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RelationshipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   party.RelationshipsTable,
			Columns: []string{party.RelationshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(relationship.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Party{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{party.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
