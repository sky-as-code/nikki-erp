// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky-as-code/nikki-erp/modules/contacts/infra/ent/party"
	"github.com/sky-as-code/nikki-erp/modules/contacts/infra/ent/relationship"
)

// RelationshipCreate is the builder for creating a Relationship entity.
type RelationshipCreate struct {
	config
	mutation *RelationshipMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (rc *RelationshipCreate) SetCreatedAt(t time.Time) *RelationshipCreate {
	rc.mutation.SetCreatedAt(t)
	return rc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rc *RelationshipCreate) SetNillableCreatedAt(t *time.Time) *RelationshipCreate {
	if t != nil {
		rc.SetCreatedAt(*t)
	}
	return rc
}

// SetDeletedAt sets the "deleted_at" field.
func (rc *RelationshipCreate) SetDeletedAt(t time.Time) *RelationshipCreate {
	rc.mutation.SetDeletedAt(t)
	return rc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rc *RelationshipCreate) SetNillableDeletedAt(t *time.Time) *RelationshipCreate {
	if t != nil {
		rc.SetDeletedAt(*t)
	}
	return rc
}

// SetDeletedBy sets the "deleted_by" field.
func (rc *RelationshipCreate) SetDeletedBy(s string) *RelationshipCreate {
	rc.mutation.SetDeletedBy(s)
	return rc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (rc *RelationshipCreate) SetNillableDeletedBy(s *string) *RelationshipCreate {
	if s != nil {
		rc.SetDeletedBy(*s)
	}
	return rc
}

// SetEtag sets the "etag" field.
func (rc *RelationshipCreate) SetEtag(s string) *RelationshipCreate {
	rc.mutation.SetEtag(s)
	return rc
}

// SetNote sets the "note" field.
func (rc *RelationshipCreate) SetNote(s string) *RelationshipCreate {
	rc.mutation.SetNote(s)
	return rc
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (rc *RelationshipCreate) SetNillableNote(s *string) *RelationshipCreate {
	if s != nil {
		rc.SetNote(*s)
	}
	return rc
}

// SetPartyID sets the "party_id" field.
func (rc *RelationshipCreate) SetPartyID(s string) *RelationshipCreate {
	rc.mutation.SetPartyID(s)
	return rc
}

// SetTargetPartyID sets the "target_party_id" field.
func (rc *RelationshipCreate) SetTargetPartyID(s string) *RelationshipCreate {
	rc.mutation.SetTargetPartyID(s)
	return rc
}

// SetType sets the "type" field.
func (rc *RelationshipCreate) SetType(s string) *RelationshipCreate {
	rc.mutation.SetType(s)
	return rc
}

// SetUpdatedAt sets the "updated_at" field.
func (rc *RelationshipCreate) SetUpdatedAt(t time.Time) *RelationshipCreate {
	rc.mutation.SetUpdatedAt(t)
	return rc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rc *RelationshipCreate) SetNillableUpdatedAt(t *time.Time) *RelationshipCreate {
	if t != nil {
		rc.SetUpdatedAt(*t)
	}
	return rc
}

// SetID sets the "id" field.
func (rc *RelationshipCreate) SetID(s string) *RelationshipCreate {
	rc.mutation.SetID(s)
	return rc
}

// SetSourcePartyID sets the "source_party" edge to the Party entity by ID.
func (rc *RelationshipCreate) SetSourcePartyID(id string) *RelationshipCreate {
	rc.mutation.SetSourcePartyID(id)
	return rc
}

// SetSourceParty sets the "source_party" edge to the Party entity.
func (rc *RelationshipCreate) SetSourceParty(p *Party) *RelationshipCreate {
	return rc.SetSourcePartyID(p.ID)
}

// SetTargetParty sets the "target_party" edge to the Party entity.
func (rc *RelationshipCreate) SetTargetParty(p *Party) *RelationshipCreate {
	return rc.SetTargetPartyID(p.ID)
}

// Mutation returns the RelationshipMutation object of the builder.
func (rc *RelationshipCreate) Mutation() *RelationshipMutation {
	return rc.mutation
}

// Save creates the Relationship in the database.
func (rc *RelationshipCreate) Save(ctx context.Context) (*Relationship, error) {
	rc.defaults()
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RelationshipCreate) SaveX(ctx context.Context) *Relationship {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RelationshipCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RelationshipCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *RelationshipCreate) defaults() {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		v := relationship.DefaultCreatedAt()
		rc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RelationshipCreate) check() error {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Relationship.created_at"`)}
	}
	if _, ok := rc.mutation.Etag(); !ok {
		return &ValidationError{Name: "etag", err: errors.New(`ent: missing required field "Relationship.etag"`)}
	}
	if _, ok := rc.mutation.PartyID(); !ok {
		return &ValidationError{Name: "party_id", err: errors.New(`ent: missing required field "Relationship.party_id"`)}
	}
	if _, ok := rc.mutation.TargetPartyID(); !ok {
		return &ValidationError{Name: "target_party_id", err: errors.New(`ent: missing required field "Relationship.target_party_id"`)}
	}
	if _, ok := rc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Relationship.type"`)}
	}
	if len(rc.mutation.SourcePartyIDs()) == 0 {
		return &ValidationError{Name: "source_party", err: errors.New(`ent: missing required edge "Relationship.source_party"`)}
	}
	if len(rc.mutation.TargetPartyIDs()) == 0 {
		return &ValidationError{Name: "target_party", err: errors.New(`ent: missing required edge "Relationship.target_party"`)}
	}
	return nil
}

func (rc *RelationshipCreate) sqlSave(ctx context.Context) (*Relationship, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Relationship.ID type: %T", _spec.ID.Value)
		}
	}
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *RelationshipCreate) createSpec() (*Relationship, *sqlgraph.CreateSpec) {
	var (
		_node = &Relationship{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(relationship.Table, sqlgraph.NewFieldSpec(relationship.FieldID, field.TypeString))
	)
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rc.mutation.CreatedAt(); ok {
		_spec.SetField(relationship.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rc.mutation.DeletedAt(); ok {
		_spec.SetField(relationship.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := rc.mutation.DeletedBy(); ok {
		_spec.SetField(relationship.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = &value
	}
	if value, ok := rc.mutation.Etag(); ok {
		_spec.SetField(relationship.FieldEtag, field.TypeString, value)
		_node.Etag = value
	}
	if value, ok := rc.mutation.Note(); ok {
		_spec.SetField(relationship.FieldNote, field.TypeString, value)
		_node.Note = &value
	}
	if value, ok := rc.mutation.GetType(); ok {
		_spec.SetField(relationship.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := rc.mutation.UpdatedAt(); ok {
		_spec.SetField(relationship.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = &value
	}
	if nodes := rc.mutation.SourcePartyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   relationship.SourcePartyTable,
			Columns: []string{relationship.SourcePartyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(party.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PartyID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.TargetPartyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   relationship.TargetPartyTable,
			Columns: []string{relationship.TargetPartyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(party.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TargetPartyID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RelationshipCreateBulk is the builder for creating many Relationship entities in bulk.
type RelationshipCreateBulk struct {
	config
	err      error
	builders []*RelationshipCreate
}

// Save creates the Relationship entities in the database.
func (rcb *RelationshipCreateBulk) Save(ctx context.Context) ([]*Relationship, error) {
	if rcb.err != nil {
		return nil, rcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Relationship, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RelationshipMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RelationshipCreateBulk) SaveX(ctx context.Context) []*Relationship {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RelationshipCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RelationshipCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
