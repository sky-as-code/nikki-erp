// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/sky-as-code/nikki-erp/modules/contacts/infra/ent/party"
	"github.com/sky-as-code/nikki-erp/modules/contacts/infra/ent/relationship"
)

// Relationship is the model entity for the Relationship schema.
type Relationship struct {
	config `json:"-"`
	// ID of the ent.
	// ULID
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy *string `json:"deleted_by,omitempty"`
	// Etag holds the value of the "etag" field.
	Etag string `json:"etag,omitempty"`
	// Note holds the value of the "note" field.
	Note *string `json:"note,omitempty"`
	// TargetPartyID holds the value of the "target_party_id" field.
	TargetPartyID string `json:"target_party_id,omitempty"`
	// Type holds the value of the "type" field.
	Type relationship.Type `json:"type,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RelationshipQuery when eager-loading is set.
	Edges        RelationshipEdges `json:"edges"`
	selectValues sql.SelectValues
}

// RelationshipEdges holds the relations/edges for other nodes in the graph.
type RelationshipEdges struct {
	// Party holds the value of the party edge.
	Party *Party `json:"party,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PartyOrErr returns the Party value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RelationshipEdges) PartyOrErr() (*Party, error) {
	if e.Party != nil {
		return e.Party, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: party.Label}
	}
	return nil, &NotLoadedError{edge: "party"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Relationship) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case relationship.FieldID, relationship.FieldDeletedBy, relationship.FieldEtag, relationship.FieldNote, relationship.FieldTargetPartyID, relationship.FieldType:
			values[i] = new(sql.NullString)
		case relationship.FieldCreatedAt, relationship.FieldDeletedAt, relationship.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Relationship fields.
func (r *Relationship) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case relationship.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				r.ID = value.String
			}
		case relationship.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				r.CreatedAt = value.Time
			}
		case relationship.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				r.DeletedAt = new(time.Time)
				*r.DeletedAt = value.Time
			}
		case relationship.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				r.DeletedBy = new(string)
				*r.DeletedBy = value.String
			}
		case relationship.FieldEtag:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field etag", values[i])
			} else if value.Valid {
				r.Etag = value.String
			}
		case relationship.FieldNote:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field note", values[i])
			} else if value.Valid {
				r.Note = new(string)
				*r.Note = value.String
			}
		case relationship.FieldTargetPartyID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field target_party_id", values[i])
			} else if value.Valid {
				r.TargetPartyID = value.String
			}
		case relationship.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				r.Type = relationship.Type(value.String)
			}
		case relationship.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				r.UpdatedAt = new(time.Time)
				*r.UpdatedAt = value.Time
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Relationship.
// This includes values selected through modifiers, order, etc.
func (r *Relationship) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryParty queries the "party" edge of the Relationship entity.
func (r *Relationship) QueryParty() *PartyQuery {
	return NewRelationshipClient(r.config).QueryParty(r)
}

// Update returns a builder for updating this Relationship.
// Note that you need to call Relationship.Unwrap() before calling this method if this Relationship
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Relationship) Update() *RelationshipUpdateOne {
	return NewRelationshipClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Relationship entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Relationship) Unwrap() *Relationship {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Relationship is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Relationship) String() string {
	var builder strings.Builder
	builder.WriteString("Relationship(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("created_at=")
	builder.WriteString(r.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := r.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := r.DeletedBy; v != nil {
		builder.WriteString("deleted_by=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("etag=")
	builder.WriteString(r.Etag)
	builder.WriteString(", ")
	if v := r.Note; v != nil {
		builder.WriteString("note=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("target_party_id=")
	builder.WriteString(r.TargetPartyID)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", r.Type))
	builder.WriteString(", ")
	if v := r.UpdatedAt; v != nil {
		builder.WriteString("updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Relationships is a parsable slice of Relationship.
type Relationships []*Relationship
