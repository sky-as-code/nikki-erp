// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/sky-as-code/nikki-erp/modules/contacts/infra/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/sky-as-code/nikki-erp/modules/contacts/infra/ent/commchannel"
	"github.com/sky-as-code/nikki-erp/modules/contacts/infra/ent/party"
	"github.com/sky-as-code/nikki-erp/modules/contacts/infra/ent/relationship"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// CommChannel is the client for interacting with the CommChannel builders.
	CommChannel *CommChannelClient
	// Party is the client for interacting with the Party builders.
	Party *PartyClient
	// Relationship is the client for interacting with the Relationship builders.
	Relationship *RelationshipClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.CommChannel = NewCommChannelClient(c.config)
	c.Party = NewPartyClient(c.config)
	c.Relationship = NewRelationshipClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		CommChannel:  NewCommChannelClient(cfg),
		Party:        NewPartyClient(cfg),
		Relationship: NewRelationshipClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		CommChannel:  NewCommChannelClient(cfg),
		Party:        NewPartyClient(cfg),
		Relationship: NewRelationshipClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		CommChannel.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.CommChannel.Use(hooks...)
	c.Party.Use(hooks...)
	c.Relationship.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.CommChannel.Intercept(interceptors...)
	c.Party.Intercept(interceptors...)
	c.Relationship.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *CommChannelMutation:
		return c.CommChannel.mutate(ctx, m)
	case *PartyMutation:
		return c.Party.mutate(ctx, m)
	case *RelationshipMutation:
		return c.Relationship.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// CommChannelClient is a client for the CommChannel schema.
type CommChannelClient struct {
	config
}

// NewCommChannelClient returns a client for the CommChannel from the given config.
func NewCommChannelClient(c config) *CommChannelClient {
	return &CommChannelClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `commchannel.Hooks(f(g(h())))`.
func (c *CommChannelClient) Use(hooks ...Hook) {
	c.hooks.CommChannel = append(c.hooks.CommChannel, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `commchannel.Intercept(f(g(h())))`.
func (c *CommChannelClient) Intercept(interceptors ...Interceptor) {
	c.inters.CommChannel = append(c.inters.CommChannel, interceptors...)
}

// Create returns a builder for creating a CommChannel entity.
func (c *CommChannelClient) Create() *CommChannelCreate {
	mutation := newCommChannelMutation(c.config, OpCreate)
	return &CommChannelCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CommChannel entities.
func (c *CommChannelClient) CreateBulk(builders ...*CommChannelCreate) *CommChannelCreateBulk {
	return &CommChannelCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CommChannelClient) MapCreateBulk(slice any, setFunc func(*CommChannelCreate, int)) *CommChannelCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CommChannelCreateBulk{err: fmt.Errorf("calling to CommChannelClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CommChannelCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CommChannelCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CommChannel.
func (c *CommChannelClient) Update() *CommChannelUpdate {
	mutation := newCommChannelMutation(c.config, OpUpdate)
	return &CommChannelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CommChannelClient) UpdateOne(cc *CommChannel) *CommChannelUpdateOne {
	mutation := newCommChannelMutation(c.config, OpUpdateOne, withCommChannel(cc))
	return &CommChannelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CommChannelClient) UpdateOneID(id string) *CommChannelUpdateOne {
	mutation := newCommChannelMutation(c.config, OpUpdateOne, withCommChannelID(id))
	return &CommChannelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CommChannel.
func (c *CommChannelClient) Delete() *CommChannelDelete {
	mutation := newCommChannelMutation(c.config, OpDelete)
	return &CommChannelDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CommChannelClient) DeleteOne(cc *CommChannel) *CommChannelDeleteOne {
	return c.DeleteOneID(cc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CommChannelClient) DeleteOneID(id string) *CommChannelDeleteOne {
	builder := c.Delete().Where(commchannel.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CommChannelDeleteOne{builder}
}

// Query returns a query builder for CommChannel.
func (c *CommChannelClient) Query() *CommChannelQuery {
	return &CommChannelQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCommChannel},
		inters: c.Interceptors(),
	}
}

// Get returns a CommChannel entity by its id.
func (c *CommChannelClient) Get(ctx context.Context, id string) (*CommChannel, error) {
	return c.Query().Where(commchannel.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CommChannelClient) GetX(ctx context.Context, id string) *CommChannel {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParty queries the party edge of a CommChannel.
func (c *CommChannelClient) QueryParty(cc *CommChannel) *PartyQuery {
	query := (&PartyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(commchannel.Table, commchannel.FieldID, id),
			sqlgraph.To(party.Table, party.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, commchannel.PartyTable, commchannel.PartyColumn),
		)
		fromV = sqlgraph.Neighbors(cc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CommChannelClient) Hooks() []Hook {
	return c.hooks.CommChannel
}

// Interceptors returns the client interceptors.
func (c *CommChannelClient) Interceptors() []Interceptor {
	return c.inters.CommChannel
}

func (c *CommChannelClient) mutate(ctx context.Context, m *CommChannelMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CommChannelCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CommChannelUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CommChannelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CommChannelDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CommChannel mutation op: %q", m.Op())
	}
}

// PartyClient is a client for the Party schema.
type PartyClient struct {
	config
}

// NewPartyClient returns a client for the Party from the given config.
func NewPartyClient(c config) *PartyClient {
	return &PartyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `party.Hooks(f(g(h())))`.
func (c *PartyClient) Use(hooks ...Hook) {
	c.hooks.Party = append(c.hooks.Party, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `party.Intercept(f(g(h())))`.
func (c *PartyClient) Intercept(interceptors ...Interceptor) {
	c.inters.Party = append(c.inters.Party, interceptors...)
}

// Create returns a builder for creating a Party entity.
func (c *PartyClient) Create() *PartyCreate {
	mutation := newPartyMutation(c.config, OpCreate)
	return &PartyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Party entities.
func (c *PartyClient) CreateBulk(builders ...*PartyCreate) *PartyCreateBulk {
	return &PartyCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PartyClient) MapCreateBulk(slice any, setFunc func(*PartyCreate, int)) *PartyCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PartyCreateBulk{err: fmt.Errorf("calling to PartyClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PartyCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PartyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Party.
func (c *PartyClient) Update() *PartyUpdate {
	mutation := newPartyMutation(c.config, OpUpdate)
	return &PartyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PartyClient) UpdateOne(pa *Party) *PartyUpdateOne {
	mutation := newPartyMutation(c.config, OpUpdateOne, withParty(pa))
	return &PartyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PartyClient) UpdateOneID(id string) *PartyUpdateOne {
	mutation := newPartyMutation(c.config, OpUpdateOne, withPartyID(id))
	return &PartyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Party.
func (c *PartyClient) Delete() *PartyDelete {
	mutation := newPartyMutation(c.config, OpDelete)
	return &PartyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PartyClient) DeleteOne(pa *Party) *PartyDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PartyClient) DeleteOneID(id string) *PartyDeleteOne {
	builder := c.Delete().Where(party.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PartyDeleteOne{builder}
}

// Query returns a query builder for Party.
func (c *PartyClient) Query() *PartyQuery {
	return &PartyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeParty},
		inters: c.Interceptors(),
	}
}

// Get returns a Party entity by its id.
func (c *PartyClient) Get(ctx context.Context, id string) (*Party, error) {
	return c.Query().Where(party.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PartyClient) GetX(ctx context.Context, id string) *Party {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCommChannels queries the comm_channels edge of a Party.
func (c *PartyClient) QueryCommChannels(pa *Party) *CommChannelQuery {
	query := (&CommChannelClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(party.Table, party.FieldID, id),
			sqlgraph.To(commchannel.Table, commchannel.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, party.CommChannelsTable, party.CommChannelsColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRelationshipsAsSource queries the relationships_as_source edge of a Party.
func (c *PartyClient) QueryRelationshipsAsSource(pa *Party) *RelationshipQuery {
	query := (&RelationshipClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(party.Table, party.FieldID, id),
			sqlgraph.To(relationship.Table, relationship.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, party.RelationshipsAsSourceTable, party.RelationshipsAsSourceColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRelationshipsAsTarget queries the relationships_as_target edge of a Party.
func (c *PartyClient) QueryRelationshipsAsTarget(pa *Party) *RelationshipQuery {
	query := (&RelationshipClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(party.Table, party.FieldID, id),
			sqlgraph.To(relationship.Table, relationship.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, party.RelationshipsAsTargetTable, party.RelationshipsAsTargetColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PartyClient) Hooks() []Hook {
	return c.hooks.Party
}

// Interceptors returns the client interceptors.
func (c *PartyClient) Interceptors() []Interceptor {
	return c.inters.Party
}

func (c *PartyClient) mutate(ctx context.Context, m *PartyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PartyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PartyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PartyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PartyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Party mutation op: %q", m.Op())
	}
}

// RelationshipClient is a client for the Relationship schema.
type RelationshipClient struct {
	config
}

// NewRelationshipClient returns a client for the Relationship from the given config.
func NewRelationshipClient(c config) *RelationshipClient {
	return &RelationshipClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `relationship.Hooks(f(g(h())))`.
func (c *RelationshipClient) Use(hooks ...Hook) {
	c.hooks.Relationship = append(c.hooks.Relationship, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `relationship.Intercept(f(g(h())))`.
func (c *RelationshipClient) Intercept(interceptors ...Interceptor) {
	c.inters.Relationship = append(c.inters.Relationship, interceptors...)
}

// Create returns a builder for creating a Relationship entity.
func (c *RelationshipClient) Create() *RelationshipCreate {
	mutation := newRelationshipMutation(c.config, OpCreate)
	return &RelationshipCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Relationship entities.
func (c *RelationshipClient) CreateBulk(builders ...*RelationshipCreate) *RelationshipCreateBulk {
	return &RelationshipCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RelationshipClient) MapCreateBulk(slice any, setFunc func(*RelationshipCreate, int)) *RelationshipCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RelationshipCreateBulk{err: fmt.Errorf("calling to RelationshipClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RelationshipCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RelationshipCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Relationship.
func (c *RelationshipClient) Update() *RelationshipUpdate {
	mutation := newRelationshipMutation(c.config, OpUpdate)
	return &RelationshipUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RelationshipClient) UpdateOne(r *Relationship) *RelationshipUpdateOne {
	mutation := newRelationshipMutation(c.config, OpUpdateOne, withRelationship(r))
	return &RelationshipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RelationshipClient) UpdateOneID(id string) *RelationshipUpdateOne {
	mutation := newRelationshipMutation(c.config, OpUpdateOne, withRelationshipID(id))
	return &RelationshipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Relationship.
func (c *RelationshipClient) Delete() *RelationshipDelete {
	mutation := newRelationshipMutation(c.config, OpDelete)
	return &RelationshipDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RelationshipClient) DeleteOne(r *Relationship) *RelationshipDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RelationshipClient) DeleteOneID(id string) *RelationshipDeleteOne {
	builder := c.Delete().Where(relationship.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RelationshipDeleteOne{builder}
}

// Query returns a query builder for Relationship.
func (c *RelationshipClient) Query() *RelationshipQuery {
	return &RelationshipQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRelationship},
		inters: c.Interceptors(),
	}
}

// Get returns a Relationship entity by its id.
func (c *RelationshipClient) Get(ctx context.Context, id string) (*Relationship, error) {
	return c.Query().Where(relationship.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RelationshipClient) GetX(ctx context.Context, id string) *Relationship {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySourceParty queries the source_party edge of a Relationship.
func (c *RelationshipClient) QuerySourceParty(r *Relationship) *PartyQuery {
	query := (&PartyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(relationship.Table, relationship.FieldID, id),
			sqlgraph.To(party.Table, party.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, relationship.SourcePartyTable, relationship.SourcePartyColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTargetParty queries the target_party edge of a Relationship.
func (c *RelationshipClient) QueryTargetParty(r *Relationship) *PartyQuery {
	query := (&PartyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(relationship.Table, relationship.FieldID, id),
			sqlgraph.To(party.Table, party.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, relationship.TargetPartyTable, relationship.TargetPartyColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RelationshipClient) Hooks() []Hook {
	return c.hooks.Relationship
}

// Interceptors returns the client interceptors.
func (c *RelationshipClient) Interceptors() []Interceptor {
	return c.inters.Relationship
}

func (c *RelationshipClient) mutate(ctx context.Context, m *RelationshipMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RelationshipCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RelationshipUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RelationshipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RelationshipDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Relationship mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		CommChannel, Party, Relationship []ent.Hook
	}
	inters struct {
		CommChannel, Party, Relationship []ent.Interceptor
	}
)
