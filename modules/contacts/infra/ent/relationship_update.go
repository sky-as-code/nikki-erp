// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sky-as-code/nikki-erp/modules/contacts/infra/ent/party"
	"github.com/sky-as-code/nikki-erp/modules/contacts/infra/ent/predicate"
	"github.com/sky-as-code/nikki-erp/modules/contacts/infra/ent/relationship"
)

// RelationshipUpdate is the builder for updating Relationship entities.
type RelationshipUpdate struct {
	config
	hooks    []Hook
	mutation *RelationshipMutation
}

// Where appends a list predicates to the RelationshipUpdate builder.
func (ru *RelationshipUpdate) Where(ps ...predicate.Relationship) *RelationshipUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetDeletedAt sets the "deleted_at" field.
func (ru *RelationshipUpdate) SetDeletedAt(t time.Time) *RelationshipUpdate {
	ru.mutation.SetDeletedAt(t)
	return ru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ru *RelationshipUpdate) SetNillableDeletedAt(t *time.Time) *RelationshipUpdate {
	if t != nil {
		ru.SetDeletedAt(*t)
	}
	return ru
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ru *RelationshipUpdate) ClearDeletedAt() *RelationshipUpdate {
	ru.mutation.ClearDeletedAt()
	return ru
}

// SetDeletedBy sets the "deleted_by" field.
func (ru *RelationshipUpdate) SetDeletedBy(s string) *RelationshipUpdate {
	ru.mutation.SetDeletedBy(s)
	return ru
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (ru *RelationshipUpdate) SetNillableDeletedBy(s *string) *RelationshipUpdate {
	if s != nil {
		ru.SetDeletedBy(*s)
	}
	return ru
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (ru *RelationshipUpdate) ClearDeletedBy() *RelationshipUpdate {
	ru.mutation.ClearDeletedBy()
	return ru
}

// SetEtag sets the "etag" field.
func (ru *RelationshipUpdate) SetEtag(s string) *RelationshipUpdate {
	ru.mutation.SetEtag(s)
	return ru
}

// SetNillableEtag sets the "etag" field if the given value is not nil.
func (ru *RelationshipUpdate) SetNillableEtag(s *string) *RelationshipUpdate {
	if s != nil {
		ru.SetEtag(*s)
	}
	return ru
}

// SetNote sets the "note" field.
func (ru *RelationshipUpdate) SetNote(s string) *RelationshipUpdate {
	ru.mutation.SetNote(s)
	return ru
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (ru *RelationshipUpdate) SetNillableNote(s *string) *RelationshipUpdate {
	if s != nil {
		ru.SetNote(*s)
	}
	return ru
}

// ClearNote clears the value of the "note" field.
func (ru *RelationshipUpdate) ClearNote() *RelationshipUpdate {
	ru.mutation.ClearNote()
	return ru
}

// SetPartyID sets the "party_id" field.
func (ru *RelationshipUpdate) SetPartyID(s string) *RelationshipUpdate {
	ru.mutation.SetPartyID(s)
	return ru
}

// SetNillablePartyID sets the "party_id" field if the given value is not nil.
func (ru *RelationshipUpdate) SetNillablePartyID(s *string) *RelationshipUpdate {
	if s != nil {
		ru.SetPartyID(*s)
	}
	return ru
}

// SetTargetPartyID sets the "target_party_id" field.
func (ru *RelationshipUpdate) SetTargetPartyID(s string) *RelationshipUpdate {
	ru.mutation.SetTargetPartyID(s)
	return ru
}

// SetNillableTargetPartyID sets the "target_party_id" field if the given value is not nil.
func (ru *RelationshipUpdate) SetNillableTargetPartyID(s *string) *RelationshipUpdate {
	if s != nil {
		ru.SetTargetPartyID(*s)
	}
	return ru
}

// SetType sets the "type" field.
func (ru *RelationshipUpdate) SetType(s string) *RelationshipUpdate {
	ru.mutation.SetType(s)
	return ru
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ru *RelationshipUpdate) SetNillableType(s *string) *RelationshipUpdate {
	if s != nil {
		ru.SetType(*s)
	}
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *RelationshipUpdate) SetUpdatedAt(t time.Time) *RelationshipUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ru *RelationshipUpdate) SetNillableUpdatedAt(t *time.Time) *RelationshipUpdate {
	if t != nil {
		ru.SetUpdatedAt(*t)
	}
	return ru
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ru *RelationshipUpdate) ClearUpdatedAt() *RelationshipUpdate {
	ru.mutation.ClearUpdatedAt()
	return ru
}

// SetSourcePartyID sets the "source_party" edge to the Party entity by ID.
func (ru *RelationshipUpdate) SetSourcePartyID(id string) *RelationshipUpdate {
	ru.mutation.SetSourcePartyID(id)
	return ru
}

// SetSourceParty sets the "source_party" edge to the Party entity.
func (ru *RelationshipUpdate) SetSourceParty(p *Party) *RelationshipUpdate {
	return ru.SetSourcePartyID(p.ID)
}

// SetTargetParty sets the "target_party" edge to the Party entity.
func (ru *RelationshipUpdate) SetTargetParty(p *Party) *RelationshipUpdate {
	return ru.SetTargetPartyID(p.ID)
}

// Mutation returns the RelationshipMutation object of the builder.
func (ru *RelationshipUpdate) Mutation() *RelationshipMutation {
	return ru.mutation
}

// ClearSourceParty clears the "source_party" edge to the Party entity.
func (ru *RelationshipUpdate) ClearSourceParty() *RelationshipUpdate {
	ru.mutation.ClearSourceParty()
	return ru
}

// ClearTargetParty clears the "target_party" edge to the Party entity.
func (ru *RelationshipUpdate) ClearTargetParty() *RelationshipUpdate {
	ru.mutation.ClearTargetParty()
	return ru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RelationshipUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RelationshipUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RelationshipUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RelationshipUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *RelationshipUpdate) check() error {
	if ru.mutation.SourcePartyCleared() && len(ru.mutation.SourcePartyIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Relationship.source_party"`)
	}
	if ru.mutation.TargetPartyCleared() && len(ru.mutation.TargetPartyIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Relationship.target_party"`)
	}
	return nil
}

func (ru *RelationshipUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(relationship.Table, relationship.Columns, sqlgraph.NewFieldSpec(relationship.FieldID, field.TypeString))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.DeletedAt(); ok {
		_spec.SetField(relationship.FieldDeletedAt, field.TypeTime, value)
	}
	if ru.mutation.DeletedAtCleared() {
		_spec.ClearField(relationship.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ru.mutation.DeletedBy(); ok {
		_spec.SetField(relationship.FieldDeletedBy, field.TypeString, value)
	}
	if ru.mutation.DeletedByCleared() {
		_spec.ClearField(relationship.FieldDeletedBy, field.TypeString)
	}
	if value, ok := ru.mutation.Etag(); ok {
		_spec.SetField(relationship.FieldEtag, field.TypeString, value)
	}
	if value, ok := ru.mutation.Note(); ok {
		_spec.SetField(relationship.FieldNote, field.TypeString, value)
	}
	if ru.mutation.NoteCleared() {
		_spec.ClearField(relationship.FieldNote, field.TypeString)
	}
	if value, ok := ru.mutation.GetType(); ok {
		_spec.SetField(relationship.FieldType, field.TypeString, value)
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.SetField(relationship.FieldUpdatedAt, field.TypeTime, value)
	}
	if ru.mutation.UpdatedAtCleared() {
		_spec.ClearField(relationship.FieldUpdatedAt, field.TypeTime)
	}
	if ru.mutation.SourcePartyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   relationship.SourcePartyTable,
			Columns: []string{relationship.SourcePartyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(party.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.SourcePartyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   relationship.SourcePartyTable,
			Columns: []string{relationship.SourcePartyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(party.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.TargetPartyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   relationship.TargetPartyTable,
			Columns: []string{relationship.TargetPartyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(party.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.TargetPartyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   relationship.TargetPartyTable,
			Columns: []string{relationship.TargetPartyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(party.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{relationship.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RelationshipUpdateOne is the builder for updating a single Relationship entity.
type RelationshipUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RelationshipMutation
}

// SetDeletedAt sets the "deleted_at" field.
func (ruo *RelationshipUpdateOne) SetDeletedAt(t time.Time) *RelationshipUpdateOne {
	ruo.mutation.SetDeletedAt(t)
	return ruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ruo *RelationshipUpdateOne) SetNillableDeletedAt(t *time.Time) *RelationshipUpdateOne {
	if t != nil {
		ruo.SetDeletedAt(*t)
	}
	return ruo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ruo *RelationshipUpdateOne) ClearDeletedAt() *RelationshipUpdateOne {
	ruo.mutation.ClearDeletedAt()
	return ruo
}

// SetDeletedBy sets the "deleted_by" field.
func (ruo *RelationshipUpdateOne) SetDeletedBy(s string) *RelationshipUpdateOne {
	ruo.mutation.SetDeletedBy(s)
	return ruo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (ruo *RelationshipUpdateOne) SetNillableDeletedBy(s *string) *RelationshipUpdateOne {
	if s != nil {
		ruo.SetDeletedBy(*s)
	}
	return ruo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (ruo *RelationshipUpdateOne) ClearDeletedBy() *RelationshipUpdateOne {
	ruo.mutation.ClearDeletedBy()
	return ruo
}

// SetEtag sets the "etag" field.
func (ruo *RelationshipUpdateOne) SetEtag(s string) *RelationshipUpdateOne {
	ruo.mutation.SetEtag(s)
	return ruo
}

// SetNillableEtag sets the "etag" field if the given value is not nil.
func (ruo *RelationshipUpdateOne) SetNillableEtag(s *string) *RelationshipUpdateOne {
	if s != nil {
		ruo.SetEtag(*s)
	}
	return ruo
}

// SetNote sets the "note" field.
func (ruo *RelationshipUpdateOne) SetNote(s string) *RelationshipUpdateOne {
	ruo.mutation.SetNote(s)
	return ruo
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (ruo *RelationshipUpdateOne) SetNillableNote(s *string) *RelationshipUpdateOne {
	if s != nil {
		ruo.SetNote(*s)
	}
	return ruo
}

// ClearNote clears the value of the "note" field.
func (ruo *RelationshipUpdateOne) ClearNote() *RelationshipUpdateOne {
	ruo.mutation.ClearNote()
	return ruo
}

// SetPartyID sets the "party_id" field.
func (ruo *RelationshipUpdateOne) SetPartyID(s string) *RelationshipUpdateOne {
	ruo.mutation.SetPartyID(s)
	return ruo
}

// SetNillablePartyID sets the "party_id" field if the given value is not nil.
func (ruo *RelationshipUpdateOne) SetNillablePartyID(s *string) *RelationshipUpdateOne {
	if s != nil {
		ruo.SetPartyID(*s)
	}
	return ruo
}

// SetTargetPartyID sets the "target_party_id" field.
func (ruo *RelationshipUpdateOne) SetTargetPartyID(s string) *RelationshipUpdateOne {
	ruo.mutation.SetTargetPartyID(s)
	return ruo
}

// SetNillableTargetPartyID sets the "target_party_id" field if the given value is not nil.
func (ruo *RelationshipUpdateOne) SetNillableTargetPartyID(s *string) *RelationshipUpdateOne {
	if s != nil {
		ruo.SetTargetPartyID(*s)
	}
	return ruo
}

// SetType sets the "type" field.
func (ruo *RelationshipUpdateOne) SetType(s string) *RelationshipUpdateOne {
	ruo.mutation.SetType(s)
	return ruo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ruo *RelationshipUpdateOne) SetNillableType(s *string) *RelationshipUpdateOne {
	if s != nil {
		ruo.SetType(*s)
	}
	return ruo
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *RelationshipUpdateOne) SetUpdatedAt(t time.Time) *RelationshipUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ruo *RelationshipUpdateOne) SetNillableUpdatedAt(t *time.Time) *RelationshipUpdateOne {
	if t != nil {
		ruo.SetUpdatedAt(*t)
	}
	return ruo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ruo *RelationshipUpdateOne) ClearUpdatedAt() *RelationshipUpdateOne {
	ruo.mutation.ClearUpdatedAt()
	return ruo
}

// SetSourcePartyID sets the "source_party" edge to the Party entity by ID.
func (ruo *RelationshipUpdateOne) SetSourcePartyID(id string) *RelationshipUpdateOne {
	ruo.mutation.SetSourcePartyID(id)
	return ruo
}

// SetSourceParty sets the "source_party" edge to the Party entity.
func (ruo *RelationshipUpdateOne) SetSourceParty(p *Party) *RelationshipUpdateOne {
	return ruo.SetSourcePartyID(p.ID)
}

// SetTargetParty sets the "target_party" edge to the Party entity.
func (ruo *RelationshipUpdateOne) SetTargetParty(p *Party) *RelationshipUpdateOne {
	return ruo.SetTargetPartyID(p.ID)
}

// Mutation returns the RelationshipMutation object of the builder.
func (ruo *RelationshipUpdateOne) Mutation() *RelationshipMutation {
	return ruo.mutation
}

// ClearSourceParty clears the "source_party" edge to the Party entity.
func (ruo *RelationshipUpdateOne) ClearSourceParty() *RelationshipUpdateOne {
	ruo.mutation.ClearSourceParty()
	return ruo
}

// ClearTargetParty clears the "target_party" edge to the Party entity.
func (ruo *RelationshipUpdateOne) ClearTargetParty() *RelationshipUpdateOne {
	ruo.mutation.ClearTargetParty()
	return ruo
}

// Where appends a list predicates to the RelationshipUpdate builder.
func (ruo *RelationshipUpdateOne) Where(ps ...predicate.Relationship) *RelationshipUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RelationshipUpdateOne) Select(field string, fields ...string) *RelationshipUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Relationship entity.
func (ruo *RelationshipUpdateOne) Save(ctx context.Context) (*Relationship, error) {
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RelationshipUpdateOne) SaveX(ctx context.Context) *Relationship {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RelationshipUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RelationshipUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RelationshipUpdateOne) check() error {
	if ruo.mutation.SourcePartyCleared() && len(ruo.mutation.SourcePartyIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Relationship.source_party"`)
	}
	if ruo.mutation.TargetPartyCleared() && len(ruo.mutation.TargetPartyIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Relationship.target_party"`)
	}
	return nil
}

func (ruo *RelationshipUpdateOne) sqlSave(ctx context.Context) (_node *Relationship, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(relationship.Table, relationship.Columns, sqlgraph.NewFieldSpec(relationship.FieldID, field.TypeString))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Relationship.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, relationship.FieldID)
		for _, f := range fields {
			if !relationship.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != relationship.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.DeletedAt(); ok {
		_spec.SetField(relationship.FieldDeletedAt, field.TypeTime, value)
	}
	if ruo.mutation.DeletedAtCleared() {
		_spec.ClearField(relationship.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ruo.mutation.DeletedBy(); ok {
		_spec.SetField(relationship.FieldDeletedBy, field.TypeString, value)
	}
	if ruo.mutation.DeletedByCleared() {
		_spec.ClearField(relationship.FieldDeletedBy, field.TypeString)
	}
	if value, ok := ruo.mutation.Etag(); ok {
		_spec.SetField(relationship.FieldEtag, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Note(); ok {
		_spec.SetField(relationship.FieldNote, field.TypeString, value)
	}
	if ruo.mutation.NoteCleared() {
		_spec.ClearField(relationship.FieldNote, field.TypeString)
	}
	if value, ok := ruo.mutation.GetType(); ok {
		_spec.SetField(relationship.FieldType, field.TypeString, value)
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.SetField(relationship.FieldUpdatedAt, field.TypeTime, value)
	}
	if ruo.mutation.UpdatedAtCleared() {
		_spec.ClearField(relationship.FieldUpdatedAt, field.TypeTime)
	}
	if ruo.mutation.SourcePartyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   relationship.SourcePartyTable,
			Columns: []string{relationship.SourcePartyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(party.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.SourcePartyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   relationship.SourcePartyTable,
			Columns: []string{relationship.SourcePartyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(party.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.TargetPartyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   relationship.TargetPartyTable,
			Columns: []string{relationship.TargetPartyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(party.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.TargetPartyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   relationship.TargetPartyTable,
			Columns: []string{relationship.TargetPartyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(party.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Relationship{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{relationship.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
