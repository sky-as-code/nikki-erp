meta {
  name: Resource Create - Client error (Existing name)
  type: http
  seq: 3
}

post {
  url: {{api_host}}/v1/authorize/resources
  body: json
  auth: inherit
}

body:json {
  {
      "name": "IdentityProfile",
      "resourceType": "custom",
      "scopeType": "org"
  }
}

script:post-response {
  const errorSchema = {
      type: "object",
      required: ["code", "details"],
      properties: {
          code: { type: "string", enum: ["validation_error"] },
          details: {
              type: "object",
              additionalProperties: { type: "string" }
          }
      },
      additionalProperties: true
  };
  
  let isStatusValid = false;
  test("Status code is 400", function () {
      isStatusValid = res.getStatus() === 400;
      expect(isStatusValid).to.be.true;
  });
  
  // ‚úÖ Parse JSON body
  let body;
  let isJsonValid = true;
  try {
      body = res.getBody();
      console.log("üì• Parsed error response:", body);
  } catch (e) {
      isJsonValid = false;
      console.error("‚ùå Failed to parse JSON:", e);
      expect.fail("Response body is not valid JSON");
  }
  
  // ‚úÖ Validate schema
  let isSchemaValid = false;
  if (isJsonValid) {
      test("Error response matches schema", function () {
          expect(body).to.have.jsonSchema(errorSchema);
          isSchemaValid = true;
      });
  }
  
  if (isStatusValid && isJsonValid && isSchemaValid) {
      test("Response is validation_error due to existing name", function () {
          expect(body.code).to.eql("validation_error");
  
          expect(body.details).to.be.an("object");
          expect(body.details).to.have.property("name");
          expect(body.details.name).to.eql("name already exists");
  
          console.log("‚úÖ Correctly failed on existing name:", body.details.name);
      });
  } else {
      console.warn("‚ö†Ô∏è Invalid error response ‚Äî skipping validation and NOT setting any environment variables.");
  }
  
}

settings {
  encodeUrl: true
}
