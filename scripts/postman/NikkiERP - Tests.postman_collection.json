{
	"info": {
		"_postman_id": "7a9aaabd-ee0b-4cfa-810e-d30c7efbd4c0",
		"name": "NikkiERP - Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26697084"
	},
	"item": [
		{
			"name": "Identity",
			"item": [
				{
					"name": "User",
					"item": [
						{
							"name": "User - Create",
							"item": [
								{
									"name": "User Create - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    type: \"object\",\r",
													"    required: [\"id\", \"createdAt\", \"displayName\", \"email\", \"etag\", \"status\"],\r",
													"    properties: {\r",
													"        id: { type: \"string\" },\r",
													"        createdAt: { type: \"integer\" },\r",
													"        displayName: { type: \"string\" },\r",
													"        email: { \r",
													"            type: \"string\", \r",
													"            format: \"email\" \r",
													"        },\r",
													"        etag: { type: \"string\" },\r",
													"        status: { \r",
													"            type: \"string\", \r",
													"            enum: [\"active\", \"inactive\"]\r",
													"        }\r",
													"    },\r",
													"    additionalProperties: false\r",
													"};\r",
													"\r",
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"Response matches expected JSON schema\", function () {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"const body = pm.response.text();\r",
													"try {\r",
													"    const payload = JSON.parse(body);\r",
													"    const { id, etag, email } = payload;\r",
													"    id && pm.environment.set('user_id', id);\r",
													"    etag && pm.environment.set('etag', etag);\r",
													"    email && pm.environment.set('email', email);\r",
													"} catch (err) {\r",
													"    console.error(err)\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Get original request body as raw text\r",
													"let rawBody = pm.request.body.raw;\r",
													"\r",
													"// Parse it as JSON\r",
													"let payload;\r",
													"try {\r",
													"    payload = JSON.parse(rawBody);\r",
													"} catch (e) {\r",
													"    console.error(\"Failed to parse request body as JSON:\", e);\r",
													"    return;\r",
													"}\r",
													"\r",
													"// Generate a 6-char alphanumeric string\r",
													"function randomString(length = 6) {\r",
													"    const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r",
													"    let result = '';\r",
													"    for (let i = 0; i < length; i++) {\r",
													"        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
													"    }\r",
													"    return result;\r",
													"}\r",
													"\r",
													"const rand = randomString();\r",
													"\r",
													"if (payload.displayName) {\r",
													"    payload.displayName += ' ' + rand;\r",
													"}\r",
													"if (payload.email && payload.email.includes('@')) {\r",
													"    const [local, domain] = payload.email.split('@');\r",
													"    payload.email = `${local}-${rand}@${domain}`;\r",
													"}\r",
													"\r",
													"// Write modified payload back to request\r",
													"pm.request.body.raw = JSON.stringify(payload, null, 2);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"displayName\": \"John Doe\",\r\n    \"email\": \"john.doe@nikkierp.com\",\r\n    \"password\": \"p@sswo0rd\",\r\n    \"isActive\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/identity/users",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "User Create - Missing required fields - Validation errors",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const expected = {\r",
													"    code: \"validation_error\",\r",
													"    details: {\r",
													"        displayName: \"cannot be blank\",\r",
													"        email: \"cannot be blank\",\r",
													"        passwordRaw: \"cannot be blank\",\r",
													"    },\r",
													"};\r",
													"\r",
													"// Parse response body\r",
													"let jsonData;\r",
													"try {\r",
													"    jsonData = pm.response.json();\r",
													"} catch (e) {\r",
													"    pm.test(\"Response is valid JSON\", function () {\r",
													"        pm.expect.fail(\"Response is not valid JSON\");\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body matches expected JSON exactly\", function () {\r",
													"    pm.expect(jsonData).to.eql(expected);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/identity/users",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "User Create - Empty strings - Validation errors",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const expected = {\r",
													"    code: \"validation_error\",\r",
													"    details: {\r",
													"        displayName: \"cannot be blank\",\r",
													"        email: \"cannot be blank\",\r",
													"        passwordRaw: \"cannot be blank\",\r",
													"        // TODO: Validate orgIds\r",
													"    },\r",
													"};\r",
													"\r",
													"// Parse response body\r",
													"let jsonData;\r",
													"try {\r",
													"    jsonData = pm.response.json();\r",
													"} catch (e) {\r",
													"    pm.test(\"Response is valid JSON\", function () {\r",
													"        pm.expect.fail(\"Response is not valid JSON\");\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body matches expected JSON exactly\", function () {\r",
													"    pm.expect(jsonData).to.eql(expected);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"displayName\": \"\",\r\n    \"email\": \"\",\r\n    \"password\": \"\",\r\n    \"orgIds\": [\"\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/identity/users",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "User Create - Invalid fields - Validation errors",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const expected = {\r",
													"    code: \"validation_error\",\r",
													"    details: {\r",
													"        displayName: \"the length must be between 1 and 200\",\r",
													"        email: \"must be a valid email address\",\r",
													"        passwordRaw: \"the length must be between 8 and 1000\",\r",
													"        // TODO: Validate orgIds\r",
													"    },\r",
													"};\r",
													"\r",
													"// Parse response body\r",
													"let jsonData;\r",
													"try {\r",
													"    jsonData = pm.response.json();\r",
													"} catch (e) {\r",
													"    pm.test(\"Response is valid JSON\", function () {\r",
													"        pm.expect.fail(\"Response is not valid JSON\");\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body matches expected JSON exactly\", function () {\r",
													"    pm.expect(jsonData).to.eql(expected);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"displayName\": \"too-longgggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg\",\r\n    \"email\": \"invalid@\",\r\n    \"password\": \"short\",\r\n    \"orgIds\": [\"\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/identity/users",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "User Create - Existing email",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const expected = {\r",
													"    code: \"validation_error\",\r",
													"    details: {\r",
													"        email: \"email already exists\"\r",
													"    }\r",
													"};\r",
													"\r",
													"// Parse response body\r",
													"let jsonData;\r",
													"try {\r",
													"    jsonData = pm.response.json();\r",
													"} catch (e) {\r",
													"    pm.test(\"Response is valid JSON\", function () {\r",
													"        pm.expect.fail(\"Response is not valid JSON\");\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body matches expected JSON exactly\", function () {\r",
													"    pm.expect(jsonData).to.eql(expected);\r",
													"});\r",
													"\r",
													"const body = pm.response.text();\r",
													"try {\r",
													"    const payload = JSON.parse(body);\r",
													"    const { id, etag } = payload;\r",
													"    id && pm.environment.set('user_id', id);\r",
													"    etag && pm.environment.set('etag', etag);\r",
													"} catch (err) {\r",
													"    console.error(err)\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"displayName\": \"John Doe\",\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"p@sswo0rd\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/identity/users",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"users"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "User - Update",
							"item": [
								{
									"name": "User Update - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    type: \"object\",\r",
													"    required: [\"id\", \"avatarUrl\", \"createdAt\", \"displayName\", \"email\", \"etag\", \"status\", \"updatedAt\"],\r",
													"    properties: {\r",
													"        id: {\"type\": \"string\"},\r",
													"        avatarUrl: {\r",
													"            type: \"string\",\r",
													"            format: \"uri\"\r",
													"        },\r",
													"        createdAt: {\"type\": \"integer\"},\r",
													"        displayName: {\"type\": \"string\"},\r",
													"        email: {\r",
													"            type: \"string\",\r",
													"            format: \"email\"\r",
													"        },\r",
													"        etag: {\"type\": \"string\"},\r",
													"        status: {\r",
													"            type: \"string\",\r",
													"            enum: [\"active\", \"inactive\", \"locked\"]\r",
													"        },\r",
													"        updatedAt: {\"type\": \"integer\"}\r",
													"    },\r",
													"    additionalProperties: false\r",
													"};\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response matches expected JSON schema\", function () {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"const body = pm.response.text();\r",
													"try {\r",
													"    const payload = JSON.parse(body);\r",
													"    const { id, etag, email } = payload;\r",
													"    const previousEtag = pm.environment.get(\"etag\");\r",
													"\r",
													"    pm.test(\"Response 'etag' is different from previous\", () => {\r",
													"        pm.expect(etag).to.not.eql(previousEtag);\r",
													"    });\r",
													"\r",
													"    pm.environment.set('user_id', id);\r",
													"    pm.environment.set('etag', etag);\r",
													"    pm.environment.set('email', email);\r",
													"} catch (err) {\r",
													"    console.error(err)\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Get original request body as raw text\r",
													"let rawBody = pm.request.body.raw;\r",
													"\r",
													"// Parse it as JSON\r",
													"let payload;\r",
													"try {\r",
													"    payload = JSON.parse(rawBody);\r",
													"} catch (e) {\r",
													"    console.error(\"Failed to parse request body as JSON:\", e);\r",
													"    return;\r",
													"}\r",
													"\r",
													"// Generate a 6-char alphanumeric string\r",
													"function randomString(length = 6) {\r",
													"    const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r",
													"    let result = '';\r",
													"    for (let i = 0; i < length; i++) {\r",
													"        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
													"    }\r",
													"    return result;\r",
													"}\r",
													"\r",
													"const rand = randomString();\r",
													"\r",
													"if (payload.displayName) {\r",
													"    payload.displayName += ' ' + rand;\r",
													"}\r",
													"if (payload.email && payload.email.includes('@')) {\r",
													"    const [local, domain] = payload.email.split('@');\r",
													"    payload.email = `${local}-${rand}@${domain}`;\r",
													"}\r",
													"\r",
													"// Write modified payload back to request\r",
													"pm.request.body.raw = JSON.stringify(payload, null, 2);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"avatarUrl\": \"https://avatar.com/me.jpg\",\r\n    \"displayName\": \"Another Doe\",\r\n    \"email\": \"another.doe@nikkierp.com\",\r\n    \"etag\": \"{{etag}}\",\r\n    \"isEnabled\": true,\r\n    \"mustChangePassword\": true,\r\n    \"password\": \"t0psecret!\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/identity/users/{{user_id}}",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"users",
												"{{user_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User Update - Not found ID - Validation errors",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const expected = {\r",
													"    code: \"validation_error\",\r",
													"    details: {\r",
													"        id: \"user not found\",\r",
													"    },\r",
													"};\r",
													"\r",
													"// Parse response body\r",
													"let jsonData;\r",
													"try {\r",
													"    jsonData = pm.response.json();\r",
													"} catch (e) {\r",
													"    pm.test(\"Response is valid JSON\", function () {\r",
													"        pm.expect.fail(\"Response is not valid JSON\");\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body matches expected JSON exactly\", function () {\r",
													"    pm.expect(jsonData).to.eql(expected);\r",
													"});\r",
													"\r",
													"const body = pm.response.text();\r",
													"try {\r",
													"    const payload = JSON.parse(body);\r",
													"    const { id, etag } = payload;\r",
													"    id && pm.environment.set('user_id', id);\r",
													"    etag && pm.environment.set('etag', etag);\r",
													"} catch (err) {\r",
													"    console.error(err)\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/identity/users/not-existing-1234567890123",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"users",
												"not-existing-1234567890123"
											]
										}
									},
									"response": []
								},
								{
									"name": "User Update - Missing required fields - Validation errors",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const expected = {\r",
													"    code: \"validation_error\",\r",
													"    details: {\r",
													"        etag: \"cannot be blank\",\r",
													"    },\r",
													"};\r",
													"\r",
													"// Parse response body\r",
													"let jsonData;\r",
													"try {\r",
													"    jsonData = pm.response.json();\r",
													"} catch (e) {\r",
													"    pm.test(\"Response is valid JSON\", function () {\r",
													"        pm.expect.fail(\"Response is not valid JSON\");\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body matches expected JSON exactly\", function () {\r",
													"    pm.expect(jsonData).to.eql(expected);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/identity/users/{{user_id}}",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"users",
												"{{user_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User Update - Empty strings - Validation errors",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const expected = {\r",
													"    code: \"validation_error\",\r",
													"    details: {\r",
													"        displayName: \"cannot be blank\",\r",
													"        email: \"cannot be blank\",\r",
													"        etag: \"cannot be blank\",\r",
													"        passwordRaw: \"cannot be blank\"\r",
													"        // TODO: Validate orgIds\r",
													"    },\r",
													"};\r",
													"\r",
													"// Parse response body\r",
													"let jsonData;\r",
													"try {\r",
													"    jsonData = pm.response.json();\r",
													"} catch (e) {\r",
													"    pm.test(\"Response is valid JSON\", function () {\r",
													"        pm.expect.fail(\"Response is not valid JSON\");\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body matches expected JSON exactly\", function () {\r",
													"    pm.expect(jsonData).to.eql(expected);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"avatarUrl\": \"\",\r\n    \"displayName\": \"\",\r\n    \"email\": \"\",\r\n    \"etag\": \"\",\r\n    \"password\": \"\",\r\n    \"orgIds\": [\"\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/identity/users/{{user_id}}",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"users",
												"{{user_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User Update - Existing email - Validation errors",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const expected = {\r",
													"    code: \"validation_error\",\r",
													"    details: {\r",
													"        email: \"email already exists\",\r",
													"    },\r",
													"};\r",
													"\r",
													"// Parse response body\r",
													"let jsonData;\r",
													"try {\r",
													"    jsonData = pm.response.json();\r",
													"} catch (e) {\r",
													"    pm.test(\"Response is valid JSON\", function () {\r",
													"        pm.expect.fail(\"Response is not valid JSON\");\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body matches expected JSON exactly\", function () {\r",
													"    pm.expect(jsonData).to.eql(expected);\r",
													"});\r",
													"\r",
													"const body = pm.response.text();\r",
													"try {\r",
													"    const payload = JSON.parse(body);\r",
													"    const { id, etag } = payload;\r",
													"    id && pm.environment.set('user_id', id);\r",
													"    etag && pm.environment.set('etag', etag);\r",
													"} catch (err) {\r",
													"    console.error(err)\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"etag\": \"{{etag}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/identity/users/{{user_id}}",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"users",
												"{{user_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User Update - Unmatched etag - Validation errors",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const expected = {\r",
													"    code: \"validation_error\",\r",
													"    details: {\r",
													"        etag: \"user has been modified by another process\",\r",
													"    },\r",
													"};\r",
													"\r",
													"// Parse response body\r",
													"let jsonData;\r",
													"try {\r",
													"    jsonData = pm.response.json();\r",
													"} catch (e) {\r",
													"    pm.test(\"Response is valid JSON\", function () {\r",
													"        pm.expect.fail(\"Response is not valid JSON\");\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body matches expected JSON exactly\", function () {\r",
													"    pm.expect(jsonData).to.eql(expected);\r",
													"});\r",
													"\r",
													"const body = pm.response.text();\r",
													"try {\r",
													"    const payload = JSON.parse(body);\r",
													"    const { id, etag } = payload;\r",
													"    id && pm.environment.set('user_id', id);\r",
													"    etag && pm.environment.set('etag', etag);\r",
													"} catch (err) {\r",
													"    console.error(err)\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"___________________\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/identity/users/{{user_id}}",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"users",
												"{{user_id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "User - Get by ID",
							"item": [
								{
									"name": "User Get - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    type: \"object\",\r",
													"    required: [\"id\", \"avatarUrl\", \"createdAt\", \"displayName\", \"email\", \"etag\", \"status\", \"updatedAt\"],\r",
													"    properties: {\r",
													"        id: {\"type\": \"string\"},\r",
													"        avatarUrl: {\r",
													"            type: \"string\",\r",
													"            format: \"uri\"\r",
													"        },\r",
													"        createdAt: {\"type\": \"integer\"},\r",
													"        displayName: {\"type\": \"string\"},\r",
													"        email: {\r",
													"            type: \"string\",\r",
													"            format: \"email\"\r",
													"        },\r",
													"        etag: {\"type\": \"string\"},\r",
													"        status: {\r",
													"            type: \"string\",\r",
													"            enum: [\"active\", \"inactive\", \"locked\"]\r",
													"        },\r",
													"        updatedAt: {\"type\": \"integer\"}\r",
													"    },\r",
													"    additionalProperties: false\r",
													"};\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response matches expected JSON schema\", function () {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"const body = pm.response.text();\r",
													"try {\r",
													"    const payload = JSON.parse(body);\r",
													"    const { id, etag, email } = payload;\r",
													"\r",
													"    pm.environment.set('user_id', id);\r",
													"    pm.environment.set('etag', etag);\r",
													"    pm.environment.set('email', email);\r",
													"} catch (err) {\r",
													"    console.error(err)\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{api_host}}/v1/identity/users/{{user_id}}",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"users",
												"{{user_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User Get - Not found ID - Validation errors",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const expected = {\r",
													"    code: \"validation_error\",\r",
													"    details: {\r",
													"        id: \"user not found\",\r",
													"    },\r",
													"};\r",
													"\r",
													"// Parse response body\r",
													"let jsonData;\r",
													"try {\r",
													"    jsonData = pm.response.json();\r",
													"} catch (e) {\r",
													"    pm.test(\"Response is valid JSON\", function () {\r",
													"        pm.expect.fail(\"Response is not valid JSON\");\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body matches expected JSON exactly\", function () {\r",
													"    pm.expect(jsonData).to.eql(expected);\r",
													"});\r",
													"\r",
													"const body = pm.response.text();\r",
													"try {\r",
													"    const payload = JSON.parse(body);\r",
													"    const { id, etag } = payload;\r",
													"    id && pm.environment.set('user_id', id);\r",
													"    etag && pm.environment.set('etag', etag);\r",
													"} catch (err) {\r",
													"    console.error(err)\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{api_host}}/v1/identity/users/not-existing-1234567890123",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"users",
												"not-existing-1234567890123"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Group",
					"item": [
						{
							"name": "Group - Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.text();\r",
											"try {\r",
											"    const payload = JSON.parse(body);\r",
											"    const { id, etag } = payload;\r",
											"    id && pm.environment.set('group_id', id);\r",
											"    etag && pm.environment.set('etag', etag);\r",
											"} catch (err) {\r",
											"    console.error(err)\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"My Team\",\r\n    \"description\": \"This is my team\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_host}}/v1/identity/groups",
									"host": [
										"{{api_host}}"
									],
									"path": [
										"v1",
										"identity",
										"groups"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"My Team\",\r\n    \"description\": \"This is my team\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/identity/groups",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"groups"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"01JX7MFVT6VRTHJ5GFYXVWAMHF\",\n    \"createdAt\": 1749381803848,\n    \"name\": \"My Team\",\n    \"description\": \"This is my team\",\n    \"etag\": \"1749381803846717000\"\n}"
								},
								{
									"name": "Client error - Invalid fields",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"description\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/identity/groups",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"groups"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": \"validation_error\",\n    \"details\": {\n        \"name\": \"cannot be blank\"\n    }\n}"
								},
								{
									"name": "Client error - Existing name",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"My Team\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/identity/groups",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"groups"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": \"validation_error\",\n    \"details\": {\n        \"name\": \"group name already exists\"\n    }\n}"
								}
							]
						},
						{
							"name": "Group - Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.text();\r",
											"try {\r",
											"    const payload = JSON.parse(body);\r",
											"    const etag = payload.etag;\r",
											"    etag && pm.environment.set('etag', etag);\r",
											"} catch (err) {\r",
											"    console.error(err)\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Your Team\",\r\n    \"description\": \"The people you are working with\",\r\n    \"etag\": \"{{etag}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_host}}/v1/identity/groups/{{group_id}}",
									"host": [
										"{{api_host}}"
									],
									"path": [
										"v1",
										"identity",
										"groups",
										"{{group_id}}"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Your Team\",\r\n    \"description\": \"The people you are working with\",\r\n    \"etag\": \"{{etag}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/identity/groups/{{group_id}}",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"groups",
												"{{group_id}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"01JX7MFVT6VRTHJ5GFYXVWAMHF\",\n    \"createdAt\": 1749381803848,\n    \"name\": \"Your Team\",\n    \"description\": \"The people you are working with\",\n    \"etag\": \"1749381890052750000\",\n    \"updatedAt\": 1749381890052\n}"
								},
								{
									"name": "Client error - Invalid fields Copy",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"\",\r\n    \"description\": \"\",\r\n    \"etag\": \"{{etag}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/identity/groups/{{group_id}}",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"groups",
												"{{group_id}}"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": \"validation_error\",\n    \"details\": {\n        \"name\": \"cannot be blank\"\n    }\n}"
								},
								{
									"name": "Client error - Unmatched etag",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Your Team\",\r\n    \"description\": \"The people you are working with\",\r\n    \"etag\": \"fake_etag\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/identity/groups/{{group_id}}",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"groups",
												"{{group_id}}"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": \"validation_error\",\n    \"details\": {\n        \"etag\": \"group has been modified by another user\"\n    }\n}"
								}
							]
						},
						{
							"name": "Group - Get by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const body = pm.response.text();\r",
											"try {\r",
											"    const payload = JSON.parse(body);\r",
											"    const etag = payload.etag;\r",
											"    etag && pm.environment.set('etag', etag);\r",
											"} catch (err) {\r",
											"    console.error(err)\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_host}}/v1/identity/groups/{{group_id}}",
									"host": [
										"{{api_host}}"
									],
									"path": [
										"v1",
										"identity",
										"groups",
										"{{group_id}}"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{api_host}}/v1/identity/groups/{{group_id}}",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"groups",
												"{{group_id}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"01JX7MFVT6VRTHJ5GFYXVWAMHF\",\n    \"createdAt\": 1749381803848,\n    \"name\": \"Your Team\",\n    \"description\": \"The people you are working with\",\n    \"etag\": \"1749381890052750000\",\n    \"updatedAt\": 1749382124763\n}"
								},
								{
									"name": "Client error - Invalid ID",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{api_host}}/v1/identity/groups/01JX2V9CGPA5",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"groups",
												"01JX2V9CGPA5"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": \"validation_error\",\n    \"details\": {\n        \"id\": \"the length must be exactly 26\"\n    }\n}"
								},
								{
									"name": "Client error - Not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{api_host}}/v1/identity/groups/1000000000000000000000000A",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"groups",
												"1000000000000000000000000A"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": \"validation_error\",\n    \"details\": {\n        \"id\": \"group not found\"\n    }\n}"
								}
							]
						},
						{
							"name": "Group - Search",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_host}}/v1/identity/groups",
									"host": [
										"{{api_host}}"
									],
									"path": [
										"v1",
										"identity",
										"groups"
									]
								}
							},
							"response": [
								{
									"name": "Success - No criteria, No paging",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{api_host}}/v1/identity/groups",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"groups"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"items\": [\n        {\n            \"id\": \"01JWNXBR5QJBH7PE9PQ9FW746V\",\n            \"name\": \"Domain Users\",\n            \"description\": \"Default group for all domain users\"\n        },\n        {\n            \"id\": \"01JX7MFVT6VRTHJ5GFYXVWAMHF\",\n            \"name\": \"Your Team\",\n            \"description\": \"The people you are working with\"\n        }\n    ],\n    \"total\": 2,\n    \"page\": 0,\n    \"size\": 50\n}"
								},
								{
									"name": "Success - No criteria, With paging",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{api_host}}/v1/identity/groups?page=0&size=1",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"groups"
											],
											"query": [
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "size",
													"value": "1"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"items\": [\n        {\n            \"id\": \"01JWNXBR5QJBH7PE9PQ9FW746V\",\n            \"name\": \"Domain Users\",\n            \"description\": \"Default group for all domain users\"\n        }\n    ],\n    \"total\": 2,\n    \"page\": 0,\n    \"size\": 1\n}"
								},
								{
									"name": "Success - No result",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{api_host}}/v1/identity/groups?graph={\"if\":[\"name\", \"=\", \"blabla\"]}",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"groups"
											],
											"query": [
												{
													"key": "graph",
													"value": "{\"if\":[\"name\", \"=\", \"blabla\"]}"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"items\": [],\n    \"total\": 0,\n    \"page\": 0,\n    \"size\": 50\n}"
								},
								{
									"name": "Client error - Invalid fields",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{api_host}}/v1/identity/groups?page=-1&size=999999999999999999&graph={\"if\":[\"fakefield\", \"*\", \"team\"]}",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"groups"
											],
											"query": [
												{
													"key": "page",
													"value": "-1"
												},
												{
													"key": "size",
													"value": "999999999999999999"
												},
												{
													"key": "graph",
													"value": "{\"if\":[\"fakefield\", \"*\", \"team\"]}"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": \"validation_error\",\n    \"details\": {\n        \"graph.condition\": \"invalid field 'fakefield' of entity 'group' in condition '[fakefield * team]'\",\n        \"page\": \"must be no less than 0\",\n        \"size\": \"must be no greater than 500\"\n    }\n}"
								},
								{
									"name": "Success - 1-level criteria",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{api_host}}/v1/identity/groups?graph={\"if\":[\"name\", \"*\", \"team\"]}",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"groups"
											],
											"query": [
												{
													"key": "graph",
													"value": "{\"if\":[\"name\", \"*\", \"team\"]}"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"items\": [\n        {\n            \"id\": \"01JX7MFVT6VRTHJ5GFYXVWAMHF\",\n            \"name\": \"Your Team\",\n            \"description\": \"The people you are working with\"\n        }\n    ],\n    \"total\": 1,\n    \"page\": 0,\n    \"size\": 50\n}"
								}
							]
						},
						{
							"name": "Group - Delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{api_host}}/v1/identity/groups/{{group_id}}",
									"host": [
										"{{api_host}}"
									],
									"path": [
										"v1",
										"identity",
										"groups",
										"{{group_id}}"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{api_host}}/v1/identity/groups/{{group_id}}",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"groups",
												"{{group_id}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"deletedAt\": 1749382124763\n}"
								},
								{
									"name": "Client error - Invalid ID",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{api_host}}/v1/identity/groups/10000000000",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"groups",
												"10000000000"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": \"validation_error\",\n    \"details\": {\n        \"id\": \"the length must be exactly 26\"\n    }\n}"
								},
								{
									"name": "Client error - Not found",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{api_host}}/v1/identity/groups/1000000000000000000000000A",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"groups",
												"1000000000000000000000000A"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": \"validation_error\",\n    \"details\": {\n        \"id\": \"group not found\"\n    }\n}"
								}
							]
						},
						{
							"name": "Group - Add / Remove Users",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"add\": [\"01JWNXT3EY7FG47VDJTEPTDC98\", \"01JWNXXTF8958VVYAV33MVVMDN\"],\r\n    \"remove\": [],\r\n    \"etag\": \"{{etag}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_host}}/v1/identity/groups/{{group_id}}/manage-users",
									"host": [
										"{{api_host}}"
									],
									"path": [
										"v1",
										"identity",
										"groups",
										"{{group_id}}",
										"manage-users"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Authorize",
			"item": [
				{
					"name": "Resource",
					"item": [
						{
							"name": "Resource - Create",
							"item": [
								{
									"name": "Resource Create - Success",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.request.body.raw;",
													"",
													"let payload;",
													"try {",
													"    payload = JSON.parse(rawBody);",
													"} catch (e) {",
													"    console.error(\"❌ Failed to parse JSON body:\", e);",
													"    return;",
													"}",
													"",
													"// Generate a 6-character alphanumeric string (no spaces)",
													"function randomString(length = 6) {",
													"    const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';",
													"    return Array.from({ length }, () => chars[Math.floor(Math.random() * chars.length)]).join('');",
													"}",
													"",
													"const rand = randomString();",
													"",
													"// Fix name: no spaces or symbols",
													"if (payload.name) {",
													"    // Remove non-alphanumeric just in case (safe fallback)",
													"    payload.name = payload.name.replace(/[^a-zA-Z0-9]/g, '') + rand;",
													"}",
													"",
													"// Generate valid ULID length (26 characters)",
													"if (payload.resourceType === \"nikki_application\") {",
													"    payload.resourceRef = \"01\" + randomString(24); // example ULID: total 26",
													"}",
													"",
													"pm.environment.set(\"resource_name\", payload.name);",
													"pm.request.body.raw = JSON.stringify(payload, null, 2);",
													"",
													"console.log(\"✅ Final request payload:\", payload);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {",
													"    type: \"object\",",
													"    required: [\"id\", \"etag\", \"name\", \"resourceType\", \"resourceRef\", \"scopeType\"],",
													"    properties: {",
													"        id: { type: \"string\" },",
													"        etag: { type: \"string\" },",
													"        name: { type: \"string\" },",
													"        description: { type: \"string\" },",
													"        resourceType: { type: \"string\", enum: [\"nikki_application\", \"custom\"] },",
													"        resourceRef: { type: \"string\" },",
													"        scopeType: { type: \"string\", enum: [\"org\", \"hierarchy\", \"private\", \"domain\"] }",
													"    },",
													"    additionalProperties: true",
													"};",
													"",
													"let isStatusValid = false;",
													"pm.test(\"Status code is 201\", function () {",
													"    isStatusValid = pm.response.code === 201;",
													"    pm.expect(isStatusValid).to.be.true;",
													"});",
													"",
													"let isSchemaValid = false;",
													"pm.test(\"Response matches expected schema\", function () {",
													"    pm.response.to.have.jsonSchema(schema);",
													"    isSchemaValid = true;",
													"});",
													"",
													"// ✅ Parse JSON response",
													"let body;",
													"let isJsonValid = true;",
													"try {",
													"    body = pm.response.json();",
													"    console.log(\"✅ Response body:\", body);",
													"} catch (e) {",
													"    isJsonValid = false;",
													"    console.error(\"❌ Failed to parse response JSON:\", e);",
													"}",
													"",
													"if (",
													"    isStatusValid &&",
													"    isSchemaValid &&",
													"    isJsonValid &&",
													"    body?.id &&",
													"    body?.etag",
													") {",
													"    pm.environment.set(\"resource_id\", body.id);",
													"    pm.environment.set(\"etag\", body.etag);",
													"    console.log(\"✅ Set resource_id and etag\");",
													"} else {",
													"    console.warn(\"⚠️ Response invalid or incomplete — NOT setting env vars\");",
													"}",
													"",
													"if (body) {",
													"    pm.test(\"Name matches generated\", function () {",
													"        pm.expect(body.name).to.eql(pm.environment.get(\"resource_name\"));",
													"    });",
													"",
													"    if (body.resourceType === \"nikki_application\") {",
													"        pm.test(\"resourceRef is 26-char ULID\", function () {",
													"            pm.expect(body.resourceRef.length).to.eql(26);",
													"        });",
													"    } else if (body.resourceType === \"custom\") {",
													"        pm.test(\"resourceRef is a string for custom type\", function () {",
													"            pm.expect(typeof body.resourceRef).to.eql(\"string\");",
													"        });",
													"    }",
													"}",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"resource 3UNP9s\",\n    \"resourceType\": \"nikki_application\",\n    \"resourceRef\": \"12345678901234567890123456\",\n    \"scopeType\": \"org\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/authorize/resources",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"authorize",
												"resources"
											]
										}
									},
									"response": []
								},
								{
									"name": "Resource Create - Invalid fields",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// ✅ Expected error schema for validation errors",
													"const errorSchema = {",
													"    type: \"object\",",
													"    required: [\"code\", \"details\"],",
													"    properties: {",
													"        code: { type: \"string\", enum: [\"validation_error\"] },",
													"        details: {",
													"            type: \"object\",",
													"            additionalProperties: { type: \"string\" }",
													"        }",
													"    },",
													"    additionalProperties: true",
													"};",
													"",
													"// ✅ Test: status code",
													"let isStatusValid = false;",
													"pm.test(\"Status code is 400\", function () {",
													"    isStatusValid = pm.response.code === 400;",
													"    pm.expect(isStatusValid).to.be.true;",
													"});",
													"",
													"// ✅ Parse response JSON",
													"let body;",
													"let isJsonValid = true;",
													"try {",
													"    body = pm.response.json();",
													"    console.log(\"📥 Parsed error response:\", body);",
													"} catch (err) {",
													"    isJsonValid = false;",
													"    console.error(\"❌ Failed to parse JSON response:\", err);",
													"    pm.expect.fail(\"Response is not valid JSON\");",
													"}",
													"",
													"// ✅ Validate schema",
													"let isSchemaValid = false;",
													"if (isJsonValid) {",
													"    pm.test(\"Error response matches expected schema\", function () {",
													"        pm.expect(body).to.have.jsonSchema(errorSchema);",
													"        isSchemaValid = true;",
													"    });",
													"}",
													"",
													"// ✅ Validate error content only if schema is valid",
													"if (isJsonValid && isSchemaValid && isStatusValid) {",
													"    pm.test(\"Validation error fields match expected\", function () {",
													"        // Check error code",
													"        pm.expect(body.code).to.eql(\"validation_error\");",
													"",
													"        // Check each expected field and message",
													"        const expectedFields = {",
													"            name: \"cannot be blank\",",
													"            resourceType: \"must be a valid value\",",
													"            scopeType: \"must be a valid value\"",
													"        };",
													"",
													"        Object.entries(expectedFields).forEach(([key, expectedMsg]) => {",
													"            pm.expect(body.details).to.have.property(key);",
													"            pm.expect(body.details[key]).to.eql(expectedMsg);",
													"        });",
													"",
													"        console.log(\"✅ Validation error details matched:\", body.details);",
													"    });",
													"} else {",
													"    console.warn(\"⚠️ Invalid error response — skipping validation detail checks and no env will be set\");",
													"}",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"resourceType\": \"invalid_type\",\n    \"scopeType\": \"invalid_scope\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/authorize/resources",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"authorize",
												"resources"
											]
										}
									},
									"response": []
								},
								{
									"name": "Resource Create - Existing name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const errorSchema = {",
													"    type: \"object\",",
													"    required: [\"code\", \"details\"],",
													"    properties: {",
													"        code: { type: \"string\", enum: [\"validation_error\"] },",
													"        details: {",
													"            type: \"object\",",
													"            additionalProperties: { type: \"string\" }",
													"        }",
													"    },",
													"    additionalProperties: true",
													"};",
													"",
													"let isStatusValid = false;",
													"pm.test(\"Status code is 400\", function () {",
													"    isStatusValid = pm.response.code === 400;",
													"    pm.expect(isStatusValid).to.be.true;",
													"});",
													"",
													"// ✅ Parse JSON body",
													"let body;",
													"let isJsonValid = true;",
													"try {",
													"    body = pm.response.json();",
													"    console.log(\"📥 Parsed error response:\", body);",
													"} catch (e) {",
													"    isJsonValid = false;",
													"    console.error(\"❌ Failed to parse JSON:\", e);",
													"    pm.expect.fail(\"Response body is not valid JSON\");",
													"}",
													"",
													"// ✅ Validate schema",
													"let isSchemaValid = false;",
													"if (isJsonValid) {",
													"    pm.test(\"Error response matches schema\", function () {",
													"        pm.expect(body).to.have.jsonSchema(errorSchema);",
													"        isSchemaValid = true;",
													"    });",
													"}",
													"",
													"if (isStatusValid && isJsonValid && isSchemaValid) {",
													"    pm.test(\"Response is validation_error due to existing name\", function () {",
													"        pm.expect(body.code).to.eql(\"validation_error\");",
													"",
													"        pm.expect(body.details).to.be.an(\"object\");",
													"        pm.expect(body.details).to.have.property(\"name\");",
													"        pm.expect(body.details.name).to.eql(\"name already exists\");",
													"",
													"        console.log(\"✅ Correctly failed on existing name:\", body.details.name);",
													"    });",
													"} else {",
													"    console.warn(\"⚠️ Invalid error response — skipping validation and NOT setting any environment variables.\");",
													"}",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"IdentityProfile\",\n    \"resourceType\": \"custom\",\n    \"scopeType\": \"org\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/authorize/resources",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"authorize",
												"resources"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Resource - Update",
							"item": [
								{
									"name": "Resource Create - Success",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let isStatusValid = false;",
													"pm.test(\"Status code is 200\", function () {",
													"    isStatusValid = pm.response.code === 200;",
													"    pm.expect(isStatusValid).to.be.true;",
													"});",
													"",
													"let body;",
													"let isJsonValid = true;",
													"try {",
													"    body = pm.response.json();",
													"    console.log(\"📥 Response body:\", body);",
													"} catch (err) {",
													"    isJsonValid = false;",
													"    pm.expect.fail(\"❌ Response is not valid JSON\");",
													"}",
													"",
													"let isStructureValid = false;",
													"if (isStatusValid && isJsonValid) {",
													"    pm.test(\"Response contains updated resource fields\", function () {",
													"        const requiredFields = [",
													"            \"id\",",
													"            \"etag\",",
													"            \"name\",",
													"            \"description\",",
													"            \"resourceType\",",
													"            \"resourceRef\",",
													"            \"scopeType\"",
													"        ];",
													"",
													"        requiredFields.forEach(field => {",
													"            pm.expect(body).to.have.property(field);",
													"            pm.expect(body[field]).to.be.a(\"string\");",
													"        });",
													"",
													"        isStructureValid = true;",
													"",
													"        if (body.etag) {",
													"            pm.environment.set(\"etag\", body.etag);",
													"            console.log(\"✅ Updated etag saved:\", body.etag);",
													"        }",
													"    });",
													"} else {",
													"    console.warn(\"⚠️ Skip env set: Response is invalid or structure not matched.\");",
													"}",
													"",
													"if (isJsonValid && body?.description !== undefined) {",
													"    pm.test(\"Description has been updated\", function () {",
													"        pm.expect(body.description).to.eql(\"Description\");",
													"    });",
													"}",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"Description\",\n    \"etag\": \"{{etag}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/authorize/resources/{{resource_id}}",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"authorize",
												"resources",
												"{{resource_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Resource Create - Invalid fields",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let isStatusValid = false;",
													"pm.test(\"Status code is 400\", function () {",
													"    isStatusValid = pm.response.code === 400;",
													"    pm.expect(isStatusValid).to.be.true;",
													"});",
													"",
													"let body;",
													"let isJsonValid = true;",
													"try {",
													"    body = pm.response.json();",
													"    console.log(\"📥 Parsed response:\", body);",
													"} catch (e) {",
													"    isJsonValid = false;",
													"    pm.expect.fail(\"❌ Response body is not valid JSON\");",
													"}",
													"",
													"let isCodeValid = false;",
													"if (isStatusValid && isJsonValid) {",
													"    pm.test(\"Returns validation_error code\", function () {",
													"        pm.expect(body.code).to.eql(\"validation_error\");",
													"        isCodeValid = true;",
													"    });",
													"}",
													"",
													"if (isStatusValid && isJsonValid && isCodeValid) {",
													"    pm.test(\"Returns etag validation message\", function () {",
													"        pm.expect(body.details).to.have.property(\"etag\", \"cannot be blank\");",
													"    });",
													"",
													"    pm.test(\"Does not contain unrelated fields\", function () {",
													"        pm.expect(body.details).to.not.have.property(\"invalid_field\");",
													"    });",
													"} else {",
													"    console.warn(\"⚠️ Skip detailed tests due to invalid response structure\");",
													"}",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"invalid_field\": \"invalid_value\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/authorize/resources/{{resource_id}}",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"authorize",
												"resources",
												"{{resource_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Resource Create - No match etag",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns validation_error code\", function () {",
													"    const json = pm.response.json();",
													"    pm.expect(json.code).to.eql(\"validation_error\");",
													"});",
													"",
													"pm.test(\"Returns etag conflict message\", function () {",
													"    const json = pm.response.json();",
													"    pm.expect(json.details).to.have.property(\"etag\", \"resource has been modified by another process\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"Description\",\n    \"etag\": \"1752032294635863001\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/authorize/resources/{{resource_id}}",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"authorize",
												"resources",
												"{{resource_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Resource Create- Not found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Returns validation_error code\", function () {",
													"    const json = pm.response.json();",
													"    pm.expect(json.code).to.eql(\"validation_error\");",
													"});",
													"",
													"pm.test(\"Returns 'resource not found' on id\", function () {",
													"    const json = pm.response.json();",
													"    pm.expect(json.details).to.have.property(\"id\", \"resource not found\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"Description\",\n    \"etag\": \"{{etag}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/authorize/resources/01JZQ0R0AF76T1TNZ84CAB8PM1",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"authorize",
												"resources",
												"01JZQ0R0AF76T1TNZ84CAB8PM1"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Resource - Get by name",
							"item": [
								{
									"name": "Resource Get by name - Success",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {",
													"    type: \"object\",",
													"    required: [\"id\", \"etag\", \"name\", \"resourceType\", \"resourceRef\", \"scopeType\"],",
													"    properties: {",
													"        id: { type: \"string\" },",
													"        etag: { type: \"string\" },",
													"        name: { type: \"string\" },",
													"        description: { type: \"string\" },",
													"        resourceType: { type: \"string\", enum: [\"nikki_application\", \"custom\"] },",
													"        resourceRef: { type: \"string\" },",
													"        scopeType: { type: \"string\", enum: [\"org\", \"hierarchy\", \"private\", \"domain\"] }",
													"    },",
													"    additionalProperties: true",
													"};",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response matches expected error schema\", function () {",
													"    pm.response.to.have.jsonSchema(schema);",
													"});",
													"",
													"try {",
													"    const payload = pm.response.json();",
													"    console.log(\"❌ Resource not found error response:\", payload);",
													"} catch (err) {",
													"    console.error(\"❌ Failed to parse error response:\", err);",
													"}",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{api_host}}/v1/authorize/resources/{{resource_name}}",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"authorize",
												"resources",
												"{{resource_name}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Resource Get by name - Not found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {",
													"    type: \"object\",",
													"    required: [\"id\", \"etag\", \"name\", \"resourceType\", \"resourceRef\", \"scopeType\"],",
													"    properties: {",
													"        id: { type: \"string\" },",
													"        etag: { type: \"string\" },",
													"        name: { type: \"string\" },",
													"        description: { type: \"string\" },",
													"        resourceType: { type: \"string\", enum: [\"nikki_application\", \"custom\"] },",
													"        resourceRef: { type: \"string\" },",
													"        scopeType: { type: \"string\", enum: [\"org\", \"hierarchy\", \"private\", \"domain\"] }",
													"    },",
													"    additionalProperties: true",
													"};",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response matches expected error schema\", function () {",
													"    pm.response.to.have.jsonSchema(schema);",
													"});",
													"",
													"try {",
													"    const payload = pm.response.json();",
													"    console.log(\"❌ Resource not found error response:\", payload);",
													"} catch (err) {",
													"    console.error(\"❌ Failed to parse error response:\", err);",
													"}",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{api_host}}/v1/authorize/resources/{{resource_name}}Invalid",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"authorize",
												"resources",
												"{{resource_name}}Invalid"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Action",
					"item": [
						{
							"name": "Action - Create",
							"item": [
								{
									"name": "Action Create - Success",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.request.body.raw;",
													"",
													"let payload;",
													"try {",
													"    payload = JSON.parse(rawBody);",
													"} catch (e) {",
													"    console.error(\"❌ Failed to parse JSON body:\", e);",
													"    return;",
													"}",
													"",
													"// ✅ Generate random 6-char string (alphanumeric)",
													"function randomString(length = 6) {",
													"    const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';",
													"    return Array.from({ length }, () => chars[Math.floor(Math.random() * chars.length)]).join('');",
													"}",
													"",
													"const rand = randomString();",
													"",
													"// ✅ Ensure `name` is alphanumeric, no symbols/spaces",
													"if (payload.name) {",
													"    payload.name = payload.name.replace(/[^a-zA-Z0-9_-]/g, '') + rand;",
													"}",
													"",
													"// Update request body",
													"pm.request.body.raw = JSON.stringify(payload, null, 2);",
													"console.log(\"✅ Final request payload:\", payload);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// ✅ Define schema",
													"const schema = {",
													"    type: \"object\",",
													"    required: [\"id\", \"etag\", \"name\", \"resourceId\", \"createdBy\"],",
													"    properties: {",
													"        id: { type: \"string\" },",
													"        etag: { type: \"string\" },",
													"        name: { type: \"string\", pattern: \"^[a-zA-Z0-9_-]+$\" },",
													"        description: { type: [\"string\", \"null\"] },",
													"        resourceId: { type: \"string\" },",
													"        createdBy: { type: \"string\" },",
													"        resource: { type: [\"object\", \"null\"] }",
													"    },",
													"    additionalProperties: true",
													"};",
													"",
													"let isStatusValid = false;",
													"pm.test(\"Status code is 200 or 201\", function () {",
													"    isStatusValid = [200, 201].includes(pm.response.code);",
													"    pm.expect(isStatusValid).to.be.true;",
													"});",
													"",
													"let body;",
													"let isJsonValid = true;",
													"try {",
													"    body = pm.response.json();",
													"} catch (e) {",
													"    isJsonValid = false;",
													"    pm.expect.fail(\"❌ Failed to parse response JSON\");",
													"}",
													"",
													"let isSchemaValid = false;",
													"if (isStatusValid && isJsonValid) {",
													"    pm.test(\"Response matches expected schema\", function () {",
													"        pm.expect(tv4.validate(body, schema)).to.be.true;",
													"        isSchemaValid = true;",
													"    });",
													"} else {",
													"    console.warn(\"⚠️ Skip schema check due to invalid status or JSON\");",
													"}",
													"",
													"if (isStatusValid && isJsonValid && isSchemaValid) {",
													"    pm.environment.set(\"action_id\", body.id);",
													"    pm.environment.set(\"etag\", body.etag);",
													"    console.log(\"✅ Environment updated with action_id and etag\");",
													"    console.log(\"📦 Response body:\", body);",
													"} else {",
													"    console.warn(\"🚫 Not updating env due to failed validation\");",
													"}",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"TestAction\",\n    \"description\": \"Description\",\n    \"resourceId\": \"{{resource_id}}\",\n    \"createdBy\": \"{{user_id}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/authorize/actions",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"authorize",
												"actions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Action Create - Invalid fields",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// ✅ Test status code",
													"let isStatusValid = false;",
													"pm.test(\"Status code is 400\", function () {",
													"    isStatusValid = pm.response.code === 400;",
													"    pm.expect(isStatusValid).to.be.true;",
													"});",
													"",
													"// ✅ Parse response body safely",
													"let body;",
													"let isJsonValid = true;",
													"try {",
													"    body = pm.response.json();",
													"} catch (e) {",
													"    isJsonValid = false;",
													"    pm.expect.fail(\"❌ Response body is not valid JSON\");",
													"}",
													"",
													"// ✅ Validate error code",
													"let isCodeValid = false;",
													"if (isStatusValid && isJsonValid) {",
													"    pm.test(\"Error code is validation_error\", function () {",
													"        pm.expect(body).to.have.property(\"code\", \"validation_error\");",
													"        isCodeValid = true;",
													"    });",
													"} else {",
													"    console.warn(\"⚠️ Skipping error code test due to invalid status or JSON\");",
													"}",
													"",
													"// ✅ Validate expected invalid fields",
													"if (isStatusValid && isJsonValid && isCodeValid) {",
													"    pm.test(\"Contains all expected invalid fields\", function () {",
													"        const expectedErrors = [\"name\", \"createdBy\", \"resourceId\"];",
													"        pm.expect(body).to.have.property(\"details\");",
													"",
													"        for (const field of expectedErrors) {",
													"            pm.expect(body.details).to.have.property(field);",
													"            pm.expect(body.details[field]).to.be.a(\"string\").and.not.empty;",
													"        }",
													"    });",
													"} else {",
													"    console.warn(\"⚠️ Skipping field validation due to earlier failure\");",
													"}",
													"",
													"// ✅ Debug log",
													"if (isJsonValid) {",
													"    console.log(\"🧪 Validation error response:\", body);",
													"}",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"invalid_field\": \"invalid_value\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/authorize/actions",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"authorize",
												"actions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Action Create - Existing name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"let body;",
													"try {",
													"    body = pm.response.json();",
													"} catch (e) {",
													"    console.error(\"❌ Failed to parse response JSON:\", e);",
													"}",
													"",
													"pm.test(\"Response has validation_error code\", function () {",
													"    pm.expect(body).to.have.property(\"code\", \"validation_error\");",
													"});",
													"",
													"pm.test(\"Error message should say name already exists\", function () {",
													"    pm.expect(body.details).to.have.property(\"name\");",
													"    pm.expect(body.details.name.toLowerCase()).to.include(\"already exists\");",
													"});",
													"",
													"console.log(\"✅ Duplicate name test response:\", body);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"TestAction\",\n    \"description\": \"Description\",\n    \"resourceId\": \"{{resource_id}}\",\n    \"createdBy\": \"{{user_id}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/authorize/actions",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"authorize",
												"actions"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Action - Update",
							"item": [
								{
									"name": "Action Update - Success",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.request.body.raw;",
													"",
													"let payload;",
													"try {",
													"    payload = JSON.parse(rawBody);",
													"} catch (e) {",
													"    console.error(\"❌ Failed to parse JSON body:\", e);",
													"    return;",
													"}",
													"",
													"// Optionally randomize description for better coverage",
													"const randDesc = `Updated description ${Math.floor(Math.random() * 1000)}`;",
													"payload.description = randDesc;",
													"",
													"pm.request.body.raw = JSON.stringify(payload, null, 2);",
													"",
													"console.log(\"✅ Final request payload for update:\", payload);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let isStatusValid = false;",
													"pm.test(\"Status code is 200\", function () {",
													"    isStatusValid = pm.response.code === 200;",
													"    pm.expect(isStatusValid).to.be.true;",
													"});",
													"",
													"const schema = {",
													"    type: \"object\",",
													"    required: [\"id\", \"etag\", \"name\", \"resourceId\", \"createdBy\"],",
													"    properties: {",
													"        id: { type: \"string\" },",
													"        etag: { type: \"string\" },",
													"        name: { type: \"string\" },",
													"        description: { type: \"string\" },",
													"        resourceId: { type: \"string\" },",
													"        createdBy: { type: \"string\" }",
													"    },",
													"    additionalProperties: true",
													"};",
													"",
													"let body;",
													"let isJsonValid = true;",
													"let isSchemaValid = false;",
													"",
													"try {",
													"    body = pm.response.json();",
													"} catch (e) {",
													"    isJsonValid = false;",
													"    pm.expect.fail(\"❌ JSON parse failed\");",
													"}",
													"",
													"if (isStatusValid && isJsonValid) {",
													"    pm.test(\"Response matches schema\", function () {",
													"        pm.expect(tv4.validate(body, schema)).to.be.true;",
													"        isSchemaValid = true;",
													"    });",
													"} else {",
													"    console.warn(\"⚠️ Skip schema test due to invalid status or JSON\");",
													"}",
													"",
													"if (isStatusValid && isJsonValid && isSchemaValid && body.etag) {",
													"    pm.environment.set(\"etag\", body.etag);",
													"    console.log(\"✅ Updated etag:\", body.etag);",
													"} else {",
													"    console.warn(\"🚫 Not updating etag due to failed checks\");",
													"}",
													"",
													"if (isJsonValid) {",
													"    console.log(\"📦 Response body:\", body);",
													"}",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"Description\",\n    \"etag\": \"{{etag}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/authorize/actions/{{action_id}}",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"authorize",
												"actions",
												"{{action_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Action Update - Invalid fields",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// ✅ Check status code is 400",
													"let isStatus400 = false;",
													"pm.test(\"Status code is 400\", function () {",
													"    isStatus400 = pm.response.code === 400;",
													"    pm.expect(isStatus400).to.be.true;",
													"});",
													"",
													"// ✅ Define expected validation error schema",
													"const schema = {",
													"    type: \"object\",",
													"    required: [\"code\", \"details\"],",
													"    properties: {",
													"        code: { type: \"string\", const: \"validation_error\" },",
													"        details: {",
													"            type: \"object\",",
													"            properties: {",
													"                etag: { type: \"string\", const: \"cannot be blank\" }",
													"            },",
													"            additionalProperties: true",
													"        }",
													"    },",
													"    additionalProperties: true",
													"};",
													"",
													"// ✅ Parse response body",
													"let body;",
													"let isJsonValid = true;",
													"",
													"try {",
													"    body = pm.response.json();",
													"} catch (e) {",
													"    isJsonValid = false;",
													"    pm.expect.fail(\"❌ Failed to parse response JSON\");",
													"}",
													"",
													"if (isStatus400 && isJsonValid) {",
													"    pm.test(\"Response matches expected validation error schema\", function () {",
													"        pm.expect(tv4.validate(body, schema)).to.be.true;",
													"    });",
													"",
													"    pm.test(\"Error message contains 'etag: cannot be blank'\", function () {",
													"        pm.expect(body.details).to.have.property(\"etag\", \"cannot be blank\");",
													"    });",
													"",
													"    console.log(\"⚠️ Error response body:\", body);",
													"}",
													"",
													"// ✅ Ensure etag is NOT modified",
													"pm.test(\"Environment variable 'etag' is NOT updated on error\", function () {",
													"    const currentEtag = pm.environment.get(\"etag\");",
													"    pm.expect(currentEtag).to.not.eql(null);",
													"    pm.expect(currentEtag).to.not.eql(undefined);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"invalid_field\": \"invalid_field\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/authorize/actions/{{action_id}}",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"authorize",
												"actions",
												"{{action_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Action Update - Not found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let isStatus400 = false;",
													"pm.test(\"Status code is 400\", function () {",
													"    isStatus400 = pm.response.code === 400;",
													"    pm.expect(isStatus400).to.be.true;",
													"});",
													"",
													"// ✅ Định nghĩa schema cho lỗi not found",
													"const schema = {",
													"    type: \"object\",",
													"    required: [\"code\", \"details\"],",
													"    properties: {",
													"        code: { type: \"string\", const: \"validation_error\" },",
													"        details: {",
													"            type: \"object\",",
													"            required: [\"id\"],",
													"            properties: {",
													"                id: { type: \"string\", const: \"action not found\" }",
													"            },",
													"            additionalProperties: true",
													"        }",
													"    },",
													"    additionalProperties: true",
													"};",
													"",
													"// ✅ Parse response",
													"let body;",
													"let isJsonValid = true;",
													"try {",
													"    body = pm.response.json();",
													"} catch (e) {",
													"    isJsonValid = false;",
													"    console.error(\"❌ Failed to parse response:\", e);",
													"    pm.expect.fail(\"Response body is not valid JSON\");",
													"}",
													"",
													"// ✅ Validate response body against schema",
													"if (isStatus400 && isJsonValid) {",
													"    pm.test(\"Response matches 'not found' schema\", function () {",
													"        pm.expect(tv4.validate(body, schema)).to.be.true;",
													"    });",
													"",
													"    pm.test(\"Error message contains 'id: action not found'\", function () {",
													"        pm.expect(body.details).to.have.property(\"id\", \"action not found\");",
													"    });",
													"",
													"    console.log(\"⚠️ Error response (Not Found):\", body);",
													"}",
													"",
													"pm.test(\"Do not update 'etag' when action is not found\", function () {",
													"    const etag = pm.environment.get(\"etag\");",
													"    pm.expect(etag).to.not.eql(null);",
													"    pm.expect(etag).to.not.eql(undefined);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"Description\",\n    \"etag\": \"{{etag}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/authorize/actions/01JZQ2A5K04QSBPK2SCYFH4PJ1",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"authorize",
												"actions",
												"01JZQ2A5K04QSBPK2SCYFH4PJ1"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Action - Get by name",
							"item": [
								{
									"name": "Action Get by Id - Success",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const schema = {",
													"    type: \"object\",",
													"    required: [\"id\", \"etag\", \"name\", \"resourceId\", \"createdBy\"],",
													"    properties: {",
													"        id: { type: \"string\" },",
													"        etag: { type: \"string\" },",
													"        name: { ",
													"            type: \"string\",",
													"            pattern: \"^[a-zA-Z0-9_-]+$\"",
													"        },",
													"        description: { type: [\"string\", \"null\"] },",
													"        resourceId: { type: \"string\" },",
													"        createdBy: { type: \"string\" },",
													"        resource: { ",
													"            type: [\"object\", \"null\"],",
													"            properties: {",
													"                id: { type: \"string\" },",
													"                name: { type: \"string\" }",
													"            },",
													"            required: [\"id\", \"name\"],",
													"            additionalProperties: true",
													"        }",
													"    },",
													"    additionalProperties: true",
													"};",
													"",
													"pm.test(\"Response matches expected schema\", function () {",
													"    pm.response.to.have.jsonSchema(schema);",
													"});",
													"",
													"let body;",
													"try {",
													"    body = pm.response.json();",
													"    console.log(\"✅ Get Action by ID response:\", body);",
													"} catch (err) {",
													"    console.error(\"❌ Failed to parse response JSON:\", err);",
													"}",
													"",
													"if (body && body.id && body.etag) {",
													"    pm.environment.set(\"action_id\", body.id);",
													"    pm.environment.set(\"etag\", body.etag);",
													"}",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{api_host}}/v1/authorize/actions/{{action_id}}",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"authorize",
												"actions",
												"{{action_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Action Get by Id - Not found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const schema = {",
													"    type: \"object\",",
													"    required: [\"id\", \"etag\", \"name\", \"resourceId\", \"createdBy\"],",
													"    properties: {",
													"        id: { type: \"string\" },",
													"        etag: { type: \"string\" },",
													"        name: { ",
													"            type: \"string\",",
													"            pattern: \"^[a-zA-Z0-9_-]+$\"",
													"        },",
													"        description: { type: [\"string\", \"null\"] },",
													"        resourceId: { type: \"string\" },",
													"        createdBy: { type: \"string\" },",
													"        resource: { ",
													"            type: [\"object\", \"null\"],",
													"            properties: {",
													"                id: { type: \"string\" },",
													"                name: { type: \"string\" }",
													"            },",
													"            required: [\"id\", \"name\"],",
													"            additionalProperties: true",
													"        }",
													"    },",
													"    additionalProperties: true",
													"};",
													"",
													"pm.test(\"Response matches expected schema\", function () {",
													"    pm.response.to.have.jsonSchema(schema);",
													"});",
													"",
													"let body;",
													"try {",
													"    body = pm.response.json();",
													"    console.log(\"✅ Get Action by ID response:\", body);",
													"} catch (err) {",
													"    console.error(\"❌ Failed to parse response JSON:\", err);",
													"}",
													"",
													"if (body && body.id && body.etag) {",
													"    pm.environment.set(\"action_id\", body.id);",
													"    pm.environment.set(\"etag\", body.etag);",
													"}",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{api_host}}/v1/authorize/actions/01JZQ2GPTQ7AYRG8K7B7ZEY661",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"authorize",
												"actions",
												"01JZQ2GPTQ7AYRG8K7B7ZEY661"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Role",
					"item": [
						{
							"name": "Role - Create",
							"item": [
								{
									"name": "Role Create - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let isStatus200 = false;",
													"pm.test(\"Status code is 200\", function () {",
													"    isStatus200 = pm.response.code === 200;",
													"    pm.expect(isStatus200).to.be.true;",
													"});",
													"",
													"const schema = {",
													"    type: \"object\",",
													"    required: [",
													"        \"id\", \"etag\", \"createdAt\",",
													"        \"name\", \"ownerType\", \"ownerRef\",",
													"        \"isRequestable\", \"isRequiredAttachment\",",
													"        \"isRequiredComment\", \"createdBy\"",
													"    ],",
													"    properties: {",
													"        id: { type: \"string\" },",
													"        etag: { type: \"string\" },",
													"        createdAt: { type: \"string\", format: \"date-time\" },",
													"",
													"        name: { type: \"string\" },",
													"        description: { type: [\"string\", \"null\"] },",
													"        ownerType: { type: \"string\", enum: [\"user\", \"group\"] },",
													"        ownerRef: { type: \"string\" },",
													"        isRequestable: { type: \"boolean\" },",
													"        isRequiredAttachment: { type: \"boolean\" },",
													"        isRequiredComment: { type: \"boolean\" },",
													"        createdBy: { type: \"string\" }",
													"    },",
													"    additionalProperties: false",
													"};",
													"",
													"let isSchemaValid = false;",
													"pm.test(\"Response matches expected schema\", function () {",
													"    isSchemaValid = pm.response.to.have.jsonSchema(schema);",
													"});",
													"",
													"// ✅ Parse response",
													"let body;",
													"let isJsonValid = true;",
													"try {",
													"    body = pm.response.json();",
													"    console.log(\"✅ Create Role response:\", body);",
													"} catch (err) {",
													"    isJsonValid = false;",
													"    console.error(\"❌ Failed to parse response JSON:\", err);",
													"}",
													"",
													"if (isStatus200 && isJsonValid && body?.id && body?.etag) {",
													"    pm.environment.set(\"role_id\", body.id);",
													"    pm.environment.set(\"etag\", body.etag);",
													"    console.log(\"✅ Saved role_id and etag to environment\");",
													"} else {",
													"    console.warn(\"⚠️ Skipped setting role_id and etag due to invalid response or status\");",
													"}",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let rawBody = pm.request.body.raw;",
													"let payload;",
													"try {",
													"    payload = JSON.parse(rawBody);",
													"} catch (e) {",
													"    console.error(\"❌ Failed to parse JSON body:\", e);",
													"    return;",
													"}",
													"",
													"// Utility to generate random alphanumeric string",
													"function randomString(length = 6) {",
													"    const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';",
													"    return Array.from({ length }, () => chars[Math.floor(Math.random() * chars.length)]).join('');",
													"}",
													"",
													"// Generate ULID-like string (starts with \"01\", total 26 chars)",
													"function generateULID() {",
													"    return \"01\" + randomString(24);",
													"}",
													"",
													"// Randomize name (append 6-char string, alphanumeric only)",
													"if (payload.name) {",
													"    payload.name = payload.name.replace(/[^a-zA-Z0-9]/g, '') + \"_\" + randomString();",
													"}",
													"",
													"// Random ownerType: \"user\" or \"group\"",
													"const ownerTypes = [\"user\", \"group\"];",
													"payload.ownerType = ownerTypes[Math.floor(Math.random() * ownerTypes.length)];",
													"",
													"// Fill required fields with dummy ULIDs",
													"payload.ownerRef = generateULID();",
													"payload.createdBy = generateULID();",
													"",
													"// Optional: set default values if not present",
													"if (typeof payload.isRequestable !== \"boolean\") {",
													"    payload.isRequestable = true;",
													"}",
													"if (typeof payload.isRequiredAttachment !== \"boolean\") {",
													"    payload.isRequiredAttachment = false;",
													"}",
													"if (typeof payload.isRequiredComment !== \"boolean\") {",
													"    payload.isRequiredComment = false;",
													"}",
													"",
													"// Save generated name for later use",
													"pm.environment.set(\"role_name\", payload.name);",
													"",
													"pm.request.body.raw = JSON.stringify(payload, null, 2);",
													"console.log(\"✅ Final payload for create role:\", payload);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"TestRole\",\n    \"ownerType\": \"user\",\n    \"ownerRef\": \"{{user_id}}\",\n    \"isRequestable\": false,\n    \"isRequiredAttachment\": false,\n    \"isRequiredComment\": false,\n    \"createdBy\": \"{{user_id}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/authorize/roles",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"authorize",
												"roles"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role Create - Invalid Fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// ✅ Check status code",
													"let isStatus200 = false;",
													"pm.test(\"Status code is 200\", function () {",
													"    isStatus200 = pm.response.code === 200;",
													"    pm.expect(isStatus200).to.be.true;",
													"});",
													"",
													"// ✅ JSON schema check",
													"const schema = {",
													"    type: \"object\",",
													"    required: [",
													"        \"id\", \"etag\", \"createdAt\",",
													"        \"name\", \"ownerType\", \"ownerRef\",",
													"        \"isRequestable\", \"isRequiredAttachment\",",
													"        \"isRequiredComment\", \"createdBy\"",
													"    ],",
													"    properties: {",
													"        id: { type: \"string\" },",
													"        etag: { type: \"string\" },",
													"        createdAt: { type: \"string\", format: \"date-time\" },",
													"        name: { type: \"string\" },",
													"        description: { type: [\"string\", \"null\"] },",
													"        ownerType: { type: \"string\", enum: [\"user\", \"group\"] },",
													"        ownerRef: { type: \"string\" },",
													"        isRequestable: { type: \"boolean\" },",
													"        isRequiredAttachment: { type: \"boolean\" },",
													"        isRequiredComment: { type: \"boolean\" },",
													"        createdBy: { type: \"string\" }",
													"    },",
													"    additionalProperties: false",
													"};",
													"",
													"let isSchemaValid = false;",
													"pm.test(\"Response matches expected schema\", function () {",
													"    isSchemaValid = pm.response.to.have.jsonSchema(schema);",
													"});",
													"",
													"// ✅ Parse response safely",
													"let body;",
													"let isJsonValid = true;",
													"try {",
													"    body = pm.response.json();",
													"    console.log(\"✅ Create Role response:\", body);",
													"} catch (err) {",
													"    isJsonValid = false;",
													"    console.error(\"❌ Failed to parse response JSON:\", err);",
													"}",
													"",
													"// ✅ Set env only when response is correct and complete",
													"if (isStatus200 && isJsonValid && isSchemaValid && body?.id && body?.etag) {",
													"    pm.environment.set(\"role_id\", body.id);",
													"    pm.environment.set(\"etag\", body.etag);",
													"    console.log(\"✅ Saved role_id and etag to environment\");",
													"} else {",
													"    console.warn(\"⚠️ Role not created or invalid. Environment vars not set.\");",
													"}",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"invalid_field\": \"ìnvalid_value\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/authorize/roles",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"authorize",
												"roles"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role Create - Invalid Fields Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {",
													"    type: \"object\",",
													"    required: [",
													"        \"id\", \"etag\", \"createdAt\",",
													"        \"name\", \"ownerType\", \"ownerRef\",",
													"        \"isRequestable\", \"isRequiredAttachment\",",
													"        \"isRequiredComment\", \"createdBy\"",
													"    ],",
													"    properties: {",
													"        id: { type: \"string\" },",
													"        etag: { type: \"string\" },",
													"        createdAt: { type: \"string\", format: \"date-time\" },",
													"        name: { type: \"string\" },",
													"        description: { type: [\"string\", \"null\"] },",
													"        ownerType: { type: \"string\", enum: [\"user\", \"group\"] },",
													"        ownerRef: { type: \"string\" },",
													"        isRequestable: { type: \"boolean\" },",
													"        isRequiredAttachment: { type: \"boolean\" },",
													"        isRequiredComment: { type: \"boolean\" },",
													"        createdBy: { type: \"string\" }",
													"    },",
													"    additionalProperties: false",
													"};",
													"",
													"let res;",
													"let parsed = true;",
													"",
													"try {",
													"    res = pm.response.json();",
													"} catch (e) {",
													"    parsed = false;",
													"    console.error(\"❌ Failed to parse response JSON:\", e);",
													"}",
													"",
													"pm.test(\"❌ Should return validation error for existing name\", function () {",
													"    pm.expect(pm.response.code).to.eql(400);",
													"    if (parsed) {",
													"        pm.expect(res).to.have.property(\"code\", \"validation_error\");",
													"        pm.expect(res.details).to.have.property(\"name\");",
													"        pm.expect(res.details.name).to.match(/already exists|duplicate/i);",
													"    }",
													"});",
													"",
													"if (parsed && res?.code === \"validation_error\") {",
													"    console.warn(\"⛔ Duplicate role name. Env vars not set.\");",
													"} else if (pm.response.code === 200 && parsed && res?.id && res?.etag) {",
													"    pm.environment.set(\"role_id\", res.id);",
													"    pm.environment.set(\"etag\", res.etag);",
													"    console.log(\"✅ Role created successfully:\", res.name);",
													"} else {",
													"    console.warn(\"⚠️ Role not created or response invalid. Env vars not set.\");",
													"}",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"TestRole\",\n    \"isRequestable\": false,\n    \"isRequiredAttachment\": false,\n    \"isRequiredComment\": false,\n    \"createdBy\": \"{{user_id}}\",\n    \"ownerType\": \"user\",\n    \"ownerRef\": \"{{user_id}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/authorize/roles",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"authorize",
												"roles"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		}
	]
}