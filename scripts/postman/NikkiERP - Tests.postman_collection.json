{
	"info": {
		"_postman_id": "45e3946f-8a6e-4b30-b36a-8e506080b2ea",
		"name": "NikkiERP - Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "602425"
	},
	"item": [
		{
			"name": "Identity",
			"item": [
				{
					"name": "User",
					"item": [
						{
							"name": "User - Create",
							"item": [
								{
									"name": "User Create - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    type: \"object\",\r",
													"    required: [\"id\", \"createdAt\", \"etag\"],\r",
													"    properties: {\r",
													"        id: {\r",
													"            type: \"string\",\r",
													"            minLength: 1,\r",
													"        },\r",
													"        createdAt: {\r",
													"            type: \"integer\",\r",
													"            minimum: 1,\r",
													"        },\r",
													"        etag: {\r",
													"            type: \"string\",\r",
													"            minLength: 1,\r",
													"        },\r",
													"    },\r",
													"    additionalProperties: false\r",
													"};\r",
													"\r",
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"Response matches expected JSON schema\", function () {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"const { email } = JSON.parse(pm.request.body.raw);\r",
													"email && pm.collectionVariables.set('email', email);\r",
													"\r",
													"const payload = pm.response.json();\r",
													"const { id, etag } = payload;\r",
													"id && pm.collectionVariables.set('user_id', id);\r",
													"etag && pm.collectionVariables.set('etag', etag);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const payload = JSON.parse(pm.request.body.raw);\r",
													"\r",
													"// Generate a 6-char alphanumeric string\r",
													"function randomString(length = 6) {\r",
													"    const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r",
													"    let result = '';\r",
													"    for (let i = 0; i < length; i++) {\r",
													"        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
													"    }\r",
													"    return result;\r",
													"}\r",
													"\r",
													"const rand = randomString();\r",
													"\r",
													"if (payload.displayName) {\r",
													"    payload.displayName += ' ' + rand;\r",
													"}\r",
													"if (payload.email && payload.email.includes('@')) {\r",
													"    const [local, domain] = payload.email.split('@');\r",
													"    payload.email = `${local}-${rand}@${domain}`;\r",
													"}\r",
													"\r",
													"// Write modified payload back to request\r",
													"pm.request.body.raw = JSON.stringify(payload, null, 2);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"displayName\": \"John Doe\",\r\n    \"email\": \"john.doe@nikkierp.com\",\r\n    \"password\": \"p@sswo0rd\",\r\n    \"isActive\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/identity/users",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "User Create - Missing required fields - Validation errors",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const expected = {\r",
													"    code: \"validation_error\",\r",
													"    details: {\r",
													"        displayName: \"cannot be blank\",\r",
													"        email: \"cannot be blank\",\r",
													"        passwordRaw: \"cannot be blank\",\r",
													"    },\r",
													"};\r",
													"\r",
													"// Parse response body\r",
													"let jsonData;\r",
													"try {\r",
													"    jsonData = pm.response.json();\r",
													"} catch (e) {\r",
													"    pm.test(\"Response is valid JSON\", function () {\r",
													"        pm.expect.fail(\"Response is not valid JSON\");\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body matches expected JSON exactly\", function () {\r",
													"    pm.expect(jsonData).to.eql(expected);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/identity/users",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "User Create - Empty strings - Validation errors",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const expected = {\r",
													"    code: \"validation_error\",\r",
													"    details: {\r",
													"        displayName: \"cannot be blank\",\r",
													"        email: \"cannot be blank\",\r",
													"        passwordRaw: \"cannot be blank\",\r",
													"        // TODO: Validate orgIds\r",
													"    },\r",
													"};\r",
													"\r",
													"// Parse response body\r",
													"let jsonData;\r",
													"try {\r",
													"    jsonData = pm.response.json();\r",
													"} catch (e) {\r",
													"    pm.test(\"Response is valid JSON\", function () {\r",
													"        pm.expect.fail(\"Response is not valid JSON\");\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body matches expected JSON exactly\", function () {\r",
													"    pm.expect(jsonData).to.eql(expected);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"displayName\": \"\",\r\n    \"email\": \"\",\r\n    \"password\": \"\",\r\n    \"orgIds\": [\"\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/identity/users",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "User Create - Invalid fields - Validation errors",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const expected = {\r",
													"    code: \"validation_error\",\r",
													"    details: {\r",
													"        displayName: \"the length must be between 1 and 200\",\r",
													"        email: \"must be a valid email address\",\r",
													"        passwordRaw: \"the length must be between 8 and 1000\",\r",
													"        // TODO: Validate orgIds\r",
													"    },\r",
													"};\r",
													"\r",
													"// Parse response body\r",
													"let jsonData;\r",
													"try {\r",
													"    jsonData = pm.response.json();\r",
													"} catch (e) {\r",
													"    pm.test(\"Response is valid JSON\", function () {\r",
													"        pm.expect.fail(\"Response is not valid JSON\");\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body matches expected JSON exactly\", function () {\r",
													"    pm.expect(jsonData).to.eql(expected);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"displayName\": \"too-longgggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg\",\r\n    \"email\": \"invalid@\",\r\n    \"password\": \"short\",\r\n    \"orgIds\": [\"\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/identity/users",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "User Create - Existing email",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const expected = {\r",
													"    code: \"validation_error\",\r",
													"    details: {\r",
													"        email: \"email already exists\"\r",
													"    }\r",
													"};\r",
													"\r",
													"// Parse response body\r",
													"let jsonData;\r",
													"try {\r",
													"    jsonData = pm.response.json();\r",
													"} catch (e) {\r",
													"    pm.test(\"Response is valid JSON\", function () {\r",
													"        pm.expect.fail(\"Response is not valid JSON\");\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body matches expected JSON exactly\", function () {\r",
													"    pm.expect(jsonData).to.eql(expected);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"displayName\": \"John Doe\",\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"p@sswo0rd\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/identity/users",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"users"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "User - Update",
							"item": [
								{
									"name": "User Update - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    type: \"object\",\r",
													"    required: [\"id\", \"etag\", \"updatedAt\"],\r",
													"    properties: {\r",
													"        id: {\r",
													"            type: \"string\",\r",
													"            minLength: 1,\r",
													"        },\r",
													"        etag: {\r",
													"            type: \"string\",\r",
													"            minLength: 1,\r",
													"        },\r",
													"        updatedAt: {\r",
													"            type: \"integer\",\r",
													"            minimum: 1,\r",
													"        }\r",
													"    },\r",
													"    additionalProperties: false\r",
													"};\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response matches expected JSON schema\", function () {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"const requestBody = JSON.parse(pm.request.body.raw);\r",
													"pm.collectionVariables.set('email', requestBody.email);\r",
													"\r",
													"const payload = pm.response.json();\r",
													"const { id, etag, email } = payload;\r",
													"const previousEtag = pm.collectionVariables.get(\"etag\");\r",
													"\r",
													"pm.test(\"Response 'etag' is different from previous\", () => {\r",
													"    pm.expect(etag).to.not.eql(previousEtag);\r",
													"});\r",
													"\r",
													"id && pm.collectionVariables.set('user_id', id);\r",
													"etag && pm.collectionVariables.set('etag', etag);\r",
													"email && pm.collectionVariables.set('email', email);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Get original request body as raw text\r",
													"let rawBody = pm.request.body.raw;\r",
													"\r",
													"// Parse it as JSON\r",
													"let payload;\r",
													"try {\r",
													"    payload = JSON.parse(rawBody);\r",
													"} catch (e) {\r",
													"    console.error(\"Failed to parse request body as JSON:\", e);\r",
													"    return;\r",
													"}\r",
													"\r",
													"// Generate a 6-char alphanumeric string\r",
													"function randomString(length = 6) {\r",
													"    const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r",
													"    let result = '';\r",
													"    for (let i = 0; i < length; i++) {\r",
													"        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
													"    }\r",
													"    return result;\r",
													"}\r",
													"\r",
													"const rand = randomString();\r",
													"\r",
													"if (payload.displayName) {\r",
													"    payload.displayName += ' ' + rand;\r",
													"}\r",
													"if (payload.email && payload.email.includes('@')) {\r",
													"    const [local, domain] = payload.email.split('@');\r",
													"    payload.email = `${local}-${rand}@${domain}`;\r",
													"}\r",
													"\r",
													"// Write modified payload back to request\r",
													"pm.request.body.raw = JSON.stringify(payload, null, 2);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"avatarUrl\": \"https://avatar.com/me.jpg\",\r\n    \"displayName\": \"Another Doe\",\r\n    \"email\": \"another.doe@nikkierp.com\",\r\n    \"etag\": \"{{etag}}\",\r\n    \"isEnabled\": true,\r\n    \"mustChangePassword\": true,\r\n    \"password\": \"t0psecret!\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/identity/users/{{user_id}}",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"users",
												"{{user_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User Update - Not found ID - Validation errors",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const expected = {\r",
													"    code: \"validation_error\",\r",
													"    details: {\r",
													"        id: \"user not found\",\r",
													"    },\r",
													"};\r",
													"\r",
													"// Parse response body\r",
													"let jsonData;\r",
													"try {\r",
													"    jsonData = pm.response.json();\r",
													"} catch (e) {\r",
													"    pm.test(\"Response is valid JSON\", function () {\r",
													"        pm.expect.fail(\"Response is not valid JSON\");\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body matches expected JSON exactly\", function () {\r",
													"    pm.expect(jsonData).to.eql(expected);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/identity/users/not-existing-1234567890123",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"users",
												"not-existing-1234567890123"
											]
										}
									},
									"response": []
								},
								{
									"name": "User Update - Unmatched etag - Validation errors",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const expected = {\r",
													"    code: \"validation_error\",\r",
													"    details: {\r",
													"        etag: \"user has been modified by another user\",\r",
													"    },\r",
													"};\r",
													"\r",
													"// Parse response body\r",
													"let jsonData;\r",
													"try {\r",
													"    jsonData = pm.response.json();\r",
													"} catch (e) {\r",
													"    pm.test(\"Response is valid JSON\", function () {\r",
													"        pm.expect.fail(\"Response is not valid JSON\");\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body matches expected JSON exactly\", function () {\r",
													"    pm.expect(jsonData).to.eql(expected);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"___________________\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/identity/users/{{user_id}}",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"users",
												"{{user_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User Update - Missing required fields - Validation errors",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const expected = {\r",
													"    code: \"validation_error\",\r",
													"    details: {\r",
													"        etag: \"cannot be blank\",\r",
													"    },\r",
													"};\r",
													"\r",
													"// Parse response body\r",
													"let jsonData;\r",
													"try {\r",
													"    jsonData = pm.response.json();\r",
													"} catch (e) {\r",
													"    pm.test(\"Response is valid JSON\", function () {\r",
													"        pm.expect.fail(\"Response is not valid JSON\");\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body matches expected JSON exactly\", function () {\r",
													"    pm.expect(jsonData).to.eql(expected);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/identity/users/{{user_id}}",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"users",
												"{{user_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User Update - Empty strings - Validation errors",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const expected = {\r",
													"    code: \"validation_error\",\r",
													"    details: {\r",
													"        displayName: \"cannot be blank\",\r",
													"        email: \"cannot be blank\",\r",
													"        etag: \"cannot be blank\",\r",
													"        passwordRaw: \"cannot be blank\"\r",
													"        // TODO: Validate orgIds\r",
													"    },\r",
													"};\r",
													"\r",
													"// Parse response body\r",
													"let jsonData;\r",
													"try {\r",
													"    jsonData = pm.response.json();\r",
													"} catch (e) {\r",
													"    pm.test(\"Response is valid JSON\", function () {\r",
													"        pm.expect.fail(\"Response is not valid JSON\");\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body matches expected JSON exactly\", function () {\r",
													"    pm.expect(jsonData).to.eql(expected);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"avatarUrl\": \"\",\r\n    \"displayName\": \"\",\r\n    \"email\": \"\",\r\n    \"etag\": \"\",\r\n    \"password\": \"\",\r\n    \"orgIds\": [\"\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/identity/users/{{user_id}}",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"users",
												"{{user_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User Update - Invalid fields - Validation errors",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const expected = {\r",
													"    code: \"validation_error\",\r",
													"    details: {\r",
													"        displayName: \"the length must be between 1 and 200\",\r",
													"        email: \"must be a valid email address\",\r",
													"        etag: \"the length must be between 7 and 30\",\r",
													"        passwordRaw: \"the length must be between 8 and 1000\",\r",
													"        // TODO: Validate orgIds\r",
													"    },\r",
													"};\r",
													"\r",
													"// Parse response body\r",
													"let jsonData;\r",
													"try {\r",
													"    jsonData = pm.response.json();\r",
													"} catch (e) {\r",
													"    pm.test(\"Response is valid JSON\", function () {\r",
													"        pm.expect.fail(\"Response is not valid JSON\");\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body matches expected JSON exactly\", function () {\r",
													"    pm.expect(jsonData).to.eql(expected);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"displayName\": \"too-longgggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg\",\r\n    \"email\": \"invalid@\",\r\n    \"etag\": \"fake\",\r\n    \"password\": \"short\",\r\n    \"orgIds\": [\"\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/identity/users/{{user_id}}",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"users",
												"{{user_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User Update - Existing email - Validation errors",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const expected = {\r",
													"    code: \"validation_error\",\r",
													"    details: {\r",
													"        email: \"email already exists\",\r",
													"    },\r",
													"};\r",
													"\r",
													"// Parse response body\r",
													"let jsonData;\r",
													"try {\r",
													"    jsonData = pm.response.json();\r",
													"} catch (e) {\r",
													"    pm.test(\"Response is valid JSON\", function () {\r",
													"        pm.expect.fail(\"Response is not valid JSON\");\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body matches expected JSON exactly\", function () {\r",
													"    pm.expect(jsonData).to.eql(expected);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"etag\": \"{{etag}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/identity/users/{{user_id}}",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"users",
												"{{user_id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "User - Get by ID",
							"item": [
								{
									"name": "User Get - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    type: \"object\",\r",
													"    required: [\"id\", \"createdAt\", \"displayName\", \"email\", \"etag\", \"status\"],\r",
													"    properties: {\r",
													"        id: {\r",
													"            type: \"string\",\r",
													"            minLength: 1,\r",
													"        },\r",
													"        avatarUrl: {\r",
													"            type: \"string\",\r",
													"            format: \"uri\",\r",
													"        },\r",
													"        createdAt: {\r",
													"            type: \"integer\",\r",
													"            minimum: 1,\r",
													"        },\r",
													"        displayName: {\r",
													"            type: \"string\",\r",
													"            minLength: 1,\r",
													"        },\r",
													"        email: {\r",
													"            type: \"string\",\r",
													"            format: \"email\",\r",
													"            minLength: 1,\r",
													"        },\r",
													"        etag: {\r",
													"            type: \"string\",\r",
													"            minLength: 1,\r",
													"        },\r",
													"        status: {\r",
													"            type: \"string\",\r",
													"            minLength: 1,\r",
													"        },\r",
													"        updatedAt: {\r",
													"            type: \"integer\",\r",
													"            minimum: 1,\r",
													"        }\r",
													"    },\r",
													"    additionalProperties: false\r",
													"};\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response matches expected JSON schema\", function () {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{api_host}}/v1/identity/users/{{user_id}}",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"users",
												"{{user_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User Get - Not found ID - Validation errors",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const expected = {\r",
													"    code: \"validation_error\",\r",
													"    details: {\r",
													"        id: \"user not found\",\r",
													"    },\r",
													"};\r",
													"\r",
													"// Parse response body\r",
													"let jsonData;\r",
													"try {\r",
													"    jsonData = pm.response.json();\r",
													"} catch (e) {\r",
													"    pm.test(\"Response is valid JSON\", function () {\r",
													"        pm.expect.fail(\"Response is not valid JSON\");\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body matches expected JSON exactly\", function () {\r",
													"    pm.expect(jsonData).to.eql(expected);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{api_host}}/v1/identity/users/not-existing-1234567890123",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"users",
												"not-existing-1234567890123"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "User - Delete",
							"item": [
								{
									"name": "User Delete - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    type: \"object\",\r",
													"    required: [\"id\", \"deletedAt\"],\r",
													"    properties: {\r",
													"        id: {\r",
													"            type: \"string\",\r",
													"            minLength: 1,\r",
													"        },\r",
													"        deletedAt: {\r",
													"            type: \"integer\",\r",
													"            minimum: 1,\r",
													"        },\r",
													"    },\r",
													"    additionalProperties: false\r",
													"};\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response matches expected JSON schema\", function () {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{api_host}}/v1/identity/users/{{user_id}}",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"users",
												"{{user_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User Delete Again - Not found ID - Validation errors",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const expected = {\r",
													"    code: \"validation_error\",\r",
													"    details: {\r",
													"        id: \"user not found\",\r",
													"    },\r",
													"};\r",
													"\r",
													"// Parse response body\r",
													"let jsonData;\r",
													"try {\r",
													"    jsonData = pm.response.json();\r",
													"} catch (e) {\r",
													"    pm.test(\"Response is valid JSON\", function () {\r",
													"        pm.expect.fail(\"Response is not valid JSON\");\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body matches expected JSON exactly\", function () {\r",
													"    pm.expect(jsonData).to.eql(expected);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{api_host}}/v1/identity/users/{{user_id}}",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"users",
												"{{user_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User Delete - Not found ID - Validation errors",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const expected = {\r",
													"    code: \"validation_error\",\r",
													"    details: {\r",
													"        id: \"user not found\",\r",
													"    },\r",
													"};\r",
													"\r",
													"// Parse response body\r",
													"let jsonData;\r",
													"try {\r",
													"    jsonData = pm.response.json();\r",
													"} catch (e) {\r",
													"    pm.test(\"Response is valid JSON\", function () {\r",
													"        pm.expect.fail(\"Response is not valid JSON\");\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body matches expected JSON exactly\", function () {\r",
													"    pm.expect(jsonData).to.eql(expected);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{api_host}}/v1/identity/users/not-existing-1234567890123",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"users",
												"not-existing-1234567890123"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "User - Search",
							"item": [
								{
									"name": "User Search - Create test data - Init",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"  type: \"object\",\r",
													"  properties: {\r",
													"    items: {\r",
													"      type: \"array\",\r",
													"      items: {\r",
													"        type: \"object\",\r",
													"        properties: {\r",
													"          id: {\r",
													"            type: \"string\",\r",
													"            minLength: 1,\r",
													"          },\r",
													"          avatarUrl: {\r",
													"            type: \"string\",\r",
													"            format: \"uri\",\r",
													"          },\r",
													"          createdAt: {\r",
													"            type: \"integer\",\r",
													"            minimum: 1,\r",
													"            description: \"Unix timestamp in milliseconds\"\r",
													"          },\r",
													"          displayName: {\r",
													"            type: \"string\",\r",
													"            minLength: 1,\r",
													"          },\r",
													"          email: {\r",
													"            type: \"string\",\r",
													"            minLength: 1,\r",
													"          },\r",
													"          etag: {\r",
													"            type: \"string\",\r",
													"            minLength: 1,\r",
													"          },\r",
													"          status: {\r",
													"            type: \"string\",\r",
													"            minLength: 1,\r",
													"            //enum: [\"active\", \"locked\", \"archived\"]\r",
													"          },\r",
													"          updatedAt: {\r",
													"            type: \"integer\",\r",
													"            minimum: 1,\r",
													"          }\r",
													"        },\r",
													"        required: [\"id\", \"createdAt\", \"displayName\", \"email\", \"etag\", \"status\"]\r",
													"      }\r",
													"    },\r",
													"    total: {\r",
													"      type: \"integer\",\r",
													"      minimum: 0\r",
													"    },\r",
													"    page: {\r",
													"      type: \"integer\",\r",
													"      minimum: 0\r",
													"    },\r",
													"    size: {\r",
													"      type: \"integer\",\r",
													"      minimum: 1\r",
													"    }\r",
													"  },\r",
													"  required: [\"items\", \"total\", \"page\", \"size\"]\r",
													"}\r",
													"pm.collectionVariables.set(\"search_schema\", schema);\r",
													"\r",
													"/*\r",
													" * Configure loop\r",
													" */\r",
													"const LOOP_COUNT = 100;\r",
													"pm.collectionVariables.set(\"loop_count\", LOOP_COUNT);\r",
													"\r",
													"const UserSearch_CreateTestData_1_Loop_RequestId = \"1c4510f0-91f5-46a0-a532-732f5a5fb741\"\r",
													"\r",
													"console.log(`Creating ${LOOP_COUNT} test records`)\r",
													"// console.log('Set next request: ', UserSearch_CreateTestData_1_Loop_RequestId)\r",
													"pm.execution.setNextRequest(UserSearch_CreateTestData_1_Loop_RequestId);\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Get original request body as raw text\r",
													"let rawBody = pm.request.body.raw;\r",
													"\r",
													"// Parse it as JSON\r",
													"let payload;\r",
													"try {\r",
													"    payload = JSON.parse(rawBody);\r",
													"} catch (e) {\r",
													"    console.error(\"Failed to parse request body as JSON:\", e);\r",
													"    return;\r",
													"}\r",
													"\r",
													"// Generate a 6-char alphanumeric string\r",
													"function randomString(length = 6) {\r",
													"    const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r",
													"    let result = '';\r",
													"    for (let i = 0; i < length; i++) {\r",
													"        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
													"    }\r",
													"    return result;\r",
													"}\r",
													"\r",
													"const rand = randomString();\r",
													"\r",
													"if (payload.displayName) {\r",
													"    payload.displayName += ' ' + rand;\r",
													"}\r",
													"if (payload.email && payload.email.includes('@')) {\r",
													"    const [local, domain] = payload.email.split('@');\r",
													"    payload.email = `${local}-${rand}@${domain}`;\r",
													"}\r",
													"\r",
													"// Write modified payload back to request\r",
													"pm.request.body.raw = JSON.stringify(payload, null, 2);\r",
													"\r",
													"console.log('Creating test user: ', payload.displayName)"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"displayName\": \"Tester Lead\",\r\n    \"email\": \"tester-lead@nikkierp.com\",\r\n    \"password\": \"p@sswo0rd\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/identity/users",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"users"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"displayName\": \"John Doe\",\r\n    \"email\": \"john.doe@nikkierp.com\",\r\n    \"password\": \"p@sswo0rd\",\r\n    \"isActive\": true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{api_host}}/v1/identity/users",
													"host": [
														"{{api_host}}"
													],
													"path": [
														"v1",
														"identity",
														"users"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "",
													"type": "text"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"01JX7M99AQBTXW6ZW590YHNJMK\",\n    \"createdAt\": 1749381588402,\n    \"displayName\": \"John Doe\",\n    \"email\": \"john.doe@nikkierp.com\",\n    \"etag\": \"1749381588311993500\",\n    \"status\": \"active\"\n}"
										},
										{
											"name": "Client error - Invalid fields",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": \"nobody@\",\r\n    \"password\": \"\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{api_host}}/v1/identity/users",
													"host": [
														"{{api_host}}"
													],
													"path": [
														"v1",
														"identity",
														"users"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "",
													"type": "text"
												}
											],
											"cookie": [],
											"body": "{\n    \"code\": \"validation_error\",\n    \"details\": {\n        \"displayName\": \"cannot be blank\",\n        \"email\": \"must be a valid email address\",\n        \"passwordRaw\": \"cannot be blank\"\n    }\n}"
										},
										{
											"name": "Client error - Existing email",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"displayName\": \"John Doe\",\r\n    \"email\": \"john.doe@nikkierp.com\",\r\n    \"password\": \"p@sswo0rd\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{api_host}}/v1/identity/users",
													"host": [
														"{{api_host}}"
													],
													"path": [
														"v1",
														"identity",
														"users"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "",
													"type": "text"
												}
											],
											"cookie": [],
											"body": "{\n    \"code\": \"validation_error\",\n    \"details\": {\n        \"email\": \"email already exists\"\n    }\n}"
										}
									]
								},
								{
									"name": "User Search - Create test data - Loop 100",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const myRequestId = \"1c4510f0-91f5-46a0-a532-732f5a5fb741\"\r",
													"const UserSearch_NoCrit_NoPaging_Success = \"58d40e9b-1594-4bf0-99c4-71066ed6ded9\"\r",
													"let i = pm.collectionVariables.get(\"loop_count\");\r",
													"\r",
													"if (i > 0) {\r",
													"    pm.collectionVariables.set(\"loop_count\", --i);\r",
													"    console.log(\"To loop: \", i)\r",
													"    pm.execution.setNextRequest(myRequestId);\r",
													"} else {\r",
													"    console.log(\"To test case\")\r",
													"    pm.collectionVariables.unset(\"loop_count\")\r",
													"    pm.execution.setNextRequest(UserSearch_NoCrit_NoPaging_Success);\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Get original request body as raw text\r",
													"let rawBody = pm.request.body.raw;\r",
													"\r",
													"// Parse it as JSON\r",
													"let payload;\r",
													"try {\r",
													"    payload = JSON.parse(rawBody);\r",
													"} catch (e) {\r",
													"    console.error(\"Failed to parse request body as JSON:\", e);\r",
													"    return;\r",
													"}\r",
													"\r",
													"// Generate a 6-char alphanumeric string\r",
													"function randomString(length = 6) {\r",
													"    const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r",
													"    let result = '';\r",
													"    for (let i = 0; i < length; i++) {\r",
													"        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
													"    }\r",
													"    return result;\r",
													"}\r",
													"\r",
													"const rand = randomString();\r",
													"\r",
													"if (payload.displayName) {\r",
													"    payload.displayName += ' ' + rand;\r",
													"}\r",
													"if (payload.email && payload.email.includes('@')) {\r",
													"    const [local, domain] = payload.email.split('@');\r",
													"    payload.email = `${local}-${rand}@${domain}`;\r",
													"}\r",
													"\r",
													"// Write modified payload back to request\r",
													"pm.request.body.raw = JSON.stringify(payload, null, 2);\r",
													"\r",
													"console.log('Creating test user: ', payload.displayName)"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"displayName\": \"Tester {{loop_count}}\",\r\n    \"email\": \"tester-{{loop_count}}@nikkierp.com\",\r\n    \"password\": \"p@sswo0rd\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/identity/users",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"users"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"displayName\": \"John Doe\",\r\n    \"email\": \"john.doe@nikkierp.com\",\r\n    \"password\": \"p@sswo0rd\",\r\n    \"isActive\": true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{api_host}}/v1/identity/users",
													"host": [
														"{{api_host}}"
													],
													"path": [
														"v1",
														"identity",
														"users"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "",
													"type": "text"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"01JX7M99AQBTXW6ZW590YHNJMK\",\n    \"createdAt\": 1749381588402,\n    \"displayName\": \"John Doe\",\n    \"email\": \"john.doe@nikkierp.com\",\n    \"etag\": \"1749381588311993500\",\n    \"status\": \"active\"\n}"
										},
										{
											"name": "Client error - Invalid fields",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": \"nobody@\",\r\n    \"password\": \"\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{api_host}}/v1/identity/users",
													"host": [
														"{{api_host}}"
													],
													"path": [
														"v1",
														"identity",
														"users"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "",
													"type": "text"
												}
											],
											"cookie": [],
											"body": "{\n    \"code\": \"validation_error\",\n    \"details\": {\n        \"displayName\": \"cannot be blank\",\n        \"email\": \"must be a valid email address\",\n        \"passwordRaw\": \"cannot be blank\"\n    }\n}"
										},
										{
											"name": "Client error - Existing email",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"displayName\": \"John Doe\",\r\n    \"email\": \"john.doe@nikkierp.com\",\r\n    \"password\": \"p@sswo0rd\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{api_host}}/v1/identity/users",
													"host": [
														"{{api_host}}"
													],
													"path": [
														"v1",
														"identity",
														"users"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "",
													"type": "text"
												}
											],
											"cookie": [],
											"body": "{\n    \"code\": \"validation_error\",\n    \"details\": {\n        \"email\": \"email already exists\"\n    }\n}"
										}
									]
								},
								{
									"name": "User Search - No criteria, No paging - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = pm.collectionVariables.get(\"search_schema\");\r",
													"const payload = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response matches expected JSON schema\", function () {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"const defaultPageSize = 50; // Change this number according to Backend default\r",
													"pm.test(\"Response has default number of paged items\", function () {\r",
													"    pm.expect(payload.items.length).to.equal(defaultPageSize)\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{api_host}}/v1/identity/users",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "User Search - No criteria, With paging - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = pm.collectionVariables.get(\"search_schema\");\r",
													"const payload = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response matches expected JSON schema\", function () {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"// Change these numbers according to the query string params\r",
													"const pageIndex = 2;\r",
													"const pageSize = 7;\r",
													"\r",
													"pm.test(\"Response has correct requested number of paged items\", function () {\r",
													"    pm.expect(payload.items.length).to.equal(pageSize)\r",
													"    pm.expect(payload.page).to.equal(pageIndex)\r",
													"    pm.expect(payload.size).to.equal(pageSize)\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{api_host}}/v1/identity/users?page=2&size=7",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"users"
											],
											"query": [
												{
													"key": "page",
													"value": "2"
												},
												{
													"key": "size",
													"value": "7"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "User Search - No result - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = pm.collectionVariables.get(\"search_schema\");\r",
													"const payload = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response matches expected JSON schema\", function () {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has no items\", function () {\r",
													"    pm.expect(payload.items.length).to.equal(0)\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{api_host}}/v1/identity/users?page=99",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"users"
											],
											"query": [
												{
													"key": "page",
													"value": "99"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "User Search - If root field - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = pm.collectionVariables.get(\"search_schema\");\r",
													"const payload = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response matches expected JSON schema\", function () {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has positive number of items\", function () {\r",
													"    pm.expect(payload.items.length).to.be.greaterThan(0)\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{api_host}}/v1/identity/users?graph={\"if\":[\"display_name\", \"*\", \"lead\"]}",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"users"
											],
											"query": [
												{
													"key": "graph",
													"value": "{\"if\":[\"display_name\", \"*\", \"lead\"]}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "User Search - If edge root field - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = pm.collectionVariables.get(\"search_schema\");\r",
													"const payload = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response matches expected JSON schema\", function () {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has positive number of items\", function () {\r",
													"    pm.expect(payload.items.length).to.be.greaterThan(0)\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{api_host}}/v1/identity/users?graph={\"if\": [\"user_status.value\", \"!=\", \"active\"]}",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"users"
											],
											"query": [
												{
													"key": "graph",
													"value": "{\"if\": [\"user_status.value\", \"!=\", \"active\"]}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "User Search - If and - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = pm.collectionVariables.get(\"search_schema\");\r",
													"const payload = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response matches expected JSON schema\", function () {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has positive number of items\", function () {\r",
													"    pm.expect(payload.items.length).to.be.greaterThan(0)\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{api_host}}/v1/identity/users?graph={\"and\":[{\"if\":[\"display_name\", \"*\", \"tester\"]},{\"if\": [\"user_status.value\", \"^\", \"a\"]}]}",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"users"
											],
											"query": [
												{
													"key": "graph",
													"value": "{\"and\":[{\"if\":[\"display_name\", \"*\", \"tester\"]},{\"if\": [\"user_status.value\", \"^\", \"a\"]}]}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "User Search - If or - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = pm.collectionVariables.get(\"search_schema\");\r",
													"const payload = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response matches expected JSON schema\", function () {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has positive number of items\", function () {\r",
													"    pm.expect(payload.items.length).to.be.greaterThan(0)\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{api_host}}/v1/identity/users?graph={\"or\":[{\"if\":[\"display_name\", \"*\", \"Lead\"]},{\"if\": [\"user_status.value\", \"$\", \"d\"]}]}",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"users"
											],
											"query": [
												{
													"key": "graph",
													"value": "{\"or\":[{\"if\":[\"display_name\", \"*\", \"Lead\"]},{\"if\": [\"user_status.value\", \"$\", \"d\"]}]}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "User Search - If and or nested - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = pm.collectionVariables.get(\"search_schema\");\r",
													"const payload = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response matches expected JSON schema\", function () {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has positive number of items\", function () {\r",
													"    pm.expect(payload.items.length).to.be.greaterThan(0)\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{api_host}}/v1/identity/users?graph={\"or\":[{\"if\":[\"display_name\", \"*\", \"Lead\"]},{\"and\":[{\"if\": [\"user_status.value\", \"*\", \"o\"]},{\"if\": [\"user_status.value\", \"*\", \"w\"]}]}]}",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"users"
											],
											"query": [
												{
													"key": "graph",
													"value": "{\"or\":[{\"if\":[\"display_name\", \"*\", \"Lead\"]},{\"and\":[{\"if\": [\"user_status.value\", \"*\", \"o\"]},{\"if\": [\"user_status.value\", \"*\", \"w\"]}]}]}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "User Search - Order by root field - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = pm.collectionVariables.get(\"search_schema\");\r",
													"const payload = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response matches expected JSON schema\", function () {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has positive number of items\", function () {\r",
													"    pm.expect(payload.items.length).to.be.greaterThan(0)\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{api_host}}/v1/identity/users?graph={\"order\": [[\"display_name\", \"desc\"]]}",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"users"
											],
											"query": [
												{
													"key": "graph",
													"value": "{\"order\": [[\"display_name\", \"desc\"]]}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "User Search - Order by edge root field - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = pm.collectionVariables.get(\"search_schema\");\r",
													"const payload = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response matches expected JSON schema\", function () {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has positive number of items\", function () {\r",
													"    pm.expect(payload.items.length).to.be.greaterThan(0)\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{api_host}}/v1/identity/users?graph={\"order\": [[\"user_status.value\", \"desc\"]]}",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"users"
											],
											"query": [
												{
													"key": "graph",
													"value": "{\"order\": [[\"user_status.value\", \"desc\"]]}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "User Search - Order by edge JSON subfield - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = pm.collectionVariables.get(\"search_schema\");\r",
													"const payload = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response matches expected JSON schema\", function () {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has positive number of items\", function () {\r",
													"    pm.expect(payload.items.length).to.be.greaterThan(0)\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{api_host}}/v1/identity/users?graph={\"order\": [[\"user_status.label.vi_VN\", \"desc\"]]}",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"users"
											],
											"query": [
												{
													"key": "graph",
													"value": "{\"order\": [[\"user_status.label.vi_VN\", \"desc\"]]}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "User Search - Invalid fields - Validation errors",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const expected = {\r",
													"    code: \"validation_error\",\r",
													"    details: {\r",
													"        \"graph.condition\": \"invalid field 'fake-field' of entity 'user' in condition '[fake-field = Owner]'\",\r",
													"        page: \"must be no less than 0\",\r",
													"        size: \"must be no greater than 500\",\r",
													"    },\r",
													"};\r",
													"\r",
													"// Parse response body\r",
													"let jsonData;\r",
													"try {\r",
													"    jsonData = pm.response.json();\r",
													"} catch (e) {\r",
													"    pm.test(\"Response is valid JSON\", function () {\r",
													"        pm.expect.fail(\"Response is not valid JSON\");\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body matches expected JSON exactly\", function () {\r",
													"    pm.expect(jsonData).to.eql(expected);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.unset('search_schema')"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{api_host}}/v1/identity/users?page=-1&size=999999999999999999&graph={\"if\":[\"fake-field\", \"=\", \"Owner\"]}",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"users"
											],
											"query": [
												{
													"key": "page",
													"value": "-1"
												},
												{
													"key": "size",
													"value": "999999999999999999"
												},
												{
													"key": "graph",
													"value": "{\"if\":[\"fake-field\", \"=\", \"Owner\"]}"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Group",
					"item": [
						{
							"name": "Group - Create",
							"item": [
								{
									"name": "Group Create - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    type: \"object\",\r",
													"    required: [\"id\", \"createdAt\", \"etag\"],\r",
													"    properties: {\r",
													"        id: {\r",
													"            type: \"string\",\r",
													"            minLength: 1,\r",
													"        },\r",
													"        createdAt: {\r",
													"            type: \"integer\",\r",
													"            minimum: 1,\r",
													"        },\r",
													"        etag: {\r",
													"            type: \"string\",\r",
													"            minLength: 1,\r",
													"        },\r",
													"    },\r",
													"    additionalProperties: false\r",
													"};\r",
													"\r",
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"Response matches expected JSON schema\", function () {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"const { name } = JSON.parse(pm.request.body.raw);\r",
													"name && pm.collectionVariables.set('name', name);\r",
													"\r",
													"const payload = pm.response.json();\r",
													"const { id, etag } = payload;\r",
													"id && pm.collectionVariables.set('group_id', id);\r",
													"etag && pm.collectionVariables.set('etag', etag);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const rawBody = pm.request.body.raw;\r",
													"const payload = JSON.parse(rawBody);\r",
													"\r",
													"// Generate a 6-char alphanumeric string\r",
													"function randomString(length = 6) {\r",
													"    const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r",
													"    let result = '';\r",
													"    for (let i = 0; i < length; i++) {\r",
													"        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
													"    }\r",
													"    return result;\r",
													"}\r",
													"\r",
													"const rand = randomString();\r",
													"\r",
													"if (payload.name) {\r",
													"    payload.name += ' ' + rand;\r",
													"}\r",
													"if (payload.description) {\r",
													"    payload.description += ' ' + rand;\r",
													"}\r",
													"\r",
													"// Write modified payload back to request\r",
													"pm.request.body.raw = JSON.stringify(payload, null, 2);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"My Team\",\r\n    \"description\": \"This is my team\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/identity/groups",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"groups"
											]
										}
									},
									"response": []
								},
								{
									"name": "Group Create - Missing required fields - Validation errors",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const expected = {\r",
													"    code: \"validation_error\",\r",
													"    details: {\r",
													"        name: \"cannot be blank\"\r",
													"    },\r",
													"};\r",
													"\r",
													"// Parse response body\r",
													"let jsonData;\r",
													"try {\r",
													"    jsonData = pm.response.json();\r",
													"} catch (e) {\r",
													"    pm.test(\"Response is valid JSON\", function () {\r",
													"        pm.expect.fail(\"Response is not valid JSON\");\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body matches expected JSON exactly\", function () {\r",
													"    pm.expect(jsonData).to.eql(expected);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/identity/groups",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"groups"
											]
										}
									},
									"response": []
								},
								{
									"name": "Group Create - Empty strings - Validation errors",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const expected = {\r",
													"    code: \"validation_error\",\r",
													"    details: {\r",
													"        name: \"cannot be blank\"\r",
													"    },\r",
													"};\r",
													"\r",
													"// Parse response body\r",
													"let jsonData;\r",
													"try {\r",
													"    jsonData = pm.response.json();\r",
													"} catch (e) {\r",
													"    pm.test(\"Response is valid JSON\", function () {\r",
													"        pm.expect.fail(\"Response is not valid JSON\");\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body matches expected JSON exactly\", function () {\r",
													"    pm.expect(jsonData).to.eql(expected);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"\",\r\n    \"description\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/identity/groups",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"groups"
											]
										}
									},
									"response": []
								},
								{
									"name": "Group Create - Invalid fields - Validation errors",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const expected = {\r",
													"    code: \"validation_error\",\r",
													"    details: {\r",
													"        \"name\": \"the length must be between 1 and 200\"\r",
													"    },\r",
													"};\r",
													"\r",
													"// Parse response body\r",
													"let jsonData;\r",
													"try {\r",
													"    jsonData = pm.response.json();\r",
													"} catch (e) {\r",
													"    pm.test(\"Response is valid JSON\", function () {\r",
													"        pm.expect.fail(\"Response is not valid JSON\");\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body matches expected JSON exactly\", function () {\r",
													"    pm.expect(jsonData).to.eql(expected);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"too-longgggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/identity/groups",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"groups"
											]
										}
									},
									"response": []
								},
								{
									"name": "Group Create - Existing name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const expected = {\r",
													"    code: \"validation_error\",\r",
													"    details: {\r",
													"        name: \"group name already exists\"\r",
													"    }\r",
													"};\r",
													"\r",
													"// Parse response body\r",
													"let jsonData;\r",
													"try {\r",
													"    jsonData = pm.response.json();\r",
													"} catch (e) {\r",
													"    pm.test(\"Response is valid JSON\", function () {\r",
													"        pm.expect.fail(\"Response is not valid JSON\");\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body matches expected JSON exactly\", function () {\r",
													"    pm.expect(jsonData).to.eql(expected);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{name}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/identity/groups",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"groups"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Group - Update",
							"item": [
								{
									"name": "Group Update - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    type: \"object\",\r",
													"    required: [\"id\", \"updatedAt\", \"etag\"],\r",
													"    properties: {\r",
													"        id: {\r",
													"            type: \"string\",\r",
													"            minLength: 1,\r",
													"        },\r",
													"        updatedAt: {\r",
													"            type: \"integer\",\r",
													"            minimum: 1,\r",
													"        },\r",
													"        etag: {\r",
													"            type: \"string\",\r",
													"            minLength: 1,\r",
													"        },\r",
													"    },\r",
													"    additionalProperties: false\r",
													"};\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response matches expected JSON schema\", function () {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"const { name } = JSON.parse(pm.request.body.raw);\r",
													"name && pm.collectionVariables.set('name', name);\r",
													"\r",
													"const payload = pm.response.json();\r",
													"const { id, etag } = payload;\r",
													"id && pm.collectionVariables.set('group_id', id);\r",
													"etag && pm.collectionVariables.set('etag', etag);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const rawBody = pm.request.body.raw;\r",
													"const payload = JSON.parse(rawBody);\r",
													"\r",
													"// Generate a 6-char alphanumeric string\r",
													"function randomString(length = 6) {\r",
													"    const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r",
													"    let result = '';\r",
													"    for (let i = 0; i < length; i++) {\r",
													"        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
													"    }\r",
													"    return result;\r",
													"}\r",
													"\r",
													"const rand = randomString();\r",
													"\r",
													"if (payload.name) {\r",
													"    payload.name += ' ' + rand;\r",
													"}\r",
													"if (payload.description) {\r",
													"    payload.description += ' ' + rand;\r",
													"}\r",
													"\r",
													"// Write modified payload back to request\r",
													"pm.request.body.raw = JSON.stringify(payload, null, 2);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"New Team\",\r\n    \"description\": \"The same team with new name\",\r\n    \"etag\": \"{{etag}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/identity/groups/{{group_id}}",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"groups",
												"{{group_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Group Update - Not found ID - Validation errors",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const expected = {\r",
													"    code: \"validation_error\",\r",
													"    details: {\r",
													"        id: \"group not found\",\r",
													"    },\r",
													"};\r",
													"\r",
													"// Parse response body\r",
													"let jsonData;\r",
													"try {\r",
													"    jsonData = pm.response.json();\r",
													"} catch (e) {\r",
													"    pm.test(\"Response is valid JSON\", function () {\r",
													"        pm.expect.fail(\"Response is not valid JSON\");\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body matches expected JSON exactly\", function () {\r",
													"    pm.expect(jsonData).to.eql(expected);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/identity/groups/not-existing-1234567890123",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"groups",
												"not-existing-1234567890123"
											]
										}
									},
									"response": []
								},
								{
									"name": "Group Update - Unmatched etag - Validation errors",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const expected = {\r",
													"    code: \"validation_error\",\r",
													"    details: {\r",
													"        etag: \"group has been modified by another user\",\r",
													"    },\r",
													"};\r",
													"\r",
													"// Parse response body\r",
													"let jsonData;\r",
													"try {\r",
													"    jsonData = pm.response.json();\r",
													"} catch (e) {\r",
													"    pm.test(\"Response is valid JSON\", function () {\r",
													"        pm.expect.fail(\"Response is not valid JSON\");\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body matches expected JSON exactly\", function () {\r",
													"    pm.expect(jsonData).to.eql(expected);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"___________________\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/identity/groups/{{group_id}}",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"groups",
												"{{group_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Group Update - Missing required fields - Validation errors",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const expected = {\r",
													"    code: \"validation_error\",\r",
													"    details: {\r",
													"        etag: \"cannot be blank\"\r",
													"    },\r",
													"};\r",
													"\r",
													"// Parse response body\r",
													"let jsonData;\r",
													"try {\r",
													"    jsonData = pm.response.json();\r",
													"} catch (e) {\r",
													"    pm.test(\"Response is valid JSON\", function () {\r",
													"        pm.expect.fail(\"Response is not valid JSON\");\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body matches expected JSON exactly\", function () {\r",
													"    pm.expect(jsonData).to.eql(expected);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/identity/groups/{{group_id}}",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"groups",
												"{{group_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Group Update - Empty strings - Validation errors",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const expected = {\r",
													"    code: \"validation_error\",\r",
													"    details: {\r",
													"        etag: \"cannot be blank\",\r",
													"        name: \"cannot be blank\"\r",
													"    },\r",
													"};\r",
													"\r",
													"// Parse response body\r",
													"let jsonData;\r",
													"try {\r",
													"    jsonData = pm.response.json();\r",
													"} catch (e) {\r",
													"    pm.test(\"Response is valid JSON\", function () {\r",
													"        pm.expect.fail(\"Response is not valid JSON\");\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body matches expected JSON exactly\", function () {\r",
													"    pm.expect(jsonData).to.eql(expected);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"\",\r\n    \"description\": \"\",\r\n    \"etag\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/identity/groups/{{group_id}}",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"groups",
												"{{group_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Group Update - Invalid fields - Validation errors",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const expected = {\r",
													"    code: \"validation_error\",\r",
													"    details: {\r",
													"        etag: \"the length must be between 7 and 30\",\r",
													"        name: \"the length must be between 1 and 200\"\r",
													"    },\r",
													"};\r",
													"\r",
													"// Parse response body\r",
													"let jsonData;\r",
													"try {\r",
													"    jsonData = pm.response.json();\r",
													"} catch (e) {\r",
													"    pm.test(\"Response is valid JSON\", function () {\r",
													"        pm.expect.fail(\"Response is not valid JSON\");\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body matches expected JSON exactly\", function () {\r",
													"    pm.expect(jsonData).to.eql(expected);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"too-longgggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg\",\r\n    \"etag\": \"fake\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/identity/groups/{{group_id}}",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"groups",
												"{{group_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Group Update - Existing name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const expected = {\r",
													"    code: \"validation_error\",\r",
													"    details: {\r",
													"        name: \"group name already exists\"\r",
													"    }\r",
													"};\r",
													"\r",
													"// Parse response body\r",
													"let jsonData;\r",
													"try {\r",
													"    jsonData = pm.response.json();\r",
													"} catch (e) {\r",
													"    pm.test(\"Response is valid JSON\", function () {\r",
													"        pm.expect.fail(\"Response is not valid JSON\");\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body matches expected JSON exactly\", function () {\r",
													"    pm.expect(jsonData).to.eql(expected);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{name}}\",\r\n    \"etag\": \"{{etag}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/identity/groups/{{group_id}}",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"groups",
												"{{group_id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Group - Get by ID",
							"item": [
								{
									"name": "Group Get - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    type: \"object\",\r",
													"    properties: {\r",
													"        id: {\r",
													"            \"type\": \"string\",\r",
													"            minLength: 1,\r",
													"        },\r",
													"        createdAt: {\r",
													"            type: \"integer\",\r",
													"            minimum: 1,\r",
													"            description: \"Unix timestamp in milliseconds\"\r",
													"        },\r",
													"        name: {\r",
													"            type: \"string\",\r",
													"            minLength: 1,\r",
													"        },\r",
													"        description: {\r",
													"            type: \"string\",\r",
													"            minLength: 1,\r",
													"        },\r",
													"        etag: {\r",
													"            type: \"string\",\r",
													"            minLength: 1,\r",
													"        },\r",
													"        updatedAt: {\r",
													"            type: \"integer\",\r",
													"            minimum: 1,\r",
													"            description: \"Unix timestamp in milliseconds\"\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\"id\", \"createdAt\", \"name\", \"etag\"],\r",
													"    \"additionalProperties\": false\r",
													"};\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response matches expected JSON schema\", function () {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{api_host}}/v1/identity/groups/{{group_id}}",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"groups",
												"{{group_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Group Get - Not found ID - Validation errors",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const expected = {\r",
													"    code: \"validation_error\",\r",
													"    details: {\r",
													"        id: \"group not found\",\r",
													"    },\r",
													"};\r",
													"\r",
													"// Parse response body\r",
													"let jsonData;\r",
													"try {\r",
													"    jsonData = pm.response.json();\r",
													"} catch (e) {\r",
													"    pm.test(\"Response is valid JSON\", function () {\r",
													"        pm.expect.fail(\"Response is not valid JSON\");\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body matches expected JSON exactly\", function () {\r",
													"    pm.expect(jsonData).to.eql(expected);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{api_host}}/v1/identity/groups/not-existing-1234567890123",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"groups",
												"not-existing-1234567890123"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Group - Search",
							"item": [
								{
									"name": "Group Search - Create test data - Init",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    type: \"object\",\r",
													"    properties: {\r",
													"        items: {\r",
													"            type: \"array\",\r",
													"            items: {\r",
													"                type: \"object\",\r",
													"                properties: {\r",
													"                    id: {\r",
													"                        type: \"string\",\r",
													"                        minLength: 1,\r",
													"                    },\r",
													"                    createdAt: {\r",
													"                        type: \"integer\",\r",
													"                        minimum: 1,\r",
													"                        description: \"Unix timestamp in milliseconds\"\r",
													"                    },\r",
													"                    name: {\r",
													"                        type: \"string\",\r",
													"                        minLength: 1,\r",
													"                    },\r",
													"                    description: {\r",
													"                        type: \"string\",\r",
													"                        minLength: 1,\r",
													"                    },\r",
													"                    etag: {\r",
													"                        type: \"string\",\r",
													"                        minLength: 1,\r",
													"                    },\r",
													"                    updatedAt: {\r",
													"                        type: \"integer\",\r",
													"                        minimum: 1,\r",
													"                        description: \"Unix timestamp in milliseconds\"\r",
													"                    }\r",
													"                },\r",
													"                required: [\"id\", \"createdAt\", \"name\", \"etag\"],\r",
													"                additionalProperties: false\r",
													"            }\r",
													"        },\r",
													"        total: {\r",
													"            type: \"integer\",\r",
													"            minimum: 0\r",
													"        },\r",
													"        page: {\r",
													"            type: \"integer\",\r",
													"            minimum: 0\r",
													"        },\r",
													"        size: {\r",
													"            type: \"integer\",\r",
													"            minimum: 1\r",
													"        }\r",
													"    },\r",
													"    required: [\"items\", \"total\", \"page\", \"size\"]\r",
													"};\r",
													"pm.collectionVariables.set(\"search_schema\", schema);\r",
													"\r",
													"/*\r",
													" * Configure loop\r",
													" */\r",
													"const LOOP_COUNT = 100;\r",
													"pm.collectionVariables.set(\"loop_count\", LOOP_COUNT);\r",
													"\r",
													"const GroupSearch_CreateTestData_Loop_RequestId = \"347c2615-00f4-4024-b1f7-68989b1b2129\"\r",
													"\r",
													"console.log(`Creating ${LOOP_COUNT} test records`)\r",
													"pm.execution.setNextRequest(GroupSearch_CreateTestData_Loop_RequestId);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const rawBody = pm.request.body.raw;\r",
													"const payload = JSON.parse(rawBody);\r",
													"\r",
													"// Generate a 6-char alphanumeric string\r",
													"function randomString(length = 6) {\r",
													"    const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r",
													"    let result = '';\r",
													"    for (let i = 0; i < length; i++) {\r",
													"        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
													"    }\r",
													"    return result;\r",
													"}\r",
													"\r",
													"const rand = randomString();\r",
													"\r",
													"if (payload.name) {\r",
													"    payload.name += ' ' + rand;\r",
													"}\r",
													"if (payload.description) {\r",
													"    payload.description += ' ' + rand;\r",
													"}\r",
													"\r",
													"// Write modified payload back to request\r",
													"pm.request.body.raw = JSON.stringify(payload, null, 2);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Manager team\",\r\n    \"description\": \"For managers and team leaders\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/identity/groups",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"groups"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"displayName\": \"John Doe\",\r\n    \"email\": \"john.doe@nikkierp.com\",\r\n    \"password\": \"p@sswo0rd\",\r\n    \"isActive\": true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{api_host}}/v1/identity/users",
													"host": [
														"{{api_host}}"
													],
													"path": [
														"v1",
														"identity",
														"users"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "",
													"type": "text"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"01JX7M99AQBTXW6ZW590YHNJMK\",\n    \"createdAt\": 1749381588402,\n    \"displayName\": \"John Doe\",\n    \"email\": \"john.doe@nikkierp.com\",\n    \"etag\": \"1749381588311993500\",\n    \"status\": \"active\"\n}"
										},
										{
											"name": "Client error - Invalid fields",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": \"nobody@\",\r\n    \"password\": \"\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{api_host}}/v1/identity/users",
													"host": [
														"{{api_host}}"
													],
													"path": [
														"v1",
														"identity",
														"users"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "",
													"type": "text"
												}
											],
											"cookie": [],
											"body": "{\n    \"code\": \"validation_error\",\n    \"details\": {\n        \"displayName\": \"cannot be blank\",\n        \"email\": \"must be a valid email address\",\n        \"passwordRaw\": \"cannot be blank\"\n    }\n}"
										},
										{
											"name": "Client error - Existing email",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"displayName\": \"John Doe\",\r\n    \"email\": \"john.doe@nikkierp.com\",\r\n    \"password\": \"p@sswo0rd\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{api_host}}/v1/identity/users",
													"host": [
														"{{api_host}}"
													],
													"path": [
														"v1",
														"identity",
														"users"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "",
													"type": "text"
												}
											],
											"cookie": [],
											"body": "{\n    \"code\": \"validation_error\",\n    \"details\": {\n        \"email\": \"email already exists\"\n    }\n}"
										}
									]
								},
								{
									"name": "Group Search - Create test data - Loop 100",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const myRequestId = \"347c2615-00f4-4024-b1f7-68989b1b2129\"\r",
													"const GroupSearch_NoCrit_NoPaging_Success = \"6bc3c209-ae18-414b-a263-e5dd9d7c5f4b\"\r",
													"let i = pm.collectionVariables.get(\"loop_count\");\r",
													"\r",
													"if (i > 0) {\r",
													"    pm.collectionVariables.set(\"loop_count\", --i);\r",
													"    console.log(\"To loop: \", i)\r",
													"    pm.execution.setNextRequest(myRequestId);\r",
													"} else {\r",
													"    console.log(\"To test case\")\r",
													"    pm.collectionVariables.unset(\"loop_count\")\r",
													"    pm.execution.setNextRequest(GroupSearch_NoCrit_NoPaging_Success);\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const rawBody = pm.request.body.raw;\r",
													"const payload = JSON.parse(rawBody);\r",
													"\r",
													"// Generate a 6-char alphanumeric string\r",
													"function randomString(length = 6) {\r",
													"    const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r",
													"    let result = '';\r",
													"    for (let i = 0; i < length; i++) {\r",
													"        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
													"    }\r",
													"    return result;\r",
													"}\r",
													"\r",
													"const rand = randomString();\r",
													"\r",
													"if (payload.name) {\r",
													"    payload.name += ' ' + rand;\r",
													"}\r",
													"if (payload.description) {\r",
													"    payload.description += ' ' + rand;\r",
													"}\r",
													"\r",
													"// Write modified payload back to request\r",
													"pm.request.body.raw = JSON.stringify(payload, null, 2);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Dev squad {{loop_count}}\",\r\n    \"description\": \"Squad of max 10 developers {{loop_count}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/identity/groups",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"groups"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"displayName\": \"John Doe\",\r\n    \"email\": \"john.doe@nikkierp.com\",\r\n    \"password\": \"p@sswo0rd\",\r\n    \"isActive\": true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{api_host}}/v1/identity/users",
													"host": [
														"{{api_host}}"
													],
													"path": [
														"v1",
														"identity",
														"users"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "",
													"type": "text"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"01JX7M99AQBTXW6ZW590YHNJMK\",\n    \"createdAt\": 1749381588402,\n    \"displayName\": \"John Doe\",\n    \"email\": \"john.doe@nikkierp.com\",\n    \"etag\": \"1749381588311993500\",\n    \"status\": \"active\"\n}"
										},
										{
											"name": "Client error - Invalid fields",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": \"nobody@\",\r\n    \"password\": \"\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{api_host}}/v1/identity/users",
													"host": [
														"{{api_host}}"
													],
													"path": [
														"v1",
														"identity",
														"users"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "",
													"type": "text"
												}
											],
											"cookie": [],
											"body": "{\n    \"code\": \"validation_error\",\n    \"details\": {\n        \"displayName\": \"cannot be blank\",\n        \"email\": \"must be a valid email address\",\n        \"passwordRaw\": \"cannot be blank\"\n    }\n}"
										},
										{
											"name": "Client error - Existing email",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"displayName\": \"John Doe\",\r\n    \"email\": \"john.doe@nikkierp.com\",\r\n    \"password\": \"p@sswo0rd\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{api_host}}/v1/identity/users",
													"host": [
														"{{api_host}}"
													],
													"path": [
														"v1",
														"identity",
														"users"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "",
													"type": "text"
												}
											],
											"cookie": [],
											"body": "{\n    \"code\": \"validation_error\",\n    \"details\": {\n        \"email\": \"email already exists\"\n    }\n}"
										}
									]
								},
								{
									"name": "Group Search - No criteria, No paging - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = pm.collectionVariables.get(\"search_schema\");\r",
													"const payload = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response matches expected JSON schema\", function () {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"const defaultPageSize = 50; // Change this number according to Backend default\r",
													"pm.test(\"Response has default number of paged items\", function () {\r",
													"    pm.expect(payload.items.length).to.equal(defaultPageSize)\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{api_host}}/v1/identity/groups",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"groups"
											]
										}
									},
									"response": []
								},
								{
									"name": "Group Search - No criteria, With paging - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = pm.collectionVariables.get(\"search_schema\");\r",
													"const payload = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response matches expected JSON schema\", function () {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"// Change these numbers according to the query string params\r",
													"const pageIndex = 2;\r",
													"const pageSize = 7;\r",
													"\r",
													"pm.test(\"Response has correct requested number of paged items\", function () {\r",
													"    pm.expect(payload.items.length).to.equal(pageSize)\r",
													"    pm.expect(payload.page).to.equal(pageIndex)\r",
													"    pm.expect(payload.size).to.equal(pageSize)\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{api_host}}/v1/identity/groups?page=2&size=7",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"groups"
											],
											"query": [
												{
													"key": "page",
													"value": "2"
												},
												{
													"key": "size",
													"value": "7"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Group Search - No result - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = pm.collectionVariables.get(\"search_schema\");\r",
													"const payload = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response matches expected JSON schema\", function () {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has no items\", function () {\r",
													"    pm.expect(payload.items.length).to.equal(0)\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{api_host}}/v1/identity/groups?page=99",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"groups"
											],
											"query": [
												{
													"key": "page",
													"value": "99"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Group Search - If root field - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = pm.collectionVariables.get(\"search_schema\");\r",
													"const payload = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response matches expected JSON schema\", function () {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has positive number of items\", function () {\r",
													"    pm.expect(payload.items.length).to.be.greaterThan(0)\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{api_host}}/v1/identity/groups?graph={\"if\":[\"name\", \"*\", \"squad\"]}",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"groups"
											],
											"query": [
												{
													"key": "graph",
													"value": "{\"if\":[\"name\", \"*\", \"squad\"]}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Group Search - If and - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = pm.collectionVariables.get(\"search_schema\");\r",
													"const payload = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response matches expected JSON schema\", function () {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has positive number of items\", function () {\r",
													"    pm.expect(payload.items.length).to.be.greaterThan(0)\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{api_host}}/v1/identity/groups?graph={\"and\":[{\"if\":[\"name\", \"^\", \"dev\"]},{\"if\": [\"description\", \"*\", \"99\"]}]}",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"groups"
											],
											"query": [
												{
													"key": "graph",
													"value": "{\"and\":[{\"if\":[\"name\", \"^\", \"dev\"]},{\"if\": [\"description\", \"*\", \"99\"]}]}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Group Search - If or - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = pm.collectionVariables.get(\"search_schema\");\r",
													"const payload = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response matches expected JSON schema\", function () {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has positive number of items\", function () {\r",
													"    pm.expect(payload.items.length).to.be.greaterThan(0)\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{api_host}}/v1/identity/groups?graph={\"or\":[{\"if\":[\"name\", \"^\", \"Manager\"]},{\"if\": [\"description\", \"*\", \"88\"]}]}",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"groups"
											],
											"query": [
												{
													"key": "graph",
													"value": "{\"or\":[{\"if\":[\"name\", \"^\", \"Manager\"]},{\"if\": [\"description\", \"*\", \"88\"]}]}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Group Search - If and or nested - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = pm.collectionVariables.get(\"search_schema\");\r",
													"const payload = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response matches expected JSON schema\", function () {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has positive number of items\", function () {\r",
													"    pm.expect(payload.items.length).to.be.greaterThan(0)\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{api_host}}/v1/identity/groups?graph={\"or\":[{\"if\":[\"name\", \"^\", \"Manager\"]},{\"and\":[{\"if\": [\"description\", \"*\", \"squad\"]},{\"if\": [\"description\", \"*\", \"77\"]}]}]}",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"groups"
											],
											"query": [
												{
													"key": "graph",
													"value": "{\"or\":[{\"if\":[\"name\", \"^\", \"Manager\"]},{\"and\":[{\"if\": [\"description\", \"*\", \"squad\"]},{\"if\": [\"description\", \"*\", \"77\"]}]}]}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Group Search - Order by root field - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = pm.collectionVariables.get(\"search_schema\");\r",
													"const payload = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response matches expected JSON schema\", function () {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has positive number of items\", function () {\r",
													"    pm.expect(payload.items.length).to.be.greaterThan(0)\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{api_host}}/v1/identity/groups?graph={\"order\": [[\"name\", \"desc\"]]}",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"groups"
											],
											"query": [
												{
													"key": "graph",
													"value": "{\"order\": [[\"name\", \"desc\"]]}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Group Search - Invalid fields - Validation errors",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const expected = {\r",
													"    code: \"validation_error\",\r",
													"    details: {\r",
													"        \"graph.condition\": \"invalid field 'fake-field' of entity 'group' in condition '[fake-field = Squad]'\",\r",
													"        page: \"must be no less than 0\",\r",
													"        size: \"must be no greater than 500\",\r",
													"    },\r",
													"};\r",
													"\r",
													"// Parse response body\r",
													"let jsonData;\r",
													"try {\r",
													"    jsonData = pm.response.json();\r",
													"} catch (e) {\r",
													"    pm.test(\"Response is valid JSON\", function () {\r",
													"        pm.expect.fail(\"Response is not valid JSON\");\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body matches expected JSON exactly\", function () {\r",
													"    pm.expect(jsonData).to.eql(expected);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.unset('search_schema')"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{api_host}}/v1/identity/groups?page=-1&size=999999999999999999&graph={\"if\":[\"fake-field\", \"=\", \"Squad\"]}",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"groups"
											],
											"query": [
												{
													"key": "page",
													"value": "-1"
												},
												{
													"key": "size",
													"value": "999999999999999999"
												},
												{
													"key": "graph",
													"value": "{\"if\":[\"fake-field\", \"=\", \"Squad\"]}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Group - Add / Remove Users",
							"item": [
								{
									"name": "Group - Create test Users - Init",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// pm.collectionVariables.set(\"search_schema\", schema);\r",
													"\r",
													"/*\r",
													" * Configure loop\r",
													" */\r",
													"const LOOP_COUNT = 50;\r",
													"pm.collectionVariables.set(\"loop_count\", LOOP_COUNT);\r",
													"\r",
													"const Group_Create_Test_Users_Loop_RequestId = \"7766e8dc-92a4-4c48-a799-623cb196c673\"\r",
													"\r",
													"console.log(`Creating ${LOOP_COUNT} test records`)\r",
													"pm.execution.setNextRequest(Group_Create_Test_Users_Loop_RequestId);\r",
													"\r",
													"/*\r",
													" * Keep track a list of created User IDs\r",
													" */\r",
													"const payload = pm.response.json();\r",
													"const { id } = payload;\r",
													"id && pm.collectionVariables.set('group_users', [id]);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Get original request body as raw text\r",
													"let rawBody = pm.request.body.raw;\r",
													"\r",
													"// Parse it as JSON\r",
													"let payload;\r",
													"try {\r",
													"    payload = JSON.parse(rawBody);\r",
													"} catch (e) {\r",
													"    console.error(\"Failed to parse request body as JSON:\", e);\r",
													"    return;\r",
													"}\r",
													"\r",
													"// Generate a 6-char alphanumeric string\r",
													"function randomString(length = 6) {\r",
													"    const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r",
													"    let result = '';\r",
													"    for (let i = 0; i < length; i++) {\r",
													"        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
													"    }\r",
													"    return result;\r",
													"}\r",
													"\r",
													"const rand = randomString();\r",
													"\r",
													"if (payload.displayName) {\r",
													"    payload.displayName += ' ' + rand;\r",
													"}\r",
													"if (payload.email && payload.email.includes('@')) {\r",
													"    const [local, domain] = payload.email.split('@');\r",
													"    payload.email = `${local}-${rand}@${domain}`;\r",
													"}\r",
													"\r",
													"// Write modified payload back to request\r",
													"pm.request.body.raw = JSON.stringify(payload, null, 2);\r",
													"\r",
													"console.log('Creating test user: ', payload.displayName)"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"displayName\": \"Tester Lead\",\r\n    \"email\": \"tester-lead@nikkierp.com\",\r\n    \"password\": \"p@sswo0rd\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/identity/users",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"users"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"displayName\": \"John Doe\",\r\n    \"email\": \"john.doe@nikkierp.com\",\r\n    \"password\": \"p@sswo0rd\",\r\n    \"isActive\": true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{api_host}}/v1/identity/users",
													"host": [
														"{{api_host}}"
													],
													"path": [
														"v1",
														"identity",
														"users"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "",
													"type": "text"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"01JX7M99AQBTXW6ZW590YHNJMK\",\n    \"createdAt\": 1749381588402,\n    \"displayName\": \"John Doe\",\n    \"email\": \"john.doe@nikkierp.com\",\n    \"etag\": \"1749381588311993500\",\n    \"status\": \"active\"\n}"
										},
										{
											"name": "Client error - Invalid fields",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": \"nobody@\",\r\n    \"password\": \"\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{api_host}}/v1/identity/users",
													"host": [
														"{{api_host}}"
													],
													"path": [
														"v1",
														"identity",
														"users"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "",
													"type": "text"
												}
											],
											"cookie": [],
											"body": "{\n    \"code\": \"validation_error\",\n    \"details\": {\n        \"displayName\": \"cannot be blank\",\n        \"email\": \"must be a valid email address\",\n        \"passwordRaw\": \"cannot be blank\"\n    }\n}"
										},
										{
											"name": "Client error - Existing email",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"displayName\": \"John Doe\",\r\n    \"email\": \"john.doe@nikkierp.com\",\r\n    \"password\": \"p@sswo0rd\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{api_host}}/v1/identity/users",
													"host": [
														"{{api_host}}"
													],
													"path": [
														"v1",
														"identity",
														"users"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "",
													"type": "text"
												}
											],
											"cookie": [],
											"body": "{\n    \"code\": \"validation_error\",\n    \"details\": {\n        \"email\": \"email already exists\"\n    }\n}"
										}
									]
								},
								{
									"name": "Group - Create test Users - Loop 50",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const myRequestId = \"7766e8dc-92a4-4c48-a799-623cb196c673\"\r",
													"const Group_AddUsers_Success = \"a23cccbe-bbfe-4261-8432-892796399d19\"\r",
													"let i = pm.collectionVariables.get(\"loop_count\");\r",
													"\r",
													"if (i > 0) {\r",
													"    pm.collectionVariables.set(\"loop_count\", --i);\r",
													"    console.log(\"To loop: \", i)\r",
													"    pm.execution.setNextRequest(myRequestId);\r",
													"} else {\r",
													"    console.log(\"To test case\")\r",
													"    pm.collectionVariables.unset(\"loop_count\")\r",
													"    pm.execution.setNextRequest(Group_AddUsers_Success);\r",
													"}\r",
													"\r",
													"const payload = pm.response.json();\r",
													"const { id } = payload;\r",
													"\r",
													"if (id) {\r",
													"    const groupUserIds = pm.collectionVariables.get('group_users') || []\r",
													"    pm.collectionVariables.set('group_users', [...groupUserIds, id]);\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Get original request body as raw text\r",
													"let rawBody = pm.request.body.raw;\r",
													"\r",
													"// Parse it as JSON\r",
													"let payload;\r",
													"try {\r",
													"    payload = JSON.parse(rawBody);\r",
													"} catch (e) {\r",
													"    console.error(\"Failed to parse request body as JSON:\", e);\r",
													"    return;\r",
													"}\r",
													"\r",
													"// Generate a 6-char alphanumeric string\r",
													"function randomString(length = 6) {\r",
													"    const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r",
													"    let result = '';\r",
													"    for (let i = 0; i < length; i++) {\r",
													"        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
													"    }\r",
													"    return result;\r",
													"}\r",
													"\r",
													"const rand = randomString();\r",
													"\r",
													"if (payload.displayName) {\r",
													"    payload.displayName += ' ' + rand;\r",
													"}\r",
													"if (payload.email && payload.email.includes('@')) {\r",
													"    const [local, domain] = payload.email.split('@');\r",
													"    payload.email = `${local}-${rand}@${domain}`;\r",
													"}\r",
													"\r",
													"// Write modified payload back to request\r",
													"pm.request.body.raw = JSON.stringify(payload, null, 2);\r",
													"\r",
													"console.log('Creating test user: ', payload.displayName)"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"displayName\": \"Tester {{loop_count}}\",\r\n    \"email\": \"tester-{{loop_count}}@nikkierp.com\",\r\n    \"password\": \"p@sswo0rd\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/identity/users",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"users"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"displayName\": \"John Doe\",\r\n    \"email\": \"john.doe@nikkierp.com\",\r\n    \"password\": \"p@sswo0rd\",\r\n    \"isActive\": true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{api_host}}/v1/identity/users",
													"host": [
														"{{api_host}}"
													],
													"path": [
														"v1",
														"identity",
														"users"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "",
													"type": "text"
												}
											],
											"cookie": [],
											"body": "{\n    \"id\": \"01JX7M99AQBTXW6ZW590YHNJMK\",\n    \"createdAt\": 1749381588402,\n    \"displayName\": \"John Doe\",\n    \"email\": \"john.doe@nikkierp.com\",\n    \"etag\": \"1749381588311993500\",\n    \"status\": \"active\"\n}"
										},
										{
											"name": "Client error - Invalid fields",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": \"nobody@\",\r\n    \"password\": \"\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{api_host}}/v1/identity/users",
													"host": [
														"{{api_host}}"
													],
													"path": [
														"v1",
														"identity",
														"users"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "",
													"type": "text"
												}
											],
											"cookie": [],
											"body": "{\n    \"code\": \"validation_error\",\n    \"details\": {\n        \"displayName\": \"cannot be blank\",\n        \"email\": \"must be a valid email address\",\n        \"passwordRaw\": \"cannot be blank\"\n    }\n}"
										},
										{
											"name": "Client error - Existing email",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"displayName\": \"John Doe\",\r\n    \"email\": \"john.doe@nikkierp.com\",\r\n    \"password\": \"p@sswo0rd\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{api_host}}/v1/identity/users",
													"host": [
														"{{api_host}}"
													],
													"path": [
														"v1",
														"identity",
														"users"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "",
													"type": "text"
												}
											],
											"cookie": [],
											"body": "{\n    \"code\": \"validation_error\",\n    \"details\": {\n        \"email\": \"email already exists\"\n    }\n}"
										}
									]
								},
								{
									"name": "Group - Add Users - Success",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let groupUserIds = pm.collectionVariables.get('group_users') || []\r",
													"\r",
													"if (! Array.isArray(groupUserIds)) {\r",
													"    console.warn('Postman bug: groupUserIds was turned to string')\r",
													"    groupUserIds = groupUserIds.split(',');\r",
													"}\r",
													"\r",
													"if (!groupUserIds.length) {\r",
													"    pm.test(\"Test data was prepared\", function () {\r",
													"        pm.expect.fail(\"Must create test data before running this request\");\r",
													"    });\r",
													"    pm.execution.skipRequest();\r",
													"}\r",
													"\r",
													"const rawBody = pm.request.body.raw;\r",
													"const payload = JSON.parse(rawBody);\r",
													"\r",
													"// Add 50% new users to group\r",
													"payload.add = groupUserIds.slice(0, groupUserIds.length/2);\r",
													"\r",
													"// Write modified payload back to request\r",
													"pm.request.body.raw = JSON.stringify(payload, null, 2);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    type: \"object\",\r",
													"    required: [\"id\", \"updatedAt\", \"etag\"],\r",
													"    properties: {\r",
													"        id: {\r",
													"            type: \"string\",\r",
													"            minLength: 1,\r",
													"        },\r",
													"        updatedAt: {\r",
													"            type: \"integer\",\r",
													"            minimum: 1,\r",
													"        },\r",
													"        etag: {\r",
													"            type: \"string\",\r",
													"            minLength: 1,\r",
													"        },\r",
													"    },\r",
													"    additionalProperties: false\r",
													"};\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response matches expected JSON schema\", function () {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"const payload = pm.response.json();\r",
													"const { etag } = payload;\r",
													"etag && pm.collectionVariables.set('etag', etag);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"add\": [\"<< Managed by script >>\"],\r\n    \"etag\": \"{{etag}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/identity/groups/{{group_id}}/manage-users",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"groups",
												"{{group_id}}",
												"manage-users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Group - Remove Users - Success",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let groupUserIds = pm.collectionVariables.get('group_users') || []\r",
													"\r",
													"if (! Array.isArray(groupUserIds)) {\r",
													"    console.warn('Postman bug: groupUserIds was turned to string')\r",
													"    groupUserIds = groupUserIds.split(',');\r",
													"}\r",
													"\r",
													"if (!groupUserIds.length) {\r",
													"    pm.test(\"Test data was prepared\", function () {\r",
													"        pm.expect.fail(`Must create test data and run \"Group - Add Users - Success\" before running this request`);\r",
													"    });\r",
													"    pm.execution.skipRequest();\r",
													"}\r",
													"\r",
													"const rawBody = pm.request.body.raw;\r",
													"const payload = JSON.parse(rawBody);\r",
													"\r",
													"// Remove the previously-added users from group\r",
													"payload.remove = groupUserIds.slice(groupUserIds.length/2, groupUserIds.length);\r",
													"\r",
													"// Write modified payload back to request\r",
													"pm.request.body.raw = JSON.stringify(payload, null, 2);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    type: \"object\",\r",
													"    required: [\"id\", \"updatedAt\", \"etag\"],\r",
													"    properties: {\r",
													"        id: {\r",
													"            type: \"string\",\r",
													"            minLength: 1,\r",
													"        },\r",
													"        updatedAt: {\r",
													"            type: \"integer\",\r",
													"            minimum: 1,\r",
													"        },\r",
													"        etag: {\r",
													"            type: \"string\",\r",
													"            minLength: 1,\r",
													"        },\r",
													"    },\r",
													"    additionalProperties: false\r",
													"};\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response matches expected JSON schema\", function () {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"const payload = pm.response.json();\r",
													"const { etag } = payload;\r",
													"etag && pm.collectionVariables.set('etag', etag);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"remove\": [\"<< Managed by script >>\"],\r\n    \"etag\": \"{{etag}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/identity/groups/{{group_id}}/manage-users",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"groups",
												"{{group_id}}",
												"manage-users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Group - Add duplicate Users - Success",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let groupUserIds = pm.collectionVariables.get('group_users') || []\r",
													"\r",
													"if (! Array.isArray(groupUserIds)) {\r",
													"    console.warn('Postman bug: groupUserIds was turned to string')\r",
													"    groupUserIds = groupUserIds.split(',');\r",
													"}\r",
													"\r",
													"if (!groupUserIds.length) {\r",
													"    pm.test(\"Test data was prepared\", function () {\r",
													"        pm.expect.fail(\"Must create test data before running this request\");\r",
													"    });\r",
													"    pm.execution.skipRequest();\r",
													"}\r",
													"\r",
													"const rawBody = pm.request.body.raw;\r",
													"const payload = JSON.parse(rawBody);\r",
													"\r",
													"// Add 50% new users to group\r",
													"payload.add = groupUserIds.slice(0, groupUserIds.length/2);\r",
													"\r",
													"// Write modified payload back to request\r",
													"pm.request.body.raw = JSON.stringify(payload, null, 2);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    type: \"object\",\r",
													"    required: [\"id\", \"updatedAt\", \"etag\"],\r",
													"    properties: {\r",
													"        id: {\r",
													"            type: \"string\",\r",
													"            minLength: 1,\r",
													"        },\r",
													"        updatedAt: {\r",
													"            type: \"integer\",\r",
													"            minimum: 1,\r",
													"        },\r",
													"        etag: {\r",
													"            type: \"string\",\r",
													"            minLength: 1,\r",
													"        },\r",
													"    },\r",
													"    additionalProperties: false\r",
													"};\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response matches expected JSON schema\", function () {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"const payload = pm.response.json();\r",
													"const { etag } = payload;\r",
													"etag && pm.collectionVariables.set('etag', etag);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"add\": [\"<< Managed by script >>\"],\r\n    \"etag\": \"{{etag}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/identity/groups/{{group_id}}/manage-users",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"groups",
												"{{group_id}}",
												"manage-users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Group - Add & Remove Users - Success",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let groupUserIds = pm.collectionVariables.get('group_users') || []\r",
													"\r",
													"if (! Array.isArray(groupUserIds)) {\r",
													"    console.warn('Postman bug: groupUserIds was turned to string')\r",
													"    groupUserIds = groupUserIds.split(',');\r",
													"}\r",
													"\r",
													"if (!groupUserIds.length) {\r",
													"    pm.test(\"Test data was prepared\", function () {\r",
													"        pm.expect.fail(`Must create test data and run \"Group - Add Users - Success\" before running this request`);\r",
													"    });\r",
													"    pm.execution.skipRequest();\r",
													"}\r",
													"\r",
													"const rawBody = pm.request.body.raw;\r",
													"const payload = JSON.parse(rawBody);\r",
													"\r",
													"payload.add = groupUserIds.slice(0, groupUserIds.length/2);\r",
													"payload.remove = groupUserIds.slice(groupUserIds.length/2, groupUserIds.length);\r",
													"\r",
													"// Write modified payload back to request\r",
													"pm.request.body.raw = JSON.stringify(payload, null, 2);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    type: \"object\",\r",
													"    required: [\"id\", \"updatedAt\", \"etag\"],\r",
													"    properties: {\r",
													"        id: {\r",
													"            type: \"string\",\r",
													"            minLength: 1,\r",
													"        },\r",
													"        updatedAt: {\r",
													"            type: \"integer\",\r",
													"            minimum: 1,\r",
													"        },\r",
													"        etag: {\r",
													"            type: \"string\",\r",
													"            minLength: 1,\r",
													"        },\r",
													"    },\r",
													"    additionalProperties: false\r",
													"};\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response matches expected JSON schema\", function () {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"const payload = pm.response.json();\r",
													"const { etag } = payload;\r",
													"etag && pm.collectionVariables.set('etag', etag);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"add\": [\"<< Managed by script >>\"],\r\n    \"remove\": [\"<< Managed by script >>\"],\r\n    \"etag\": \"{{etag}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/identity/groups/{{group_id}}/manage-users",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"groups",
												"{{group_id}}",
												"manage-users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Group - Both missing - Validation errors",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const expected = {\r",
													"    code: \"invalid_request\",\r",
													"    details: \"no users to add or remove\",\r",
													"};\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"// Parse response body\r",
													"let jsonData;\r",
													"try {\r",
													"    jsonData = pm.response.json();\r",
													"} catch (e) {\r",
													"    pm.test(\"Response is valid JSON\", function () {\r",
													"        pm.expect.fail(\"Response is not valid JSON\");\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"\r",
													"pm.test(\"Response body matches expected JSON exactly\", function () {\r",
													"    pm.expect(jsonData).to.eql(expected);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"etag\": \"{{etag}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/identity/groups/{{group_id}}/manage-users",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"groups",
												"{{group_id}}",
												"manage-users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Group - Both empty - Validation errors",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const expected = {\r",
													"    code: \"invalid_request\",\r",
													"    details: \"no users to add or remove\",\r",
													"};\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"// Parse response body\r",
													"let jsonData;\r",
													"try {\r",
													"    jsonData = pm.response.json();\r",
													"} catch (e) {\r",
													"    pm.test(\"Response is valid JSON\", function () {\r",
													"        pm.expect.fail(\"Response is not valid JSON\");\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"\r",
													"pm.test(\"Response body matches expected JSON exactly\", function () {\r",
													"    pm.expect(jsonData).to.eql(expected);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"add\": [],\r\n    \"remove\": [],\r\n    \"etag\": \"{{etag}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_host}}/v1/identity/groups/{{group_id}}/manage-users",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"groups",
												"{{group_id}}",
												"manage-users"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Group - Delete",
							"item": [
								{
									"name": "Group Delete - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = {\r",
													"    type: \"object\",\r",
													"    required: [\"id\", \"deletedAt\"],\r",
													"    properties: {\r",
													"        id: {\r",
													"            type: \"string\",\r",
													"            minLength: 1,\r",
													"        },\r",
													"        deletedAt: {\r",
													"            type: \"integer\",\r",
													"            minimum: 1,\r",
													"        },\r",
													"    },\r",
													"    additionalProperties: false\r",
													"};\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response matches expected JSON schema\", function () {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{api_host}}/v1/identity/groups/{{group_id}}",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"groups",
												"{{group_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Group Delete Again - Not found ID - Validation errors",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const expected = {\r",
													"    code: \"validation_error\",\r",
													"    details: {\r",
													"        id: \"group not found\",\r",
													"    },\r",
													"};\r",
													"\r",
													"// Parse response body\r",
													"let jsonData;\r",
													"try {\r",
													"    jsonData = pm.response.json();\r",
													"} catch (e) {\r",
													"    pm.test(\"Response is valid JSON\", function () {\r",
													"        pm.expect.fail(\"Response is not valid JSON\");\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body matches expected JSON exactly\", function () {\r",
													"    pm.expect(jsonData).to.eql(expected);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{api_host}}/v1/identity/groups/{{group_id}}",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"groups",
												"{{group_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Group Delete - Not found ID - Validation errors",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const expected = {\r",
													"    code: \"validation_error\",\r",
													"    details: {\r",
													"        id: \"group not found\",\r",
													"    },\r",
													"};\r",
													"\r",
													"// Parse response body\r",
													"let jsonData;\r",
													"try {\r",
													"    jsonData = pm.response.json();\r",
													"} catch (e) {\r",
													"    pm.test(\"Response is valid JSON\", function () {\r",
													"        pm.expect.fail(\"Response is not valid JSON\");\r",
													"    });\r",
													"    return;\r",
													"}\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body matches expected JSON exactly\", function () {\r",
													"    pm.expect(jsonData).to.eql(expected);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{api_host}}/v1/identity/groups/not-existing-1234567890123",
											"host": [
												"{{api_host}}"
											],
											"path": [
												"v1",
												"identity",
												"groups",
												"not-existing-1234567890123"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "email",
			"value": ""
		},
		{
			"key": "user_id",
			"value": ""
		},
		{
			"key": "etag",
			"value": ""
		},
		{
			"key": "group_id",
			"value": ""
		},
		{
			"key": "name",
			"value": ""
		},
		{
			"key": "group_users",
			"value": ""
		}
	]
}