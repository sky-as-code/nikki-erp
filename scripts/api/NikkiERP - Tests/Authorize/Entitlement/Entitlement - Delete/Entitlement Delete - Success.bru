meta {
  name: Entitlement Delete - Success
  type: http
  seq: 1
}

delete {
  url: {{api_host}}/v1/authorize/entitlements/{{entitlement_id}}
  body: none
  auth: inherit
}

script:post-response {
  const status = res.getStatus();
  let body;
  
  try {
    body = res.getBody();
    console.log("📦 Response:", body);
  } catch (e) {
    console.warn("⚠️ Failed to parse body or body is empty:", e);
    body = {};
  }
  
  test("status should be 2xx or 400", function () {
    expect([200, 204, 400]).to.include(status);
  });
  
  // ✅ Thành công: Xóa entitlement
  if (status >= 200 && status < 300) {
    test("response should contain id and deletedAt", function () {
      expect(body).to.have.property("id").that.is.a("string");
      expect(body).to.have.property("deletedAt").that.is.a("number");
    });
  
    // ✅ Xóa biến môi trường nếu xóa thành công
    bru.deleteVar("entitlement_id");
    bru.deleteVar("entitlement_name");
    bru.deleteVar("etag");
    console.log("🧹 Deleted variables: entitlement_id, etag");
  }
  
  // ❌ Lỗi: validation hoặc entitlement không tồn tại
  if (status === 400) {
    test("should have code and details fields", function () {
      expect(body).to.have.property("code", "validation_error");
      expect(body).to.have.property("details").that.is.an("object");
    });
  
    const details = body.details || {};
  
    if (details.name === "must be in a valid format") {
      test("should catch invalid name format", function () {
        expect(details.name).to.equal("must be in a valid format");
      });
    }
  
    if (details.id === "entitlement not found") {
      test("should catch entitlement not found", function () {
        expect(details.id).to.equal("entitlement not found");
      });
    }
  }
  
}

settings {
  encodeUrl: true
}
