meta {
  name: Entitlement Update - Success
  type: http
  seq: 1
}

put {
  url: {{api_host}}/v1/authorize/entitlements/{{entitlement_id}}
  body: json
  auth: inherit
}

body:json {
  {
      "description": "description",
      "etag": "{{etag}}"
  }
}

script:pre-request {
  let payload;
  try {
      payload = req.getBody();
  } catch (e) {
      console.error("‚ùå Failed to parse:", e);
      return;
  }
  
  // Optionally randomize description for better coverage
  const randDesc = `Updated description ${Math.floor(Math.random() * 1000)}`;
  payload.description = randDesc;
  
  console.log("‚úÖ Final request payload for update:", payload);
  
}

script:post-response {
  // ‚úÖ Check status code
  let isStatusValid = false;
  test("Status code is 200", function () {
      isStatusValid = res.getStatus() === 200;
      expect(isStatusValid).to.be.true;
  });
  
  // ‚úÖ Parse JSON response
  let body;
  let isJsonValid = true;
  try {
      body = res.getBody();
      console.log("üì• Response body:", body);
  } catch (err) {
      isJsonValid = false;
      expect.fail("‚ùå Response is not valid JSON");
  }
  
  // ‚úÖ Validate response structure (id, etag, updatedAt)
  let isStructureValid = false;
  if (isStatusValid && isJsonValid) {
      test("Response contains required fields", function () {
          const requiredFields = ["id", "etag", "updatedAt"];
          requiredFields.forEach(field => {
              expect(body).to.have.property(field);
          });
          isStructureValid = true;
      });
  
      // ‚úÖ Set variable: etag
      if (typeof body.etag === "string" && body.etag.length > 0) {
          bru.setVar("etag", body.etag);
          console.log("‚úÖ etag set to:", body.etag);
      } else {
          console.warn("‚ö†Ô∏è etag missing or invalid");
      }
  
      // ‚úÖ Set variable: entitlement_id
      if (typeof body.id === "string" && body.id.length > 0) {
          bru.setVar("entitlement_id", body.id);
          console.log("‚úÖ entitlement_id set to:", body.id);
      } else {
          console.warn("‚ö†Ô∏è id missing or invalid");
      }
  } else {
      console.warn("‚ö†Ô∏è Skipped validation or variable setting due to invalid status/JSON");
  }
  
}

settings {
  encodeUrl: true
}
