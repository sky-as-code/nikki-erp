meta {
  name: Action Update - Client error (Not found)
  type: http
  seq: 4
}

put {
  url: {{api_host}}/v1/authorize/actions/01JZQ2A5K04QSBPK2SCYFH4PJ1
  body: json
  auth: inherit
}

body:json {
  {
      "description": "Description",
      "etag": "{{etag}}"
  }
}

script:post-response {
  let isStatus400 = false;
  test("Status code is 400", function () {
      isStatus400 = res.getStatus() === 400;
      expect(isStatus400).to.be.true;
  });
  
  const schema = {
      type: "object",
      required: ["code", "details"],
      properties: {
          code: { type: "string", const: "validation_error" },
          details: {
              type: "object",
              required: ["action_id"],
              properties: {
                  action_id: { type: "string" }
              },
              additionalProperties: true
          }
      },
      additionalProperties: true
  };
  
  // ‚úÖ Parse response
  let body;
  let isJsonValid = true;
  try {
      body = res.getBody();
      console.log("üì• Parsed error response:", body);
  } catch (e) {
      isJsonValid = false;
      console.error("‚ùå Failed to parse response:", e);
      expect.fail("Response body is not valid JSON");
  }
  
  // ‚úÖ Validate response body against schema
  if (isStatus400 && isJsonValid) {
      test("Response matches 'not found' schema", function () {
          expect(tv4.validate(body, schema)).to.be.true;
      });
  
      test("Error message includes 'not found'", function () {
          expect(body.details).to.have.property("action_id");
          expect(body.details.action_id).to.include("not found");
      });
  }
  
  // ‚úÖ Make sure etag is not modified or reused
  test("Do not update 'etag' when action is not found", function () {
      const etag = bru.getVar("etag");
      expect(etag).to.not.eql(null);
      expect(etag).to.not.eql(undefined);
  });
  
}

settings {
  encodeUrl: true
}
