meta {
  name: Action Create - Success
  type: http
  seq: 1
}

post {
  url: {{api_host}}/v1/authorize/actions
  body: json
  auth: inherit
}

body:json {
  {
      "name": "View",
      "description": "Description",
      "resourceId": "{{resource_id}}",
      "createdBy": "{{user_id}}"
  }
}

script:pre-request {
  let payload;
  try {
      payload = req.getBody();
  } catch (e) {
      console.error("❌ Failed to parse body:", e);
      return;
  }
  
  // ✅ Generate random 6-char string (alphanumeric)
  function randomString(length = 6) {
      const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
      return Array.from({ length }, () => chars[Math.floor(Math.random() * chars.length)]).join('');
  }
  
  const rand = randomString();
  
  // ✅ Ensure `name` is alphanumeric, no symbols/spaces
  if (payload.name) {
      payload.name = payload.name.replace(/[^a-zA-Z0-9_-]/g, '') + rand;
  }
  
  req.setBody(payload);
  bru.setVar("action_name", payload.name);
  
  console.log("✅ Final request payload:", payload);
  
}

script:post-response {
  let body;
  try {
    body = res.getBody();
    console.log("📦 Success response:", body);
  } catch (e) {
    expect.fail("❌ Failed to parse");
  }
  
  test("Status code is 200 or 201", () => {
    const status = res.getStatus();
    expect([200, 201]).to.include(status);
  });
  
  test("Response body contains id, createdAt, etag", () => {
    expect(body).to.be.an("object");
    expect(body).to.have.property("id").that.is.a("string").with.length.greaterThan(25);
    expect(body).to.have.property("createdAt").that.is.a("number");
    expect(body).to.have.property("etag").that.is.a("string");
  });
  
  if (res.getStatus() === 201) {
    bru.setVar("action_id", body.id);
    bru.setVar("etag", body.etag)
  }
  
}

settings {
  encodeUrl: true
}
