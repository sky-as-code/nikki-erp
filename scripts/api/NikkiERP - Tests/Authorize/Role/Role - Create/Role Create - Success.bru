meta {
  name: Role Create - Success
  type: http
  seq: 1
}

post {
  url: {{api_host}}/v1/authorize/roles
  body: json
  auth: inherit
}

body:json {
  {
    "name": "Authorize module Product Manager",
    "ownerType": "user",
    "ownerRef": "{{user_id}}",
    "isRequestable": true,
    "isRequiredAttachment": true,
    "isRequiredComment": true,
    "orgId": "01JWNY20G23KD4RV5VWYABQYHD",
    "createdBy": "{{user_id}}"
  }
}

script:pre-request {
  let payload;
  try {
      payload = req.getBody();
  } catch (e) {
      console.error("❌ Failed to parse:", e);
      return;
  }
  
  // Utility to generate random alphanumeric string
  function randomString(length = 6) {
      const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
      return Array.from({ length }, () => chars[Math.floor(Math.random() * chars.length)]).join('');
  }
  
  // Randomize name (append 6-char string, alphanumeric only)
  if (payload.name) {
      payload.name = payload.name.trim() + " " + randomString();
  }
  
  // Optional: set default values if not present
  if (typeof payload.isRequestable !== "boolean") {
      payload.isRequestable = true;
  }
  if (typeof payload.isRequiredAttachment !== "boolean") {
      payload.isRequiredAttachment = false;
  }
  if (typeof payload.isRequiredComment !== "boolean") {
      payload.isRequiredComment = false;
  }
  
  req.setBody(payload)
  
  // Save generated name for later use
  bru.setVar("role_name", payload.name);
  
  console.log("✅ Final payload for create role:", payload);
  
}

script:post-response {
  let isStatus201 = false;
  test("Status code is 201", function () {
      isStatus201 = res.getStatus() === 201;
      expect(isStatus201).to.be.true;
  });
  
  const schema = {
      type: "object",
      required: ["id", "etag", "createdAt"],
      properties: {
          id: { type: "string" },
          etag: { type: "string" },
          createdAt: { type: "integer" },
      },
      additionalProperties: false
  };
  
  let isSchemaValid = false;
  let body;
  let isJsonValid = true;
  
  try {
      body = res.getBody();
      console.log("✅ Create Role response:", body);
  } catch (err) {
      isJsonValid = false;
      expect.fail("❌ Failed to parse response JSON");
  }
  
  // ✅ validate schema đúng cách
  if (isJsonValid) {
      test("Response matches expected schema", function () {
          const valid = tv4.validate(body, schema);
          expect(valid).to.be.true;
          isSchemaValid = valid;
      });
  }
  
  if (isStatus201 && isJsonValid && isSchemaValid && body?.id && body?.etag) {
      bru.setVar("role_id", body.id);
      bru.setVar("etag", body.etag);
      console.log("✅ Saved role_id and etag to collection variables");
  } else {
      console.warn("⚠️ Skipped setting role_id and etag due to invalid response or status");
  }
  
}

settings {
  encodeUrl: true
}
