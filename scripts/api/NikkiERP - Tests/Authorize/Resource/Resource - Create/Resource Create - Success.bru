meta {
  name: Resource Create - Success
  type: http
  seq: 1
}

post {
  url: {{api_host}}/v1/authorize/resources
  body: json
  auth: inherit
}

body:json {
  {
      "name": "AuthProduct",
      "resourceType": "nikki_application",
      "resourceRef": "12345678901234567890123456",
      "scopeType": "org"
  }
}

script:pre-request {
  let payload = req.getBody();
  
  function randomString(length = 6) {
    const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    return Array.from({ length }, () => chars[Math.floor(Math.random() * chars.length)]).join('');
  }
  
  const rand = randomString();
  
  if (payload.name) {
    payload.name = payload.name.replace(/[^a-zA-Z0-9]/g, '') + rand;
  }
  
  if (payload.resourceType === "nikki_application") {
    payload.resourceRef = "01" + randomString(24);
  }
  
  req.setBody(payload);
  bru.setVar("resource_name", payload.name);
  
  console.log("✅ Final request payload:", payload);
  
}

script:post-response {
  let body;
  try {
    body = res.getBody();
    console.log("📦 Success response:", body);
  } catch (e) {
    expect.fail("❌ Failed to parse");
  }
  
  test("Status code is 200 or 201", () => {
    const status = res.getStatus();
    expect([200, 201]).to.include(status);
  });
  
  test("Response body contains id, createdAt, etag", () => {
    expect(body).to.be.an("object");
    expect(body).to.have.property("id").that.is.a("string").with.length.greaterThan(25);
    expect(body).to.have.property("createdAt").that.is.a("number");
    expect(body).to.have.property("etag").that.is.a("string");
  });
  
  bru.setVar("resource_id", body.id);
  bru.setVar("etag", body.etag)
  
}

settings {
  encodeUrl: true
}
