meta {
  name: User Search - Create test data - Init
  type: http
  seq: 1
}

post {
  url: {{api_host}}/v1/identity/users
  body: json
  auth: inherit
}

body:json {
  {
      "displayName": "Tester Lead {{$randomFirstName}}",
      "email": "{{$randomEmail}}"
  }
}

script:pre-request {
  let body = req.getBody();
  console.log('Creating test user: ', bru.interpolate(body.displayName));
}

script:post-response {
  test("Status code is 201", function () {
    expect(res.getStatus()).to.equal(201);
  });
  
  const schema = {
    type: "object",
    properties: {
      items: {
        type: "array",
        items: {
          type: "object",
          required: ["id", "createdAt", "displayName", "email", "etag", "status"],
          properties: {
            id: {
              type: "string",
              minLength: 1,
            },
            avatarUrl: {
              type: "string",
              format: "uri",
            },
            createdAt: {
              type: "integer",
              minimum: 1,
              description: "Unix timestamp in milliseconds"
            },
            displayName: {
              type: "string",
              minLength: 1,
            },
            email: {
              type: "string",
              minLength: 1,
            },
            etag: {
              type: "string",
              minLength: 1,
            },
            status: {
              type: "string",
              minLength: 1,
              //enum: ["active", "locked", "archived"]
            },
            updatedAt: {
              type: "integer",
              minimum: 1,
            }
          }
        }
      },
      total: {
        type: "integer",
        minimum: 0
      },
      page: {
        type: "integer",
        minimum: 0
      },
      size: {
        type: "integer",
        minimum: 1
      }
    },
    required: ["items", "total", "page", "size"]
  }
  bru.setVar("search_schema", schema);
  
  /*
   * Configure loop
   */
  const LOOP_COUNT = 100;
  bru.setVar("loop_count", LOOP_COUNT);
  
  console.log(`Creating ${LOOP_COUNT} test records`)
  // console.log('Set next request: ', UserSearch_CreateTestData_1_Loop_RequestId)
  bru.runner.setNextRequest('User Search - Create test data - Loop 100');
  
  
}

settings {
  encodeUrl: true
}
