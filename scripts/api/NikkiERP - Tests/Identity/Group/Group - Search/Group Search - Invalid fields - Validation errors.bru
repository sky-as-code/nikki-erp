meta {
  name: Group Search - Invalid fields - Validation errors
  type: http
  seq: 11
}

get {
  url: {{api_host}}/v1/identity/groups?page=-1&size=999999999999999999&graph={"if":["fake-field", "=", "Squad"]}
  body: none
  auth: inherit
}

params:query {
  page: -1
  size: 999999999999999999
  graph: {"if":["fake-field", "=", "Squad"]}
}

script:pre-request {
  bru.deleteVar('search_schema')
}

script:post-response {
  const expected = {
      code: "validation_error",
      details: {
          "graph.condition": "invalid field 'fake-field' of entity 'group' in condition '[fake-field = Squad]'",
          page: "must be no less than 0",
          size: "must be no greater than 500",
      },
  };
  
  // Parse response body
  let jsonData;
  try {
      jsonData = res.getBody();
  } catch (e) {
      test("Response is valid JSON", function () {
          expect.fail("Response is not valid JSON");
      });
      return;
  }
  
  test("Status code is 400", function () {
      expect(res.getStatus()).to.equal(400);
  });
  
  test("Response body matches expected JSON exactly", function () {
      expect(jsonData).to.eql(expected);
  });
  
}

settings {
  encodeUrl: true
}
