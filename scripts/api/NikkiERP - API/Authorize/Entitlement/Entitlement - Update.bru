meta {
  name: Entitlement - Update
  type: http
  seq: 2
}

put {
  url: {{api_host}}/v1/authorize/entitlements/{{entitlement_id}}
  body: json
  auth: inherit
}

body:json {
  {
      "description": "description",
      "etag": "{{etag}}"
  }
}

script:post-response {
  const statusCode = res.getStatus();
  let body;
  
  // ‚úÖ Attempt to parse response
  let isJsonValid = true;
  try {
    body = res.getBody();
    console.log(`üì• Parsed response (status ${statusCode}):`, body);
  } catch (err) {
    isJsonValid = false;
    expect.fail("‚ùå Response is not valid JSON");
  }
  
  // ========== ‚úÖ CASE 1: SUCCESS ==========
  if (statusCode === 200 && isJsonValid) {
    test("‚úÖ Status code is 200", () => {
      expect(statusCode).to.eql(200);
    });
  
    test("‚úÖ Response contains id, etag, updatedAt", () => {
      ["id", "etag", "updatedAt"].forEach((key) => {
        expect(body).to.have.property(key);
      });
    });
  
    // ‚úÖ Set variables
    if (typeof body.etag === "string" && body.etag.length > 0) {
      bru.setVar("etag", body.etag);
      console.log("‚úÖ Updated etag:", body.etag);
    }
  
    if (typeof body.id === "string" && body.id.length > 0) {
      bru.setVar("entitlement_id", body.id);
      console.log("‚úÖ Updated entitlement_id:", body.id);
    }
  }
  
  // ========== ‚ùå CASE 2: INVALID FIELDS (etag missing) ==========
  if (statusCode === 400 && isJsonValid && body?.details?.etag === "cannot be blank") {
    test("‚ùå Status code is 400", () => {
      expect(statusCode).to.eql(400);
    });
  
    test("‚ùå Error code is validation_error", () => {
      expect(body.code).to.equal("validation_error");
    });
  
    test("‚ùå Error detail: etag is blank", () => {
      expect(body.details).to.have.property("etag", "cannot be blank");
    });
  
    console.log("‚ö†Ô∏è Error response:", body);
  
    test("‚ùå etag environment variable remains unchanged", () => {
      const currentEtag = bru.getVar("etag");
      expect(currentEtag).to.not.eql(null);
      expect(currentEtag).to.not.eql(undefined);
    });
  }
  
  // ========== ‚ùå CASE 3: NOT FOUND ==========
  if (statusCode === 400 && isJsonValid && body?.details?.entitlement_id === "entitlement not found") {
    test("‚ùå Status code is 400", () => {
      expect(statusCode).to.eql(400);
    });
  
    test("‚ùå Error code is validation_error", () => {
      expect(body.code).to.equal("validation_error");
    });
  
    test("‚ùå entitlement_id: not found", () => {
      expect(body.details).to.have.property("entitlement_id", "entitlement not found");
    });
  
    console.log("‚ö†Ô∏è Not Found Error Response:", body);
  
    test("‚ùå Do not update etag", () => {
      const etag = bru.getVar("etag");
      expect(etag).to.not.eql(null);
      expect(etag).to.not.eql(undefined);
    });
  }
  
  // ========== ‚ùå CASE 4: ETAG MISMATCH ==========
  if (statusCode === 400 && isJsonValid && body?.details?.etag === "etag mismatched") {
    test("‚ùå Status code is 400", () => {
      expect(statusCode).to.eql(400);
    });
  
    test("‚ùå Error code is validation_error", () => {
      expect(body.code).to.equal("validation_error");
    });
  
    test("‚ùå etag mismatched", () => {
      expect(body.details).to.have.property("etag", "etag mismatched");
    });
  
    console.log("‚ö†Ô∏è Etag Mismatch Error:", body);
  }
  
}

settings {
  encodeUrl: true
}
