meta {
  name: Resource - Create
  type: http
  seq: 1
}

post {
  url: {{api_host}}/v1/authorize/resources
  body: json
  auth: inherit
}

body:json {
  {
      "name": "AuthAssignment",
      "resourceType": "nikki_application",
      "resourceRef": "12345678901234567890123456",
      "scopeType": "org"
  }
}

script:pre-request {
  let payload;
  try {
      payload = req.getBody();
  } catch (e) {
      console.error("‚ùå Failed to parse:", e);
      return;
  }
  
  bru.setVar("resource_name", payload.name);
  
  console.log("‚úÖ Final request payload:", payload);
  
}

script:post-response {
  const statusCode = res.getStatus();
  let body;
  
  try {
    body = res.getBody();
    console.log(`üì• Response body (status: ${statusCode}):`, body);
  } catch (e) {
    expect.fail("‚ùå Failed to parse response body");
  }
  
  test("Status code is 200, 201, or 400", () => {
    expect([200, 201, 400]).to.include(statusCode);
  });
  
  // ========== üü¢ SUCCESS ==========
  if ([200, 201].includes(statusCode)) {
    test("Success: Response has required fields", () => {
      expect(body).to.be.an("object");
      expect(body).to.have.property("id").that.is.a("string").with.length.greaterThan(25);
      expect(body).to.have.property("createdAt").that.is.a("number");
      expect(body).to.have.property("etag").that.is.a("string");
    });
  
    bru.setVar("resource_id", body.id);
    bru.setVar("etag", body.etag);
    console.log("‚úÖ Set resource_id and etag:", body.id, body.etag);
  }
  
  // ========== üî¥ VALIDATION ERROR ==========
  if (statusCode === 400) {
    const errorSchema = {
      type: "object",
      required: ["code", "details"],
      properties: {
        code: { type: "string", enum: ["validation_error"] },
        details: { type: "object" }
      },
      additionalProperties: true
    };
  
    test("Error: Response matches validation error schema", () => {
      expect(tv4.validate(body, errorSchema)).to.be.true;
    });
  
    test("Error: code is 'validation_error' and details exist", () => {
      expect(body).to.have.property("code", "validation_error");
      expect(body).to.have.property("details").that.is.an("object");
    });
  
    const details = body.details;
  
    // ========== ‚ùå Case: Multiple Invalid Fields ==========
    if (details.name && details.resourceType && details.scopeType) {
      test("Error: Multiple invalid fields", () => {
        expect(details.name).to.equal("cannot be blank");
        expect(details.resourceType).to.equal("must be a valid value");
        expect(details.scopeType).to.equal("must be a valid value");
      });
      console.warn("‚ö†Ô∏è Multiple validation errors:", details);
    }
  
    // ========== ‚ùå Case: Name Already Exists ==========
    if (details.resource_name) {
      test("Error: resource_name already exists", () => {
        expect(details.resource_name).to.include("already exists");
      });
      console.warn("‚ö†Ô∏è Duplicate name error:", details.resource_name);
    }
  
    // ========== ‚ÑπÔ∏è Log for unexpected validation details ==========
    if (!details.name && !details.resourceType && !details.scopeType && !details.resource_name) {
      console.warn("‚ùì Unexpected validation error format:", details);
    }
  }
  
}

settings {
  encodeUrl: true
}
